<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Awesomium.Windows.Forms</name>
    </assembly>
    <members>
        <member name="T:Awesomium.Windows.Forms.WebControl">
            <summary>
            Represents a Windows Forms control that wraps an Awesomium windowed web-view.
            You can use it to embed Awesomium directly in your WinForms application without any additional work.
            </summary>
            <remarks>
            You can create an instance of this class by directly invoking the
            default constructor (either by dropping it in your designer surface or from code). 
            You do not need to explicitly create an instance of a web view through <see cref="T:Awesomium.Core.WebCore"/>.
            <c>WebControl</c> takes care of this internally.
            <p/>
            <note>
            Note that it is safe to use this control in a design environment for layout and configuration
            purposes. The <see cref="T:Awesomium.Core.WebCore"/> and the underlying web-view are only instantiated during runtime.
            </note>
            <p/>
            <h4>The Role of the <see cref="P:System.Windows.Forms.Control.Enabled"/> Property:</h4>
            In addition to its regular meaning, the <see cref="P:System.Windows.Forms.Control.Enabled"/> property indicates
            if internal asynchronous rendering of the underlying web-view, is currently enabled.
            <note>
            All rendering in the underlying web-view is actually done asynchronously in a separate process
            and so the page is usually continuously rendering internally. Setting <see cref="P:System.Windows.Forms.Control.Enabled"/>
            to <c>false</c>, will temporarily pause rendering.
            </note>
            <h4>The Role of the <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/> Property:</h4>
            A <see cref="T:Awesomium.Windows.Forms.WebControl"/> is considered invalid when it is:
            <list type="bullet">
            <item>
            <description>
            Crashed (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsCrashed"/>).
            <note>
            When crashed, this control will attempt to recreate its underlying view.
            For details, see: <see cref="P:Awesomium.Windows.Forms.WebControl.IsCrashed"/>.
            </note>
            </description>
            </item>
            <item>
            <description>
            Prematurely destroyed (see <see cref="M:Awesomium.Windows.Forms.WebControl.Dispose(System.Boolean)"/> and <see cref="M:Awesomium.Core.WebCore.Shutdown"/>).
            </description>
            </item>
            <item>
            <description>
            Not properly instantiated. This means that something went wrong
            during instantiation of either the <see cref="T:Awesomium.Core.WebCore"/> (if this
            is the first <see cref="T:Awesomium.Windows.Forms.WebControl"/> created) or of the
            underlying web-view.
            </description>
            </item>
            </list>
            <note type="caution">
            Developers should always check this property before calling <see cref="T:Awesomium.Core.IWebView"/>
            members implemented by this <see cref="T:Awesomium.Windows.Forms.WebControl"/>. Trying to access the underlying
            web-view when it is not alive, can throw an <see cref="T:System.InvalidOperationException"/>.
            <p/>
            For more details, refer to the documentation of this control's members.
            </note>
            <note>
            <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/> also returns <c>false</c> when the control is shown in a designer.
            The Awesomium <see cref="T:Awesomium.Core.WebCore"/> and the underlying web-view, are only instantiated
            during runtime.
            </note>
            </remarks>
            <threadsafety static="true" instance="false"/>
            <seealso cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>
            <seealso cref="P:Awesomium.Windows.Forms.WebControl.IsCrashed"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnBeginNavigation(System.Object,Awesomium.Core.UrlEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.BeginNavigation"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnCreateSurface(System.Object,Awesomium.Core.CreateSurfaceEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.CreateSurface"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnSelectionChanged(System.Object,Awesomium.Core.WebSelectionEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.SelectionChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnProcessCreated(System.Object,System.EventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.ProcessCreated"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnTitleChanged(System.Object,Awesomium.Core.TitleChangedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.TitleChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnAddressChanged(System.Object,Awesomium.Core.UrlEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.AddressChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnToolTipChanged(System.Object,Awesomium.Core.ToolTipChangedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.ToolTipChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnTargetURLChanged(System.Object,Awesomium.Core.UrlEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.TargetURLChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnCursorChanged(System.Object,Awesomium.Core.CursorChangedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.CursorChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnFocusChanged(System.Object,Awesomium.Core.FocusChangedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.FocusChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnShowCreatedWebView(System.Object,Awesomium.Core.ShowCreatedWebViewEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.ShowCreatedWebView"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnDocumentReady(System.Object,Awesomium.Core.UrlEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.DocumentReady"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnLoadingFrame(System.Object,Awesomium.Core.LoadingFrameEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.LoadingFrame"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnLoadingFrameFailed(System.Object,Awesomium.Core.LoadingFrameFailedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.LoadingFrameFailed"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnLoadingFrameComplete(System.Object,Awesomium.Core.FrameEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.LoadingFrameComplete"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnSelectLocalFiles(System.Object,Awesomium.Core.FileDialogEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.SelectLocalFiles"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnLoginRequest(System.Object,Awesomium.Core.LoginRequestEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.LoginRequest"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnPrintRequest(System.Object,Awesomium.Core.PrintRequestEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.PrintRequest"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnPrintFailed(System.Object,Awesomium.Core.PrintOperationEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.PrintFailed"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnPrintComplete(System.Object,Awesomium.Core.PrintCompleteEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.PrintComplete"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnDownload(System.Object,Awesomium.Core.DownloadEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.Download"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnDownloadProgress(System.Object,Awesomium.Core.DownloadProgressEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.DownloadProgress"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnDownloadComplete(System.Object,Awesomium.Core.DownloadCompleteEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.DownloadComplete"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnShowPopupMenu(System.Object,Awesomium.Core.PopupMenuEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.ShowPopupMenu"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnShowContextMenu(System.Object,Awesomium.Core.ContextMenuEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.ShowContextMenu"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnResponsiveChanged(System.Object,Awesomium.Core.ResponsiveChangedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.ResponsiveChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnCrashed(System.Object,Awesomium.Core.CrashedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.WebControl.Crashed"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.VerifyValid">
            <summary>
            Verifies the view is live. Throws an exception otherwise.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.VerifyValidParent">
            <summary>
            Verifies a windowed IWebView has specified a valid parent window.
            Throws an exception otherwise.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.AddSettingHandler(System.String,System.Action)">
            <summary>
            Adds an action to be performed at <see cref="M:Awesomium.Windows.Forms.WebControl.ApplyDesignTimeSettings"/>.
            </summary>
            <param name="property">The property the action is supposed to set.</param>
            <param name="handler">Delegate of the action.</param>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ApplyDesignTimeSettings">
            <summary>
            Should be called by <see cref="T:Awesomium.Core.IWebView"/> components that support a designer,
            right after the underlying view has been created.
            </summary>
            <remarks>
            The <see cref="T:Awesomium.Core.WebView"/> does not need this.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.InitializeStandard">
            <summary>
            Standard initialization of views.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ClearStandard">
            <summary>
            Performs standard actions when a view closes. 
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.LoginRespond(Awesomium.Core.LoginRequestEventArgs)">
            <summary>
            Login response helper.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ChooseFilesRespond(Awesomium.Core.FileDialogEventArgs)">
            <summary>
            Select local files helper.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ChooseDownloadPathRespond(Awesomium.Core.DownloadEventArgs)">
            <summary>
            Select download path helper.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">
            Specifies the type of service object to get.
            </param>
            <returns>
            A service object of type <paramref name="serviceType"/> or <c>null</c> (<c>Nothing</c> in Visual Basic)
            if there is no service object of type <paramref name="serviceType"/>.
            </returns>
            <remarks>
            Several <see cref="T:Awesomium.Core.IWebView"/> features can be accessed through services. This
            is because the availability of these features depends on the current state or
            the type (see <see cref="T:Awesomium.Core.WebViewType"/>) of the <see cref="T:Awesomium.Core.IWebView"/> instance.
            <p/>
            Here is a list of services currently available:
            <list type="table">
            <listheader>
            <term>Service Type</term>
            <description>Availability</description>
            </listheader>
            <item>
            <term><see cref="T:Awesomium.Core.IWebViewIMEComposition"/></term>
            <description>
            Only available when <see cref="P:Awesomium.Core.IWebView.ViewType"/> is <see cref="F:Awesomium.Core.WebViewType.Offscreen"/>.
            </description>
            </item>
            </list>
            <note>
            <h3>Awesomium.NET 1.7 Production Note:</h3>
            More <see cref="T:Awesomium.Core.IWebView"/> features that are currently either hidden
            or ignored depending on the state or the type of the <see cref="T:Awesomium.Core.IWebView"/> wrapper,
            will later be also available as services.
            </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.GoToHome">
            <summary>
            Navigates to the Home URL as defined in <see cref="P:Awesomium.Core.WebCore.HomeURL"/>.
            </summary><returns>
            <c>true</c> if the command was successfully sent. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.LoadURL(System.Uri)">
            <summary>
            Loads a URL into the view asynchronously.
            </summary><param name="url">
            The URL to load.
            </param><returns>
            <c>true</c> if the command was successfully sent. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.LoadHTML(System.String)">
            <summary>
            Loads a string of HTML into the view asynchronously.
            </summary><param name="html">
            The HTML string (ASCII) to load.
            </param><returns>
            <c>true</c> if the command was successfully sent. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.GoBack">
            <summary>
            Navigates one step backwards in history.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.GoForward">
            <summary>
            Navigates one step forward in history.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.GoToHistoryOffset(System.Int32)">
            <summary>
            Navigates back/forward in history via a relative offset.
            </summary><param name="offset">
            The relative offset in history to navigate to. (Can be negative)
            </param><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.Stop">
            <summary>
            Stops the current navigation.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.Reload(System.Boolean)">
            <summary>
            Reloads the current page.
            </summary><param name="ignoreCache">
            Indicates if cached resources should be reloaded as well.
            </param><returns>
            <c>true</c> if the command was successfully sent. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.CanGoBack">
            <summary>
            Gets if we can go back in history.
            </summary><returns>
            <c>true</c> if the view can go back in history. <c>false</c> otherwise.
            </returns><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.CanGoForward">
            <summary>
            Gets if we can go forward in history.
            </summary><returns>
            <c>true</c> if the view can go forward in history. <c>false</c> otherwise.
            </returns><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.GetLastError">
            <summary>
            Check if an error occurred during the last synchronous Javascript interoperation call.
            </summary><returns>
            An <see cref="T:Awesomium.Core.Error"/> value indicating the error that may have occurred
            during the last synchronous Javascript interoperation API call.
            </returns><seealso cref="M:Awesomium.Core.IWebView.CreateGlobalJavascriptObject(System.String)"/><seealso cref="M:Awesomium.Core.IWebView.ExecuteJavascriptWithResult(System.String)"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.CreateGlobalJavascriptObject(System.String)">
            <summary>
            Create a global JavaScript object that will persist between all loaded pages, 
            for the lifetime of this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><param name="name">
            The name of the object as it will appear in JavaScript.
            </param><returns>
            If this call succeeds, the returned <see cref="T:Awesomium.Core.JSValue"/> will be of type 'Object' 
            (see <see cref="P:Awesomium.Core.JSValue.IsObject"/>). You can check the reason why the call failed by calling
            <see cref="M:Awesomium.Core.IWebView.GetLastError"/> after this method.
            </returns><remarks>
            Global Objects can only contain the following JavaScript types as 
            properties:
            <list type="bullet">
            <item>
            <description>
            <c>Number</c>
            </description>
            </item>
            <item>
            <description>
            <c>String</c>
            </description>
            </item>
            <item>
            <description>
            <c>Array</c>
            </description>
            </item>
            <item>
            <description>
            <c>Null</c>
            </description>
            </item>
            <item>
            <description>
            <c>Other Global Objects</c>
            </description>
            </item>
            <item>
            <description>
            <c>Undefined</c>
            </description>
            </item>
            </list>
            <p/>
            Global Objects will retain any custom methods that are registered
            (see <see cref="M:Awesomium.Core.JSObject.SetCustomMethod(System.String,System.Boolean)"/>).
            <note>
            To create a child global-object, you should specify the full name with dot-notation for example:
            <c>parentObject.childObject</c>.
            <p/>
            The parent object should exist before attempting to make any children.
            </note>
            <note type="caution">
            You can only create objects on pages with an active DOM. (You should
            wait until the first <see cref="E:Awesomium.Core.IWebView.DocumentReady"/> event or the <see cref="E:Awesomium.Core.IWebView.ProcessCreated"/> event,
            before creating your objects).
            </note>
            </remarks><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ExecuteJavascript(System.String)">
            <summary>
            Executes some JavaScript asynchronously in the main frame of the page.
            </summary><param name="script">
            The string of JavaScript to execute.
            </param><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ExecuteJavascript(System.String,System.String)">
            <summary>
            Executes some JavaScript asynchronously on the page.
            </summary><param name="script">
            The string of JavaScript to execute.
            </param><param name="frameXpath">
            The xpath of the frame to execute within; leave
            this blank to execute in the main frame.
            </param><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ExecuteJavascriptWithResult(System.String)">
            <summary>
            Executes some JavaScript synchronously in the main frame of the page, and returns a result.
            </summary><param name="script">
            The string of JavaScript to execute.
            </param><returns>
            Returns the result (if any). Any <see cref="T:Awesomium.Core.JSObject"/> returned from this
            method will be a remote proxy for an object contained within the view's process.
            If this call fails, the returned <see cref="T:Awesomium.Core.JSValue"/> will have an <c>Undefined</c> type.
            (see <see cref="P:Awesomium.Core.JSValue.IsUndefined"/>). You can check <see cref="M:Awesomium.Core.IWebView.GetLastError"/> for more
            information about the failure.
            </returns><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ExecuteJavascriptWithResult(System.String,System.String)">
            <summary>
            Executes some JavaScript synchronously on the page, and returns a result.
            </summary><param name="script">
            The string of JavaScript to execute.
            </param><param name="frameXPath">
            The xpath of the frame to execute within; leave
            this blank to execute in the main frame.
            </param><returns>
            Returns the result (if any). Any <see cref="T:Awesomium.Core.JSObject"/> returned from this
            method will be a remote proxy for an object contained within the view's process.
            If this call fails, the returned <see cref="T:Awesomium.Core.JSValue"/> will have an <c>Undefined</c> type.
            (see <see cref="P:Awesomium.Core.JSValue.IsUndefined"/>). You can check <see cref="M:Awesomium.Core.IWebView.GetLastError"/> for more
            information about the failure.
            </returns><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.Undo">
            <summary>
            Undo the last 'edit' operation. (Similar to CTRL+Z).
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.Redo">
            <summary>
            Redo the last 'edit' operation. (Similar to CTRL+Y).
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.Cut">
            <summary>
            Performs a 'cut' operation using the system clipboard.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.Copy">
            <summary>
            Performs a 'copy' operation using the system clipboard.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.CopyHTML">
            <summary>
            Copies the HTML content currently selected in this view, to the system clipboard.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view.
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.CopyLinkAddress">
            <summary>
            Copies the target URL of the link currently under the cursor.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view.
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.CopyImageAt(System.Int32,System.Int32)">
            <summary>
            Attempt to copy an image on the page, to the system clipboard.
            This is meant to be used with <see cref="E:Awesomium.Core.IWebView.ShowContextMenu"/>.
            </summary><param name="x">The x-coordinate.</param><param name="y">The y-coordinate.</param><remarks>
            All coordinates should be localized to the view. All values are in
            pixels, the origin (0,0) begins at the top-left corner of the view,
            positive <paramref name="y"/> values are "down" and positive <paramref name="x"/> 
            values are "right".
            </remarks><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.Paste">
            <summary>
            Performs a 'paste' operation using the system clipboard.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.PasteAndMatchStyle">
            <summary>
            Performs a 'paste' operation using the system clipboard while attempting
            to preserve any styles of the original text.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.SelectAll">
            <summary>
            Performs a 'select all' operation.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.PrintToFile(System.String,Awesomium.Core.PrintConfig)">
            <summary>
            Prints this <see cref="T:Awesomium.Core.IWebView"/> instance to a PDF file, asynchronously.
            You should generally use this method in response to a <see cref="E:Awesomium.Core.IWebView.PrintRequest"/>
            event.
            </summary><param name="outputDirectory">
            A writeable directory to write the file(s) to.
            </param><param name="config">
            The configuration settings to use.
            </param><returns>
            Returns a unique request ID that you can use later to identify
            this specific request (see <see cref="E:Awesomium.Core.IWebView.PrintFailed"/> and <see cref="E:Awesomium.Core.IWebView.PrintComplete"/>). 
            May return <c>0</c> if this method fails prematurely.
            </returns><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><seealso cref="T:Awesomium.Core.PrintConfig"/><seealso cref="E:Awesomium.Core.IWebView.PrintRequest"/><seealso cref="E:Awesomium.Core.IWebView.PrintFailed"/><seealso cref="E:Awesomium.Core.IWebView.PrintComplete"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnHandleCreated(System.EventArgs)">
            <inheritdoc/>
            <remarks>
            Initialization of the <see cref="T:Awesomium.Core.WebCore"/> (if needed)
            and of the underlying web-view, occurs after the control's
            handle is created.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnEnabledChanged(System.EventArgs)">
            <inheritdoc/>
            <remarks>
            In addition to its regular meaning, the <see cref="P:System.Windows.Forms.Control.Enabled"/> property indicates
            if internal asynchronous rendering of the underlying web-view, is currently active.
            <note>
            All rendering in the underlying web-view is actually done asynchronously in a separate process
            and so the page is usually continuously rendering internally. Setting <see cref="P:System.Windows.Forms.Control.Enabled"/>
            to <c>false</c>, will temporarily pause rendering.
            </note>
            <note type="inherit">
            Inheritors can override <see cref="M:Awesomium.Windows.Forms.WebControl.OnEnabledChanged(System.EventArgs)"/>, then set <see cref="P:Awesomium.Windows.Forms.WebControl.IsRendering"/>
            manually if they want to <i>disconnect</i> internal asynchronous 
            rendering, from the control's enabled status.
            </note>
            </remarks>
            <seealso cref="P:Awesomium.Windows.Forms.WebControl.IsRendering"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnResize(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnGotFocus(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnLostFocus(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ProcessDialogKey(System.Windows.Forms.Keys)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.HandleInput(Awesomium.Core.ViewInput)">
            <summary>
            Gets if the specified kind of input should be handled by the control.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.FocusView">
            <summary>
            Notifies the current page that it has gained focus.
            </summary>
            <remarks>
            You will need to call this to gain text-box focus, among other things. 
            (If you fail to ever see a blinking caret when typing text, this is why.)
            </remarks>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Forms.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.UnfocusView">
            <summary>
            Notifies the current page that it has lost focus.
            </summary>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Forms.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.RaisePropertyChanged(System.String)">
            <summary>
            Helper method to raise the <see cref="E:Awesomium.Windows.Forms.WebControl.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">
            The name of the property whose value has changed.
            </param>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Forms.WebControl.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.BeginNavigation">
            <summary>
            Occurs when a view begins navigating to a new URL.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.CreateSurface">
            <summary>
            Occurs when an <see cref="T:Awesomium.Core.ISurface"/> is requested by the view. Usually, 
            every time the size of the view changes. You should return your own 
            <see cref="T:Awesomium.Core.ISurface"/> implementation here.
            </summary><remarks>
            When <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> is called,
            <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/> reflects the previously assigned 
            <see cref="T:Awesomium.Core.ISurface"/> instance. If your surface is capable of handling resizing, 
            you can keep on using the same <see cref="T:Awesomium.Core.ISurface"/> instance on
            multiple <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> calls.
            <p/>
            When <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> is called for the first
            time, <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/> returns the <see cref="T:Awesomium.Core.ISurface"/> 
            assigned to the view using <see cref="P:Awesomium.Core.IWebView.Surface"/> or, if no <see cref="T:Awesomium.Core.ISurface"/> 
            instance has been previously specified, the default <see cref="T:Awesomium.Core.ISurface"/> assigned
            to the view by Awesomium.NET. This is either a <see cref="T:Awesomium.Core.BitmapSurface"/>
            (for <see cref="T:Awesomium.Core.WebView"/> instances) or a technology specific <see cref="T:Awesomium.Core.ISurface"/>.
            <note>
            If you are using an <see cref="T:Awesomium.Core.ISurface"/> instance capable of handling changes in
            size, you should better use <see cref="P:Awesomium.Core.IWebView.Surface"/> to assign your surface.
            This surface will be used with multiple calls of <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>
            and it should be able to handle changes in size during <see cref="M:Awesomium.Core.ISurface.Initialize(Awesomium.Core.IWebView,System.Int32,System.Int32)"/>.
            In this scenario, you can ignore the <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> event.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.SelectionChanged">
            <summary>
            Occurs when the selection in the current page, changes.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.ProcessCreated">
            <summary>
            Occurs when the child rendering process for this view, has been spawned.
            </summary><remarks>
            This event also indicates the moment when global Javascript objects can be created.
            (See: <see cref="M:Awesomium.Core.IWebView.CreateGlobalJavascriptObject(System.String)"/>)
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.TitleChanged">
            <summary>
            Occurs when the current page title has changed.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.AddressChanged">
            <summary>
            Occurs when the page URL has changed.
            </summary><seealso cref="P:Awesomium.Core.IWebView.Source"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.ToolTipChanged">
            <summary>
            Occurs when the tooltip text has changed. You
            should hide the tooltip when the text is empty.
            </summary><remarks>
            Technology specific <c>WebControls</c>, present their own tooltip.
            Set <see cref="P:Awesomium.Core.ToolTipChangedEventArgs.Handled"/> to <c>true</c>,
            to prevent a <c>WebControl</c> from displaying its predefined tooltip.
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.TargetURLChanged">
            <summary>
            Occurs when the target URL has changed. This
            is usually the result of hovering over a link on a page.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.CursorChanged">
            <summary>
            Occurs when the cursor has changed. This is
            is usually the result of hovering over different content.
            </summary><remarks>
            You can set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
            to <c>true</c>, to prevent a technology specific <c>WebControl</c>
            from changing the visible cursor.
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.FocusChanged">
            <summary>
            Occurs when the focused element changes on the page.
            This is usually the result of text-box being focused or some other
            user-interaction event.
            </summary><remarks>
            You should generally forward keyboard events to the active <see cref="T:Awesomium.Core.IWebView"/> instance,
            whenever one of the following element types are focused:
            <list type="bullet">
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Input"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.TextInput"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.EditableContent"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Plugin"/>
            </description>
            </item>
            </list>
            This is done automatically in technology specific <c>WebControl</c>
            instances.
            </remarks><seealso cref="P:Awesomium.Core.IWebView.FocusedElementType"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.ShowCreatedWebView">
            <summary>
            Occurs when an <see cref="T:Awesomium.Core.IWebView"/> creates a new child web-view instance
            (usually the result of <c>window.open</c> or an external link). It
            is your responsibility to display this child web-view in your
            application.
            </summary><remarks>
            <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> occurs when an <see cref="T:Awesomium.Core.IWebView"/> instance
            creates a new child view (usually the result of <c>window.open</c> or an external link). 
            <p/>
            It is your responsibility to wrap and display this new view in your application.
            <see cref="T:Awesomium.Core.WebView"/> provides a constructor that accepts a previously created web-view instance.
            (see <see cref="M:Awesomium.Core.WebView.#ctor(System.IntPtr)"/>). Similarly, technology
            specific <c>WebControls</c> provide a <c>NativeView</c> property that allows you to
            assign to the controls, a previously created web-view instance 
            (eg, <see cref="P:Awesomium.Windows.Controls.WebControl.NativeView"/>). This property should be
            set before the control loads and creates its own underlying web-view. Usually immediately 
            after instantiating the control or in the designer.
            <note type="caution">
            If you do not intend to wrap the new view, you should set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
            to <c>true</c>, to tell the core to destroy the unused web-view instance. If you fail
            to do this, the native web-view instance will remain alive until the <see cref="T:Awesomium.Core.WebCore"/>
            is shut down. This can result in many processes (<i>awesomium_process</i>) being spawned,
            but never used.
            <p/>
            The <see cref="T:Awesomium.Core.WebCore"/> provides a <see cref="M:Awesomium.Core.WebCore.DestroyUnwrappedViews"/> method.
            This can be useful for destroying such native views that were spawned by Awesomium,
            but were never wrapped.
            </note>
            <note>
            If you are wrapping the child view using a <see cref="T:Awesomium.Core.WebView"/> instance, you should call 
            <see cref="M:Awesomium.Core.IWebView.Resize(System.Int32,System.Int32)"/> on the child view immediately after the <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event, 
            to make it match your container.
            </note>
            </remarks><seealso cref="T:Awesomium.Core.ShowCreatedWebViewEventArgs"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.DocumentReady">
            <summary>
            Occurs when the DOM has finished parsing and the
            <c>window</c> object is available for JavaScript execution.
            </summary><seealso cref="E:Awesomium.Core.IWebView.ProcessCreated"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.LoadingFrame">
            <summary>
            Occurs when the page begins loading a frame.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.LoadingFrameFailed">
            <summary>
            Occurs when a frame fails to load. See <see cref="P:Awesomium.Core.LoadingFrameFailedEventArgs.ErrorDescription"/>
            for additional information.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.LoadingFrameComplete">
            <summary>
            Occurs when the page finishes loading a frame.
            </summary><remarks>
            The main frame always finishes loading last for a given page load.
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.SelectLocalFiles">
            <summary>
            Occurs when the page requests to display a file chooser
            dialog. This is usually the result of a user clicking on an HTML
            input element with <c>type='file'</c>.
            </summary><remarks>
            The table below presents the way the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> event is handled, 
            when <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
            If <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            the event is immediately canceled.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            controls will display their predefined dialog.
            </description>
            </item>
            </list>
            Applications can handle the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> and <see cref="E:Awesomium.Core.IWebView.Download"/> events either
            modally or non-modally. Only modal handling is officially supported by Awesomium.NET.
            <p/>
            The table below shows the methods of handling the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> and
            <see cref="E:Awesomium.Core.IWebView.Download"/> events:
            <list type="table">
            <listheader>
            <term>
            Setting
            </term>
            <description>
            Handling
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.Modal"/>
            </term>
            <description>
            Developers should provide a response through the <see cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFiles"/> or 
            <see cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFile"/> property, before the event handler exits.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (Not officially supported by Awesomium.NET)
            </term>
            <description>
            No response will be provided for the request. Developers should later provide
            a response themselves using either:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/> for <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.DidChooseDownloadPath(System.Int32,System.String)"/> or <see cref="M:Awesomium.Core.IWebView.CancelDownload(System.Int32)"/> 
            for <see cref="E:Awesomium.Core.IWebView.Download"/>
            </description>
            </item>
            </list>
            <note type="caution">
            This technique is not officially supported by Awesomium.NET. Therefore, the member
            above is not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access this member.
            </note>
            <note type="caution">
            For <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/>, if you set <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> to <see cref="F:Awesomium.Core.EventHandling.NotModal"/>, 
            you should make sure that you always call <see cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/> providing a response to the event.
            No new <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> events will occur, until a response has been provided for the last one.
            </note>
            </description>
            </item>
            </list>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> (or any other member), is ignored.
            </note>
            </remarks><seealso cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.LoginRequest">
            <summary>
            Occurs when the page needs authentication from the user (for
            example, Basic HTTP Auth, NTLM Auth, etc.).
            </summary><remarks>
            The table below presents the way the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event is handled, 
            when <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
            If <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            the event is immediately canceled.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            controls will display their predefined UI.
            </description>
            </item>
            </list>
            Applications can handle the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event either
            modally or non-modally. Only modal handling is officially supported by Awesomium.NET.
            <p/>
            The table below shows the methods of handling the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event:
            <list type="table">
            <listheader>
            <term>
            Setting
            </term>
            <description>
            Handling
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.Modal"/>
            </term>
            <description>
            Developers should provide a response through the <see cref="P:Awesomium.Core.LoginRequestEventArgs.Username"/> and
            <see cref="P:Awesomium.Core.LoginRequestEventArgs.Password"/> properties, before the event handler exits.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (Not officially supported by Awesomium.NET)
            </term>
            <description>
            No response will be provided for the request. Developers should later provide
            a response themselves using any of the following methods:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.Login(System.Int32,System.String,System.String)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.CancelLogin(System.Int32)"/>
            </description>
            </item>
            </list>
            <note type="caution">
            This technique is not officially supported by Awesomium.NET. Therefore, the members
            above are not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access these members.
            </note>
            </description>
            </item>
            </list>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> (or any other member), is ignored.
            </note>
            </remarks><seealso cref="M:Awesomium.Core.IWebView.Login(System.Int32,System.String,System.String)"/><seealso cref="M:Awesomium.Core.IWebView.CancelLogin(System.Int32)"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.PrintRequest">
            <summary>
            Occurs when the page requests to print itself. (Usually
            the result of <c>window.print()</c> being called from JavaScript.) It is
            your responsibility to print the view to a file and handle the
            actual device printing.
            </summary><seealso cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.PrintFailed">
            <summary>
            Occurs when <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/> fails. Typically because of
            bad printer configuration or invalid output path (see <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/>).
            </summary><seealso cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.PrintComplete">
            <summary>
            Occurs when a <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/> operation, completes successfully.
            </summary><seealso cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.Download">
            <summary>
            Occurs when the page requests to begin downloading a certain file.
            </summary><remarks>
            The table below presents the way the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> event is handled, 
            when <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
            If <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            the event is immediately canceled.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            controls will display their predefined dialog.
            </description>
            </item>
            </list>
            Applications can handle the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> and <see cref="E:Awesomium.Core.IWebView.Download"/> events either
            modally or non-modally. Only modal handling is officially supported by Awesomium.NET.
            <p/>
            The table below shows the methods of handling the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> and
            <see cref="E:Awesomium.Core.IWebView.Download"/> events:
            <list type="table">
            <listheader>
            <term>
            Setting
            </term>
            <description>
            Handling
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.Modal"/>
            </term>
            <description>
            Developers should provide a response through the <see cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFiles"/> or 
            <see cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFile"/> property, before the event handler exits.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (Not officially supported by Awesomium.NET)
            </term>
            <description>
            No response will be provided for the request. Developers should later provide
            a response themselves using either:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/> for <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.DidChooseDownloadPath(System.Int32,System.String)"/> or <see cref="M:Awesomium.Core.IWebView.CancelDownload(System.Int32)"/> 
            for <see cref="E:Awesomium.Core.IWebView.Download"/>
            </description>
            </item>
            </list>
            <note type="caution">
            This technique is not officially supported by Awesomium.NET. Therefore, the member
            above is not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access this member.
            </note>
            <note type="caution">
            For <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/>, if you set <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> to <see cref="F:Awesomium.Core.EventHandling.NotModal"/>, 
            you should make sure that you always call <see cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/> providing a response to the event.
            No new <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> events will occur, until a response has been provided for the last one.
            </note>
            </description>
            </item>
            </list>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> (or any other member), is ignored.
            </note>
            </remarks><seealso cref="M:Awesomium.Core.IWebView.DidChooseDownloadPath(System.Int32,System.String)"/><seealso cref="M:Awesomium.Core.IWebView.CancelDownload(System.Int32)"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.DownloadProgress">
            <summary>
            Occurs when the progress of a download is updated.
            </summary><seealso cref="M:Awesomium.Core.IWebView.CancelDownload(System.Int32)"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.DownloadComplete">
            <summary>
            Occurs when a download is finished.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.ShowPopupMenu">
            <summary>
            Occurs when the page requests to display a drop-down
            (popup) menu. This is usually the result of a user clicking on
            a <c>select</c> HTML input element.
            </summary><remarks>
            By default, technology specific <c>WebControls</c> provide
            their own drop-down (popup) menus. If you wish to prevent the
            control from displaying its own menu and handle the event yourself,
            set <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/> to <c>true</c> and then
            use any of the following methods to respond to the view:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.SelectPopupMenuItem(System.Int32)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.CancelPopupMenu"/>
            </description>
            </item>
            </list>
            These members are not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access these members.
            <note>
            The windowless <see cref="T:Awesomium.Core.WebView"/>, does not provide any internal implementation for drop-down (popup) menus.
            If you are using a <see cref="T:Awesomium.Core.WebView"/> instance with your UI application, you will have to handle
            the <see cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/> event yourself. Technology specific Awesomium.NET assemblies,
            provide predefined drop-down (popup) menu controls that you can use with your WPF or Windows Forms application.
            </note>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/> (or any other member), is ignored.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.ShowContextMenu">
            <summary>
            Occurs when the page requests to display a context menu. 
            This is usually the result of a user right-clicking on
            an element or plugin in the page.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.ResponsiveChanged">
            <summary>
            Occurs when this view's process hangs, or becomes responsive after
            a hang. Use <see cref="P:Awesomium.Core.ResponsiveChangedEventArgs.IsResponsive"/> or
            <see cref="P:Awesomium.Core.IWebView.IsResponsive"/> to check the current state of the process.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.Crashed">
            <summary>
            Occurs when this view's process crashes.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.IsProcessCreated">
            <summary>
            Indicates if the child rendering process for this view, has been spawned.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is accessed on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><seealso cref="E:Awesomium.Core.IWebView.ProcessCreated"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.Title">
            <summary>
            Gets the title of the page currently loaded.
            </summary><remarks>
            This property may also reflect navigation progress.
            For details, see <see cref="P:Awesomium.Core.IWebView.NavigationInfo"/>.
            </remarks><seealso cref="P:Awesomium.Core.IWebView.NavigationInfo"/><seealso cref="P:Awesomium.Core.IWebView.HasTitle"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.HasTitle">
            <summary>
            Gets if the currently loaded web-page has a title.
            </summary><seealso cref="P:Awesomium.Core.IWebView.Title"/><seealso cref="E:Awesomium.Core.IWebView.TitleChanged"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.IsLoading">
            <summary>
            Gets if any page resources are currently being loaded.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.IsNavigating">
            <summary>
            Gets if the view is currently navigating to a Url.
            </summary><remarks>
            Unlike <see cref="P:Awesomium.Core.IWebView.IsLoading"/> that updates when the actual contents
            of a page are being downloaded, this property is updated when navigation
            starts and updates again when loading completes.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.IsCrashed">
            <summary>
            Gets if the process of this <see cref="T:Awesomium.Core.IWebView"/> instance, has crashed.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.IsDocumentReady">
            <summary>
            Gets if the DOM (Document Object Model) for the page being loaded, is ready.
            </summary><remarks>
            This is very useful for executing Javascript on a page before its content has finished loading.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.IsResponsive">
            <summary>
            Gets if the process of this <see cref="T:Awesomium.Core.IWebView"/> instance, is currently responsive.
            </summary><seealso cref="E:Awesomium.Core.IWebView.ResponsiveChanged"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.TargetURL">
            <summary>
            Gets the target URL indicated by the web-view,
            usually as a result of hovering over a link on the page.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.HasTargetURL">
            <summary>
            Gets if the view is currently indicating a target URL,
            usually as a result of hovering over a link on the page.
            </summary><seealso cref="E:Awesomium.Core.IWebView.TargetURLChanged"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.Selection">
            <summary>
            Gets a <see cref="T:Awesomium.Core.Selection"/> providing information about the current selection range.
            </summary><seealso cref="E:Awesomium.Core.IWebView.SelectionChanged"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.HasSelection">
            <summary>
            Gets if the user has selected content in the current page.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.FocusedElementType">
            <summary>
            Gets the type of the element currently focused in the loaded page.
            </summary><remarks>
            You should generally forward keyboard events to the active <see cref="T:Awesomium.Core.IWebView"/> instance,
            whenever one of the following element types are focused:
            <list type="bullet">
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Input"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.TextInput"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.EditableContent"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Plugin"/>
            </description>
            </item>
            </list>
            This is done automatically in technology specific <c>WebControl</c>
            instances.
            </remarks><seealso cref="E:Awesomium.Core.IWebView.FocusChanged"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.ToolTipText">
            <summary>
            Gets the tool-tip text currently indicated by the web-view,
            usually as a result of hovering over elements in the page.
            </summary><seealso cref="E:Awesomium.Core.IWebView.ToolTipChanged"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.ParentView">
            <summary>
            Gets the parent view (if any) of this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            A <see cref="T:Awesomium.Core.IWebView"/> can only have a parent if it is a popup view that
            was created by Awesomium in response to a Javascript <c>window.open</c>.
            <p/>
            For more details, see <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>.
            <note type="caution">
            Be careful when you access members of the parent <see cref="T:Awesomium.Core.IWebView"/> instance.
            The parent may have been destroyed while the this (child) view, is still alive.
            Always check <see cref="P:Awesomium.Core.IWebView.IsLive"/> before accessing members on the parent view,
            to avoid exceptions.
            </note>
            </remarks><seealso cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.LatestContextData">
            <summary>
            Gets the latest web-view context data, usually updated by a right-click in page.
            </summary><returns>
            A <see cref="T:Awesomium.Core.WebContextMenuInfo"/> that represents the latest web-view context data.
            </returns><seealso cref="T:Awesomium.Core.WebContextMenuInfo"/><seealso cref="E:Awesomium.Core.IWebView.ShowContextMenu"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.TerminationStatus">
            <summary>
            Gets the termination status of this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            This is <see cref="F:Awesomium.Core.TerminationStatus.None"/> if the web-view
            has not been instantiated yet (this can be the case in a technology specific
            <c>WebControl</c>) and <see cref="F:Awesomium.Core.TerminationStatus.StillRunning"/>
            if the web-view process has not been terminated and is still running.
            </remarks><seealso cref="E:Awesomium.Core.IWebView.Crashed"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.ProcessID">
            <summary>
            Get the unique ID for the corresponding child-process hosting this
            <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            May return <c>0</c> if the <see cref="T:Awesomium.Core.IWebView"/> instance has crashed 
            or there is no process active.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.ProcessHandle">
            <summary>
            Get the handle for the corresponding child-process hosting this
            <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            This may not be initialized until some time after the
            view is actually created (when we receive the first IPC message
            from the child-process).
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.Surface">
            <summary>
            Gets or sets the <see cref="T:Awesomium.Core.ISurface"/> instance currently
            assigned to the view.
            </summary><remarks>
            If you are using an <see cref="T:Awesomium.Core.ISurface"/> instance capable of handling changes in
            size, you should use this property to assign it to the view.
            This surface will be used with multiple calls of <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>
            and it should be able to handle changes in size during <see cref="M:Awesomium.Core.ISurface.Initialize(Awesomium.Core.IWebView,System.Int32,System.Int32)"/>.
            In this scenario, you can ignore the <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> event.
            </remarks><exception cref="T:System.InvalidOperationException">
            The member is accessed on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><seealso cref="E:Awesomium.Core.IWebView.CreateSurface"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.Source">
            <summary>
            Gets or sets the URL currently presented by this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><returns>
            An absolute <see cref="T:System.Uri"/> representing the URL currently presented 
            by this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </returns><seealso cref="M:Awesomium.Core.IWebView.LoadURL(System.Uri)"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.NavigationInfo">
            <summary>
            Gets or sets the navigation info level.
            </summary><returns>
            A <see cref="T:Awesomium.Core.NavigationInfo"/> value indicating
            the level of navigation progress info reflected to the
            <see cref="P:Awesomium.Core.IWebView.Title"/>. The default is <see cref="F:Awesomium.Core.NavigationInfo.Verbose"/>.
            </returns><remarks>
            Navigation progress information is reflected to the control's
            <see cref="P:Awesomium.Core.IWebView.Title"/>:
            <list type="table">
            <listheader>
            <term>Level</term>
            <description>Title Value</description>
            </listheader>
            <item>
            <term><c>"None"</c></term>
            <description><see cref="P:Awesomium.Core.IWebView.Title"/> only reflects the page's title, if any.</description>
            </item>
            <item>
            <term><c>"Normal"</c></term>
            <description><see cref="P:Awesomium.Core.IWebView.Title"/> reflects the page's title as well as "Error" and "Crashed" status.</description>
            </item>
            <item>
            <term><c>"Verbose"</c></term>
            <description>
            <see cref="P:Awesomium.Core.IWebView.Title"/> reflects progress status such as "Navigating..." and "Loading...",
            until the page's title is acquired. Also reflects "Error" and "Crashed" status. (<b>Default</b>)
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.WebSession">
            <summary>
            Gets the session associated with this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            You can create a <see cref="P:Awesomium.Core.IWebView.WebSession"/> with your own preferences (see <see cref="P:Awesomium.Core.WebSession.Preferences"/>),
            using <see cref="M:Awesomium.Core.WebCore.CreateWebSession(Awesomium.Core.WebPreferences)"/>. You can then use this when you create a <see cref="T:Awesomium.Core.WebView"/> instance, 
            by using the <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession)"/>
            function.
            <note>
            This property is implemented as a read-write property on technology specific <c>WebControls</c>.
            You can use the setter to specify your <see cref="P:Awesomium.Core.IWebView.WebSession"/>, right after instantiating
            the <c>WebControl</c> or at design time. You cannot change this setting after the control
            has been fully loaded and its underlying web-view, has been created.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.NativeWindow">
            <summary>
            Gets the actual window handle that was created by this <see cref="T:Awesomium.Core.IWebView"/> instance.
            This is only valid for windowed <see cref="T:Awesomium.Core.IWebView"/> instances (see <see cref="F:Awesomium.Core.WebViewType.Window"/>).
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.IsRendering">
            <summary>
            Gets or sets if internal asynchronous rendering is currently enabled.
            </summary><remarks>
            All rendering is actually done asynchronously in a separate process
            and so the page is usually continuously rendering internally.
            You should set this to <c>false</c> when your surface is not rendering
            the view's pixel buffer (for ex, when a technology specific <c>WebControl</c>
            is not visible) to save some CPU cycles.
            <note>
            Technology specific <c>WebControls</c> usually monitor the control's visibility
            or enabled status and update this property automatically. They may require
            additional steps before you are able to set this property manually. For more
            details, refer to the documentation of each <c>WebControl</c>.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.CreateParams">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.ForeColor">
            <exclude />
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.ForeColorChanged">
            <exclude />
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.Font">
            <exclude />
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.FontChanged">
            <exclude />
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.RightToLeft">
            <exclude />
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.RightToLeftChanged">
            <exclude />
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.Text">
            <exclude />
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.TextChanged">
            <exclude />
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.AllowDrop">
            <exclude />
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.CausesValidation">
            <exclude />
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.CausesValidationChanged">
            <exclude />
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.IsDesignerHosted">
            <summary>
            The DesignMode property does not correctly tell you if
            you are in design mode. IsDesignerHosted is a corrected
            version of that property.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.CanRecreateView">
            <summary>
            Gets if this control wraps a previously crashed
            view that can be recreated.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.IsLive">
            <summary>
            Gets if the underlying web-view this control wraps, is alive.
            </summary>
            <returns>
            A <see cref="T:System.Boolean"/> value indicating if the underlying web-view this control wraps, 
            is alive. <c>False</c> indicates that the underlying web-view is:
            <list type="bullet">
            <item>
            <description>
            Crashed (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsCrashed"/>).
            <note>
            When crashed, this control will attempt to recreate its underlying view.
            For details, see: <see cref="P:Awesomium.Windows.Forms.WebControl.IsCrashed"/>.
            </note>
            </description>
            </item>
            <item>
            <description>
            Prematurely destroyed (see <see cref="M:Awesomium.Windows.Forms.WebControl.Dispose(System.Boolean)"/>).
            </description>
            </item>
            <item>
            <description>
            Not properly instantiated. This means that something went wrong
            during instantiation of either the <see cref="T:Awesomium.Core.WebCore"/> (if this
            is the first <see cref="T:Awesomium.Windows.Forms.WebControl"/> created) or of the
            underlying web-view.
            </description>
            </item>
            </list>
            </returns>
            <remarks>
            Developers should always check this property before calling <see cref="T:Awesomium.Core.IWebView"/>
            members implemented by this <see cref="T:Awesomium.Windows.Forms.WebControl"/>. Trying to access the underlying
            web-view when it is not alive, can throw an <see cref="T:System.InvalidOperationException"/>.
            <p/>
            For more details, refer to the documentation of this control's members.
            <p/>
            <note>
            This property also returns <c>false</c> when the control is shown in a designer.
            The Awesomium <see cref="T:Awesomium.Core.WebCore"/> and the underlying web-view, are only instantiated
            during runtime.
            </note>
            </remarks>
            <example>
            <code>
            private void toolStripButton2_Click( object sender, EventArgs e )
            {
                if ( !webControl.IsLive )
                    return;
                    
                webControl.GoForward();
            }
            </code>
            <code lang="VB">
            Private Sub ToolStripButton2_Click( sender As Object, e As EventArgs ) Handles ToolStripButton2.Click
                If Not m_WebControl.IsLive Then Return
                    
                m_WebControl.GoForward()
            End Sub
            </code>
            </example>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.NativeView">
            <summary>
            Gets or sets the handle to the underlying web-view instance.
            </summary>
            <remarks>
            You can use this property to create a wrapper for a web-view that has been internally created by Awesomium.
            Views are created internally by Awesomium for external links that should be opened in a new view, or popup windows
            (See Javascript: <c>window.open</c>).
            <note type="caution">
            Once assigned and the control goes live, this property cannot be changed. Attempting to do so,
            will fail silently.
            </note>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Attempted to wrap a web-view instance that has already been wrapped.
            </exception>
            <seealso cref="E:Awesomium.Windows.Forms.WebControl.ShowCreatedWebView"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.BorderStyle">
            <exclude />
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.PropertyChanged">
            <summary>
            Raised when the value of a property of this class, has changed.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Forms.ImageSurface">
            <summary>
            Represents an <see cref="T:Awesomium.Core.ISurface"/> that renders the pixel buffer of a <see cref="T:Awesomium.Core.WebView"/>,
            to an <see cref="P:Awesomium.Windows.Forms.ImageSurface.Image"/>. You can then draw this image to a <see cref="T:System.Windows.Forms.Control"/>,
            or assign it to a <see cref="T:System.Windows.Forms.PictureBox"/>.
            </summary>
            <remarks>
            You can create and return an instance of this class, when <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> is
            being called. Usually, you can cache and return the same <see cref="T:Awesomium.Windows.Forms.ImageSurface"/> instance
            on multiple <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> calls. The <see cref="T:Awesomium.Windows.Forms.ImageSurface"/> takes
            care of updating the <see cref="P:Awesomium.Windows.Forms.ImageSurface.Image"/> to reflect the new surface size.
            <p/>
            <note>
            If you intend to draw the <see cref="P:Awesomium.Windows.Forms.ImageSurface.Image"/> to a <see cref="T:System.Windows.Forms.Control"/>,
            make sure <see cref="P:System.Windows.Forms.Control.DoubleBuffered"/> is set to <c>true</c>,
            to prevent flickering.
            </note>
            <p/>
            <note type="caution">
            Once assigned to a view and initialized, a surface can only be used
            with that single view.
            </note>
            <p/>
            When you are done with using an instance of this class, dispose it to release resources.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.ImageSurface.Image">
            <summary>
            Gets the <see cref="P:Awesomium.Windows.Forms.ImageSurface.Image"/> where the pixel buffer of a <see cref="T:Awesomium.Core.WebView"/>
            is being rendered.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Forms.AddressBox">
            <summary>
            Represents a Windows Forms TextBox that behaves as an address-box.
            </summary>
            <remarks>
            By assigning a <see cref="T:Awesomium.Windows.Forms.WebControl"/>
            to the <see cref="P:Awesomium.Windows.Forms.AddressBox.WebControl"/> property,
            you allow the two controls to interact. The <see cref="T:Awesomium.Windows.Forms.AddressBox"/> will
            transfer navigation requests to the <see cref="T:Awesomium.Windows.Forms.WebControl"/>
            and update the <see cref="P:Awesomium.Windows.Forms.AddressBox.URL"/> property based on the URL
            currently loaded to the assigned <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.OnNavigate(Awesomium.Core.UrlEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.AddressBox.Navigate"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.RefreshAutoComplete">
            <summary>
            Updates the contents of the <see cref="T:System.Windows.Forms.AutoCompleteStringCollection"/>.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.OnGotFocus(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.OnLostFocus(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.OnMouseEnter(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.OnMouseLeave(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.OnEnter(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.OnLeave(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.OnVisibleChanged(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.WndProc(System.Windows.Forms.Message@)">
            <inheritdoc />
        </member>
        <member name="E:Awesomium.Windows.Forms.AddressBox.Navigate">
            <summary>
            Occurs when the user presses ENTER, after typing
            a valid URL in the <see cref="T:Awesomium.Windows.Forms.AddressBox"/>.
            </summary>
            <remarks>
            By assigning a <see cref="T:Awesomium.Windows.Forms.WebControl"/>
            to the <see cref="P:Awesomium.Windows.Forms.AddressBox.WebControl"/> property,
            you allow the two controls to interact. The <see cref="T:Awesomium.Windows.Forms.AddressBox"/> will
            transfer navigation requests to the <see cref="T:Awesomium.Windows.Forms.WebControl"/>
            and update its <see cref="P:Awesomium.Windows.Forms.AddressBox.Text"/> based on the URL
            currently loaded to the assigned <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            <p/>
            <note>
            You do not need to handle this event, if you assign
            a <see cref="T:Awesomium.Windows.Forms.WebControl"/>
            to the <see cref="P:Awesomium.Windows.Forms.AddressBox.WebControl"/> property.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.AddressBox.WebControl">
            <summary>
            Gets or sets the <see cref="T:Awesomium.Windows.Forms.WebControl"/> currently
            assigned to this <see cref="T:Awesomium.Windows.Forms.AddressBox"/>.
            </summary>
            <remarks>
            When a <see cref="T:Awesomium.Windows.Forms.WebControl"/> has been assigned
            to this property, the value of <see cref="P:Awesomium.Windows.Forms.AddressBox.URL"/> is bound to the
            <see cref="P:Awesomium.Windows.Forms.WebControl.Source"/> property:
            <list type="bullet">
            <item>
            <description>
            Manually setting the <see cref="P:Awesomium.Windows.Forms.AddressBox.URL"/> property, will transfer
            a navigation request to the to the assigned <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            </description>
            </item>
            <item>
            <description>
            The value of <see cref="P:Awesomium.Windows.Forms.AddressBox.URL"/> is automatically updated based on the URL
            currently loaded to the assigned <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            </description>
            </item>
            </list>
            </remarks>
            <seealso cref="P:Awesomium.Windows.Forms.AddressBox.URL"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.AddressBox.URL">
            <summary>
            Gets or sets the URL currently displayed by the <see cref="T:Awesomium.Windows.Forms.AddressBox"/>.
            </summary>
            <remarks>
            When a <see cref="T:Awesomium.Windows.Forms.WebControl"/> has been assigned
            to the <see cref="P:Awesomium.Windows.Forms.AddressBox.WebControl"/> property,
            the value of this property is bound to the <see cref="P:Awesomium.Windows.Forms.WebControl.Source"/>
            property:
            <list type="bullet">
            <item>
            <description>
            Manually setting this property will transfer a navigation request to the
            to the assigned <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            </description>
            </item>
            <item>
            <description>
            The value of this property is automatically updated based on the URL
            currently loaded to the assigned <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            </description>
            </item>
            </list>
            </remarks>
            <seealso cref="P:Awesomium.Windows.Forms.AddressBox.WebControl"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.AddressBox.Multiline">
            <exclude />
        </member>
        <member name="P:Awesomium.Windows.Forms.AddressBox.Text">
            <exclude />
        </member>
        <member name="P:Awesomium.Windows.Forms.AddressBox.Font">
            <inheritdoc />
        </member>
        <member name="T:Awesomium.Windows.Forms.ToolStripAddressBox">
            <summary>
            Represents a text box in a <see cref="T:System.Windows.Forms.ToolStrip"/> that behaves as an address-box.
            </summary>
            <remarks>
            By assigning a <see cref="T:Awesomium.Windows.Forms.WebControl"/>
            to the <see cref="P:Awesomium.Windows.Forms.ToolStripAddressBox.WebControl"/> property,
            you allow the two controls to interact. The <see cref="T:Awesomium.Windows.Forms.ToolStripAddressBox"/> will
            transfer navigation requests to the <see cref="T:Awesomium.Windows.Forms.WebControl"/>
            and update the <see cref="P:Awesomium.Windows.Forms.ToolStripAddressBox.URL"/> property based on the URL
            currently loaded to the assigned <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.OnBorderStyleChanged(System.EventArgs)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.OnBorderStyleChanged&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.OnHideSelectionChanged(System.EventArgs)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.OnHideSelectionChanged&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.OnModifiedChanged(System.EventArgs)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.OnModifiedChanged&quot;]/*"/> 
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.OnReadOnlyChanged(System.EventArgs)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.OnReadOnlyChanged&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.OnNavigate(Awesomium.Core.UrlEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.ToolStripAddressBox.Navigate"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.AppendText(System.String)">
            <inheritdoc cref="M:System.Windows.Forms.TextBox.AppendText" />
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.Clear">
            <inheritdoc select='docs/doc[@for="ToolStripTextBox.Clear"]/*' />
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.ClearUndo">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.ClearUndo&quot;]/*"/> 
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.Copy">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.Copy&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.Cut">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.Cut&quot;]/*"/> 
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.DeselectAll">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.DeselectAll&quot;]/*"/> 
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.GetCharFromPosition(System.Drawing.Point)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.GetCharFromPosition&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.GetCharIndexFromPosition(System.Drawing.Point)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.GetCharIndexFromPosition&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.GetFirstCharIndexFromLine(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.GetFirstCharIndexFromLine&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.GetFirstCharIndexOfCurrentLine">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.GetFirstCharIndexOfCurrentLine&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.GetLineFromCharIndex(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.GetLineFromCharIndex&quot;]/*"/> 
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.GetPositionFromCharIndex(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.GetPositionFromCharIndex&quot;]/*"/> 
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.Paste">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.Paste&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.ScrollToCaret">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.ScrollToCaret&quot;]/*"/> 
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.Select(System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.Select&quot;]/*"/> 
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.SelectAll">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.SelectAll&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.Undo">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.Undo&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.OnSubscribeControlEvents(System.Windows.Forms.Control)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.OnUnsubscribeControlEvents(System.Windows.Forms.Control)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.GetPreferredSize(System.Drawing.Size)">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.WebControl">
            <summary>
            Gets or sets the <see cref="T:Awesomium.Windows.Forms.WebControl"/> currently
            assigned to this <see cref="T:Awesomium.Windows.Forms.ToolStripAddressBox"/>.
            </summary>
            <remarks>
            When a <see cref="T:Awesomium.Windows.Forms.WebControl"/> has been assigned
            to this property, the value of <see cref="P:Awesomium.Windows.Forms.ToolStripAddressBox.URL"/> is bound to the
            <see cref="P:Awesomium.Windows.Forms.WebControl.Source"/> property:
            <list type="bullet">
            <item>
            <description>
            Manually setting the <see cref="P:Awesomium.Windows.Forms.ToolStripAddressBox.URL"/> property, will transfer
            a navigation request to the to the assigned <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            </description>
            </item>
            <item>
            <description>
            The value of <see cref="P:Awesomium.Windows.Forms.ToolStripAddressBox.URL"/> is automatically updated based on the URL
            currently loaded to the assigned <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            </description>
            </item>
            </list>
            </remarks>
            <seealso cref="P:Awesomium.Windows.Forms.ToolStripAddressBox.URL"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.URL">
            <summary>
            Gets or sets the URL currently displayed by the <see cref="T:Awesomium.Windows.Forms.ToolStripAddressBox"/>.
            </summary>
            <remarks>
            When a <see cref="T:Awesomium.Windows.Forms.WebControl"/> has been assigned
            to the <see cref="P:Awesomium.Windows.Forms.ToolStripAddressBox.WebControl"/> property,
            the value of this property is bound to the <see cref="P:Awesomium.Windows.Forms.WebControl.Source"/>
            property:
            <list type="bullet">
            <item>
            <description>
            Manually setting this property will transfer a navigation request to the
            to the assigned <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            </description>
            </item>
            <item>
            <description>
            The value of this property is automatically updated based on the URL
            currently loaded to the assigned <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            </description>
            </item>
            </list>
            </remarks>
            <seealso cref="P:Awesomium.Windows.Forms.ToolStripAddressBox.WebControl"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.BorderStyle">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.BorderStyle&quot;]/*"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.CanUndo">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.CanUndo&quot;]/*"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.CharacterCasing">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.CharacterCasing&quot;]/*"/> 
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.HideSelection">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.HideSelection&quot;]/*"/> 
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.Modified">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.Modified&quot;]/*"/> 
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.ReadOnly">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.ReadOnly&quot;]/*"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.SelectedText">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.SelectedText&quot;]/*"/> 
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.SelectionLength">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.SelectionLength&quot;]/*"/> 
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.SelectionStart">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.SelectionStart&quot;]/*"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.ShortcutsEnabled">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.ShortcutsEnabled&quot;]/*"/> 
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.TextLength">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.TextLength&quot;]/*"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.WordWrap">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.WordWrap&quot;]/*"/> 
        </member>
        <member name="E:Awesomium.Windows.Forms.ToolStripAddressBox.BorderStyleChanged">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.BorderStyleChanged&quot;]/*"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.ToolStripAddressBox.HideSelectionChanged">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.HideSelectionChanged&quot;]/*"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.ToolStripAddressBox.ModifiedChanged">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.ModifiedChanged&quot;]/*"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.ToolStripAddressBox.ReadOnlyChanged">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.ReadOnlyChanged&quot;]/*"/> 
        </member>
        <member name="E:Awesomium.Windows.Forms.ToolStripAddressBox.TextBoxTextAlignChanged">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.TextAlignChanged&quot;]/*"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.ToolStripAddressBox.Navigate">
            <summary>
            Occurs when the user presses ENTER, after typing
            a valid URL in the <see cref="T:Awesomium.Windows.Forms.ToolStripAddressBox"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.TextBox">
            <summary>
            Gets the hosted <see cref="T:Awesomium.Windows.Forms.AddressBox"/> control.
            </summary>
            <returns>
            The hosted <see cref="T:Awesomium.Windows.Forms.AddressBox"/> control.
            </returns>
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.Text">
            <exclude />
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.BackgroundImage">
            <exclude />
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.BackgroundImageLayout">
            <exclude />
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.DefaultMargin">
            <!-- Failed to insert some or all of included XML --><include file="doc\ToolStripTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.DefaultMargin&quot;]/*"/> 
            <devdoc>
            Deriving classes can override this to configure a default size for their control. 
            This is more efficient than setting the size in the control's constructor. 
            </devdoc>
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.DefaultSize">
            <!-- Failed to insert some or all of included XML --><include file="doc\ToolStripTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.DefaultSize&quot;]/*"/>
        </member>
        <member name="F:Awesomium.Windows.Forms.LoginForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.LoginForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Awesomium.Windows.Forms.LoginForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.GdiAPI.CreateCompatibleDC(System.IntPtr)">
            <summary>
            CreateCompatibleDC
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.GdiAPI.DeleteDC(System.IntPtr)">
            <summary>
            DeleteDC
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.GdiAPI.SelectObject(System.IntPtr,System.IntPtr)">
            <summary>
            SelectObject
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.GdiAPI.DeleteObject(System.Runtime.InteropServices.HandleRef)">
            <summary>
            DeleteObject
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.GdiAPI.CreateCompatibleBitmap(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            CreateCompatibleBitmap
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.GdiAPI.BitBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,Awesomium.Windows.Forms.GdiAPI.TernaryRasterOperations)">
            <summary>
            BitBlt
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Forms.GdiAPI.TernaryRasterOperations">
            <summary>
            Enumeration for the raster operations used in BitBlt.
            In C++ these are actually #define. But to use these
            constants with C#, a new enumeration type is defined.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Forms.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Forms.Utilities">
            <summary>
            Utility class providing helper methods that can be used by Windows Forms applications.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.Utilities.GetCursor(Awesomium.Core.CursorType)">
            <summary>
            Gets the Windows Forms <see cref="T:System.Windows.Forms.Cursor"/> equivalent of an Awesomium <see cref="T:Awesomium.Core.CursorType"/>.
            </summary>
            <param name="cursor">
            The Awesomium cursor type. You can get this by handling the <see cref="E:Awesomium.Core.WebView.CursorChanged"/> event.
            </param>
            <returns>
            A Windows Forms <see cref="T:System.Windows.Forms.Cursor"/>, or null (Nothing in VB) if <see cref="F:Awesomium.Core.CursorType.None"/>
            is specified.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.Utilities.GetCursor(Awesomium.Core.CursorChangedEventArgs)">
            <summary>
            Gets the Windows Forms <see cref="T:System.Windows.Forms.Cursor"/> equivalent of an Awesomium <see cref="T:Awesomium.Core.CursorType"/>.
            </summary>
            <param name="e">
            The data provided to <see cref="E:Awesomium.Core.WebView.CursorChanged"/> event handler.
            </param>
            <returns>
            A Windows Forms <see cref="T:System.Windows.Forms.Cursor"/>, or null (Nothing in VB) if <see cref="F:Awesomium.Core.CursorType.None"/>
            is specified.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.Utilities.GetKeyboardEvent(System.Windows.Forms.KeyEventArgs,Awesomium.Core.WebKeyboardEventType)">
            <summary>
            Gets an Awesomium <see cref="T:Awesomium.Core.WebKeyboardEvent"/> equivalent of a Windows Forms key-down or key-up event.
            </summary>
            <param name="e">
            The Windows Forms key-down or key-up event arguments.
            </param>
            <param name="eventType">
            Indicates if this is a key-down or key-up event.
            </param>
            <returns>
            An instance of a <see cref="T:Awesomium.Core.WebKeyboardEvent"/> representing the Awesomium equivalent of a
            Windows Forms key-down or key-up event.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.Utilities.GetKeyboardEvent(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Gets an Awesomium <see cref="T:Awesomium.Core.WebKeyboardEvent"/> equivalent of a Windows Forms key-press event.
            </summary>
            <param name="e">
            The Windows Forms key-press event arguments.
            </param>
            <returns>
            An instance of a <see cref="T:Awesomium.Core.WebKeyboardEvent"/> representing the Awesomium equivalent of a
            Windows Forms key-press event.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.Utilities.GetMouseButton(System.Windows.Forms.MouseButtons)">
            <summary>
            Gets the Windows Forms <see cref="T:System.Windows.Forms.MouseButtons"/> equivalent of an Awesomium <see cref="T:Awesomium.Core.MouseButton"/>.
            </summary>
            <param name="button">
            The Awesomium button.
            </param>
            <returns>
            A Windows Forms <see cref="T:System.Windows.Forms.MouseButtons"/>, or <see cref="F:Awesomium.Core.MouseButton.Left"/> if <see cref="F:System.Windows.Forms.MouseButtons.None"/>
            is specified.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.Utilities.ToRectangle(Awesomium.Core.AweRect)">
            <summary>
            Gets a <see cref="T:System.Drawing.Rectangle"/> equivalent of an Awesomium <see cref="T:Awesomium.Core.AweRect"/>.
            </summary>
            <param name="aweRect">
            An <see cref="T:Awesomium.Core.AweRect"/> value representing an Awesomium rectangle.
            </param>
            <returns>
            A <see cref="T:System.Drawing.Rectangle"/> value equivalent of an Awesomium <see cref="T:Awesomium.Core.AweRect"/>.
            </returns>
        </member>
    </members>
</doc>
