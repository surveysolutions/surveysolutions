<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Awesomium.Core</name>
    </assembly>
    <members>
        <member name="T:Awesomium.Core.Data.AsyncDataSource">
            <summary>
            Represents a base <see cref="T:Awesomium.Core.Data.DataSource"/> that loads resources
            asynchronously.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:Awesomium.Core.Data.DataSource">
            <summary>
            Represents the base class for managed custom resource loaders.
            </summary>
            <remarks>
            Custom resources are requested using the <c>asset://</c> protocol.
            <note>
            Once assigned to a <see cref="T:Awesomium.Core.WebSession"/>, a <see cref="T:Awesomium.Core.Data.DataSource"/>
            instance can only be used with that <see cref="T:Awesomium.Core.WebSession"/>.
            <p/>
            It can however be bound to more than one asset hosts, on the same
            <see cref="T:Awesomium.Core.WebSession"/>.
            </note>
            <note type="caution">
            You cannot dispose a <see cref="T:Awesomium.Core.Data.DataSource"/> instance, while it
            is assigned to a <see cref="T:Awesomium.Core.WebSession"/>. Attempting to do so,
            will throw an <see cref="T:System.InvalidOperationException"/>.
            <p/>
            A <see cref="T:Awesomium.Core.Data.DataSource"/> instance assigned to a <see cref="T:Awesomium.Core.WebSession"/>,
            is usually destroyed internally when that <see cref="T:Awesomium.Core.WebSession"/> is
            destroyed, or at <see cref="M:Awesomium.Core.WebCore.Shutdown"/>.
            </note>
            </remarks>
            <seealso cref="M:Awesomium.Core.WebSession.AddDataSource(System.String,Awesomium.Core.Data.DataSource)"/>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:Awesomium.Core.ViewModel">
            <summary>
            This abstract class implements <see cref="T:System.IDisposable"/> and <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> 
            and provides the main logic that helps subclasses be MVVM friendly.
            </summary>
        </member>
        <member name="M:Awesomium.Core.ViewModel.RaisePropertyChanged(System.String)">
            <summary>
            Helper method to raise the <see cref="E:Awesomium.Core.ViewModel.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">
            The name of the property whose value has changed.
            </param>
        </member>
        <member name="M:Awesomium.Core.ViewModel.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Core.ViewModel.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.ViewModel.OnDispose">
            <summary>
            Called when an instance of this class is being disposed.
            </summary>
        </member>
        <member name="M:Awesomium.Core.ViewModel.OnDelete">
            <summary>
            Called when you need to invoke the native destructor of an instance, if any.
            </summary>
            <remarks>
            This method is not called for types with no public destructor in C++.
            The base method throws a <see cref="T:System.MethodAccessException"/>.
            </remarks>
            <exception cref="T:System.MethodAccessException">
            C++ destructor does not have public access.
            </exception>
        </member>
        <member name="M:Awesomium.Core.ViewModel.Dispose">
            <summary>
            Perform cleanup of managed resources.
            </summary>
        </member>
        <member name="E:Awesomium.Core.ViewModel.PropertyChanged">
            <summary>
            Raised when the value of a property of this class, has changed.
            </summary>
        </member>
        <member name="P:Awesomium.Core.ViewModel.IsDisposed">
            <summary>
            Gets if this instance is already disposed and eligible for garbage collection.
            </summary>
        </member>
        <member name="M:Awesomium.Core.Data.DataSource.OnDispose">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.Data.DataSource.OnRequest(Awesomium.Core.Data.DataSourceRequest)">
            <summary>
            Called whenever a request is made for a certain path
            on the asset URL that this <see cref="T:Awesomium.Core.Data.DataSource"/> is bound to.
            It is your responsibility to call <see cref="M:Awesomium.Core.Data.DataSource.SendResponse(System.Int32,System.UInt32,System.IntPtr,System.String)"/> with a 
            response to this request.
            </summary>
            <param name="request">
            Provides details about the request.
            </param>
            <remarks>
            <note type="caution">
            This method is always called on the main thread. To avoid potential deadlocks, 
            you should not make any calls to <see cref="T:Awesomium.Core.IWebView"/>, <see cref="T:Awesomium.Core.WebCore"/>, 
            or <see cref="T:Awesomium.Core.JSObject"/> within this callback.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Core.Data.DataSource.SendResponse(System.Int32,System.UInt32,System.IntPtr,System.String)">
            <summary>
            Sends the response for a previous request.
            </summary>
            <param name="requestID">
            The unique ID for the request.
            </param>
            <param name="bufferSize">
            The size of the buffer.
            </param>
            <param name="buffer">
            The bytes for the resource (will be copied, you retain ownership).
            </param>
            <param name="mimeType">
            The mime-type of the resource.
            </param>
            <remarks>
            You can call this immediately within <see cref="M:Awesomium.Core.Data.DataSource.OnRequest(Awesomium.Core.Data.DataSourceRequest)"/> or asynchronously 
            (once you've finished loading the resource). This method can be called from any thread.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.Data.DataSource.SendResponse(Awesomium.Core.Data.DataSourceRequest,Awesomium.Core.Data.DataSourceResponse)">
            <summary>
            Sends the response for a previous request.
            </summary>
            <param name="request">
            The request to respond to.
            </param>
            <param name="response">
            A <see cref="T:Awesomium.Core.Data.DataSourceResponse"/> that contains the response data.
            </param>
            <remarks>
            You can call this immediately within <see cref="M:Awesomium.Core.Data.DataSource.OnRequest(Awesomium.Core.Data.DataSourceRequest)"/> or asynchronously 
            (once you've finished loading the resource). This method can be called from any thread.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.Data.DataSource.SendRequestFailed(System.Int32)">
            <summary>
            Sends a response indicating that the request failed.
            </summary>
            <param name="requestID">
            The unique ID for the request.
            </param>
            <remarks>
            You can call this immediately within <see cref="M:Awesomium.Core.Data.DataSource.OnRequest(Awesomium.Core.Data.DataSourceRequest)"/> or asynchronously 
            (once you've finished loading the resource). This method can be called from any thread.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.Data.DataSource.SendRequestFailed(Awesomium.Core.Data.DataSourceRequest)">
            <summary>
            Sends a response indicating that the request failed.
            </summary>
            <param name="request">
            The request that has failed.
            </param>
            <remarks>
            You can call this immediately within <see cref="M:Awesomium.Core.Data.DataSource.OnRequest(Awesomium.Core.Data.DataSourceRequest)"/> or asynchronously 
            (once you've finished loading the resource). This method can be called from any thread.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.Data.DataSource.AssetHosts">
            <summary>
            Gets a list of asset hosts, this <see cref="T:Awesomium.Core.Data.DataSource"/>
            has been registered to handle, in this <see cref="P:Awesomium.Core.Data.DataSource.WebSession"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Data.DataSource.WebSession">
            <summary>
            Gets the <see cref="T:Awesomium.Core.WebSession"/> instance this
            <see cref="T:Awesomium.Core.Data.DataSource"/> has been added to, to handle one or 
            more asset hosts (see <see cref="P:Awesomium.Core.Data.DataSource.AssetHosts"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Data.DataSource.SyncRoot">
            <summary>
            Synchronization object.
            </summary>
        </member>
        <member name="M:Awesomium.Core.Data.AsyncDataSource.OnRequest(Awesomium.Core.Data.DataSourceRequest)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.Data.AsyncDataSource.LoadResourceAsync(Awesomium.Core.Data.DataSourceRequest)">
            <summary>
            Called asynchronously whenever a request is made for a certain path
            on the asset URL that this <see cref="T:Awesomium.Core.Data.DataSource"/> is bound to.
            It is your responsibility to call <see cref="M:Awesomium.Core.Data.DataSource.SendResponse(System.Int32,System.UInt32,System.IntPtr,System.String)"/> with a 
            response to this request.
            </summary>
            <param name="request">
            Provides details about the request.
            </param>
        </member>
        <member name="T:Awesomium.Core.Data.DataPakSource">
            <summary>
            Represents a special <see cref="T:Awesomium.Core.Data.DataSource"/> that loads all resources from a PAK file.
            </summary>
            <seealso cref="M:Awesomium.Core.Utilities.WriteDataPak(System.String,System.String,System.String[])"/>
            <seealso cref="M:Awesomium.Core.Data.DataPakSource.FromDirectory(System.String,System.Boolean,System.String[])"/>
            <seealso cref="M:Awesomium.Core.WebSession.AddDataSource(System.String,Awesomium.Core.Data.DataSource)"/>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Awesomium.Core.Data.DataPakSource.#ctor(System.String)">
            <summary>
            Create a <see cref="T:Awesomium.Core.Data.DataPakSource"/> from a PAK file.
            </summary>
            <param name="pakPath">
            The path to the PAK file.
            </param>
        </member>
        <member name="M:Awesomium.Core.Data.DataPakSource.OnRequest(Awesomium.Core.Data.DataSourceRequest)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.Data.DataPakSource.FromDirectory(System.String,System.Boolean,System.String[])">
            <summary>
            Creates a PAK file with the resources in the specified <paramref name="directory"/> and returns a <see cref="T:Awesomium.Core.Data.DataPakSource"/>
            instance that loads all resources from the generated PAK file.
            </summary>
            <param name="directory">
            The path to the input directory.
            </param>
            <param name="useExisting">
            Indicates if a an existing PAK file should be used, instead of generating a new one.
            </param>
            <param name="ignoreExt">
            A list of file extensions to ignore (it is not obligatory to prefix the extensions with a dot ".").
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.Data.DataPakSource"/> instance that loads all resources from the generated PAK file,
            or <c>null</c> (<c>Nothing</c> in Visual Basic), if the specified <paramref name="directory"/> does not exist.
            </returns>
            <remarks>
            This procedure generates a PAK file in the specified <paramref name="directory"/>, that contains
            all the resources in the directory (filtered by <paramref name="ignoreExt"/>).It then creates
            and returns a <see cref="T:Awesomium.Core.Data.DataPakSource"/> instance that loads resources from the new PAK file.
            <p/>
            The generated PAK file, has the name of the specified <paramref name="directory"/>.
            <note>
            If a PAK file with the directory's name already exists in the specified <paramref name="directory"/>,
            it is silently overwritten.
            </note>
            <note>
            If you specify <c>true</c> for <paramref name="useExisting"/>, an existing PAK file (if any) with the
            directory's name in the specified <paramref name="directory"/>, will be used instead of generating
            a new one. In this case, extensions specified in <paramref name="ignoreExt"/> are ignored. Note however
            that the existing PAK file may have been created with a different filter (different extensions ignored)
            or before the contents of the specified <paramref name="directory"/> change and may therefore 
            contain outdated resources.
            </note>
            <note type="caution">
            User must have read-write permissions on the specified <paramref name="directory"/>.
            </note>
            <note>
            This procedure fails silently by returning <c>null</c> (<c>Nothing</c> in Visual Basic), 
            if the specified <paramref name="directory"/> does not exist.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Core.Data.DataPakSource.FromDirectory(System.String,System.String[])">
            <summary>
            Creates a PAK file with the resources in the specified <paramref name="directory"/> and returns a <see cref="T:Awesomium.Core.Data.DataPakSource"/>
            instance that loads all resources from the generated PAK file.
            </summary>
            <param name="directory">
            The path to the input directory.
            </param>
            <param name="ignoreExt">
            A list of file extensions to ignore (it is not obligatory to prefix the extensions with a dot ".").
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.Data.DataPakSource"/> instance that loads all resources from the generated PAK file,
            or <c>null</c> (<c>Nothing</c> in Visual Basic), if the specified <paramref name="directory"/> does not exist.
            </returns>
            <remarks>
            This procedure generates a PAK file in the specified <paramref name="directory"/>, that contains
            all the resources in the directory (filtered by <paramref name="ignoreExt"/>). It then creates
            and returns a <see cref="T:Awesomium.Core.Data.DataPakSource"/> instance that loads resources from the new PAK file.
            <p/>
            The generated PAK file, has the name of the specified <paramref name="directory"/>.
            <note>
            If a PAK file with the directory's name already exists in the specified <paramref name="directory"/>,
            it is silently overwritten.
            </note>
            <note type="caution">
            User must have read-write permissions on the specified <paramref name="directory"/>.
            </note>
            <note>
            This procedure fails silently by returning <c>null</c> (<c>Nothing</c> in Visual Basic), 
            if the specified <paramref name="directory"/> does not exist.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.Data.DataPakSource.PakPath">
            <summary>
            Gets the path to the PAK file used to load resources from.
            </summary>
        </member>
        <member name="T:Awesomium.Core.Data.DataSourceRequest">
            <summary>
            Represents a request for a resource
            </summary>
        </member>
        <member name="M:Awesomium.Core.Data.DataSourceRequest.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.Data.DataSourceRequest.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.Data.DataSourceRequest.op_Equality(Awesomium.Core.Data.DataSourceRequest,Awesomium.Core.Data.DataSourceRequest)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.Data.DataSourceRequest"/> instances are equivalent.
            </summary>
            <param name="r1">
            The <see cref="T:Awesomium.Core.Data.DataSourceRequest"/> instance that is to the left of the equality operator.
            </param>
            <param name="r2">
            The <see cref="T:Awesomium.Core.Data.DataSourceRequest"/> instance that is to the right of the equality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="r1"/> and <paramref name="r2"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Data.DataSourceRequest.op_Inequality(Awesomium.Core.Data.DataSourceRequest,Awesomium.Core.Data.DataSourceRequest)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.Data.DataSourceRequest"/> instances are not equal.
            </summary>
            <param name="r1">
            The <see cref="T:Awesomium.Core.Data.DataSourceRequest"/> instance that is to the left of the inequality operator.
            </param>
            <param name="r2">
            The <see cref="T:Awesomium.Core.Data.DataSourceRequest"/> instance that is to the right of the inequality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="r1"/> and <paramref name="r2"/> are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Awesomium.Core.Data.DataSourceRequest.RequestID">
            <summary>
            The unique ID for the request.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Data.DataSourceRequest.Path">
            <summary>
            The path for the request. If the <see cref="T:Awesomium.Core.Data.DataSource"/> was registered with an asset host 
            of <i>myhost</i>, <see cref="P:Awesomium.Core.Data.DataSourceRequest.Path"/> will contain whatever follows the: <c>asset://myhost/</c>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Data.DataSourceRequest.MimeType">
            <summary>
            The mime-type of the resource.
            </summary>
        </member>
        <member name="T:Awesomium.Core.Data.DataSourceResponse">
            <summary>
            Represents the response to a <see cref="T:Awesomium.Core.Data.DataSourceRequest"/>.
            You should pass this to <see cref="M:Awesomium.Core.Data.DataSource.SendResponse(System.Int32,System.UInt32,System.IntPtr,System.String)"/>.
            </summary>
        </member>
        <member name="F:Awesomium.Core.Data.DataSourceResponse.Empty">
            <summary>
            Represents an empty response.
            </summary>
        </member>
        <member name="F:Awesomium.Core.Data.DataSourceResponse.Buffer">
            <summary>
            The bytes for the resource (will be copied, you retain ownership).
            </summary>
            <remarks>
            After responding to a request by calling <see cref="M:Awesomium.Core.Data.DataSource.SendResponse(System.Int32,System.UInt32,System.IntPtr,System.String)"/>,
            you can safely release this buffer.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.Data.DataSourceResponse.Size">
            <summary>
            The size of the buffer.
            </summary>
        </member>
        <member name="F:Awesomium.Core.Data.DataSourceResponse.MimeType">
            <summary>
            The mime-type of the loaded resource. If not set,
            <see cref="P:Awesomium.Core.Data.DataSourceRequest.MimeType"/> will be used.
            </summary>
        </member>
        <member name="M:Awesomium.Core.Data.DataSourceResponse.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.Data.DataSourceResponse.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.Data.DataSourceResponse.op_Equality(Awesomium.Core.Data.DataSourceResponse,Awesomium.Core.Data.DataSourceResponse)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.Data.DataSourceResponse"/> instances are equivalent.
            </summary>
            <param name="r1">
            The <see cref="T:Awesomium.Core.Data.DataSourceResponse"/> instance that is to the left of the equality operator.
            </param>
            <param name="r2">
            The <see cref="T:Awesomium.Core.Data.DataSourceResponse"/> instance that is to the right of the equality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="r1"/> and <paramref name="r2"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Data.DataSourceResponse.op_Inequality(Awesomium.Core.Data.DataSourceResponse,Awesomium.Core.Data.DataSourceResponse)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.Data.DataSourceResponse"/> instances are not equal.
            </summary>
            <param name="r1">
            The <see cref="T:Awesomium.Core.Data.DataSourceResponse"/> instance that is to the left of the inequality operator.
            </param>
            <param name="r2">
            The <see cref="T:Awesomium.Core.Data.DataSourceResponse"/> instance that is to the right of the inequality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="r1"/> and <paramref name="r2"/> are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Awesomium.Core.Data.DataSourceResponse.IsEmpty">
            <summary>
            Gets if this response is empty.
            </summary>
        </member>
        <member name="T:Awesomium.Core.Data.DirectoryDataSource">
            <summary>
            Represents a special <see cref="T:Awesomium.Core.Data.DataSource"/> that loads all resources from a local directory.
            </summary>
            <seealso cref="M:Awesomium.Core.WebSession.AddDataSource(System.String,Awesomium.Core.Data.DataSource)"/>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Awesomium.Core.Data.DirectoryDataSource.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/> that loads all resources from a directory on disk.
            </summary>
            <param name="directory">
            The path to the directory containing the resources.
            </param>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified <paramref name="directory"/> does not exist.
            </exception>
        </member>
        <member name="M:Awesomium.Core.Data.DirectoryDataSource.#ctor(System.String,System.UInt32)">
            <summary>
            Creates an in-memory <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/> that loads and caches in-memory,
            resources from a directory on disk.
            </summary>
            <param name="directory">
            The path to the directory containing the resources.
            </param>
            <param name="memorySize">
            Specifies the maximum amount of memory in bytes that can be used to cache resources.
            Specifying <c>0</c>, will create a regular (not <i>in-memory</i>) <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/>.
            This is the same as calling <see cref="M:Awesomium.Core.Data.DirectoryDataSource.#ctor(System.String)"/>.
            </param>
            <remarks>
            This constructor can be used to create a <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/> instance that
            will load and cache in memory, resources from a directory on disk.
            </remarks>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified <paramref name="directory"/> does not exist.
            </exception>
        </member>
        <member name="M:Awesomium.Core.Data.DirectoryDataSource.LoadResourceAsync(Awesomium.Core.Data.DataSourceRequest)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.Data.DirectoryDataSource.Preload(System.String[])">
            <summary>
            Preloads resources from the directory and its subdirectories, to memory.
            </summary>
            <param name="ignoreExt">
            Specifies the extentions to ignore when loading resources.
            Files with the specified extension, will be ignored.
            A dot prefix is not required.
            </param>
            <remarks>
            This is only valid with in-memory <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/>
            instances.
            <p/>
            <see cref="M:Awesomium.Core.Data.DirectoryDataSource.Preload(System.String[])"/> will load all the available resources from the
            directory and its subdirectories to memory, ignoring files with the
            specified <paramref name="ignoreExt"/> and until it reaches the specified
            <see cref="P:Awesomium.Core.Data.DirectoryDataSource.MaximumSize"/>.
            <p/>
            This operation is performed asynchronously and the <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/>
            can still be used while files are being loaded in memory. When pre-loading
            completes, <see cref="E:Awesomium.Core.Data.DirectoryDataSource.PreloadComplete"/> is fired synchronously.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Attempted to call this method on a <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/>
            that has not been set to cache resources in memory (see <see cref="P:Awesomium.Core.Data.DirectoryDataSource.IsInMemory"/>).
            </exception>
        </member>
        <member name="E:Awesomium.Core.Data.DirectoryDataSource.PreloadComplete">
            <summary>
            Occurs when a pre-load operation (see <see cref="M:Awesomium.Core.Data.DirectoryDataSource.Preload(System.String[])"/>), completes.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Data.DirectoryDataSource.Directory">
            <summary>
            Gets the directory this data source will load resources from.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Data.DirectoryDataSource.IsInMemory">
            <summary>
            Gets if this is an in-memory data source.
            </summary>
            <remarks>
            In-memory <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/> instances, cache the requested
            files in memory either when they are first requested, or by using
            <see cref="M:Awesomium.Core.Data.DirectoryDataSource.Preload(System.String[])"/>. In subsequent requests for the same resource,
            the <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/> loads the resource from memory
            instead of reading from disk. This can significantly improve performance.
            <note>
            An in-memory <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/> will stop caching resources
            to memory when the specified <see cref="P:Awesomium.Core.Data.DirectoryDataSource.MaximumSize"/> has been reached.
            </note>
            </remarks>
            <seealso cref="P:Awesomium.Core.Data.DirectoryDataSource.MaximumSize"/>
        </member>
        <member name="P:Awesomium.Core.Data.DirectoryDataSource.FilesInMemory">
            <summary>
            Gets an array of file names currently cached in memory.
            </summary>
            <remarks>
            This is only valid with in-memory <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/>
            instances (see <see cref="P:Awesomium.Core.Data.DirectoryDataSource.IsInMemory"/>).
            </remarks>
        </member>
        <member name="P:Awesomium.Core.Data.DirectoryDataSource.MaximumSize">
            <summary>
            Gets the maximum size of memory in bytes that this <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/>
            instance should use to cache resources in memory.
            </summary>
            <remarks>
            This is only valid with in-memory <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/>
            instances (see <see cref="P:Awesomium.Core.Data.DirectoryDataSource.IsInMemory"/>).
            </remarks>
        </member>
        <member name="P:Awesomium.Core.Data.DirectoryDataSource.CurrentSize">
            <summary>
            Gets the amount of memory in bytes that this <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/>
            currently uses.
            </summary>
            <remarks>
            This is only valid with in-memory <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/>
            instances (see <see cref="P:Awesomium.Core.Data.DirectoryDataSource.IsInMemory"/>).
            </remarks>
        </member>
        <member name="T:Awesomium.Core.Data.ResourceType">
            <summary>
            Indicates the type of application resources that
            a <see cref="T:Awesomium.Core.Data.ResourceDataSource"/> will look for.
            </summary>
        </member>
        <member name="F:Awesomium.Core.Data.ResourceType.Embedded">
            <summary>
            Look for embedded resources.
            </summary>
        </member>
        <member name="F:Awesomium.Core.Data.ResourceType.Packed">
            <summary>
            Look for packed resources (Build Action: Resource).
            </summary>
        </member>
        <member name="F:Awesomium.Core.Data.ResourceType.Both">
            <summary>
            Look for both. We will first look for embedded.
            </summary>
        </member>
        <member name="T:Awesomium.Core.Data.ResourceDataSource">
            <summary>
            Represents a special <see cref="T:Awesomium.Core.Data.DataSource"/> that loads all resources from application resources.
            </summary>
            <seealso cref="M:Awesomium.Core.WebSession.AddDataSource(System.String,Awesomium.Core.Data.DataSource)"/>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Awesomium.Core.Data.ResourceDataSource.OnDispose">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.Data.ResourceDataSource.LoadResourceAsync(Awesomium.Core.Data.DataSourceRequest)">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Core.Data.ResourceDataSource.Type">
            <summary>
            Gets the type of application resources that this
            <see cref="T:Awesomium.Core.Data.ResourceDataSource"/> looks for.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Data.ResourceDataSource.Assembly">
            <summary>
            Gets the assembly that contains the resources.
            </summary>
        </member>
        <member name="T:Awesomium.Core.Data.DataSourceCollection">
            <summary>
            Represents a collection of <see cref="T:Awesomium.Core.Data.DataSource"/> instances
            maintained by a <see cref="T:Awesomium.Core.WebSession"/>.
            </summary>
        </member>
        <member name="M:Awesomium.Core.Data.DataSourceCollection.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Awesomium.Core.EditFlags">
            <summary>
            Used with <see cref="T:Awesomium.Core.WebContextMenuInfo"/>.
            </summary>
        </member>
        <member name="T:Awesomium.Core.WebSessionCollection">
            <summary>
            Represents a collection of sessions maintained by the <see cref="T:Awesomium.Core.WebCore"/>.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebSessionCollection.#ctor(System.Collections.ObjectModel.ObservableCollection{Awesomium.Core.WebSession})">
            <inheritdoc />
        </member>
        <member name="T:Awesomium.Core.DownloadCompleteEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.DownloadComplete"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.DownloadCompleteEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.DownloadCompleteEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.DownloadComplete"/> event.
            </summary>
        </member>
        <member name="T:Awesomium.Core.UrlEventArgs">
            <summary>
            Provides data for events that provide a URL.
            </summary>
        </member>
        <member name="P:Awesomium.Core.UrlEventArgs.Url">
            <summary>
            Gets a <see cref="T:System.Uri"/> instance representing the
            URL of the web page.
            </summary>
        </member>
        <member name="P:Awesomium.Core.DownloadCompleteEventArgs.DownloadID">
            <summary>
            Gets the unique ID of the download.
            </summary>
        </member>
        <member name="P:Awesomium.Core.DownloadCompleteEventArgs.SavedPath">
            <summary>
            Gets the path that the download was saved to.
            </summary>
        </member>
        <member name="T:Awesomium.Core.DownloadEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.Download"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.DownloadEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.DownloadEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.DownloadProgress"/> event.
            </summary>
        </member>
        <member name="T:Awesomium.Core.FileDialogEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> and 
            <see cref="E:Awesomium.Core.IWebView.Download"/> events.
            </summary>
            <remarks>
            Set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <c>true</c> to cancel the event.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.FileDialogEventArgs.Mode">
            <summary>
            Gets the type of dialog to display.
            </summary>
            <remarks>
            This property also identifies if <see cref="T:Awesomium.Core.FileDialogEventArgs"/> is passed to a 
            <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> or a <see cref="E:Awesomium.Core.IWebView.Download"/> event.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.FileDialogEventArgs.Title">
            <summary>
            Gets the title of the dialog.
            </summary>
            <remarks>
            Only valid with <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/>.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.FileDialogEventArgs.SuggestedFileName">
            <summary>
            Gets the suggested file name for the dialog.
            </summary>
        </member>
        <member name="P:Awesomium.Core.FileDialogEventArgs.MimeTypes">
            <summary>
            Gets the valid mime types when used with <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/>,
            or the mime type of the file to be downloaded when used with <see cref="E:Awesomium.Core.IWebView.Download"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.FileDialogEventArgs.SelectedFiles">
            <summary>
            Gets or sets the paths to the selected file(s).
            </summary>
            <remarks>
            If you set <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> to <see cref="F:Awesomium.Core.EventHandling.Modal"/>, 
            you should use this property to specify the selected files.
            <p/>
            When <see cref="T:Awesomium.Core.FileDialogEventArgs"/> is passed to a <see cref="E:Awesomium.Core.IWebView.Download"/>
            event, you should specify a string array containing only one path. Alternatively,
            you can use the <see cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFile"/> property.
            <p/>
            Read the documentation of: <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/>,
            for ways to handle the event.
            <note>
            Setting this to <c>null</c> (<c>Nothing</c> in Visual Basic),
            equals to setting <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <c>true</c>.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.FileDialogEventArgs.SelectedFile">
            <summary>
            Gets or sets the path to the selected file.
            </summary>
            <remarks>
            If you set <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> to <see cref="F:Awesomium.Core.EventHandling.Modal"/>, 
            you should use this property to specify the path to the selected file.
            <p/>
            Setting this property will also update the <see cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFiles"/>
            property.
            <p/>
            Read the documentation of: <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/>,
            for ways to handle the event.
            <note>
            Setting this to <c>null</c> (<c>Nothing</c> in Visual Basic),
            equals to setting <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <c>true</c>.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.FileDialogEventArgs.Handled">
            <summary>
            Gets or sets if this event is handled by an application.
            </summary>
            <remarks>
            The table below presents the way the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> event is handled, 
            when <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
            If <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            the event is immediately canceled.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            controls will display their predefined dialog.
            </description>
            </item>
            </list>
            Applications can handle the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> and <see cref="E:Awesomium.Core.IWebView.Download"/> events either
            modally or non-modally. Only modal handling is officially supported by Awesomium.NET.
            <p/>
            The table below shows the methods of handling the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> and
            <see cref="E:Awesomium.Core.IWebView.Download"/> events:
            <list type="table">
            <listheader>
            <term>
            Setting
            </term>
            <description>
            Handling
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.Modal"/>
            </term>
            <description>
            Developers should provide a response through the <see cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFiles"/> or 
            <see cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFile"/> property, before the event handler exits.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (Not officially supported by Awesomium.NET)
            </term>
            <description>
            No response will be provided for the request. Developers should later provide
            a response themselves using either:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/> for <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.DidChooseDownloadPath(System.Int32,System.String)"/> or <see cref="M:Awesomium.Core.IWebView.CancelDownload(System.Int32)"/> 
            for <see cref="E:Awesomium.Core.IWebView.Download"/>
            </description>
            </item>
            </list>
            <note type="caution">
            This technique is not officially supported by Awesomium.NET. Therefore, the member
            above is not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access this member.
            </note>
            <note type="caution">
            For <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/>, if you set <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> to <see cref="F:Awesomium.Core.EventHandling.NotModal"/>, 
            you should make sure that you always call <see cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/> providing a response to the event.
            No new <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> events will occur, until a response has been provided for the last one.
            </note>
            </description>
            </item>
            </list>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> (or any other member), is ignored.
            </note>
            </remarks>
            <seealso cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFiles"/>
            <seealso cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFile"/>
        </member>
        <member name="P:Awesomium.Core.DownloadEventArgs.DownloadID">
            <summary>
            Gets the unique ID of the download (for <see cref="E:Awesomium.Core.IWebView.Download"/> events).
            </summary>
        </member>
        <member name="P:Awesomium.Core.DownloadEventArgs.Url">
            <summary>
            Gets the URL that initiated the download.
            </summary>
        </member>
        <member name="T:Awesomium.Core.DownloadProgressEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.DownloadProgress"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.DownloadProgressEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.DownloadProgressEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.DownloadProgress"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.DownloadProgressEventArgs.DownloadID">
            <summary>
            Gets the unique ID of the download.
            </summary>
        </member>
        <member name="P:Awesomium.Core.DownloadProgressEventArgs.TotalBytes">
            <summary>
            The total number of bytes (may be <c>0</c> if unknown).
            </summary>
        </member>
        <member name="P:Awesomium.Core.DownloadProgressEventArgs.ReceivedBytes">
            <summary>
            The number of bytes received so far.
            </summary>
        </member>
        <member name="P:Awesomium.Core.DownloadProgressEventArgs.CurrentSpeed">
            <summary>
            The current speed in bytes per second.
            </summary>
        </member>
        <member name="T:Awesomium.Core.IMERangeChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebViewIMEComposition.RangeChanged"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.IMERangeChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.IMERangeChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebViewIMEComposition.RangeChanged"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.IMERangeChangedEventArgs.Range">
            <summary>
            Gets the displayed range of the IME composition.
            </summary>
        </member>
        <member name="T:Awesomium.Core.IMEUpdateEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebViewIMEComposition.Updated"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.IMEUpdateEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.IMEUpdateEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebViewIMEComposition.Updated"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.IMEUpdateEventArgs.InputType">
            <summary>
            Gets the type of IME widget that should be displayed (if any).
            </summary>
        </member>
        <member name="P:Awesomium.Core.IMEUpdateEventArgs.X">
            <summary>
            The x-position of the caret (relative to the <see cref="T:Awesomium.Core.IWebView"/> instance).
            </summary>
        </member>
        <member name="P:Awesomium.Core.IMEUpdateEventArgs.Y">
            <summary>
            The y-position of the caret (relative to the <see cref="T:Awesomium.Core.IWebView"/> instance).
            </summary>
        </member>
        <member name="T:Awesomium.Core.JavascriptMethodEventHandler">
            <summary>
            Represents the method that will handle calls to custom Javascript methods.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.JavascriptMethodEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.JavascriptMethodEventArgs">
            <summary>
            Provides data for calls to custom Javascript methods.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JavascriptMethodEventArgs.RemoteObjectID">
            <summary>
            Gets the unique ID of the <see cref="T:Awesomium.Core.JSObject"/> that contains the method called.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JavascriptMethodEventArgs.MethodName">
            <summary>
            Gets the name of the method being called.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JavascriptMethodEventArgs.Arguments">
            <summary>
            Gets an array of arguments passed to the method.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JavascriptMethodEventArgs.MustReturnValue">
            <summary>
            Gets if the if the handler should provide a returned value (see <see cref="P:Awesomium.Core.JavascriptMethodEventArgs.Result"/>).
            </summary>
        </member>
        <member name="P:Awesomium.Core.JavascriptMethodEventArgs.Result">
            <summary>
            Gets or sets the result (returned value) of the method being called.
            </summary>
            <remarks>
            You should only provide a result if <see cref="P:Awesomium.Core.JavascriptMethodEventArgs.MustReturnValue"/>
            is <c>true</c>. If no result is specified, <see cref="F:Awesomium.Core.JSValue.Null"/>
            is returned by default.
            </remarks>
        </member>
        <member name="T:Awesomium.Core.PrintCompleteEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.PrintComplete"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.PrintCompleteEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.PrintCompleteEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.PrintRequest"/> event.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.PrintComplete"/>
        </member>
        <member name="T:Awesomium.Core.PrintOperationEventArgs">
            <summary>
            Provides data for a print operation event.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.PrintFailed"/>
        </member>
        <member name="P:Awesomium.Core.PrintOperationEventArgs.RequestID">
            <summary>
            Gets the unique request ID (returned from <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/> earlier).
            </summary>
        </member>
        <member name="P:Awesomium.Core.PrintCompleteEventArgs.Files">
            <summary>
            The list of file-paths written. There may be multiple
            files written if <see cref="F:Awesomium.Core.PrintConfigImpl.SplitPagesIntoMultipleFiles"/> was
            set to <c>true</c>.
            </summary>
        </member>
        <member name="T:Awesomium.Core.PrintOperationEventHandler">
            <summary>
            Represents the method that will handle a print operation events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.PrintOperationEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.PrintRequestEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.PrintRequest"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.PrintRequestEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.PrintRequestEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.PrintRequest"/> event.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.PrintRequest"/>
        </member>
        <member name="T:Awesomium.Core.FileDialogEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> and 
            <see cref="E:Awesomium.Core.IWebView.Download"/> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Awesomium.Core.FileDialogEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.FocusChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.FocusChanged"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.FocusChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.FocusChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.FocusChanged"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.FocusChangedEventArgs.FocusedElementType">
            <summary>
            Indicates the type of element currently focused in
            the page loaded in the view.
            </summary>
            <remarks>
            You should generally forward keyboard events to the active <see cref="T:Awesomium.Core.IWebView"/> instance,
            whenever one of the following element types are focused:
            <list type="bullet">
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Input"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.TextInput"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.EditableContent"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Plugin"/>
            </description>
            </item>
            </list>
            This is done automatically in technology specific <c>WebControl</c>
            instances.
            </remarks>
        </member>
        <member name="T:Awesomium.Core.LoginRequestEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.LoginRequestEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.LoginRequestEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event.
            </summary>
            <remarks>
            Set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <c>true</c> to cancel
            the request.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.LoginRequestEventArgs.Info">
            <summary>
            Gets a <see cref="T:Awesomium.Core.WebLoginDialogInfo"/> that provides information 
            for creating and displaying a dialog so that users can input their 
            username and password.
            </summary>
            <remarks>
            When you are handling the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/>
            event with <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (see <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/>),
            it is your responsibility to display a dialog so that users can input their username and password.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.LoginRequestEventArgs.Username">
            <summary>
            Specify a Username as a response to the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event.
            </summary>
            <remarks>
            You should set this property if <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Modal"/>.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.LoginRequestEventArgs.Password">
            <summary>
            Specify a Password as a response to the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event.
            </summary>
            <remarks>
            You should set this property if <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Modal"/>.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.LoginRequestEventArgs.Handled">
            <summary>
            Gets or sets if this event is handled by an application.
            </summary>
            <remarks>
            The table below presents the way the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event is handled, 
            when <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
            If <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            the event is immediately canceled.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            controls will display their predefined UI.
            </description>
            </item>
            </list>
            Applications can handle the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event either
            modally or non-modally. Only modal handling is officially supported by Awesomium.NET.
            <p/>
            The table below shows the methods of handling the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event:
            <list type="table">
            <listheader>
            <term>
            Setting
            </term>
            <description>
            Handling
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.Modal"/>
            </term>
            <description>
            Developers should provide a response through the <see cref="P:Awesomium.Core.LoginRequestEventArgs.Username"/> and
            <see cref="P:Awesomium.Core.LoginRequestEventArgs.Password"/> properties, before the event handler exits.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (Not officially supported by Awesomium.NET)
            </term>
            <description>
            No response will be provided for the request. Developers should later provide
            a response themselves using any of the following methods:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.Login(System.Int32,System.String,System.String)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.CancelLogin(System.Int32)"/>
            </description>
            </item>
            </list>
            <note type="caution">
            This technique is not officially supported by Awesomium.NET. Therefore, the members
            above are not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access these members.
            </note>
            </description>
            </item>
            </list>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> (or any other member), is ignored.
            </note>
            </remarks>
            <seealso cref="P:Awesomium.Core.LoginRequestEventArgs.Username"/>
            <seealso cref="P:Awesomium.Core.LoginRequestEventArgs.Password"/>
        </member>
        <member name="T:Awesomium.Core.ShowContextMenuEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.ShowContextMenu"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.ContextMenuEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.ContextMenuEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.ShowContextMenu"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.ContextMenuEventArgs.Info">
            <summary>
            Gets a <see cref="T:Awesomium.Core.WebContextMenuInfo"/> that provides information 
            for creating and displaying the context menu.
            </summary>
        </member>
        <member name="P:Awesomium.Core.ContextMenuEventArgs.Handled">
            <summary>
            Gets or sets if this event is handled by an application.
            If set to <c>false</c> (default), a <c>WebControl</c>
            will display its predefined user interface, if any.
            </summary>
        </member>
        <member name="T:Awesomium.Core.ShowPopupMenuEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.PopupMenuEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.PopupMenuEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.WebCore.Started"/> event.
            </summary>
            <remarks>
            To synchronously cancel the event, set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> 
            to <c>true</c>. Otherwise, you have to explicitly call <see cref="M:Awesomium.Core.WebPopupMenuInfo.Cancel"/>
            or <see cref="M:Awesomium.Core.IWebView.CancelPopupMenu"/>.
            </remarks>
            <seealso cref="T:Awesomium.Core.WebPopupMenuInfo"/>
            <seealso cref="M:Awesomium.Core.WebPopupMenuInfo.Select(System.Int32)"/>
            <seealso cref="M:Awesomium.Core.WebPopupMenuInfo.Cancel"/>
        </member>
        <member name="P:Awesomium.Core.PopupMenuEventArgs.Info">
            <summary>
            Gets a <see cref="T:Awesomium.Core.WebPopupMenuInfo"/> that provides information 
            for creating and displaying the drop-down (popup) menu.
            </summary>
            <remarks>
            When you handle <see cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/>
            yourself (see <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/>),
            you are responsible for creating and rendering the drop-down
            (popup) menu. <see cref="T:Awesomium.Core.WebPopupMenuInfo"/> provides the
            necessary information for creating the menu. It also allows
            you to easily cancel or select an item by using:
            <see cref="M:Awesomium.Core.WebPopupMenuInfo.Cancel"/> or
            <see cref="M:Awesomium.Core.WebPopupMenuInfo.Select(System.Int32)"/>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.PopupMenuEventArgs.Handled">
            <summary>
            Gets or sets if the event has been handled by the user.
            </summary>
            <remarks>
            By default, technology specific <c>WebControls</c> provide
            their own drop-down (popup) menus. If you wish to prevent the
            control from displaying its own menu and handle the event yourself,
            set <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/> to <c>true</c> and then
            use any of the following methods to respond to the view:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.SelectPopupMenuItem(System.Int32)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.CancelPopupMenu"/>
            </description>
            </item>
            </list>
            These members are not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access these members.
            <note>
            The windowless <see cref="T:Awesomium.Core.WebView"/>, does not provide any internal implementation for drop-down (popup) menus.
            If you are using a <see cref="T:Awesomium.Core.WebView"/> instance with your UI application, you will have to handle
            the <see cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/> event yourself. Technology specific Awesomium.NET assemblies,
            provide predefined drop-down (popup) menu controls that you can use with your WPF or Windows Forms application.
            </note>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/> (or any other member), is ignored.
            </note>
            </remarks>
        </member>
        <member name="T:Awesomium.Core.CreateSurfaceEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.CreateSurfaceEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.CreateSurfaceEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.WebCore.Started"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CreateSurfaceEventArgs.Width">
            <summary>
            Indicates the surfaces width.
            </summary>
            <remarks>
            This property reflects the current width of the <see cref="T:Awesomium.Core.IWebView"/>
            instance the <see cref="T:Awesomium.Core.ISurface"/> will be assigned to.
            The created surface should usually be of the same size.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.CreateSurfaceEventArgs.Height">
            <summary>
            Indicates the surfaces height.
            </summary>
            <remarks>
            This property reflects the current height of the <see cref="T:Awesomium.Core.IWebView"/>
            instance the <see cref="T:Awesomium.Core.ISurface"/> will be assigned to.
            The created surface should usually be of the same size.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.CreateSurfaceEventArgs.Surface">
            <summary>
            Gets or sets the <see cref="T:Awesomium.Core.ISurface"/> instance that will
            be responsible for rendering the view's pixel buffer.
            </summary>
            <remarks>
            When <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> is called,
            <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/> reflects the previously assigned 
            <see cref="T:Awesomium.Core.ISurface"/> instance. If your surface is capable of handling resizing, 
            you can keep on using the same <see cref="T:Awesomium.Core.ISurface"/> instance on
            multiple <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> calls.
            <p/>
            When <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> is called for the first
            time, <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/> returns the <see cref="T:Awesomium.Core.ISurface"/> 
            assigned to the view using <see cref="P:Awesomium.Core.IWebView.Surface"/> or, if no <see cref="T:Awesomium.Core.ISurface"/> 
            instance has been previously specified, the default <see cref="T:Awesomium.Core.ISurface"/> assigned
            to the view by Awesomium.NET. This is either a <see cref="T:Awesomium.Core.BitmapSurface"/>
            (for <see cref="T:Awesomium.Core.WebView"/> instances) or a technology specific <see cref="T:Awesomium.Core.ISurface"/>.
            <note>
            If you are using an <see cref="T:Awesomium.Core.ISurface"/> instance capable of handling changes in
            size, you should better use <see cref="P:Awesomium.Core.IWebView.Surface"/> to assign your surface.
            This surface will be used with multiple calls of <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>
            and it should be able to handle changes in size during <see cref="M:Awesomium.Core.ISurface.Initialize(Awesomium.Core.IWebView,System.Int32,System.Int32)"/>.
            In this scenario, you can ignore the <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> event.
            </note>
            </remarks>
            <returns>
            The <see cref="T:Awesomium.Core.ISurface"/> instance assigned to the view in a previous call to
            <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>, or the default <see cref="T:Awesomium.Core.ISurface"/> instance
            if this is the first time <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> is being called.
            </returns>
            <seealso cref="T:Awesomium.Core.ISurface"/>
            <seealso cref="E:Awesomium.Core.IWebView.CreateSurface"/>
            <seealso cref="P:Awesomium.Core.IWebView.Surface"/>
            <seealso cref="M:Awesomium.Core.ISurface.Initialize(Awesomium.Core.IWebView,System.Int32,System.Int32)"/>
        </member>
        <member name="T:Awesomium.Core.CoreShutdownEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.WebCore.ShuttingDown"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.CoreShutdownEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.CoreShutdownEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.WebCore.ShuttingDown"/> event.
            </summary>
        </member>
        <member name="T:Awesomium.Core.CoreStartEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.WebCore.Started"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.CoreStartEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.CoreStartEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.WebCore.Started"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreStartEventArgs.Configuration">
            <summary>
            Gets a <see cref="T:Awesomium.Core.WebConfig"/> instance indicating 
            the configuration settings used to start the <see cref="T:Awesomium.Core.WebCore"/>.
            </summary>
        </member>
        <member name="T:Awesomium.Core.CoreStartingEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.WebCore.Starting"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">
            An <see cref="T:System.ComponentModel.CancelEventArgs"/> that contains the event data.
            <p/>
            <note type="caution">
            Setting <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <c>true</c>,
            will prevent the <see cref="T:Awesomium.Core.WebCore"/> from starting. 
            Use with caution.
            </note>
            </param>
        </member>
        <member name="T:Awesomium.Core.CoreStartingEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.WebCore.Starting"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreStartingEventArgs.Configuration">
            <summary>
            Gets a <see cref="T:Awesomium.Core.WebConfig"/> instance indicating the configuration 
            settings that will be used to start the <see cref="T:Awesomium.Core.WebCore"/>.
            </summary>
            <remarks>
            When <see cref="E:Awesomium.Core.WebCore.Starting"/> is fired, you can still modify the 
            configuration settings. The <see cref="T:Awesomium.Core.WebCore"/> is not initialized yet.
            </remarks>
        </member>
        <member name="T:Awesomium.Core.CreatedViewEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.WebCore.CreatedView"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.CreatedViewEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.CreatedViewEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.WebCore.CreatedView"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CreatedViewEventArgs.NewView">
            <summary>
            Gets the new view created by the <see cref="T:Awesomium.Core.WebCore"/>.
            </summary>
        </member>
        <member name="T:Awesomium.Core.ResponsiveChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.ResponsiveChanged"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.ResponsiveChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.ResponsiveChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.ResponsiveChanged"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.ResponsiveChangedEventArgs.IsResponsive">
            <summary>
            Gets if the <see cref="T:Awesomium.Core.IWebView"/> instance is currently responsive.
            </summary>
        </member>
        <member name="T:Awesomium.Core.ShowCreatedWebViewEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.ShowCreatedWebViewEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.ShowCreatedWebViewEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance">
            <summary>
            Gets the handle to the new view, created by Awesomium.
            </summary>
            <remarks>
            <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> occurs when an <see cref="T:Awesomium.Core.IWebView"/> instance
            creates a new child view (usually the result of <c>window.open</c> or an external link). 
            <p/>
            It is your responsibility to wrap and display this new view in your application.
            <see cref="T:Awesomium.Core.WebView"/> provides a constructor that accepts a previously created web-view instance.
            (see <see cref="M:Awesomium.Core.WebView.#ctor(System.IntPtr)"/>). Similarly, technology
            specific <c>WebControls</c> provide a <c>NativeView</c> property that allows you to
            assign to the controls, a previously created web-view instance 
            (eg, <see cref="P:Awesomium.Windows.Controls.WebControl.NativeView"/>). This property should be
            set before the control loads and creates its own underlying web-view. Usually immediately 
            after instantiating the control or in the designer.
            <note type="caution">
            If you do not intend to wrap the new view, you should set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
            to <c>true</c>, to tell the core to destroy the unused web-view instance. If you fail
            to do this, the native web-view instance will remain alive until the <see cref="T:Awesomium.Core.WebCore"/>
            is shut down. This can result in many processes (<i>awesomium_process</i>) being spawned,
            but never used.
            <p/>
            The <see cref="T:Awesomium.Core.WebCore"/> provides a <see cref="M:Awesomium.Core.WebCore.DestroyUnwrappedViews"/> method.
            This can be useful for destroying such native views that were spawned by Awesomium,
            but were never wrapped.
            </note>
            <note>
            If you are wrapping the child view using a <see cref="T:Awesomium.Core.WebView"/> instance, you should call 
            <see cref="M:Awesomium.Core.IWebView.Resize(System.Int32,System.Int32)"/> on the child view immediately after the <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event, 
            to make it match your container.
            </note>
            </remarks>
            <example>
            <code>
            private void OnShowNewView( object sender, ShowCreatedWebViewEventArgs e )
            {
            	if ( !webView.IsLive )
            		return;
            
            	// Let the new view be destroyed. It is important to set Cancel to true 
            	// if you are not wrapping the new view, to avoid keeping it alive along
            	// with a reference to its parent.
            	e.Cancel = true;
            
            	// Load the url to the existing view.
            	webView.LoadURL( e.TargetURL );
            }
            </code>
            <code lang="VB">
            Private Sub OnShowNewView(ByVal sender As Object, ByVal e As ShowCreatedWebViewEventArgs)
            	If Not webView.IsLive Then Return
            
            	' Let the new view be destroyed. It is important to set Cancel to true 
            	' if you are not wrapping the new view, to avoid keeping it alive along
            	' with a reference to its parent.
            	e.Cancel = True
            
            	' Load the url to the existing view.
            	webView.LoadURL(e.TargetURL)
            End Sub
            </code>
            </example>
        </member>
        <member name="P:Awesomium.Core.ShowCreatedWebViewEventArgs.OpenerURL">
            <summary>
            Gets the URL of the page that is opening the new <c>window</c>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL">
            <summary>
            Gets the target URL that should be loaded in the new view.
            </summary>
        </member>
        <member name="P:Awesomium.Core.ShowCreatedWebViewEventArgs.InitialPos">
            <summary>
            Gets the initial position indicated by the opener, for the new view.
            </summary>
        </member>
        <member name="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup">
            <summary>
            Gets if this must be a popup <c>window</c>.
            </summary>
        </member>
        <member name="T:Awesomium.Core.CrashedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.Crashed"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.CrashedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.CrashedEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.Crashed"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CrashedEventArgs.Status">
            <summary>
            Indicates the termination status.
            </summary>
        </member>
        <member name="T:Awesomium.Core.LoadingFrameFailedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.LoadingFrameFailed"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.LoadingFrameFailedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.LoadingFrameFailedEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.LoadingFrameFailed"/> event.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.LoadingFrameFailed"/>
        </member>
        <member name="T:Awesomium.Core.FrameEventArgs">
            <summary>
            Provides data for events that provide a frame id.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.LoadingFrameComplete"/>
            <seealso cref="E:Awesomium.Core.IWebView.LoadingFrameFailed"/>
            <seealso cref="E:Awesomium.Core.IWebView.LoadingFrame"/>
        </member>
        <member name="P:Awesomium.Core.FrameEventArgs.FrameID">
            <summary>
            Gets the frame's ID.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.LoadingFrameComplete"/>
            <seealso cref="E:Awesomium.Core.IWebView.LoadingFrameFailed"/>
            <seealso cref="E:Awesomium.Core.IWebView.LoadingFrame"/>
        </member>
        <member name="P:Awesomium.Core.FrameEventArgs.IsMainFrame">
            <summary>
            Indicates if this is the main frame of the page.
            </summary>
            <remarks>
            When a page is loaded, the main frame usually finishes loading last.
            This is helpful when you want to know when a page is fully loaded.
            <note>
            While a specific page load may appear as complete, asynchronous
            requests (AJAX etc.) may still be in progress. The fact that the main frame
            of a page has loaded, does not guarantee that the visual content of the
            page is fully rendered.
            </note>
            </remarks>
            <seealso cref="E:Awesomium.Core.IWebView.LoadingFrameComplete"/>
            <seealso cref="E:Awesomium.Core.IWebView.LoadingFrameFailed"/>
            <seealso cref="E:Awesomium.Core.IWebView.LoadingFrame"/>
        </member>
        <member name="P:Awesomium.Core.LoadingFrameFailedEventArgs.ErrorCode">
            <summary>
            Gets the error code that occurred when loading the frame.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.LoadingFrameFailed"/>
        </member>
        <member name="P:Awesomium.Core.LoadingFrameFailedEventArgs.ErrorDescription">
            <summary>
            Gets additional information for the error that occurred.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.LoadingFrameFailed"/>
        </member>
        <member name="T:Awesomium.Core.LoadingFrameEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.LoadingFrame"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.LoadingFrameEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.LoadingFrameEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.LoadingFrame"/> event.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.LoadingFrame"/>
        </member>
        <member name="P:Awesomium.Core.LoadingFrameEventArgs.IsErrorPage">
            <summary>
            Indicates if the page being loaded, is an error page.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.LoadingFrame"/>
        </member>
        <member name="T:Awesomium.Core.CursorChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.CursorChanged"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.CursorChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.CursorChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.CursorChanged"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CursorChangedEventArgs.CursorType">
            <summary>
            Gets the current <see cref="P:Awesomium.Core.CursorChangedEventArgs.CursorType"/> indicated by the view.
            </summary>
        </member>
        <member name="T:Awesomium.Core.FrameEventHandler">
            <summary>
            Represents the method that will handle events that provide a frame id.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.FrameEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.SurfaceInitializedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.Surface.Initialized"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.SurfaceInitializedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.SurfaceInitializedEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.Surface.Initialized"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.SurfaceInitializedEventArgs.View">
            <summary>
            Gets the view the <see cref="T:Awesomium.Core.ISurface"/> instance has been assigned too.
            </summary>
            <remarks>
            A surface can only be used by a single view at a time. It can however be reused as
            many times as needed.
            <note type="caution">
            <see cref="T:Awesomium.Core.Surface"/> instances assigned to views that are being destroyed, 
            are automatically disposed to prevent memory leaks. You cannot reuse these surfaces.
            </note>
            </remarks>
        </member>
        <member name="T:Awesomium.Core.SurfaceUpdatedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.Surface.Updated"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.SurfaceUpdatedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.SurfaceUpdatedEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.Surface.Updated"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.SurfaceUpdatedEventArgs.DirtyRegion">
            <summary>
            Indicates the region of the surface that has been altered.
            </summary>
            <remarks>
            If you are rendering your <see cref="T:Awesomium.Core.ISurface"/> instance on
            a visual surface, this property indicates the region of your
            visual surface that should be invalidated. In certain scenarios,
            this can significantly improve performance.
            </remarks>
        </member>
        <member name="T:Awesomium.Core.ToolTipChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.ToolTipChanged"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.ToolTipChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.ToolTipChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.ToolTipChanged"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.ToolTipChangedEventArgs.ToolTip">
            <summary>
            Gets the current tooltip reported by a <see cref="T:Awesomium.Core.IWebView"/>,
            for the web-page element currently under the cursor, or an empty string
            if a previous tooltip is no longer valid.
            </summary>
            <remarks>
            An empty string indicates that the user has moved the cursor outside
            an area or element that had a tooltip. Any previously displayed tooltips,
            should be closed when a <see cref="E:Awesomium.Core.IWebView.ToolTipChanged"/> event with
            an empty <see cref="P:Awesomium.Core.ToolTipChangedEventArgs.ToolTip"/> is fired.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.ToolTipChangedEventArgs.Handled">
            <summary>
            Gets or sets if this event is handled by an application.
            If set to <c>false</c> (default), a <c>WebControl</c>
            may display its predefined tooltip.
            </summary>
        </member>
        <member name="T:Awesomium.Core.TitleChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.TitleChanged"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.TitleChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.TitleChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.TitleChanged"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.TitleChangedEventArgs.Title">
            <summary>
            Gets the title of the currently loaded page.
            </summary>
        </member>
        <member name="T:Awesomium.Core.UrlEventHandler">
            <summary>
            Represents the method that will handle events that provide a URL.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.UrlEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.WebSelectionChangedHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.SelectionChanged"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.WebSelectionEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.WebSelectionEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.SelectionChanged"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebSelectionEventArgs.Selection">
            <summary>
            Gets the updated selection.
            </summary>
        </member>
        <member name="T:Awesomium.Core.EventHandling">
            <summary>
            Indicates the way an event will be handled by an application.
            </summary>
        </member>
        <member name="F:Awesomium.Core.EventHandling.Default">
            <summary>
            The event will not be handled by the application.
            Default handling will be applied.
            </summary>
        </member>
        <member name="F:Awesomium.Core.EventHandling.Modal">
            <summary>
            The event will be handled modally. This means that a response will
            be immediately provided before the event handler exits, using
            members of the <see cref="T:System.EventArgs"/> provided.
            </summary>
        </member>
        <member name="F:Awesomium.Core.EventHandling.NotModal">
            <summary>
            The event will be handled non-modally. This means that the
            event handler will exit and a response will be provided later,
            using available API.
            </summary>
        </member>
        <member name="T:Awesomium.Core.FocusedElementType">
            <summary>
            Indicates the type of element focused in the page loaded in an <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
            <remarks>
            You should generally forward keyboard events to the active <see cref="T:Awesomium.Core.IWebView"/> instance,
            whenever one of the following element types are focused:
            <list type="bullet">
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Input"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.TextInput"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.EditableContent"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Plugin"/>
            </description>
            </item>
            </list>
            This is done automatically in technology specific <c>WebControl</c>
            instances.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.FocusedElementType.None">
            <summary>
            Nothing is focused.
            </summary>
        </member>
        <member name="F:Awesomium.Core.FocusedElementType.Text">
            <summary>
            A text-node is focused.
            </summary>
        </member>
        <member name="F:Awesomium.Core.FocusedElementType.Link">
            <summary>
            A link is focused.
            </summary>
        </member>
        <member name="F:Awesomium.Core.FocusedElementType.Input">
            <summary>
            An input element is focused.
            </summary>
        </member>
        <member name="F:Awesomium.Core.FocusedElementType.TextInput">
            <summary>
            A text-input element is focused.
            </summary>
        </member>
        <member name="F:Awesomium.Core.FocusedElementType.EditableContent">
            <summary>
            Some editable content is focused.
            </summary>
        </member>
        <member name="F:Awesomium.Core.FocusedElementType.Plugin">
            <summary>
            A plugin (eg, Flash) is focused.
            </summary>
        </member>
        <member name="F:Awesomium.Core.FocusedElementType.Other">
            <summary>
            Some other element is focused.
            </summary>
        </member>
        <member name="T:Awesomium.Core.IWebViewIMEComposition">
            <summary>
            This service allows passing text input via IME and be notified of any
            IME-related events.
            </summary>
            <remarks>
            You can obtain this service by calling <see cref="M:System.IServiceProvider.GetService(System.Type)"/>
            on a <see cref="T:Awesomium.Core.IWebView"/> instance of type <see cref="F:Awesomium.Core.WebViewType.Offscreen"/>.
            </remarks>
            <seealso cref="M:Awesomium.Core.WebView.GetService(System.Type)"/>
        </member>
        <member name="M:Awesomium.Core.IWebViewIMEComposition.ActivateIME(System.Boolean)">
            <summary>
            Lets the <see cref="T:Awesomium.Core.IWebView"/> know you will be passing
            text input via IME and will need to be notified of any
            IME-related events (caret position, user unfocusing textbox, etc.)
            </summary>
            <param name="activate">
            Specifies if IME should be activated.
            </param>
        </member>
        <member name="M:Awesomium.Core.IWebViewIMEComposition.SetIMEComposition(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates the current IME text composition.
            </summary>
            <param name="inputString">The string generated by your IME.</param>
            <param name="cursorPos">The current cursor position in your IME composition.</param>
            <param name="targetStart">The position of the beginning of the selection.</param>
            <param name="targetEnd">The position of the end of the selection.</param>
        </member>
        <member name="M:Awesomium.Core.IWebViewIMEComposition.ConfirmIMEComposition(System.String)">
            <summary>
            Confirms a current IME text composition.
            </summary>
            <param name="inputString">The string generated by your IME.</param>
        </member>
        <member name="M:Awesomium.Core.IWebViewIMEComposition.CancelIMEComposition">
            <summary>
            Cancels a current IME text composition.
            </summary>
        </member>
        <member name="E:Awesomium.Core.IWebViewIMEComposition.Updated">
            <summary>
            Occurs whenever the user does something that may change
            the position, visibility, or type of the IME Widget. This event is only
            active when IME is active (see <see cref="M:Awesomium.Core.IWebViewIMEComposition.ActivateIME(System.Boolean)"/>).
            </summary>
        </member>
        <member name="E:Awesomium.Core.IWebViewIMEComposition.RangeChanged">
            <summary>
            Occurs when the page changes the displayed range
            of the IME composition.
            </summary>
        </member>
        <member name="E:Awesomium.Core.IWebViewIMEComposition.Cancel">
            <summary>
            Occurs when the page cancels the IME composition.
            </summary>
        </member>
        <member name="P:Awesomium.Core.IWebViewIMEComposition.Range">
            <summary>
            Gets the displayed range of the IME composition.
            </summary>
        </member>
        <member name="T:Awesomium.Core.IWebView">
            <summary>
            Represents a native Awesomium web-view instance. All managed
            web-view wrappers, implement this interface.
            </summary>
            <remarks>
            <see cref="T:Awesomium.Core.IWebView"/> exposes the full native web-view API,
            as well as .NET specific API added to web-views. It is provided for advanced
            coding and it allows you to override much of the .NET internal logic 
            and call on the native web-view directly.
            <note>
            Note that invoking members of the <see cref="T:Awesomium.Core.IWebView"/> interface, 
            will still not completely bypass .NET code. However, the <see cref="T:Awesomium.Core.IWebView"/>
            interface provides a <see cref="P:Awesomium.Core.IWebView.Instance"/> property that allows
            you to p/invoke directly to the Awesomium native library (see <see cref="F:Awesomium.Core.WebCore.DLLName"/>).
            This can be used for even more advanced scenarios, when needed.
            </note>
            <note type="caution">
            <b>Awesomium.NET</b> does not officially support calling to the Awesomium
            library directly (either using p/invoke or even through the <see cref="T:Awesomium.Core.IWebView"/>
            interface). The Awesomium team will provide no support for any issues that may occur,
            from using these features.
            </note>
            </remarks>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Awesomium.Core.IWebView.GoToHome">
            <summary>
            Navigates to the Home URL as defined in <see cref="P:Awesomium.Core.WebCore.HomeURL"/>.
            </summary>
            <returns>
            <c>true</c> if the command was successfully sent. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.IWebView.CopyHTML">
            <summary>
            Copies the HTML content currently selected in this view, to the system clipboard.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view.
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.CopyLinkAddress">
            <summary>
            Copies the target URL of the link currently under the cursor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view.
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.LoadURL(System.Uri)">
            <summary>
            Loads a URL into the view asynchronously.
            </summary>
            <param name="url">
            The URL to load.
            </param>
            <returns>
            <c>true</c> if the command was successfully sent. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.IWebView.LoadHTML(System.String)">
            <summary>
            Loads a string of HTML into the view asynchronously.
            </summary>
            <param name="html">
            The HTML string (ASCII) to load.
            </param>
            <returns>
            <c>true</c> if the command was successfully sent. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.IWebView.GoBack">
            <summary>
            Navigates one step backwards in history.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.GoForward">
            <summary>
            Navigates one step forward in history.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.GoToHistoryOffset(System.Int32)">
            <summary>
            Navigates back/forward in history via a relative offset.
            </summary>
            <param name="offset">
            The relative offset in history to navigate to. (Can be negative)
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.Stop">
            <summary>
            Stops the current navigation.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.Reload(System.Boolean)">
            <summary>
            Reloads the current page.
            </summary>
            <param name="ignoreCache">
            Indicates if cached resources should be reloaded as well.
            </param>
            <returns>
            <c>true</c> if the command was successfully sent. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.IWebView.CanGoBack">
            <summary>
            Gets if we can go back in history.
            </summary>
            <returns>
            <c>true</c> if the view can go back in history. <c>false</c> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.CanGoForward">
            <summary>
            Gets if we can go forward in history.
            </summary>
            <returns>
            <c>true</c> if the view can go forward in history. <c>false</c> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes the view to certain pixel dimensions.
            </summary>
            <param name="width">
            The new width in pixels.
            </param>
            <param name="height">
            The new height in pixels.
            </param>
            <remarks>
            Resizing the view will trigger the creation of a new
            surface, by calling <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
            <seealso cref="P:Awesomium.Core.IWebView.Width"/>
            <seealso cref="P:Awesomium.Core.IWebView.Height"/>
            <seealso cref="E:Awesomium.Core.IWebView.CreateSurface"/>
        </member>
        <member name="M:Awesomium.Core.IWebView.FocusView">
            <summary>
            Gives the view the appearance of input focus.
            </summary>
            <remarks>
            You should call this whenever the view gains focus.
            <note>
            If you fail to see a blinking caret when you select a text-box,
            it's usually because you forgot to call this method.
            </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
            <seealso cref="E:Awesomium.Core.IWebView.FocusChanged"/>
            <seealso cref="P:Awesomium.Core.IWebView.FocusedElementType"/>
        </member>
        <member name="M:Awesomium.Core.IWebView.UnfocusView">
            <summary>
            Remove the appearance of input focus. 
            </summary>
            <remarks>
            You should call this whenever the view loses focus.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
            <seealso cref="E:Awesomium.Core.IWebView.FocusChanged"/>
            <seealso cref="P:Awesomium.Core.IWebView.FocusedElementType"/>
        </member>
        <member name="M:Awesomium.Core.IWebView.InjectMouseMove(System.Int32,System.Int32)">
            <summary>
            Passes a mouse-move event to the view.
            </summary>
            <param name="x">
            The x-coordinate of the current mouse position.
            </param>
            <param name="y">
            The y-coordinate of the current mouse position.
            </param>
            <remarks>
            Coordinates should be localized to the view 
            and should be defined in pixels.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.InjectMouseDown(Awesomium.Core.MouseButton)">
            <summary>
            Passes a mouse-down event to the view, using the last mouse-move coordinates.
            </summary>
            <param name="button">
            Specifies the button that was pressed.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.InjectMouseUp(Awesomium.Core.MouseButton)">
            <summary>
            Passes a mouse-up event to the view, using the last mouse-move coordinates.
            </summary>
            <param name="button">
            Specifies the button that was pressed.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.InjectMouseWheel(System.Int32,System.Int32)">
            <summary>
            Passes a mouse-wheel event to the view.
            </summary>
            <param name="scrollVert">
            The amount of pixels to scroll vertically by.
            </param>
            <param name="scrollHorz">
            The amount of pixels to scroll horizontally by.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.InjectKeyboardEvent(Awesomium.Core.WebKeyboardEvent)">
            <summary>
            Passes a keyboard event to the view.
            </summary>
            <param name="keyEvent">
            An <see cref="T:Awesomium.Core.WebKeyboardEvent"/> instance representing the keyboard event to pass.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.GetLastError">
            <summary>
            Check if an error occurred during the last synchronous Javascript interoperation call.
            </summary>
            <returns>
            An <see cref="T:Awesomium.Core.Error"/> value indicating the error that may have occurred
            during the last synchronous Javascript interoperation API call.
            </returns>
            <seealso cref="M:Awesomium.Core.IWebView.CreateGlobalJavascriptObject(System.String)"/>
            <seealso cref="M:Awesomium.Core.IWebView.ExecuteJavascriptWithResult(System.String)"/>
        </member>
        <member name="M:Awesomium.Core.IWebView.CreateGlobalJavascriptObject(System.String)">
            <summary>
            Create a global JavaScript object that will persist between all loaded pages, 
            for the lifetime of this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
            <param name="name">
            The name of the object as it will appear in JavaScript.
            </param>
            <returns>
            If this call succeeds, the returned <see cref="T:Awesomium.Core.JSValue"/> will be of type 'Object' 
            (see <see cref="P:Awesomium.Core.JSValue.IsObject"/>). You can check the reason why the call failed by calling
            <see cref="M:Awesomium.Core.IWebView.GetLastError"/> after this method.
            </returns>
            <remarks>
            Global Objects can only contain the following JavaScript types as 
            properties:
            <list type="bullet">
            <item>
            <description>
            <c>Number</c>
            </description>
            </item>
            <item>
            <description>
            <c>String</c>
            </description>
            </item>
            <item>
            <description>
            <c>Array</c>
            </description>
            </item>
            <item>
            <description>
            <c>Null</c>
            </description>
            </item>
            <item>
            <description>
            <c>Other Global Objects</c>
            </description>
            </item>
            <item>
            <description>
            <c>Undefined</c>
            </description>
            </item>
            </list>
            <p/>
            Global Objects will retain any custom methods that are registered
            (see <see cref="M:Awesomium.Core.JSObject.SetCustomMethod(System.String,System.Boolean)"/>).
            <note>
            To create a child global-object, you should specify the full name with dot-notation for example:
            <c>parentObject.childObject</c>.
            <p/>
            The parent object should exist before attempting to make any children.
            </note>
            <note type="caution">
            You can only create objects on pages with an active DOM. (You should
            wait until the first <see cref="E:Awesomium.Core.IWebView.DocumentReady"/> event or the <see cref="E:Awesomium.Core.IWebView.ProcessCreated"/> event,
            before creating your objects).
            </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.ExecuteJavascript(System.String)">
            <summary>
            Executes some JavaScript asynchronously in the main frame of the page.
            </summary>
            <param name="script">
            The string of JavaScript to execute.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.ExecuteJavascript(System.String,System.String)">
            <summary>
            Executes some JavaScript asynchronously on the page.
            </summary>
            <param name="script">
            The string of JavaScript to execute.
            </param>
            <param name="frameXpath">
            The xpath of the frame to execute within; leave
            this blank to execute in the main frame.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.ExecuteJavascriptWithResult(System.String)">
            <summary>
            Executes some JavaScript synchronously in the main frame of the page, and returns a result.
            </summary>
            <param name="script">
            The string of JavaScript to execute.
            </param>
            <returns>
            Returns the result (if any). Any <see cref="T:Awesomium.Core.JSObject"/> returned from this
            method will be a remote proxy for an object contained within the view's process.
            If this call fails, the returned <see cref="T:Awesomium.Core.JSValue"/> will have an <c>Undefined</c> type.
            (see <see cref="P:Awesomium.Core.JSValue.IsUndefined"/>). You can check <see cref="M:Awesomium.Core.IWebView.GetLastError"/> for more
            information about the failure.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.ExecuteJavascriptWithResult(System.String,System.String)">
            <summary>
            Executes some JavaScript synchronously on the page, and returns a result.
            </summary>
            <param name="script">
            The string of JavaScript to execute.
            </param>
            <param name="frameXPath">
            The xpath of the frame to execute within; leave
            this blank to execute in the main frame.
            </param>
            <returns>
            Returns the result (if any). Any <see cref="T:Awesomium.Core.JSObject"/> returned from this
            method will be a remote proxy for an object contained within the view's process.
            If this call fails, the returned <see cref="T:Awesomium.Core.JSValue"/> will have an <c>Undefined</c> type.
            (see <see cref="P:Awesomium.Core.JSValue.IsUndefined"/>). You can check <see cref="M:Awesomium.Core.IWebView.GetLastError"/> for more
            information about the failure.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.SelectPopupMenuItem(System.Int32)">
            <summary>
            This method should be called as the result of a user selecting an item
            in a drop-down (popup) menu, when you handle <see cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/>
            yourself (see <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/>).
            </summary>
            <param name="itemIndex">
            The index of the item selected. Item index starts
            at <c>0</c>. You can pass <c>-1</c> as a shortcut for
            <see cref="M:Awesomium.Core.IWebView.CancelPopupMenu"/>.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
            <seealso cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/>
            <seealso cref="T:Awesomium.Core.PopupMenuEventArgs"/>
        </member>
        <member name="M:Awesomium.Core.IWebView.CancelPopupMenu">
            <summary>
            This method should be called as the result of a user canceling a 
            drop-down (popup) menu, when you handle <see cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/>
            yourself (see <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/>).
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
            <seealso cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/>
            <seealso cref="T:Awesomium.Core.PopupMenuEventArgs"/>
        </member>
        <member name="M:Awesomium.Core.IWebView.Undo">
            <summary>
            Undo the last 'edit' operation. (Similar to CTRL+Z).
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.Redo">
            <summary>
            Redo the last 'edit' operation. (Similar to CTRL+Y).
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.Cut">
            <summary>
            Performs a 'cut' operation using the system clipboard.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.Copy">
            <summary>
            Performs a 'copy' operation using the system clipboard.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.CopyImageAt(System.Int32,System.Int32)">
            <summary>
            Attempt to copy an image on the page, to the system clipboard.
            This is meant to be used with <see cref="E:Awesomium.Core.IWebView.ShowContextMenu"/>.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <remarks>
            All coordinates should be localized to the view. All values are in
            pixels, the origin (0,0) begins at the top-left corner of the view,
            positive <paramref name="y"/> values are "down" and positive <paramref name="x"/> 
            values are "right".
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.Paste">
            <summary>
            Performs a 'paste' operation using the system clipboard.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.PasteAndMatchStyle">
            <summary>
            Performs a 'paste' operation using the system clipboard while attempting
            to preserve any styles of the original text.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.SelectAll">
            <summary>
            Performs a 'select all' operation.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)">
            <summary>
            Prints this <see cref="T:Awesomium.Core.IWebView"/> instance to a PDF file, asynchronously.
            You should generally use this method in response to a <see cref="E:Awesomium.Core.IWebView.PrintRequest"/>
            event.
            </summary>
            <param name="outputDirectory">
            A writeable directory to write the file(s) to.
            </param>
            <param name="config">
            The configuration settings to use.
            </param>
            <returns>
            Returns a unique request ID that you can use later to identify
            this specific request (see <see cref="E:Awesomium.Core.IWebView.PrintFailed"/> and <see cref="E:Awesomium.Core.IWebView.PrintComplete"/>). 
            May return <c>0</c> if this method fails prematurely.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
            <seealso cref="T:Awesomium.Core.PrintConfig"/>
            <seealso cref="E:Awesomium.Core.IWebView.PrintRequest"/>
            <seealso cref="E:Awesomium.Core.IWebView.PrintFailed"/>
            <seealso cref="E:Awesomium.Core.IWebView.PrintComplete"/>
        </member>
        <member name="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)">
            <summary>
            This method should be called as the result of a user selecting files in
            a file-chooser dialog, when you are handling the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/>
            event with <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (see <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/>).
            </summary>
            <param name="files">
            An array of file-paths that the user selected. If the user canceled the dialog, 
            you should pass an empty array.
            </param>
            <param name="shouldWriteFiles">
            Whether or not this was a Save File dialog (see <see cref="P:Awesomium.Core.FileDialogEventArgs.Mode"/>).
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
            <seealso cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/>
            <seealso cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/>
        </member>
        <member name="M:Awesomium.Core.IWebView.Login(System.Int32,System.String,System.String)">
            <summary>
            This method should be called as the result of a user supplying
            their credentials in a login dialog, when you are handling the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/>
            event with <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (see <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/>).
            </summary>
            <param name="requestId">
            The id of the request that was handled (see 
            <see cref="P:Awesomium.Core.WebLoginDialogInfo.RequestID"/>).
            </param>
            <param name="username">
            The username supplied.
            </param>
            <param name="password">
            The password supplied.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
            <seealso cref="E:Awesomium.Core.IWebView.LoginRequest"/>
            <seealso cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/>
        </member>
        <member name="M:Awesomium.Core.IWebView.CancelLogin(System.Int32)">
            <summary>
            This method should be called as the result of a user canceling
            a login dialog, when you are handling the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/>
            event with <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (see <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/>).
            </summary>
            <param name="requestId">
            The id of the request that was handled (see <see cref="P:Awesomium.Core.WebLoginDialogInfo.RequestID"/>).
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
            <seealso cref="E:Awesomium.Core.IWebView.LoginRequest"/>
            <seealso cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/>
        </member>
        <member name="M:Awesomium.Core.IWebView.DidChooseDownloadPath(System.Int32,System.String)">
            <summary>
            This method should be called as the result of a user selecting
            a path to download a file, when you are handling the <see cref="E:Awesomium.Core.IWebView.Download"/>
            event with <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (see <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/>). 
            The file will only begin downloading after this call is made.
            </summary>
            <param name="downloadId">The unique id of the download request.</param>
            <param name="path">The full path (including filename) to write the download to.</param>
            <seealso cref="E:Awesomium.Core.IWebView.LoginRequest"/>
            <seealso cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/>
        </member>
        <member name="M:Awesomium.Core.IWebView.CancelDownload(System.Int32)">
            <summary>
            This method should be called as the result of a user canceling a
            download, when you are handling the <see cref="E:Awesomium.Core.IWebView.Download"/>
            event with <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (see <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/>). 
            </summary>
            <param name="downloadId">The unique id of the download request.</param>
            <seealso cref="E:Awesomium.Core.IWebView.LoginRequest"/>
            <seealso cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/>
        </member>
        <member name="E:Awesomium.Core.IWebView.BeginNavigation">
            <summary>
            Occurs when a view begins navigating to a new URL.
            </summary>
        </member>
        <member name="E:Awesomium.Core.IWebView.CreateSurface">
            <summary>
            Occurs when an <see cref="T:Awesomium.Core.ISurface"/> is requested by the view. Usually, 
            every time the size of the view changes. You should return your own 
            <see cref="T:Awesomium.Core.ISurface"/> implementation here.
            </summary>
            <remarks>
            When <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> is called,
            <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/> reflects the previously assigned 
            <see cref="T:Awesomium.Core.ISurface"/> instance. If your surface is capable of handling resizing, 
            you can keep on using the same <see cref="T:Awesomium.Core.ISurface"/> instance on
            multiple <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> calls.
            <p/>
            When <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> is called for the first
            time, <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/> returns the <see cref="T:Awesomium.Core.ISurface"/> 
            assigned to the view using <see cref="P:Awesomium.Core.IWebView.Surface"/> or, if no <see cref="T:Awesomium.Core.ISurface"/> 
            instance has been previously specified, the default <see cref="T:Awesomium.Core.ISurface"/> assigned
            to the view by Awesomium.NET. This is either a <see cref="T:Awesomium.Core.BitmapSurface"/>
            (for <see cref="T:Awesomium.Core.WebView"/> instances) or a technology specific <see cref="T:Awesomium.Core.ISurface"/>.
            <note>
            If you are using an <see cref="T:Awesomium.Core.ISurface"/> instance capable of handling changes in
            size, you should better use <see cref="P:Awesomium.Core.IWebView.Surface"/> to assign your surface.
            This surface will be used with multiple calls of <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>
            and it should be able to handle changes in size during <see cref="M:Awesomium.Core.ISurface.Initialize(Awesomium.Core.IWebView,System.Int32,System.Int32)"/>.
            In this scenario, you can ignore the <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> event.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Core.IWebView.SelectionChanged">
            <summary>
            Occurs when the selection in the current page, changes.
            </summary>
        </member>
        <member name="E:Awesomium.Core.IWebView.ProcessCreated">
            <summary>
            Occurs when the child rendering process for this view, has been spawned.
            </summary>
            <remarks>
            This event also indicates the moment when global Javascript objects can be created.
            (See: <see cref="M:Awesomium.Core.IWebView.CreateGlobalJavascriptObject(System.String)"/>)
            </remarks>
        </member>
        <member name="E:Awesomium.Core.IWebView.TitleChanged">
            <summary>
            Occurs when the current page title has changed.
            </summary>
        </member>
        <member name="E:Awesomium.Core.IWebView.AddressChanged">
            <summary>
            Occurs when the page URL has changed.
            </summary>
            <seealso cref="P:Awesomium.Core.IWebView.Source"/>
        </member>
        <member name="E:Awesomium.Core.IWebView.ToolTipChanged">
            <summary>
            Occurs when the tooltip text has changed. You
            should hide the tooltip when the text is empty.
            </summary>
            <remarks>
            Technology specific <c>WebControls</c>, present their own tooltip.
            Set <see cref="P:Awesomium.Core.ToolTipChangedEventArgs.Handled"/> to <c>true</c>,
            to prevent a <c>WebControl</c> from displaying its predefined tooltip.
            </remarks>
        </member>
        <member name="E:Awesomium.Core.IWebView.TargetURLChanged">
            <summary>
            Occurs when the target URL has changed. This
            is usually the result of hovering over a link on a page.
            </summary>
        </member>
        <member name="E:Awesomium.Core.IWebView.CursorChanged">
            <summary>
            Occurs when the cursor has changed. This is
            is usually the result of hovering over different content.
            </summary>
            <remarks>
            You can set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
            to <c>true</c>, to prevent a technology specific <c>WebControl</c>
            from changing the visible cursor.
            </remarks>
        </member>
        <member name="E:Awesomium.Core.IWebView.FocusChanged">
            <summary>
            Occurs when the focused element changes on the page.
            This is usually the result of text-box being focused or some other
            user-interaction event.
            </summary>
            <remarks>
            You should generally forward keyboard events to the active <see cref="T:Awesomium.Core.IWebView"/> instance,
            whenever one of the following element types are focused:
            <list type="bullet">
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Input"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.TextInput"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.EditableContent"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Plugin"/>
            </description>
            </item>
            </list>
            This is done automatically in technology specific <c>WebControl</c>
            instances.
            </remarks>
            <seealso cref="P:Awesomium.Core.IWebView.FocusedElementType"/>
        </member>
        <member name="E:Awesomium.Core.IWebView.ShowCreatedWebView">
            <summary>
            Occurs when an <see cref="T:Awesomium.Core.IWebView"/> creates a new child web-view instance
            (usually the result of <c>window.open</c> or an external link). It
            is your responsibility to display this child web-view in your
            application.
            </summary>
            <remarks>
            <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> occurs when an <see cref="T:Awesomium.Core.IWebView"/> instance
            creates a new child view (usually the result of <c>window.open</c> or an external link). 
            <p/>
            It is your responsibility to wrap and display this new view in your application.
            <see cref="T:Awesomium.Core.WebView"/> provides a constructor that accepts a previously created web-view instance.
            (see <see cref="M:Awesomium.Core.WebView.#ctor(System.IntPtr)"/>). Similarly, technology
            specific <c>WebControls</c> provide a <c>NativeView</c> property that allows you to
            assign to the controls, a previously created web-view instance 
            (eg, <see cref="P:Awesomium.Windows.Controls.WebControl.NativeView"/>). This property should be
            set before the control loads and creates its own underlying web-view. Usually immediately 
            after instantiating the control or in the designer.
            <note type="caution">
            If you do not intend to wrap the new view, you should set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
            to <c>true</c>, to tell the core to destroy the unused web-view instance. If you fail
            to do this, the native web-view instance will remain alive until the <see cref="T:Awesomium.Core.WebCore"/>
            is shut down. This can result in many processes (<i>awesomium_process</i>) being spawned,
            but never used.
            <p/>
            The <see cref="T:Awesomium.Core.WebCore"/> provides a <see cref="M:Awesomium.Core.WebCore.DestroyUnwrappedViews"/> method.
            This can be useful for destroying such native views that were spawned by Awesomium,
            but were never wrapped.
            </note>
            <note>
            If you are wrapping the child view using a <see cref="T:Awesomium.Core.WebView"/> instance, you should call 
            <see cref="M:Awesomium.Core.IWebView.Resize(System.Int32,System.Int32)"/> on the child view immediately after the <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event, 
            to make it match your container.
            </note>
            </remarks>
            <seealso cref="T:Awesomium.Core.ShowCreatedWebViewEventArgs"/>
        </member>
        <member name="E:Awesomium.Core.IWebView.DocumentReady">
            <summary>
            Occurs when the DOM has finished parsing and the
            <c>window</c> object is available for JavaScript execution.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.ProcessCreated"/>
        </member>
        <member name="E:Awesomium.Core.IWebView.LoadingFrame">
            <summary>
            Occurs when the page begins loading a frame.
            </summary>
        </member>
        <member name="E:Awesomium.Core.IWebView.LoadingFrameFailed">
            <summary>
            Occurs when a frame fails to load. See <see cref="P:Awesomium.Core.LoadingFrameFailedEventArgs.ErrorDescription"/>
            for additional information.
            </summary>
        </member>
        <member name="E:Awesomium.Core.IWebView.LoadingFrameComplete">
            <summary>
            Occurs when the page finishes loading a frame.
            </summary>
            <remarks>
            The main frame always finishes loading last for a given page load.
            </remarks>
        </member>
        <member name="E:Awesomium.Core.IWebView.SelectLocalFiles">
            <summary>
            Occurs when the page requests to display a file chooser
            dialog. This is usually the result of a user clicking on an HTML
            input element with <c>type='file'</c>.
            </summary>
            <remarks>
            The table below presents the way the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> event is handled, 
            when <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
            If <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            the event is immediately canceled.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            controls will display their predefined dialog.
            </description>
            </item>
            </list>
            Applications can handle the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> and <see cref="E:Awesomium.Core.IWebView.Download"/> events either
            modally or non-modally. Only modal handling is officially supported by Awesomium.NET.
            <p/>
            The table below shows the methods of handling the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> and
            <see cref="E:Awesomium.Core.IWebView.Download"/> events:
            <list type="table">
            <listheader>
            <term>
            Setting
            </term>
            <description>
            Handling
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.Modal"/>
            </term>
            <description>
            Developers should provide a response through the <see cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFiles"/> or 
            <see cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFile"/> property, before the event handler exits.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (Not officially supported by Awesomium.NET)
            </term>
            <description>
            No response will be provided for the request. Developers should later provide
            a response themselves using either:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/> for <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.DidChooseDownloadPath(System.Int32,System.String)"/> or <see cref="M:Awesomium.Core.IWebView.CancelDownload(System.Int32)"/> 
            for <see cref="E:Awesomium.Core.IWebView.Download"/>
            </description>
            </item>
            </list>
            <note type="caution">
            This technique is not officially supported by Awesomium.NET. Therefore, the member
            above is not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access this member.
            </note>
            <note type="caution">
            For <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/>, if you set <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> to <see cref="F:Awesomium.Core.EventHandling.NotModal"/>, 
            you should make sure that you always call <see cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/> providing a response to the event.
            No new <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> events will occur, until a response has been provided for the last one.
            </note>
            </description>
            </item>
            </list>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> (or any other member), is ignored.
            </note>
            </remarks>
            <seealso cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/>
        </member>
        <member name="E:Awesomium.Core.IWebView.LoginRequest">
            <summary>
            Occurs when the page needs authentication from the user (for
            example, Basic HTTP Auth, NTLM Auth, etc.).
            </summary>
            <remarks>
            The table below presents the way the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event is handled, 
            when <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
            If <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            the event is immediately canceled.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            controls will display their predefined UI.
            </description>
            </item>
            </list>
            Applications can handle the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event either
            modally or non-modally. Only modal handling is officially supported by Awesomium.NET.
            <p/>
            The table below shows the methods of handling the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event:
            <list type="table">
            <listheader>
            <term>
            Setting
            </term>
            <description>
            Handling
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.Modal"/>
            </term>
            <description>
            Developers should provide a response through the <see cref="P:Awesomium.Core.LoginRequestEventArgs.Username"/> and
            <see cref="P:Awesomium.Core.LoginRequestEventArgs.Password"/> properties, before the event handler exits.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (Not officially supported by Awesomium.NET)
            </term>
            <description>
            No response will be provided for the request. Developers should later provide
            a response themselves using any of the following methods:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.Login(System.Int32,System.String,System.String)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.CancelLogin(System.Int32)"/>
            </description>
            </item>
            </list>
            <note type="caution">
            This technique is not officially supported by Awesomium.NET. Therefore, the members
            above are not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access these members.
            </note>
            </description>
            </item>
            </list>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> (or any other member), is ignored.
            </note>
            </remarks>
            <seealso cref="M:Awesomium.Core.IWebView.Login(System.Int32,System.String,System.String)"/>
            <seealso cref="M:Awesomium.Core.IWebView.CancelLogin(System.Int32)"/>
        </member>
        <member name="E:Awesomium.Core.IWebView.PrintRequest">
            <summary>
            Occurs when the page requests to print itself. (Usually
            the result of <c>window.print()</c> being called from JavaScript.) It is
            your responsibility to print the view to a file and handle the
            actual device printing.
            </summary>
            <seealso cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/>
        </member>
        <member name="E:Awesomium.Core.IWebView.PrintFailed">
            <summary>
            Occurs when <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/> fails. Typically because of
            bad printer configuration or invalid output path (see <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/>).
            </summary>
            <seealso cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/>
        </member>
        <member name="E:Awesomium.Core.IWebView.PrintComplete">
            <summary>
            Occurs when a <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/> operation, completes successfully.
            </summary>
            <seealso cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/>
        </member>
        <member name="E:Awesomium.Core.IWebView.Download">
            <summary>
            Occurs when the page requests to begin downloading a certain file.
            </summary>
            <remarks>
            The table below presents the way the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> event is handled, 
            when <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
            If <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            the event is immediately canceled.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            controls will display their predefined dialog.
            </description>
            </item>
            </list>
            Applications can handle the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> and <see cref="E:Awesomium.Core.IWebView.Download"/> events either
            modally or non-modally. Only modal handling is officially supported by Awesomium.NET.
            <p/>
            The table below shows the methods of handling the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> and
            <see cref="E:Awesomium.Core.IWebView.Download"/> events:
            <list type="table">
            <listheader>
            <term>
            Setting
            </term>
            <description>
            Handling
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.Modal"/>
            </term>
            <description>
            Developers should provide a response through the <see cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFiles"/> or 
            <see cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFile"/> property, before the event handler exits.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (Not officially supported by Awesomium.NET)
            </term>
            <description>
            No response will be provided for the request. Developers should later provide
            a response themselves using either:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/> for <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.DidChooseDownloadPath(System.Int32,System.String)"/> or <see cref="M:Awesomium.Core.IWebView.CancelDownload(System.Int32)"/> 
            for <see cref="E:Awesomium.Core.IWebView.Download"/>
            </description>
            </item>
            </list>
            <note type="caution">
            This technique is not officially supported by Awesomium.NET. Therefore, the member
            above is not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access this member.
            </note>
            <note type="caution">
            For <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/>, if you set <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> to <see cref="F:Awesomium.Core.EventHandling.NotModal"/>, 
            you should make sure that you always call <see cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/> providing a response to the event.
            No new <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> events will occur, until a response has been provided for the last one.
            </note>
            </description>
            </item>
            </list>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> (or any other member), is ignored.
            </note>
            </remarks>
            <seealso cref="M:Awesomium.Core.IWebView.DidChooseDownloadPath(System.Int32,System.String)"/>
            <seealso cref="M:Awesomium.Core.IWebView.CancelDownload(System.Int32)"/>
        </member>
        <member name="E:Awesomium.Core.IWebView.DownloadProgress">
            <summary>
            Occurs when the progress of a download is updated.
            </summary>
            <seealso cref="M:Awesomium.Core.IWebView.CancelDownload(System.Int32)"/>
        </member>
        <member name="E:Awesomium.Core.IWebView.DownloadComplete">
            <summary>
            Occurs when a download is finished.
            </summary>
        </member>
        <member name="E:Awesomium.Core.IWebView.ShowPopupMenu">
            <summary>
            Occurs when the page requests to display a drop-down
            (popup) menu. This is usually the result of a user clicking on
            a <c>select</c> HTML input element.
            </summary>
            <remarks>
            By default, technology specific <c>WebControls</c> provide
            their own drop-down (popup) menus. If you wish to prevent the
            control from displaying its own menu and handle the event yourself,
            set <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/> to <c>true</c> and then
            use any of the following methods to respond to the view:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.SelectPopupMenuItem(System.Int32)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.CancelPopupMenu"/>
            </description>
            </item>
            </list>
            These members are not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access these members.
            <note>
            The windowless <see cref="T:Awesomium.Core.WebView"/>, does not provide any internal implementation for drop-down (popup) menus.
            If you are using a <see cref="T:Awesomium.Core.WebView"/> instance with your UI application, you will have to handle
            the <see cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/> event yourself. Technology specific Awesomium.NET assemblies,
            provide predefined drop-down (popup) menu controls that you can use with your WPF or Windows Forms application.
            </note>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/> (or any other member), is ignored.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Core.IWebView.ShowContextMenu">
            <summary>
            Occurs when the page requests to display a context menu. 
            This is usually the result of a user right-clicking on
            an element or plugin in the page.
            </summary>
        </member>
        <member name="E:Awesomium.Core.IWebView.ResponsiveChanged">
            <summary>
            Occurs when this view's process hangs, or becomes responsive after
            a hang. Use <see cref="P:Awesomium.Core.ResponsiveChangedEventArgs.IsResponsive"/> or
            <see cref="P:Awesomium.Core.IWebView.IsResponsive"/> to check the current state of the process.
            </summary>
        </member>
        <member name="E:Awesomium.Core.IWebView.Crashed">
            <summary>
            Occurs when this view's process crashes.
            </summary>
        </member>
        <member name="P:Awesomium.Core.IWebView.Instance">
            <summary>
            Gets the handle to the native web-view instance.
            </summary>
            <remarks>
            This can be used in advanced scenarios, such as when you want to
            directly p/invoke members of the native Awesomium library 
            (see <see cref="F:Awesomium.Core.WebCore.DLLName"/>).
            <note type="caution">
            Using p/invoke directly against the native Awesomium library,
            is not officially supported by Awesomium.NET. This technique, 
            may render the <see cref="T:Awesomium.Core.WebCore"/> or other instances of Awesomium.NET, 
            unstable.
            <p/>
            We will not provide any support for issues that may occur from
            using p/invoke directly against the native Awesomium library.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.IWebView.Width">
            <summary>
            Gets or sets the current width of the view.
            </summary>
            <remarks>
            Resizing the view will trigger the creation of a new
            surface, by calling <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is accessed on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="P:Awesomium.Core.IWebView.Height">
            <summary>
            Gets or sets the current height of the view.
            </summary>
            <remarks>
            Resizing the view will trigger the creation of a new
            surface, by calling <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is accessed on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="P:Awesomium.Core.IWebView.Surface">
            <summary>
            Gets or sets the <see cref="T:Awesomium.Core.ISurface"/> instance currently
            assigned to the view.
            </summary>
            <remarks>
            If you are using an <see cref="T:Awesomium.Core.ISurface"/> instance capable of handling changes in
            size, you should use this property to assign it to the view.
            This surface will be used with multiple calls of <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>
            and it should be able to handle changes in size during <see cref="M:Awesomium.Core.ISurface.Initialize(Awesomium.Core.IWebView,System.Int32,System.Int32)"/>.
            In this scenario, you can ignore the <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> event.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is accessed on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
            <seealso cref="E:Awesomium.Core.IWebView.CreateSurface"/>
        </member>
        <member name="P:Awesomium.Core.IWebView.IsProcessCreated">
            <summary>
            Indicates if the child rendering process for this view, has been spawned.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is accessed on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
            <seealso cref="E:Awesomium.Core.IWebView.ProcessCreated"/>
        </member>
        <member name="P:Awesomium.Core.IWebView.IsLive">
            <summary>
            Gets if the native web-view, is alive.
            </summary>
            <returns>
            A <see cref="T:System.Boolean"/> value indicating if the native web-view, 
            is alive. <c>False</c> indicates that the native web-view is:
            <list type="bullet">
            <item>
            <description>
            Crashed (see <see cref="P:Awesomium.Core.IWebView.IsCrashed"/>).
            <note>
            When crashed, technology specific <c>WebControls</c> will attempt 
            to recreate the underlying view.
            For details, see: <see cref="P:Awesomium.Core.IWebView.IsCrashed"/>.
            </note>
            </description>
            </item>
            <item>
            <description>
            Prematurely destroyed (eg, using <see cref="M:Awesomium.Windows.Controls.WebControl.Close"/>).
            </description>
            </item>
            <item>
            <description>
            Not properly instantiated. This means that something went wrong
            during instantiation of either the <see cref="T:Awesomium.Core.WebCore"/> (if this
            is the first view created) or of the
            native web-view.
            </description>
            </item>
            </list>
            </returns>
            <remarks>
            Developers should always check this property before calling <see cref="T:Awesomium.Core.IWebView"/>
            members. Trying to access the native web-view when it is not alive, 
            can throw an <see cref="T:System.InvalidOperationException"/>.
            <p/>
            For more details, refer to the documentation of view members.
            <p/>
            <note>
            This property also returns <c>false</c> when the technology specific <c>WebControls</c>
            are shown in a designer. The Awesomium <see cref="T:Awesomium.Core.WebCore"/> and the native web-view, 
            are only instantiated during runtime.
            </note>
            </remarks>
            <example>
            <code>
            private void toolStripButton2_Click( object sender, EventArgs e )
            {
                if ( !webControl.IsLive )
                    return;
                    
                webControl.GoForward();
            }
            </code>
            <code lang="VB">
            Private Sub ToolStripButton2_Click( sender As Object, e As EventArgs ) Handles ToolStripButton2.Click
                If Not m_WebControl.IsLive Then Return
                    
                m_WebControl.GoForward()
            End Sub
            </code>
            </example>
        </member>
        <member name="P:Awesomium.Core.IWebView.IsDocumentReady">
            <summary>
            Gets if the DOM (Document Object Model) for the page being loaded, is ready.
            </summary>
            <remarks>
            This is very useful for executing Javascript on a page before its content has finished loading.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.IWebView.IsNavigating">
            <summary>
            Gets if the view is currently navigating to a Url.
            </summary>
            <remarks>
            Unlike <see cref="P:Awesomium.Core.IWebView.IsLoading"/> that updates when the actual contents
            of a page are being downloaded, this property is updated when navigation
            starts and updates again when loading completes.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.IWebView.HasTitle">
            <summary>
            Gets if the currently loaded web-page has a title.
            </summary>
            <seealso cref="P:Awesomium.Core.IWebView.Title"/>
            <seealso cref="E:Awesomium.Core.IWebView.TitleChanged"/>
        </member>
        <member name="P:Awesomium.Core.IWebView.TargetURL">
            <summary>
            Gets the target URL indicated by the web-view,
            usually as a result of hovering over a link on the page.
            </summary>
        </member>
        <member name="P:Awesomium.Core.IWebView.HasTargetURL">
            <summary>
            Gets if the view is currently indicating a target URL,
            usually as a result of hovering over a link on the page.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.TargetURLChanged"/>
        </member>
        <member name="P:Awesomium.Core.IWebView.HasSelection">
            <summary>
            Gets if the user has selected content in the current page.
            </summary>
        </member>
        <member name="P:Awesomium.Core.IWebView.Selection">
            <summary>
            Gets a <see cref="T:Awesomium.Core.Selection"/> providing information about the current selection range.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.SelectionChanged"/>
        </member>
        <member name="P:Awesomium.Core.IWebView.ToolTipText">
            <summary>
            Gets the tool-tip text currently indicated by the web-view,
            usually as a result of hovering over elements in the page.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.ToolTipChanged"/>
        </member>
        <member name="P:Awesomium.Core.IWebView.ParentView">
            <summary>
            Gets the parent view (if any) of this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
            <remarks>
            A <see cref="T:Awesomium.Core.IWebView"/> can only have a parent if it is a popup view that
            was created by Awesomium in response to a Javascript <c>window.open</c>.
            <p/>
            For more details, see <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>.
            <note type="caution">
            Be careful when you access members of the parent <see cref="T:Awesomium.Core.IWebView"/> instance.
            The parent may have been destroyed while the this (child) view, is still alive.
            Always check <see cref="P:Awesomium.Core.IWebView.IsLive"/> before accessing members on the parent view,
            to avoid exceptions.
            </note>
            </remarks>
            <seealso cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>
        </member>
        <member name="P:Awesomium.Core.IWebView.ProcessInput">
            <summary>
            Gets or sets the user input that should be processed by a technology specific <c>WebControl</c>.
            The default is <see cref="F:Awesomium.Core.ViewInput.All"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.IWebView.IsResponsive">
            <summary>
            Gets if the process of this <see cref="T:Awesomium.Core.IWebView"/> instance, is currently responsive.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.ResponsiveChanged"/>
        </member>
        <member name="P:Awesomium.Core.IWebView.LatestContextData">
            <summary>
            Gets the latest web-view context data, usually updated by a right-click in page.
            </summary>
            <returns>
            A <see cref="T:Awesomium.Core.WebContextMenuInfo"/> that represents the latest web-view context data.
            </returns>
            <seealso cref="T:Awesomium.Core.WebContextMenuInfo"/>
            <seealso cref="E:Awesomium.Core.IWebView.ShowContextMenu"/>
        </member>
        <member name="P:Awesomium.Core.IWebView.NavigationInfo">
            <summary>
            Gets or sets the navigation info level.
            </summary>
            <returns>
            A <see cref="T:Awesomium.Core.NavigationInfo"/> value indicating
            the level of navigation progress info reflected to the
            <see cref="P:Awesomium.Core.IWebView.Title"/>. The default is <see cref="F:Awesomium.Core.NavigationInfo.Verbose"/>.
            </returns>
            <remarks>
            Navigation progress information is reflected to the control's
            <see cref="P:Awesomium.Core.IWebView.Title"/>:
            <list type="table">
            <listheader>
            <term>Level</term>
            <description>Title Value</description>
            </listheader>
            <item>
            <term><c>"None"</c></term>
            <description><see cref="P:Awesomium.Core.IWebView.Title"/> only reflects the page's title, if any.</description>
            </item>
            <item>
            <term><c>"Normal"</c></term>
            <description><see cref="P:Awesomium.Core.IWebView.Title"/> reflects the page's title as well as "Error" and "Crashed" status.</description>
            </item>
            <item>
            <term><c>"Verbose"</c></term>
            <description>
            <see cref="P:Awesomium.Core.IWebView.Title"/> reflects progress status such as "Navigating..." and "Loading...",
            until the page's title is acquired. Also reflects "Error" and "Crashed" status. (<b>Default</b>)
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.IWebView.TerminationStatus">
            <summary>
            Gets the termination status of this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
            <remarks>
            This is <see cref="F:Awesomium.Core.TerminationStatus.None"/> if the web-view
            has not been instantiated yet (this can be the case in a technology specific
            <c>WebControl</c>) and <see cref="F:Awesomium.Core.TerminationStatus.StillRunning"/>
            if the web-view process has not been terminated and is still running.
            </remarks>
            <seealso cref="E:Awesomium.Core.IWebView.Crashed"/>
        </member>
        <member name="P:Awesomium.Core.IWebView.FocusedElementType">
            <summary>
            Gets the type of the element currently focused in the loaded page.
            </summary>
            <remarks>
            You should generally forward keyboard events to the active <see cref="T:Awesomium.Core.IWebView"/> instance,
            whenever one of the following element types are focused:
            <list type="bullet">
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Input"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.TextInput"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.EditableContent"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Plugin"/>
            </description>
            </item>
            </list>
            This is done automatically in technology specific <c>WebControl</c>
            instances.
            </remarks>
            <seealso cref="E:Awesomium.Core.IWebView.FocusChanged"/>
        </member>
        <member name="P:Awesomium.Core.IWebView.Source">
            <summary>
            Gets or sets the URL currently presented by this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
            <returns>
            An absolute <see cref="T:System.Uri"/> representing the URL currently presented 
            by this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </returns>
            <seealso cref="M:Awesomium.Core.IWebView.LoadURL(System.Uri)"/>
        </member>
        <member name="P:Awesomium.Core.IWebView.Title">
            <summary>
            Gets the title of the page currently loaded.
            </summary>
            <remarks>
            This property may also reflect navigation progress.
            For details, see <see cref="P:Awesomium.Core.IWebView.NavigationInfo"/>.
            </remarks>
            <seealso cref="P:Awesomium.Core.IWebView.NavigationInfo"/>
            <seealso cref="P:Awesomium.Core.IWebView.HasTitle"/>
        </member>
        <member name="P:Awesomium.Core.IWebView.WebSession">
            <summary>
            Gets the session associated with this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
            <remarks>
            You can create a <see cref="P:Awesomium.Core.IWebView.WebSession"/> with your own preferences (see <see cref="P:Awesomium.Core.WebSession.Preferences"/>),
            using <see cref="M:Awesomium.Core.WebCore.CreateWebSession(Awesomium.Core.WebPreferences)"/>. You can then use this when you create a <see cref="T:Awesomium.Core.WebView"/> instance, 
            by using the <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession)"/>
            function.
            <note>
            This property is implemented as a read-write property on technology specific <c>WebControls</c>.
            You can use the setter to specify your <see cref="P:Awesomium.Core.IWebView.WebSession"/>, right after instantiating
            the <c>WebControl</c> or at design time. You cannot change this setting after the control
            has been fully loaded and its underlying web-view, has been created.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.IWebView.IsLoading">
            <summary>
            Gets if any page resources are currently being loaded.
            </summary>
        </member>
        <member name="P:Awesomium.Core.IWebView.IsCrashed">
            <summary>
            Gets if the process of this <see cref="T:Awesomium.Core.IWebView"/> instance, has crashed.
            </summary>
        </member>
        <member name="P:Awesomium.Core.IWebView.IsTransparent">
            <summary>
            Gets or sets if pages should be rendered with transparency
            preserved (for ex, for pages with <c>style="background-color: transparent;"</c>)
            </summary>
            <remarks>
            When set to <c>true</c>, the alpha channel is premultiplied. When set to <c>false</c>
            (default), the view will have an opaque, white background.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.IWebView.IsRendering">
            <summary>
            Gets or sets if internal asynchronous rendering is currently enabled.
            </summary>
            <remarks>
            All rendering is actually done asynchronously in a separate process
            and so the page is usually continuously rendering internally.
            You should set this to <c>false</c> when your surface is not rendering
            the view's pixel buffer (for ex, when a technology specific <c>WebControl</c>
            is not visible) to save some CPU cycles.
            <note>
            Technology specific <c>WebControls</c> usually monitor the control's visibility
            or enabled status and update this property automatically. They may require
            additional steps before you are able to set this property manually. For more
            details, refer to the documentation of each <c>WebControl</c>.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.IWebView.NativeWindow">
            <summary>
            Gets the actual window handle that was created by this <see cref="T:Awesomium.Core.IWebView"/> instance.
            This is only valid for windowed <see cref="T:Awesomium.Core.IWebView"/> instances (see <see cref="F:Awesomium.Core.WebViewType.Window"/>).
            </summary>
        </member>
        <member name="P:Awesomium.Core.IWebView.ParentWindow">
            <summary>
            Gets or sets the parent window for this <see cref="T:Awesomium.Core.IWebView"/> instance. This is only valid
            for windowed <see cref="T:Awesomium.Core.IWebView"/> instances (see <see cref="F:Awesomium.Core.WebViewType.Window"/>),
            on the Windows platform.
            </summary>
            <remarks>
            <note type="caution">
            When you use a <see cref="T:Awesomium.Core.WebView"/>, you should call this method immediately after calling 
            <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession,Awesomium.Core.WebViewType)"/>. The window for this <see cref="T:Awesomium.Core.IWebView"/> instance
            will not be created until you set <see cref="P:Awesomium.Core.IWebView.ParentWindow"/>, on the Windows platform.
            </note>
            <note>
            Technology specific <c>WebControls</c>, take care of this internally. Once set and the underlying
            window for this <see cref="T:Awesomium.Core.IWebView"/> instance has been created, this property cannot be changed.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.IWebView.ViewType">
            <summary>
            Gets type of this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
            <remarks>
            For details about the various types of a <see cref="T:Awesomium.Core.IWebView"/> instance,
            read the documentation of <see cref="T:Awesomium.Core.WebViewType"/> and its members.
            <p/>
            Here is a list of the type of views that Awesomium.NET components wrap:
            
            </remarks>
        </member>
        <member name="P:Awesomium.Core.IWebView.ProcessHandle">
            <summary>
            Get the handle for the corresponding child-process hosting this
            <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
            <remarks>
            This may not be initialized until some time after the
            view is actually created (when we receive the first IPC message
            from the child-process).
            </remarks>
        </member>
        <member name="P:Awesomium.Core.IWebView.ProcessID">
            <summary>
            Get the unique ID for the corresponding child-process hosting this
            <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
            <remarks>
            May return <c>0</c> if the <see cref="T:Awesomium.Core.IWebView"/> instance has crashed 
            or there is no process active.
            </remarks>
        </member>
        <member name="T:Awesomium.Core.JSObjectType">
            <summary>
            An enumeration of JSObject types.
            </summary>
        </member>
        <member name="F:Awesomium.Core.JSObjectType.Local">
            <summary>
            Local object.
            </summary>
            <remarks>
            Local objects can only contain properties.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.JSObjectType.Remote">
            <summary>
            Remote object, actually stored in a remote process.
            </summary>
            <remarks>
            All API calls will be proxied to the remote process 
            and may fail (see <see cref="M:Awesomium.Core.JSObject.GetLastError"/>).
            </remarks>
        </member>
        <member name="F:Awesomium.Core.JSObjectType.RemoteGlobal">
            <summary>
            Same as <see cref="F:Awesomium.Core.JSObjectType.Remote"/> except that the object 
            will persist between all page loads.
            </summary>
        </member>
        <member name="F:Awesomium.Core.JSObjectType.Invalid">
            <summary>
            Indicates that the <see cref="T:Awesomium.Core.JSObject"/> has been disposed.
            </summary>
            <remarks>
            <note type="caution">
            Do not attempt to access members or execute any code against, or using
            a <see cref="T:Awesomium.Core.JSObject"/> of type <see cref="F:Awesomium.Core.JSObjectType.Invalid"/>.
            Try to acquire a new instance through Javascript.
            </note>
            </remarks>
        </member>
        <member name="T:Awesomium.Core.VirtualKey">
            <summary>
            Virtual Keys enumeration.
            </summary>
        </member>
        <member name="T:Awesomium.Core.MediaState">
            <summary>
            Used with <see cref="T:Awesomium.Core.WebContextMenuInfo"/>.
            </summary>
        </member>
        <member name="T:Awesomium.Core.MediaType">
            <summary>
            Used with <see cref="T:Awesomium.Core.WebContextMenuInfo"/>.
            </summary>
        </member>
        <member name="T:Awesomium.Core.AweRect">
            <summary>
            Represents a generic rectangle with pixel dimensions.
            </summary>
        </member>
        <member name="F:Awesomium.Core.AweRect.X">
            <summary>
            The x-coordinate of the origin of the rectangle.
            </summary>
        </member>
        <member name="F:Awesomium.Core.AweRect.Y">
            <summary>
            The y-coordinate of the origin of the rectangle.
            </summary>
        </member>
        <member name="F:Awesomium.Core.AweRect.Width">
            <summary>
            The width of the rectangle.
            </summary>
        </member>
        <member name="F:Awesomium.Core.AweRect.Height">
            <summary>
            The height of the rectangle.
            </summary>
        </member>
        <member name="M:Awesomium.Core.AweRect.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.AweRect.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.AweRect.Intersect(Awesomium.Core.AweRect)">
            <summary>
            Replaces this <see cref="T:Awesomium.Core.AweRect"/> with the intersection of itself and the specified <see cref="T:Awesomium.Core.AweRect"/>.
            </summary>
            <param name="rect">
            The <see cref="T:Awesomium.Core.AweRect"/> with which to intersect.
            </param>
        </member>
        <member name="M:Awesomium.Core.AweRect.op_Equality(Awesomium.Core.AweRect,Awesomium.Core.AweRect)">
            <summary>
            Tests whether two <see cref="T:Awesomium.Core.AweRect"/> structures have equal location and size.
            </summary>
            <param name="ar1">
            The <see cref="T:Awesomium.Core.AweRect"/> structure that is to the left of the equality operator.
            </param>
            <param name="ar2">
            The <see cref="T:Awesomium.Core.AweRect"/> structure that is to the right of the equality operator.
            </param>
            <returns>
            This operator returns <c>true</c> if the two <see cref="T:Awesomium.Core.AweRect"/> structures have equal <see cref="F:Awesomium.Core.AweRect.X"/>, 
            <see cref="F:Awesomium.Core.AweRect.Y"/>, <see cref="F:Awesomium.Core.AweRect.Width"/>, and <see cref="F:Awesomium.Core.AweRect.Height"/> properties.
            </returns>
        </member>
        <member name="M:Awesomium.Core.AweRect.op_Inequality(Awesomium.Core.AweRect,Awesomium.Core.AweRect)">
            <summary>
            Tests whether two <see cref="T:Awesomium.Core.AweRect"/> structures differ in location or size.
            </summary>
            <param name="ar1">
            The <see cref="T:Awesomium.Core.AweRect"/> structure that is to the left of the inequality operator.
            </param>
            <param name="ar2">
            The <see cref="T:Awesomium.Core.AweRect"/> structure that is to the right of the inequality operator.
            </param>
            <returns>
            This operator returns <c>true</c> if any of the <see cref="F:Awesomium.Core.AweRect.X"/>, 
            <see cref="F:Awesomium.Core.AweRect.Y"/>, <see cref="F:Awesomium.Core.AweRect.Width"/>, or <see cref="F:Awesomium.Core.AweRect.Height"/> properties of the two 
            <see cref="T:Awesomium.Core.AweRect"/> structures are unequal; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:Awesomium.Core.Range">
            <summary>
            Specifies a range.
            </summary>
        </member>
        <member name="M:Awesomium.Core.Range.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.Range.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.Range.op_Equality(Awesomium.Core.Range,Awesomium.Core.Range)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.Range"/> instances are equivalent.
            </summary>
            <param name="r1">
            The <see cref="T:Awesomium.Core.Range"/> instance that is to the left of the equality operator.
            </param>
            <param name="r2">
            The <see cref="T:Awesomium.Core.Range"/> instance that is to the right of the equality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="r1"/> and <paramref name="r2"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Range.op_Inequality(Awesomium.Core.Range,Awesomium.Core.Range)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.Range"/> instances are not equal.
            </summary>
            <param name="r1">
            The <see cref="T:Awesomium.Core.Range"/> instance that is to the left of the inequality operator.
            </param>
            <param name="r2">
            The <see cref="T:Awesomium.Core.Range"/> instance that is to the right of the inequality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="r1"/> and <paramref name="r2"/> are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.WebURLMarshaler.GetInstance(System.String)">
            <summary>
            In addition to implementing the ICustomMarshaler interface, custom marshalers must implement a static method 
            called GetInstance that accepts a String as a parameter and has a return type of ICustomMarshaler. 
            This static method is called by the common language runtime's COM interop layer to instantiate an instance of the custom marshaler. 
            </summary>
            <param name="pstrCookie">
            A cookie that the method can use to customize the returned custom marshaler.
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.WebURLMarshaler"/> instance.
            </returns>
        </member>
        <member name="T:Awesomium.Core.NavigationInfo">
            <summary>
            Indicates the verbosity of navigation info.
            </summary>
            <remarks>
            Navigation progress information is reflected to the control's
            <see cref="P:Awesomium.Core.IWebView.Title"/>:
            <list type="table">
            <listheader>
            <term>Level</term>
            <description>Title Value</description>
            </listheader>
            <item>
            <term><c>"None"</c></term>
            <description><see cref="P:Awesomium.Core.IWebView.Title"/> only reflects the page's title, if any.</description>
            </item>
            <item>
            <term><c>"Normal"</c></term>
            <description><see cref="P:Awesomium.Core.IWebView.Title"/> reflects the page's title as well as "Error" and "Crashed" status.</description>
            </item>
            <item>
            <term><c>"Verbose"</c></term>
            <description>
            <see cref="P:Awesomium.Core.IWebView.Title"/> reflects progress status such as "Navigating..." and "Loading...",
            until the page's title is acquired. Also reflects "Error" and "Crashed" status. (<b>Default</b>)
            </description>
            </item>
            </list>
            </remarks>
            <seealso cref="P:Awesomium.Core.IWebView.NavigationInfo"/>
        </member>
        <member name="F:Awesomium.Core.NavigationInfo.None">
            <summary>
            <see cref="P:Awesomium.Core.IWebView.Title"/> only reflects the page's title, if any.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NavigationInfo.Normal">
            <summary>
            <see cref="P:Awesomium.Core.IWebView.Title"/> reflects the page's title as well as "Error" and "Crashed" status.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NavigationInfo.Verbose">
            <summary>
            <see cref="P:Awesomium.Core.IWebView.Title"/> reflects progress status such as "Navigating..." and "Loading...",
            until the page's title is acquired. Also reflects "Error" and "Crashed" status.
            </summary>
        </member>
        <member name="T:Awesomium.Core.PrintConfig">
            <summary>
            Represents print-to-file configuration settings.
            </summary>
            <seealso cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/>
        </member>
        <member name="F:Awesomium.Core.PrintConfig.Default">
            <summary>
            Gets a <see cref="T:Awesomium.Core.PrintConfig"/> with default configuration settings.
            </summary>
        </member>
        <member name="M:Awesomium.Core.PrintConfig.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.PrintConfig.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.PrintConfig.op_Equality(Awesomium.Core.PrintConfig,Awesomium.Core.PrintConfig)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.PrintConfig"/> instances are equal.
            </summary>
            <param name="pc1">
            The <see cref="T:Awesomium.Core.PrintConfig"/> instance that is to the left of the equality operator.
            </param>
            <param name="pc2">
            The <see cref="T:Awesomium.Core.PrintConfig"/> instance that is to the right of the equality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="pc1"/> and <paramref name="pc2"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.PrintConfig.op_Inequality(Awesomium.Core.PrintConfig,Awesomium.Core.PrintConfig)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.PrintConfig"/> instances are not equal.
            </summary>
            <param name="pc1">
            The <see cref="T:Awesomium.Core.PrintConfig"/> instance that is to the left of the inequality operator.
            </param>
            <param name="pc2">
            The <see cref="T:Awesomium.Core.PrintConfig"/> instance that is to the right of the inequality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="pc1"/> and <paramref name="pc2"/> are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Awesomium.Core.PrintConfig.PageSize">
            <summary>
            Gets or sets the dimensions (width/height) of the page, in points.
            </summary>
        </member>
        <member name="P:Awesomium.Core.PrintConfig.Dpi">
            <summary>
            Gets or sets the number of dots per inch.
            </summary>
        </member>
        <member name="P:Awesomium.Core.PrintConfig.SplitPagesIntoMultipleFiles">
            <summary>
            Gets or sets if we should make a new file for each page.
            </summary>
        </member>
        <member name="P:Awesomium.Core.PrintConfig.PrintSelectionOnly">
            <summary>
            Gets or sets if we should only print the current selection.
            </summary>
        </member>
        <member name="T:Awesomium.Core.ReleaseInfo">
            <summary>
            Specifies important versioning and identification constants used throughout the project.
            </summary>
        </member>
        <member name="F:Awesomium.Core.ReleaseInfo.LIBRARY_VERSION">
            <summary>
            Specifies the native Awesomium library version.
            </summary>
            <remarks>
            <note type="caution">
            Always keep this synchronized with the current version of Awesomium.
            </note>
            </remarks>
        </member>
        <member name="F:Awesomium.Core.ReleaseInfo.ASSEMBLY_VERSION">
            <summary>
            Specifies the Awesomium.Core assembly version.
            </summary>
            <remarks>
            This is used in various attributes of the assembly where file and assembly
            version is defined.
            <note type="caution">
            Always keep this synchronized with the current version of the assembly.
            </note>
            </remarks>
        </member>
        <member name="F:Awesomium.Core.ReleaseInfo.PUBLIC_KEY_TOKEN">
            <summary>
            Specifies the Public Key Token of the assembly's Strong Name.
            </summary>
            <remarks>
            This is used with <see cref="F:Awesomium.Core.WebCore.DLLName"/> and allows indirect
            access to the Awesomium native library through the strong name of
            Awesomium.Core. It is necessary for installing the native dependencies
            in GAC.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.ReleaseInfo.WPF_PUBLIC_KEY">
            <summary>
            Specifies the full Public Key of the Awesomium.Windows.Controls assembly's Strong Name.
            </summary>
            <remarks>
            This is used with the InternalsVisibleToAttribute to allow the internals of this
            assembly, be visible from the Awesomium.Windows.Controls assembly.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.ReleaseInfo.WPF_DESIGN_PUBLIC_KEY">
            <summary>
            Specifies the full Public Key of the Awesomium.Windows.Controls.Design
            assembly's Strong Name.
            </summary>
            <remarks>
            This is used with the InternalsVisibleToAttribute to allow the internals of this
            assembly, be visible from the Awesomium.Windows.Controls.Design assembly.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.ReleaseInfo.SWF_PUBLIC_KEY">
            <summary>
            Specifies the full Public Key of the Awesomium.Windows.Forms assembly's Strong Name.
            </summary>
            <remarks>
            This is used with the InternalsVisibleToAttribute to allow the internals of this
            assembly, be visible from the Awesomium.Windows.Forms assembly.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.ReleaseInfo.SWF_MONO_PUBLIC_KEY">
            <summary>
            Specifies the full Public Key of the Awesomium.Mono.Forms assembly's Strong Name.
            </summary>
            <remarks>
            This is used with the InternalsVisibleToAttribute to allow the internals of this
            assembly, be visible from the Awesomium.Mono.Forms assembly.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.ReleaseInfo.UNITY_PUBLIC_KEY">
            <summary>
            Specifies the full Public Key of the Awesomium.Unity assembly's Strong Name.
            </summary>
            <remarks>
            This is used with the InternalsVisibleToAttribute to allow the internals of this
            assembly, be visible from the Awesomium.Unity assembly.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.ReleaseInfo.GTK_PUBLIC_KEY">
            <summary>
            Specifies the full Public Key of the Awesomium.Mono.Gtk assembly's Strong Name.
            </summary>
            <remarks>
            This is used with the InternalsVisibleToAttribute to allow the internals of this
            assembly, be visible from the Awesomium.Mono.Gtk assembly.
            </remarks>
        </member>
        <member name="T:Awesomium.Core.IResourceInterceptor">
            <summary>
            Used to intercept requests and responses for resources.
            </summary>
            <remarks>
            Assign your <see cref="T:Awesomium.Core.IResourceInterceptor"/> to <see cref="P:Awesomium.Core.WebCore.ResourceInterceptor"/>,
            to intercept requests for resources.
            </remarks>
            <seealso cref="P:Awesomium.Core.WebCore.ResourceInterceptor"/>
        </member>
        <member name="M:Awesomium.Core.IResourceInterceptor.OnRequest(Awesomium.Core.ResourceRequest)">
            <summary>
            Called when a request for resources occurs. You can use 
            this to modify requests before they are sent, respond to requests using 
            your own custom resource-loading back-end, or to monitor requests for 
            tracking purposes.
            </summary>
            <param name="request">
            The resource request.
            </param>
            <returns>
            A new <see cref="T:Awesomium.Core.ResourceResponse"/> (see <see cref="M:Awesomium.Core.ResourceResponse.Create(System.UInt32,System.IntPtr,System.String)"/>)
            to override the response, otherwise, return <c>null</c> (<c>Nothing</c> in Visual Basic) to allow 
            normal behavior.
            </returns>
            <remarks>
            <note type="caution">
            This method is called on the IO Thread, you should not
            make any calls to instances and members that are not thread-safe.
            </note>
            </remarks>
        </member>
        <member name="T:Awesomium.Core.ResourceInterceptor">
            <summary>
            Represents a default implementation of <see cref="T:Awesomium.Core.IResourceInterceptor"/>, used to intercept requests and responses for resources.
            </summary>
            <remarks>
            You can subclass this and override <see cref="M:Awesomium.Core.ResourceInterceptor.OnRequest(Awesomium.Core.ResourceRequest)"/> to intercept requests for resources. Alternatively, you can
            implement <see cref="T:Awesomium.Core.IResourceInterceptor"/>.
            </remarks>
            <seealso cref="P:Awesomium.Core.WebCore.ResourceInterceptor"/>
        </member>
        <member name="M:Awesomium.Core.ResourceInterceptor.OnRequest(Awesomium.Core.ResourceRequest)">
            <summary>
            Override this method to intercept requests for resources. You can use 
            this to modify requests before they are sent, respond to requests using 
            your own custom resource-loading back-end, or to monitor requests for 
            tracking purposes.
            </summary>
            <param name="request">
            The resource request.
            </param>
            <returns>
            A new <see cref="T:Awesomium.Core.ResourceResponse"/> (see <see cref="M:Awesomium.Core.ResourceResponse.Create(System.UInt32,System.IntPtr,System.String)"/>)
            to override the response, otherwise, return <c>null</c> (<c>Nothing</c> in Visual Basic) to allow 
            normal behavior.
            </returns>
            <remarks>
            <note type="caution">
            This method is called on the IO Thread, you should not
            make any calls to instances and members that are not thread-safe.
            </note>
            </remarks>
        </member>
        <member name="T:Awesomium.Core.ResourceRequest">
            <summary>
            Represents a request for a URL resource. You can get information about the request or modify it 
            (change <c>GET</c> to <c>POST</c>, modify headers, etc.).
            </summary>
            <seealso cref="M:Awesomium.Core.IResourceInterceptor.OnRequest(Awesomium.Core.ResourceRequest)"/>
        </member>
        <member name="M:Awesomium.Core.ResourceRequest.Cancel">
            <summary>
            Cancels this request.
            </summary>
        </member>
        <member name="M:Awesomium.Core.ResourceRequest.Clear">
            <summary>
            Clears all upload elements.
            </summary>
        </member>
        <member name="M:Awesomium.Core.ResourceRequest.AppendUploadFilePath(System.String)">
            <summary>
            Appends a file for <c>POST</c> data (adds a new <see cref="T:Awesomium.Core.UploadElement"/>).
            </summary>
            <param name="path">The path to the file to append.</param>
        </member>
        <member name="M:Awesomium.Core.ResourceRequest.AppendUploadBytes(System.String,System.UInt32)">
            <summary>
            Appends a string of bytes for <c>POST</c> data (adds a new <see cref="T:Awesomium.Core.UploadElement"/>).
            </summary>
        </member>
        <member name="P:Awesomium.Core.ResourceRequest.ProcessID">
            <summary>
            Gets the process ID where this request originated from. This corresponds
            to <see cref="P:Awesomium.Core.IWebView.ProcessID"/>
            </summary>
        </member>
        <member name="P:Awesomium.Core.ResourceRequest.Url">
            <summary>
            Gets the URL associated with this request.
            </summary>
        </member>
        <member name="P:Awesomium.Core.ResourceRequest.Method">
            <summary>
            Gets or sets the HTTP method (usually "GET" or "POST")
            </summary>
        </member>
        <member name="P:Awesomium.Core.ResourceRequest.Referrer">
            <summary>
            Gets or sets the referrer.
            </summary>
        </member>
        <member name="P:Awesomium.Core.ResourceRequest.ExtraHeaders">
            <summary>
            Gets or sets the extra headers for the request.
            </summary>
        </member>
        <member name="P:Awesomium.Core.ResourceRequest.Count">
            <summary>
            Gets the number of upload elements (essentially, batches of POST data).
            </summary>
        </member>
        <member name="P:Awesomium.Core.ResourceRequest.Element(System.UInt32)">
            <summary>
            Gets a certain upload element.
            </summary>
            <param name="index">The index of the upload element to seek.</param>
            <returns>An <see cref="T:Awesomium.Core.UploadElement"/> instance.</returns>
        </member>
        <member name="T:Awesomium.Core.ResourceResponse">
            <summary>
            Represents a wrapper around a raw block of data and a specified mime-type. It can be used with
            <see cref="M:Awesomium.Core.IResourceInterceptor.OnRequest(Awesomium.Core.ResourceRequest)"/> to return a custom resource for a certain resource request.
            </summary>
        </member>
        <member name="M:Awesomium.Core.ResourceResponse.Create(System.UInt32,System.IntPtr,System.String)">
            <summary>
            Creates a <see cref="T:Awesomium.Core.ResourceResponse"/> from a raw block of data. (Data is not owned,
            a copy is made of the supplied buffer.)
            </summary>
            <param name="numBytes">
            Size (in bytes) of the memory buffer.
            </param>
            <param name="buffer">
            Raw memory buffer to be copied.
            </param>
            <param name="mimeType">
            The mime-type of the data. See: http://en.wikipedia.org/wiki/Internet_media_type
            </param>
        </member>
        <member name="M:Awesomium.Core.ResourceResponse.Create(System.String)">
            <summary>
            Creates a ResourceResponse from a file on disk.
            </summary>
            <param name="filePath">
            The path to the file.
            </param>
        </member>
        <member name="P:Awesomium.Core.UploadElement.IsFilePath">
            <summary>
            Gets is this <see cref="T:Awesomium.Core.UploadElement"/> is a file.
            </summary>
        </member>
        <member name="P:Awesomium.Core.UploadElement.IsBytes">
            <summary>
            Gets is this <see cref="T:Awesomium.Core.UploadElement"/> is a string of bytes.
            </summary>
        </member>
        <member name="P:Awesomium.Core.UploadElement.Bytes">
            <summary>
            Gets the string of bytes associated with this <see cref="T:Awesomium.Core.UploadElement"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.UploadElement.FilePath">
            <summary>
            Gets the file path associated with this <see cref="T:Awesomium.Core.UploadElement"/>.
            </summary>
        </member>
        <member name="T:Awesomium.Core.CoreResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_DirectoryDataSourceNotInMemory">
            <summary>
              Looks up a localized string similar to Attempted to call this method on a DirectoryDataSource that has not been set to cache resources in memory..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.AwesomiumChildProcessTest">
            <summary>
              Looks up a localized string similar to AwesomiumChildProcessTest.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ChildProcessTestDomainName">
            <summary>
              Looks up a localized string similar to Awesomium.ChildProcess.TestDomain.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_CannotDisposeDataSource">
            <summary>
              Looks up a localized string similar to Cannot dispose a DataSource that is assigned to an active WebSession. Make sure that no session is using this DataSource, before disposing it..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_CannotDisposeWebSession">
            <summary>
              Looks up a localized string similar to Cannot dispose a WebSession that is assigned to active views. Make sure that no view is using this session before disposing it..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_CoreAlreadyInitialized">
            <summary>
              Looks up a localized string similar to The WebCore is already initialized..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_CoreNotRunning">
            <summary>
              Looks up a localized string similar to The WebCore is not running..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_CoreReInitialize">
            <summary>
              Looks up a localized string similar to You are attempting to re-initialize the WebCore. The WebCore must only be initialized once per process and must be shut down only when the process exits..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_DataSourceIsAssigned">
            <summary>
              Looks up a localized string similar to The specified DataSource instance, is assigned to another WebSession. A DataSource can only be used by a single session..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_InvalidJpegQuality">
            <summary>
              Looks up a localized string similar to Valid range is 0 to 100..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_InvalidJSObject">
            <summary>
              Looks up a localized string similar to Cannot create a global javascript object before the view&apos;s process is created. Wait for the ProcessCreated event before creating a global javascript object..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_InvalidWebView">
            <summary>
              Looks up a localized string similar to This IWebView instance is invalid. It has either been destroyed or it was never properly instantiated..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_InvalidZoom">
            <summary>
              Looks up a localized string similar to Valid range is from 10 to 500..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_SurfaceDisposed">
            <summary>
              Looks up a localized string similar to The specified ISurface instance, has been disposed..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_SurfaceIsAssigned">
            <summary>
              Looks up a localized string similar to The specified ISurface instance, is assigned to another view. A surface can only be used by a single view..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_ViewWrapped">
            <summary>
              Looks up a localized string similar to The specified web-view instance has already been wrapped. You can access it through: WebCore.Views.GetByHandle.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_WebControlDisabled">
            <summary>
              Looks up a localized string similar to The control is disabled either manually or it has been destroyed..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.TempCache">
            <summary>
              Looks up a localized string similar to {0}{1}TempCache{1}.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.TITLE_Crashed">
            <summary>
              Looks up a localized string similar to Crached!.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.TITLE_Error_1">
            <summary>
              Looks up a localized string similar to Error: {0}.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.TITLE_Error_2">
            <summary>
              Looks up a localized string similar to Error: {0} ({1}).
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.TITLE_Loading">
            <summary>
              Looks up a localized string similar to Loading....
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.TITLE_Navigating">
            <summary>
              Looks up a localized string similar to Navigating....
            </summary>
        </member>
        <member name="T:Awesomium.Core.Selection">
            <summary>
            Provides textual information about the current selection range of a page.
            </summary>
        </member>
        <member name="F:Awesomium.Core.Selection.Empty">
            <summary>
            Represents an empty selection range.
            </summary>
        </member>
        <member name="M:Awesomium.Core.Selection.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.Selection.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.Selection.op_Equality(Awesomium.Core.Selection,Awesomium.Core.Selection)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.Selection"/> instances represent the same selection.
            </summary>
            <param name="sd1">
            The <see cref="T:Awesomium.Core.Selection"/> instance that is to the left of the equality operator.
            </param>
            <param name="sd2">
            The <see cref="T:Awesomium.Core.Selection"/> instance that is to the right of the equality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="sd1"/> and <paramref name="sd2"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Selection.op_Inequality(Awesomium.Core.Selection,Awesomium.Core.Selection)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.Selection"/> instances are not equal.
            </summary>
            <param name="sd1">
            The <see cref="T:Awesomium.Core.Selection"/> instance that is to the left of the inequality operator.
            </param>
            <param name="sd2">
            The <see cref="T:Awesomium.Core.Selection"/> instance that is to the right of the inequality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="sd1"/> and <paramref name="sd2"/> are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Awesomium.Core.Selection.Text">
            <summary>
            Gets the selected content in a page, in plain text form.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Selection.HTML">
            <summary>
            Gets the selected content in a page, in HTML form.
            </summary>
        </member>
        <member name="T:Awesomium.Core.SelectionHelper">
            <summary>
            This helper class is temporarily added, until we get a native way to access
            current selection changes and properties.
            </summary>
        </member>
        <member name="M:Awesomium.Core.SelectionHelper.RegisterSelectionHelper">
            <summary>
            Must be called once when the view is created.
            </summary>
        </member>
        <member name="M:Awesomium.Core.SelectionHelper.InjectSelectionHandlers">
            <summary>
            Must be called every time a new page is being loaded, at DOM ready time.
            </summary>
        </member>
        <member name="M:Awesomium.Core.SelectionHelper.IsSelectionObject(Awesomium.Core.JSObject)">
            <summary>
            Gets if the specified <see cref="T:Awesomium.Core.JSObject"/> is the
            global selection object.
            </summary>
        </member>
        <member name="M:Awesomium.Core.SelectionHelper.ClearSelection">
            <summary>
            Informs listeners of an empty selection.
            </summary>
        </member>
        <member name="M:Awesomium.Core.SelectionHelper.OnMethodCall(Awesomium.Core.IWebView,System.String,Awesomium.Core.JSValue[])">
            <summary>
            Should be called when the IJSMethodHandler gets a call from one of the
            selection global object methods.
            </summary>
        </member>
        <member name="P:Awesomium.Core.SelectionHelper.IsDisposed">
            <summary>
            Gets if this instance is already disposed and eligible for garbage collection.
            </summary>
        </member>
        <member name="T:Awesomium.Core.ViewInput">
            <summary>
            Indicates the types of input processed by an Awesomium <c>WebControl</c>.
            </summary>
            <remarks>
            <see cref="F:Awesomium.Core.ViewInput.Stylus"/> and <see cref="F:Awesomium.Core.ViewInput.Touch"/>
            are only processed by <see cref="T:Awesomium.Windows.Controls.WebControl"/>
            instances.
            </remarks>
        </member>
        <member name="T:Awesomium.Core.Utilities">
            <summary>
            Static class providing helper functions.
            </summary>
        </member>
        <member name="M:Awesomium.Core.Utilities.GetKeyIdentifierFromVirtualKeyCode(Awesomium.Core.VirtualKey)">
            <summary>
            Utility function for generating a key identifier string from a virtual key-code.
            </summary>
            <param name="virtualKeyCode">
            The virtual key-code to generate the key identifier of.
            </param>
            <returns>
            A <see cref="T:System.String"/> indicating the key identifier of a virtual key-code.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Utilities.WriteDataPak(System.String,System.String,System.String[])">
            <summary>
            Packs all files in a certain directory, into a PAK file.
            </summary>
            <param name="outFile">
            The full file-path to the output PAK file (filename should end with '.pak').
            </param>
            <param name="inDir">
            The path to the input directory.
            </param>
            <param name="ignoreExt">
            A list of file extensions to ignore (you don't need to prefix the extensions with a dot ".").
            </param>
            <returns>
            The number of files written to the PAK, or <c>-1</c> if the operation was not successful.
            </returns>
            <seealso cref="M:Awesomium.Core.Data.DataPakSource.FromDirectory(System.String,System.Boolean,System.String[])"/>
        </member>
        <member name="M:Awesomium.Core.Utilities.CopyBuffers(System.Int32,System.Int32,System.Runtime.InteropServices.HandleRef,System.Int32,System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Helper function for copying pixel buffers.
            </summary>
        </member>
        <member name="M:Awesomium.Core.Utilities.IsDotNetAssembly(System.String)">
            <summary>
            Attempts to find out if a specified child process executable, is a .NET assembly.
            </summary>
            <param name="asmFile">
            The path to the executable file.
            </param>
        </member>
        <member name="M:Awesomium.Core.Utilities.GetMimeType(System.String)">
            <summary>
            Gets the (Apache) mime type for a specified <paramref name="fileName"/>,
            based on its extension.
            </summary>
            <param name="fileName"></param>
            <returns>
            A <see cref="T:System.String"/> value representing the mime type of the
            specified <paramref name="fileName"/>, or <c>unknown/unknown</c>
            if the mime type could not be identified.
            </returns>
            <remarks>
            This method does not actually load the file to identify the mime type. 
            The returned mime type depends on the file's extension. 
            </remarks>
        </member>
        <member name="M:Awesomium.Core.Utilities.ToUri(System.String)">
            <summary>
            Gets a <see cref="T:System.Uri"/> instance for this string.
            </summary>
            <param name="uriString">
            The textual representation of a URI.
            </param>
            <returns>
            A <see cref="T:System.Uri"/> instance for this string provided,
            or a <see cref="T:System.Uri"/> representing <c>about:blank</c>,
            if the string provided was a well formatted URI.
            </returns>
        </member>
        <member name="P:Awesomium.Core.Utilities.BlankUri">
            <summary>
            Gets a blank <see cref="T:System.Uri"/> ("about:blank").
            </summary>
        </member>
        <member name="T:Awesomium.Core.BitmapSurface">
            <summary>
            Represents the default surface used with <see cref="T:Awesomium.Core.WebView"/> instances.
            It is a basic bitmap that keeps track of whether or not it has changed since the
            last time you called <see cref="M:Awesomium.Core.BitmapSurface.CopyTo(System.IntPtr,System.Int32,System.Int32,System.Boolean,System.Boolean)"/>.
            </summary>
            <remarks>
            This surface wraps the <c>BitmapSurface</c> available through the native
            Awesomium library.
            <note>
            Starting with Awesomium.NET 1.7 RC2, <see cref="T:Awesomium.Core.BitmapSurface"/>
            instances can handle changes in size, but they will not ever fire <see cref="E:Awesomium.Core.Surface.Updated"/>.
            </note>
            </remarks>
            <threadsafety static="false" instance="false"/>
        </member>
        <member name="T:Awesomium.Core.Surface">
            <summary>
            Represents the base class for managed surfaces.
            </summary>
            <remarks>
            Awesomium.NET provides the <see cref="T:Awesomium.Core.Surface"/> base class that implements <see cref="T:Awesomium.Core.ISurface"/>.
            In most scenarios, deriving <see cref="T:Awesomium.Core.Surface"/> is the suggested way for defining
            your own surface. Implementing <see cref="T:Awesomium.Core.ISurface"/> is useful when you
            want to implement your surface in a class already deriving another class.
            What's more, Awesomium.NET already provides predefined surface implementations
            for most technologies.
            <p/>
            Here's a list of predefined surfaces available with Awesomium.NET:
            <list type="table">
            <listheader>
            <term>Technology</term>
            <description>Type</description>
            </listheader>
            <item>
            <term>Core</term>
            <description><see cref="T:Awesomium.Core.BitmapSurface"/></description>
            </item>
            <item>
            <term>WPF</term>
            <description><see cref="T:Awesomium.Windows.Controls.ImageSurface"/></description>
            </item>
            <item>
            <term>WPF</term>
            <description><see cref="T:Awesomium.Windows.Controls.WebViewPresenter"/></description>
            </item>
            <item>
            <term>Windows Forms</term>
            <description><see cref="T:Awesomium.Windows.Forms.ImageSurface"/></description>
            </item>
            <item>
            <term>Windows Forms</term>
            <description><see cref="T:Awesomium.Windows.Forms.ControlSurface"/></description>
            </item>
            </list>
            To specify your own surface implementation (either this is an <see cref="T:Awesomium.Core.ISurface"/> implementation 
            or a <see cref="T:Awesomium.Core.Surface"/> subclass), you need to do any of the following:
            <list type="bullet">
            <item>
            <description>
            Assign your surface instance to <see cref="P:Awesomium.Core.IWebView.Surface"/>. The instance assigned, should be able to handle changes in size. 
            In particular, <see cref="M:Awesomium.Core.ISurface.Initialize(Awesomium.Core.IWebView,System.Int32,System.Int32)"/> is called every time the size of the view changes.
            </description>
            </item>
            <item>
            <description>
            Handle the <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> event and assign your surface to <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/>, whenever the event occurs. 
            The event occurs every time the size of the view changes. You can assign the same surface every time, or a new one (if your <see cref="T:Awesomium.Core.ISurface"/> 
            implementation cannot handle resizing. All classes deriving <see cref="T:Awesomium.Core.Surface"/> that are available with Awesomium.NET, can handle changes in size). 
            Each time <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> occurs, <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/> returns the surface previously assigned to the view 
            either through <see cref="P:Awesomium.Core.IWebView.Surface"/> or in an earlier handling of this event, or the default surface for the view if none was previously specified.
            So even if you do not set <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/> when <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> occurs, the view will keep using any 
            previously assigned surface.
            </description>
            </item>
            </list>
            <note>
            Surfaces are destroyed either manually when they are not needed or internally, when assigned to a view, when the view they are assigned to, is destroyed.
            </note> 
            </remarks>
            <threadsafety static="false" instance="false"/>
        </member>
        <member name="T:Awesomium.Core.ISurface">
            <summary>
            This interface can be used to provide your own surface
            implementation and directly handle paint and pixel-scroll events
            for an <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
            <remarks>
            Awesomium.NET provides the <see cref="T:Awesomium.Core.Surface"/> base class that implements <see cref="T:Awesomium.Core.ISurface"/>.
            In most scenarios, deriving <see cref="T:Awesomium.Core.Surface"/> is the suggested way for defining
            your own surface. Implementing <see cref="T:Awesomium.Core.ISurface"/> is useful when you
            want to implement your surface in a class already deriving another class.
            What's more, Awesomium.NET already provides predefined surface implementations
            for most technologies.
            <p/>
            Here's a list of predefined surfaces available with Awesomium.NET:
            <list type="table">
            <listheader>
            <term>Technology</term>
            <description>Type</description>
            </listheader>
            <item>
            <term>Core</term>
            <description><see cref="T:Awesomium.Core.BitmapSurface"/></description>
            </item>
            <item>
            <term>WPF</term>
            <description><see cref="T:Awesomium.Windows.Controls.ImageSurface"/></description>
            </item>
            <item>
            <term>WPF</term>
            <description><see cref="T:Awesomium.Windows.Controls.WebViewPresenter"/></description>
            </item>
            <item>
            <term>Windows Forms</term>
            <description><see cref="T:Awesomium.Windows.Forms.ImageSurface"/></description>
            </item>
            <item>
            <term>Windows Forms</term>
            <description><see cref="T:Awesomium.Windows.Forms.ControlSurface"/></description>
            </item>
            </list>
            To specify your own surface implementation (either this is an <see cref="T:Awesomium.Core.ISurface"/> implementation 
            or a <see cref="T:Awesomium.Core.Surface"/> subclass), you need to do any of the following:
            <list type="bullet">
            <item>
            <description>
            Assign your surface instance to <see cref="P:Awesomium.Core.IWebView.Surface"/>. The instance assigned, should be able to handle changes in size. 
            In particular, <see cref="M:Awesomium.Core.ISurface.Initialize(Awesomium.Core.IWebView,System.Int32,System.Int32)"/> is called every time the size of the view changes.
            </description>
            </item>
            <item>
            <description>
            Handle the <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> event and assign your surface to <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/>, whenever the event occurs. 
            The event occurs every time the size of the view changes. You can assign the same surface every time, or a new one (if your <see cref="T:Awesomium.Core.ISurface"/> 
            implementation cannot handle resizing. All classes deriving <see cref="T:Awesomium.Core.Surface"/> that are available with Awesomium.NET, can handle changes in size). 
            Each time <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> occurs, <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/> returns the surface previously assigned to the view 
            either through <see cref="P:Awesomium.Core.IWebView.Surface"/> or in an earlier handling of this event, or the default surface for the view if none was previously specified.
            So even if you do not set <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/> when <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> occurs, the view will keep using any 
            previously assigned surface.
            </description>
            </item>
            </list>
            <note>
            Surfaces are destroyed either manually when they are not needed or internally, when assigned to a view, when the view they are assigned to, is destroyed.
            </note> 
            </remarks>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Awesomium.Core.ISurface.Initialize(Awesomium.Core.IWebView,System.Int32,System.Int32)">
            <summary>
            Called when the size of the view has changed and the surface needs to be re-initialized.
            </summary>
            <param name="view">
            Indicates the view requesting the surface initialization. This is the view this
            <see cref="T:Awesomium.Core.ISurface"/> instance has been assigned too. Surfaces can only be
            assigned to a single view at a time.
            </param>
            <param name="width">
            Indicates the new width of the <paramref name="view"/>.
            </param>
            <param name="height">
            Indicates the new height of the <paramref name="view"/>.
            </param>
            <remarks>
            This method is called right after <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>, to initialize
            the surface. It can be called more than once, whenever the size of the view changes, 
            if the same surface is used throughout the view's life.
            <p/>
            This is the place where it is generally suggested that you initialize any back buffer
            used to copy the view's pixel buffer.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.ISurface.Paint(System.IntPtr,System.Int32,Awesomium.Core.AweRect,Awesomium.Core.AweRect)">
            <summary>
            This method is called whenever the <see cref="T:Awesomium.Core.IWebView"/> instance this surface is assigned to,
            wants to paint a certain section of the Surface with a block of pixels. It is your responsibility to copy
            <paramref name="srcBuffer"/> to the location in this Surface specified by <paramref name="destRect"/>.
            </summary>
            <param name="srcBuffer">
            A pointer to a block of pixels in 32-bit BGRA format. 
            The size of the buffer is: <c>srcRowSpan * srcRect.Height</c>.
            </param>
            <param name="srcRowSpan">
            The number of bytes of each row. (Usually: <c>srcRect.Width * 4</c>)
            </param>
            <param name="srcRect">
            The dimensions of the region of <paramref name="srcBuffer"/> to copy from.
            May have a non-zero origin.
            </param>
            <param name="destRect">
            The location to copy <paramref name="srcBuffer"/> to. Always has same dimensions as <paramref name="srcRect"/> 
            but may have different origin (which specifies the offset of the section to copy to).
            </param>
        </member>
        <member name="M:Awesomium.Core.ISurface.Scroll(System.Int32,System.Int32,Awesomium.Core.AweRect)">
            <summary>
            This method is called whenever the <see cref="T:Awesomium.Core.IWebView"/> instance this surface is assigned to,
            wants to 'scroll' an existing section of the Surface by a certain offset. 
            It your responsibility to translate the pixels within the specified clipping rectangle 
            (<paramref name="clipRect"/>) by the specified offset.
            </summary>
            <param name="dx">The amount of pixels to offset horizontally.</param>
            <param name="dy">The amount of pixels to offset vertically.</param>
            <param name="clipRect">The rectangle that this operation should be clipped to.</param>
        </member>
        <member name="M:Awesomium.Core.Surface.OnInitialized(System.Object,Awesomium.Core.SurfaceInitializedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.Surface.Initialized"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.Surface.OnUpdated(System.Object,Awesomium.Core.SurfaceUpdatedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.Surface.Updated"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.Surface.OnDispose">
            <inheritdoc/>
        </member>
        <member name="M:Awesomium.Core.Surface.GetView(Awesomium.Core.ISurface)">
            <summary>
            Gets the <see cref="T:Awesomium.Core.IWebView"/> instance a surface is currently assigned to.
            </summary>
            <param name="surface">
            The <see cref="T:Awesomium.Core.ISurface"/> instance to check.
            </param>
            <returns>
            An <see cref="T:Awesomium.Core.IWebView"/> instance the specified <see cref="T:Awesomium.Core.ISurface"/> is currently assigned to,
            or <c>null</c> (<c>Nothing</c> in Visual Basic) if the specified <see cref="T:Awesomium.Core.ISurface"/>
            is currently not used by a view.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Surface.Initialize(Awesomium.Core.IWebView,System.Int32,System.Int32)">
            <summary>
            Called when the size of the view has changed and the surface needs to be re-initialized.
            </summary><param name="view">
            Indicates the view requesting the surface initialization. This is the view this
            <see cref="T:Awesomium.Core.ISurface"/> instance has been assigned too. Surfaces can only be
            assigned to a single view at a time.
            </param><param name="width">
            Indicates the new width of the <paramref name="view"/>.
            </param><param name="height">
            Indicates the new height of the <paramref name="view"/>.
            </param><remarks>
            This method is called right after <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>, to initialize
            the surface. It can be called more than once, whenever the size of the view changes, 
            if the same surface is used throughout the view's life.
            <p/>
            This is the place where it is generally suggested that you initialize any back buffer
            used to copy the view's pixel buffer.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.Surface.Paint(System.IntPtr,System.Int32,Awesomium.Core.AweRect,Awesomium.Core.AweRect)">
            <summary>
            This method is called whenever the <see cref="T:Awesomium.Core.IWebView"/> instance this surface is assigned to,
            wants to paint a certain section of the Surface with a block of pixels. It is your responsibility to copy
            <paramref name="srcBuffer"/> to the location in this Surface specified by <paramref name="destRect"/>.
            </summary><param name="srcBuffer">
            A pointer to a block of pixels in 32-bit BGRA format. 
            The size of the buffer is: <c>srcRowSpan * srcRect.Height</c>.
            </param><param name="srcRowSpan">
            The number of bytes of each row. (Usually: <c>srcRect.Width * 4</c>)
            </param><param name="srcRect">
            The dimensions of the region of <paramref name="srcBuffer"/> to copy from.
            May have a non-zero origin.
            </param><param name="destRect">
            The location to copy <paramref name="srcBuffer"/> to. Always has same dimensions as <paramref name="srcRect"/> 
            but may have different origin (which specifies the offset of the section to copy to).
            </param>
            <remarks>
            When the call to this method returns, the <see cref="E:Awesomium.Core.Surface.Updated"/> is fired.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.Surface.Scroll(System.Int32,System.Int32,Awesomium.Core.AweRect)">
            <summary>
            This method is called whenever the <see cref="T:Awesomium.Core.IWebView"/> instance this surface is assigned to,
            wants to 'scroll' an existing section of the Surface by a certain offset. 
            It your responsibility to translate the pixels within the specified clipping rectangle 
            (<paramref name="clipRect"/>) by the specified offset.
            </summary><param name="dx">The amount of pixels to offset horizontally.</param><param name="dy">The amount of pixels to offset vertically.</param><param name="clipRect">The rectangle that this operation should be clipped to.</param>
            <remarks>
            When the call to this method returns, the <see cref="E:Awesomium.Core.Surface.Updated"/> is fired.
            </remarks>
        </member>
        <member name="E:Awesomium.Core.Surface.Initialized">
            <summary>
            Occurs when this surface is being initialized for use with a <see cref="T:Awesomium.Core.IWebView"/>.
            </summary>
            <remarks>
            This event can be called more than once if you are reusing this surface
            for multiple <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> calls.
            <note>
            While assigned to a view and initialized, a surface can only be used
            with that single view.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Core.Surface.Updated">
            <summary>
            Occurs when the surface has been updated, which is after a <see cref="M:Awesomium.Core.Surface.Paint(System.IntPtr,System.Int32,Awesomium.Core.AweRect,Awesomium.Core.AweRect)"/>
            or <see cref="M:Awesomium.Core.Surface.Scroll(System.Int32,System.Int32,Awesomium.Core.AweRect)"/> operation has completed.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Surface.Width">
            <summary>
            Gets the current width of the surface.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Surface.Height">
            <summary>
            Gets the current height if the surface.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Surface.View">
            <summary>
            Gets the <see cref="T:Awesomium.Core.IWebView"/> instance this surface
            is currently assigned to.
            </summary>
            <remarks>
            This can be <c>null</c> (<c>Nothing</c> in Visual Basic)
            is the surface is not currently assigned to any view.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.BitmapSurface.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:Awesomium.Core.BitmapSurface"/> instance of a specified size.
            </summary>
            <param name="width">The width of the surface.</param>
            <param name="height">The height of the surface.</param>
        </member>
        <member name="M:Awesomium.Core.BitmapSurface.Initialize(Awesomium.Core.IWebView,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.BitmapSurface.CopyTo(System.IntPtr,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Copies this bitmap to a certain destination. This will also set <see cref="P:Awesomium.Core.BitmapSurface.IsDirty"/>
            to <c>false</c>.
            </summary>
            <param name="destBuffer">
            A pointer to the destination pixel buffer.
            </param>
            <param name="destRowSpan">
            The number of bytes per-row of the destination.
            </param>
            <param name="destDepth">
            The depth (number of bytes per pixel; usually 4 for BGRA surfaces and 3 for BGR surfaces).
            </param>
            <param name="convertToRGBA">
            Indicates if we should convert BGRA to RGBA.
            </param>
            <param name="flipY">
            Indicates if we should invert the bitmap vertically.
            </param>
        </member>
        <member name="M:Awesomium.Core.BitmapSurface.SaveToPNG(System.String,System.Boolean)">
            <summary>
            Save this bitmap to a PNG image on disk.
            </summary>
            <param name="filePath">
            The file path (should have filename ending in .png).
            </param>
            <param name="preserveTransparency">
            Indicates if we should preserve the alpha channel.
            </param>
            <returns>
            <c>true</c> if the operation succeeded; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.BitmapSurface.SaveToPNG(System.String)">
            <summary>
            Save this bitmap to a PNG image on disk.
            </summary>
            <param name="filePath">
            The file path (should have filename ending in .png).
            </param>
            <returns>
            <c>true</c> if the operation succeeded; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.BitmapSurface.SaveToJPEG(System.String,System.Int32)">
            <summary>
            Save this bitmap to a JPEG image on disk.
            </summary>
            <param name="filePath">
            The file path (should have filename ending in .jpg).
            </param>
            <param name="quality">
            Indicates the compression quality (1-100, with 100 being best
            picture quality but highest file size).
            </param>
            <returns>
            <c>true</c> if the operation succeeded; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.BitmapSurface.SaveToJPEG(System.String)">
            <summary>
            Save this bitmap to a JPEG image on disk.
            </summary>
            <param name="filePath">
            The file path (should have filename ending in .jpg).
            </param>
            <returns>
            <c>true</c> if the operation succeeded; <c>false</c> otherwise.
            </returns>
            <remarks>
            The created JPEG image will have a default quality of <c>90</c>.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.BitmapSurface.GetAlphaAtPoint(System.Int32,System.Int32)">
            <summary>
            Gets the opacity (0-255) of a certain point (in pixels).
            </summary>
            <param name="x">The x-coordinate in pixels.</param>
            <param name="y">The y-coordinate in pixels.</param>
            <returns>
            The opacity of the bitmap in the specified coordinates.
            </returns>
        </member>
        <member name="P:Awesomium.Core.BitmapSurface.Buffer">
            <summary>
            A pointer to the raw pixel buffer (32-bit BGRA format, 4 bpp).
            </summary>
        </member>
        <member name="P:Awesomium.Core.BitmapSurface.Width">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Core.BitmapSurface.Height">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Core.BitmapSurface.RowSpan">
            <summary>
            The number of bytes per row (this is usually <c>Width * 4</c>).
            </summary>
        </member>
        <member name="P:Awesomium.Core.BitmapSurface.IsDirty">
            <summary>
            Gets or sets if the bitmap has changed.
            </summary>
            <remarks>
            This is updated automatically if the bitmap has changed after the last
            time <see cref="M:Awesomium.Core.BitmapSurface.CopyTo(System.IntPtr,System.Int32,System.Int32,System.Boolean,System.Boolean)"/> was called. It is only useful to set this yourself,
            if you copied the bitmap buffer without using the <see cref="M:Awesomium.Core.BitmapSurface.CopyTo(System.IntPtr,System.Int32,System.Int32,System.Boolean,System.Boolean)"/> method.
            </remarks>
        </member>
        <member name="T:Awesomium.Core.CursorType">
            <summary>
            An enumeration of all the possible web cursors.
            </summary>
            <remarks>
            This enumeration is used with the <see cref="E:Awesomium.Core.IWebView.CursorChanged"/> event.
            </remarks>
            <seealso cref="E:Awesomium.Core.IWebView.CursorChanged"/>
            <seealso cref="T:Awesomium.Core.CursorChangedEventArgs"/>
        </member>
        <member name="T:Awesomium.Core.Error">
            <summary>
            Represents a generic error.
            </summary>
        </member>
        <member name="F:Awesomium.Core.Error.None">
            <summary>
            No error (everything is cool!)
            </summary>
        </member>
        <member name="F:Awesomium.Core.Error.BadParameters">
            <summary>
            Bad parameters were supplied.
            </summary>
        </member>
        <member name="F:Awesomium.Core.Error.ObjectGone">
            <summary>
            The object no longer exists.
            </summary>
        </member>
        <member name="F:Awesomium.Core.Error.ConnectionGone">
            <summary>
            The IPC connection no longest exists.
            </summary>
        </member>
        <member name="F:Awesomium.Core.Error.TimedOut">
            <summary>
            The operation timed out.
            </summary>
        </member>
        <member name="F:Awesomium.Core.Error.WebViewGone">
            <summary>
            The web-view no longer exists.
            </summary>
        </member>
        <member name="F:Awesomium.Core.Error.Generic">
            <summary>
            A generic error was encountered.
            </summary>
        </member>
        <member name="T:Awesomium.Core.ScrollEventHandler">
            <summary>
            Represents the method that will handle the <see cref="M:Awesomium.Core.Surface.Scroll(System.Int32,System.Int32,Awesomium.Core.AweRect)"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Awesomium.Core.ScrollEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.ScrollEventArgs">
            <summary>
            Provides data for the <see cref="M:Awesomium.Core.Surface.Scroll(System.Int32,System.Int32,Awesomium.Core.AweRect)"/> event.
            </summary>
        </member>
        <member name="T:Awesomium.Core.PaintEventHandler">
            <summary>
            Represents the method that will handle the <see cref="M:Awesomium.Core.Surface.Paint(System.IntPtr,System.Int32,Awesomium.Core.AweRect,Awesomium.Core.AweRect)"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Awesomium.Core.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.PaintEventArgs">
            <summary>
            Provides data for the <see cref="M:Awesomium.Core.Surface.Paint(System.IntPtr,System.Int32,Awesomium.Core.AweRect,Awesomium.Core.AweRect)"/> event.
            </summary>
        </member>
        <member name="T:Awesomium.Core.JSObject">
            <summary>
            Represents an <c>Object</c> type in Javascript. You can add, set, get,
            and remove named Properties and invoke named Methods.
            </summary>
            <remarks>
            There are two major types of <c>JSObjects</c>, <i>Local</i> and <i>Remote</i>. 
            Local objects only have Properties and can be accessed without error
            in the main process. Users can only create Local objects. Remote
            objects are defined within the V8 engine in a separate process
            and can have both Properties and Methods. Method calls on Remote
            objects are proxied to the process and execute synchronously but
            may fail for various reasons (see <see cref="M:Awesomium.Core.JSObject.GetLastError"/>).
            <p/>
            <see cref="T:Awesomium.Core.JSObject"/> inherits <see cref="T:System.Dynamic.DynamicObject"/> and supports
            the <b>Dynamic Language Runtime</b> (DLR). This allows flexible coding,
            much similar to Javascript (which is a dynamic language).
            <p/>
            For details and samples of using the <see cref="T:Awesomium.Core.JSObject"/> with both
            the regular as well as the dynamic coding, see:
            // TODO: Add page address.
            </remarks>
            <threadsafety static="false" instance="false"/>
        </member>
        <member name="M:Awesomium.Core.JSObject.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.JSObject.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.JSObject.GetPropertyNames">
            <summary>
            Gets an array of names of this object's properties.
            </summary>
            <returns>
            An array of <see cref="T:System.String"/> representing the names of
            this object's properties.
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSObject.HasProperty(System.String)">
            <summary>
            Gets if this object has a property with the specified name.
            </summary>
            <param name="name">
            The name of the property to look for.
            </param>
            <returns>
            <c>true</c> if this object has a property with the specified
            name; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSObject.RemoveProperty(System.String)">
            <summary>
            Removes the property with the specified name, of any.
            </summary>
            <param name="name">
            The name of the property to remove.
            </param>
        </member>
        <member name="M:Awesomium.Core.JSObject.GetMethodNames">
            <summary>
            Gets an array of names of this object's methods.
            </summary>
            <returns>
            An array of <see cref="T:System.String"/> representing the names of
            this object's methods.
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSObject.HasMethod(System.String)">
            <summary>
            Gets if this object has a method with the specified name.
            </summary>
            <param name="name">
            The name of the method to look for.
            </param>
            <returns>
            <c>true</c> if this object has a method with the specified
            name; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSObject.Bind(System.String,System.Boolean,Awesomium.Core.JavascriptMethodEventHandler)">
            <summary>
            Creates a custom method, and binds it to a <see cref="T:Awesomium.Core.JavascriptMethodEventHandler"/> delegate.
            </summary>
            <param name="methodName">
            The name of the method to create or substitute.
            </param>
            <param name="hasReturnValue">
            Indicates if the new method should return a value.
            </param>
            <param name="handler">
            A <see cref="T:Awesomium.Core.JavascriptMethodEventHandler"/> method used to handle calls
            to the custom method.
            </param>
            <remarks>
            If the method exists already, it is substituted by the custom method. This
            allows you to bind standard methods of HTML DOM objects, to managed
            event handlers that are called when the methods are called from Javascript.
            </remarks>
            <example>
            You can create and bind custom methods, using both the regular and the dynamic
            API. The following examples, demonstrate both:
            <p/>
            <b>Regular API:</b>
            <code>
            if ( !webView.IsLive )
            	return;
            
            // Create and acquire a Global Javascript object.
            // These object persist for the lifetime of the web-view.
            using ( JSObject myGlobalObject = webView.CreateGlobalJavascriptObject( "myGlobalObject" ) )
            {
            	// The handler is of type JavascriptMethodEventHandler. Here we define it
            	// using a lambda expression.
            	myGlobalObject.Bind( "myMethod", true, ( s, e ) =&gt;
            	{
            	    // Provide a response.
            		e.Result = "My response";
            	} );
            }
            </code>
            <code lang="VB">
            If (Not webView.IsLive) Then Return
            
            ' Create and acquire a Global Javascript object.
            ' These object persist for the lifetime of the web-view.
            Using myGlobalObject As JSObject = webView.CreateGlobalJavascriptObject("myGlobalObject")
            	' The handler is of type JavascriptMethodEventHandler. Here we define it
            	' using a lambda expression.
            	myGlobalObject.Bind("changeText", True, 
            		Function(s, e)
            	        ' Provide a response.
            			e.Result = "My response"
            		End Function)
            End Using
            </code>
            <p/>
            <b>Dynamic API</b>
            <code>
            if ( !webView.IsLive )
            	return;
            
            // Get the global object we had previously created, and assign it to a dynamic this time.
            dynamic myGlobalObject = (JSObject)webView.ExecuteJavascriptWithResult( "myGlobalObject" );
            
            // Make sure we have the object.
            if ( myGlobalObject == null )
            	return;
            
            using ( myGlobalObject )
            {
            	// Create and bind a custom method dynamically. When using the dynamic model, methods
            	// created are always Javascript methods with return value.
            	myGlobalObject.myMethod = (JavascriptMethodEventHandler)OnCustomJavascriptMethod;
            
            	// Our method can now be executed from Javascript. It could be Javascript already available in the page.
            	// For this sample, we will inject the Javascript ourselves and execute it.
            	string jsResponse = webView.ExecuteJavascriptWithResult( "myGlobalObject.myMethod( 'This is a call from Javascript.' );" );
            
            	if ( !String.IsNullOrEmpty( jsResponse ) )
            		// Print the response.
            		Debug.Print( String.Format( "And this is the response: {0}", jsResponse ) );
            }
            </code>
            <code lang="VB">
            Option Strict Off
            
            If Not webView.IsLive Then Return
            
            ' Get the global object we had previously created, and assign it to a dynamic this time.
            Dim myGlobalObject = CType(webView.ExecuteJavascriptWithResult("myGlobalObject"), JSObject)
            
            ' Make sure we have the object.
            If myGlobalObject Is Nothing Then
            	Return
            End If
            
            Using myGlobalObject
            	' Create and bind a custom method dynamically. When using the dynamic model, methods
            	' created are always Javascript methods with return value.
            	myGlobalObject.myMethod = AddressOf OnCustomJavascriptMethod
            
            	' Our method can now be executed from Javascript. It could be Javascript already available in the page.
            	' For this sample, we will inject the Javascript ourselves and execute it.
            	Dim jsResponse As String = webView.ExecuteJavascriptWithResult("myGlobalObject.myMethod( 'This is a call from Javascript.' );")
            
            	If Not String.IsNullOrEmpty(jsResponse) Then
            		' Print the response.
            		Debug.Print(String.Format("And this is the response: {0}", jsResponse))
            	End If
            End Using
            </code>
            </example>
        </member>
        <member name="M:Awesomium.Core.JSObject.Invoke(System.String,Awesomium.Core.JSValue[])">
            <summary>
            Invokes a method with a set of arguments and returns a result.
            </summary>
            <param name="methodName">The name of the method to call.</param>
            <param name="args">The arguments to pass.</param>
            <returns>Returns the result of the method call.</returns>
            <remarks>
            <note>
            Only valid for <c>Remote</c> objects.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Core.JSObject.Clone">
            <summary>
            Creates a shallow copy of this <see cref="T:Awesomium.Core.JSObject"/> instance.
            </summary>
        </member>
        <member name="M:Awesomium.Core.JSObject.ToString">
            <summary>
            Gets the textual representation of the object.
            </summary>
            <returns>
            A <see cref="T:System.String"/> value representing
            the textual representation of the object.
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSObject.GetLastError">
            <summary>
            Gets the latest error that may have occurred.
            </summary>
            <returns>
            Gets an <see cref="T:Awesomium.Core.Error"/> value representing the error that may have
            occurred, during the last call to any of this object's methods or properties.
            </returns>
            <remarks>
            Accessing each of the methods and properties of a <see cref="T:Awesomium.Core.JSObject"/>,
            may fail if the object is of type <see cref="F:Awesomium.Core.JSObjectType.Remote"/>.
            You should check if there was an error, via this method.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.JSObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <exclude />
        </member>
        <member name="M:Awesomium.Core.JSObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <exclude />
        </member>
        <member name="M:Awesomium.Core.JSObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <exclude />
        </member>
        <member name="M:Awesomium.Core.JSObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
            <exclude />
        </member>
        <member name="M:Awesomium.Core.JSObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <exclude />
        </member>
        <member name="M:Awesomium.Core.JSObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
            <exclude />
        </member>
        <member name="M:Awesomium.Core.JSObject.op_Equality(Awesomium.Core.JSObject,Awesomium.Core.JSObject)">
            <summary>
            Tests whether two <see cref="T:Awesomium.Core.JSObject"/> instances represent the same Javascript objects.
            </summary>
            <param name="o1">
            The <see cref="T:Awesomium.Core.JSObject"/> instance that is to the left of the equality operator.
            </param>
            <param name="o2">
            The <see cref="T:Awesomium.Core.JSObject"/> instance that is to the right of the equality operator.
            </param>
            <returns>
            This operator returns <c>true</c> if the two <see cref="T:Awesomium.Core.JSObject"/> instances
            represent the same Javascript objects; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSObject.op_Inequality(Awesomium.Core.JSObject,Awesomium.Core.JSObject)">
            <summary>
            Tests whether two <see cref="T:Awesomium.Core.JSObject"/> instances represent different Javascript objects.
            </summary>
            <param name="o1">
            The <see cref="T:Awesomium.Core.JSObject"/> instance that is to the left of the inequality operator.
            </param>
            <param name="o2">
            The <see cref="T:Awesomium.Core.JSObject"/> instance that is to the right of the inequality operator.
            </param>
            <returns>
            This operator returns <c>true</c> if the two <see cref="T:Awesomium.Core.JSObject"/> instances
            represent different Javascript objects; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:Awesomium.Core.JSObject.IsDisposed">
            <summary>
            Gets if this <see cref="T:Awesomium.Core.JSObject"/> instance has been disposed.
            </summary>
            <remarks>
            Disposing a <see cref="T:Awesomium.Core.JSObject"/> instance, does not mean that the actual
            Javascript object is destroyed. You can later acquire it again (using
            <see cref="M:Awesomium.Core.IWebView.ExecuteJavascriptWithResult(System.String)"/> for example).
            <note>
            It is generally suggested that you dispose of <see cref="T:Awesomium.Core.JSObject"/>
            instances, when you have finished using them, and acquire them 
            once they are needed again. The ideal way, is by wrapping your code
            in a <c>using</c> (<c>Using</c> in Visual Basic) block.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.JSObject.Type">
            <summary>
            Gets this object's type.
            </summary>
            <seealso cref="T:Awesomium.Core.JSObjectType"/>
        </member>
        <member name="P:Awesomium.Core.JSObject.RemoteID">
            <summary>
            Get the remote ID for this <see cref="T:Awesomium.Core.JSObject"/> instance
            (will be <c>0</c> if this object is of type <see cref="F:Awesomium.Core.JSObjectType.Local"/>).
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSObject.Owner">
            <summary>
            Get this object's owning <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
            <remarks>
            This is only valid for <see cref="F:Awesomium.Core.JSObjectType.Remote"/> objects. 
            Local objects will return <c>null</c> (<c>Nothing</c> in Visual Basic).
            If the connection has gone away, this will also return <c>null</c>
            (<c>Nothing</c> in Visual Basic).
            </remarks>
        </member>
        <member name="P:Awesomium.Core.JSObject.Property(System.String)">
            <summary>
            Gets or sets the value of the specified named property.
            </summary>
            <param name="propertyName">
            The name of the property whose value will be set or retrieved.
            If the property being set does not exist, it will be created.
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.JSValue"/> representing the value of the specified named property.
            </returns>
            <remarks>
            <see cref="T:Awesomium.Core.JSValue"/> supports explicit and implicit casting to all
            data types available with the Javascript interoperation API.
            </remarks>
            <example>
            <code>
            using ( JSObject myObj = new JSObject() )
            {
            	// Create a property and assign a value to it.
            	myObj[ "myProperty" ] = "Test";
            
            	// Prints 'Test'.
            	Debug.Print( myObj[ "myProperty" ] );
            }
            </code>
            <code lang="VB">
            Using myObj As New JSObject()
            	' Create a property and assign a value to it.
            	myObj("myProperty") = "Test"
            
            	' Prints 'Test'.
            	Debug.Print(myObj("myProperty"))
            End Using
            </code>
            </example>
        </member>
        <member name="T:Awesomium.Core.JSValue">
            <summary>
            Represents a value in Javascript.
            </summary>
            <remarks>
            The supported data types by the Javascript interoperation
            API, are:
            <list type="bullet">
            <item>
            <description>
            <c>Boolean</c>
            </description>
            </item>
            <item>
            <description>
            <c>Integer</c>
            </description>
            </item>
            <item>
            <description>
            <c>Double</c>
            </description>
            </item>
            <item>
            <description>
            <c>String</c>
            </description>
            </item>
            <item>
            <description>
            <c>Array</c>
            </description>
            </item>
            <item>
            <description>
            <c>Object</c> (see: <see cref="T:Awesomium.Core.JSObject"/>)
            </description>
            </item>
            <item>
            <description>
            <c>Null</c> (see: <see cref="F:Awesomium.Core.JSValue.Null"/>)
            </description>
            </item>
            <item>
            <description>
            <c>Undefined</c> (see: <see cref="F:Awesomium.Core.JSValue.Undefined"/>)
            </description>
            </item>
            </list>
            <note>
            <see cref="T:Awesomium.Core.JSValue"/> supports explicit and implicit casting to and from the managed
            equivalent of all the supported data types. You rarely need to work with the
            <see cref="T:Awesomium.Core.JSValue"/> itself. However, it can be useful if you need to check the
            value type before casting.
            </note>
            </remarks>
            <threadsafety static="false" instance="false"/>
        </member>
        <member name="F:Awesomium.Core.JSValue.Null">
            <summary>
            Gets the global <c>Null</c> <see cref="T:Awesomium.Core.JSValue"/> instance.
            </summary>
        </member>
        <member name="F:Awesomium.Core.JSValue.Undefined">
            <summary>
            Gets the global <c>Undefined</c> <see cref="T:Awesomium.Core.JSValue"/> instance.
            </summary>
        </member>
        <member name="M:Awesomium.Core.JSValue.#ctor(System.Boolean)">
            <summary>
            Creates a value of type <c>Boolean</c>.
            </summary>
            <param name="value">
            The managed boolean to create a Javascript value for.
            </param>
            <remarks>
            <see cref="T:Awesomium.Core.JSValue"/> supports explicit and implicit casting to and from the managed
            equivalent of all the supported data types. You rarely need to create a <see cref="T:Awesomium.Core.JSValue"/>
            explicitly. You can directly pass any of the equivalent managed values, to methods
            and properties expecting a <see cref="T:Awesomium.Core.JSValue"/> instance.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.JSValue.#ctor(System.Int32)">
            <summary>
            Creates a value of type <c>Integer</c>.
            </summary>
            <param name="value">
            The managed integer to create a Javascript value for.
            </param>
            <remarks>
            <see cref="T:Awesomium.Core.JSValue"/> supports explicit and implicit casting to and from the managed
            equivalent of all the supported data types. You rarely need to create a <see cref="T:Awesomium.Core.JSValue"/>
            explicitly. You can directly pass any of the equivalent managed values, to methods
            and properties expecting a <see cref="T:Awesomium.Core.JSValue"/> instance.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.JSValue.#ctor(System.Double)">
            <summary>
            Creates a value of type <c>Double</c>.
            </summary>
            <param name="value">
            The managed double to create a Javascript value for.
            </param>
            <remarks>
            <see cref="T:Awesomium.Core.JSValue"/> supports explicit and implicit casting to and from the managed
            equivalent of all the supported data types. You rarely need to create a <see cref="T:Awesomium.Core.JSValue"/>
            explicitly. You can directly pass any of the equivalent managed values, to methods
            and properties expecting a <see cref="T:Awesomium.Core.JSValue"/> instance.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.JSValue.#ctor(System.String)">
            <summary>
            Creates a value of type <c>String</c>.
            </summary>
            <param name="value">
            The managed string to create a Javascript value for.
            </param>
            <remarks>
            <see cref="T:Awesomium.Core.JSValue"/> supports explicit and implicit casting to and from the managed
            equivalent of all the supported data types. You rarely need to create a <see cref="T:Awesomium.Core.JSValue"/>
            explicitly. You can directly pass any of the equivalent managed values, to methods
            and properties expecting a <see cref="T:Awesomium.Core.JSValue"/> instance.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.JSValue.#ctor(Awesomium.Core.JSObject)">
            <summary>
            Creates a value of type <c>Object</c>.
            </summary>
            <param name="value">
            The Javascript <c>Object</c> to create a Javascript value for.
            </param>
            <remarks>
            <see cref="T:Awesomium.Core.JSValue"/> supports explicit and implicit casting to and from the managed
            equivalent of all the supported data types. You rarely need to create a <see cref="T:Awesomium.Core.JSValue"/>
            explicitly. You can directly pass any of the equivalent managed values, to methods
            and properties expecting a <see cref="T:Awesomium.Core.JSValue"/> instance.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.JSValue.#ctor(Awesomium.Core.JSValue[])">
            <summary>
            Creates a value of type <c>Array</c>.
            </summary>
            <param name="values">
            An array of <see cref="T:Awesomium.Core.JSValue"/> to create a Javascript value for.
            </param>
            <remarks>
            <see cref="T:Awesomium.Core.JSValue"/> supports explicit and implicit casting to and from the managed
            equivalent of all the supported data types. You rarely need to create a <see cref="T:Awesomium.Core.JSValue"/>
            explicitly. You can directly pass any of the equivalent managed values, to methods
            and properties expecting a <see cref="T:Awesomium.Core.JSValue"/> instance.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.JSValue.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.JSValue.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.JSValue.ToString">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.JSValue.op_Equality(Awesomium.Core.JSValue,Awesomium.Core.JSValue)">
            <summary>
            Tests whether two <see cref="T:Awesomium.Core.JSValue"/> structures represent the same Javascript value.
            </summary>
            <param name="v1">
            The <see cref="T:Awesomium.Core.JSValue"/> structure that is to the left of the equality operator.
            </param>
            <param name="v2">
            The <see cref="T:Awesomium.Core.JSValue"/> structure that is to the right of the equality operator.
            </param>
            <returns>
            This operator returns <c>true</c> if the two <see cref="T:Awesomium.Core.JSValue"/> structures
            represent the same Javascript value; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSValue.op_Inequality(Awesomium.Core.JSValue,Awesomium.Core.JSValue)">
            <summary>
            Tests whether two <see cref="T:Awesomium.Core.JSValue"/> structures represent different Javascript values.
            </summary>
            <param name="v1">
            The <see cref="T:Awesomium.Core.JSValue"/> structure that is to the left of the inequality operator.
            </param>
            <param name="v2">
            The <see cref="T:Awesomium.Core.JSValue"/> structure that is to the right of the inequality operator.
            </param>
            <returns>
            This operator returns <c>true</c> if the two <see cref="T:Awesomium.Core.JSValue"/> structures
            represent different Javascript values; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:Awesomium.Core.JSValue.IsBoolean">
            <summary>
            Gets if this <see cref="T:Awesomium.Core.JSValue"/> instance represents
            a Javascript <c>Boolean</c> value.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSValue.IsInteger">
            <summary>
            Gets if this <see cref="T:Awesomium.Core.JSValue"/> instance represents
            a Javascript <c>Integer</c> value.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSValue.IsDouble">
            <summary>
            Gets if this <see cref="T:Awesomium.Core.JSValue"/> instance represents
            a Javascript <c>Double</c> value.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSValue.IsNumber">
            <summary>
            Gets if this <see cref="T:Awesomium.Core.JSValue"/> instance represents
            a Javascript number.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSValue.IsString">
            <summary>
            Gets if this <see cref="T:Awesomium.Core.JSValue"/> instance represents
            a Javascript <c>String</c> value.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSValue.IsArray">
            <summary>
            Gets if this <see cref="T:Awesomium.Core.JSValue"/> instance represents
            a Javascript <c>Array</c> value.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSValue.IsObject">
            <summary>
            Gets if this <see cref="T:Awesomium.Core.JSValue"/> instance represents
            a Javascript <c>Object</c> value.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSValue.IsNull">
            <summary>
            Gets if this <see cref="T:Awesomium.Core.JSValue"/> instance represents
            a Javascript <c>Null</c> value.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSValue.IsUndefined">
            <summary>
            Gets if this <see cref="T:Awesomium.Core.JSValue"/> instance represents
            a Javascript <c>Undefined</c> object.
            </summary>
        </member>
        <member name="T:Awesomium.Core.LogLevel">
            <summary>
            Specifies the level of verbosity for the log. 
            See <see cref="P:Awesomium.Core.WebConfig.LogLevel"/>.
            </summary>
        </member>
        <member name="F:Awesomium.Core.LogLevel.None">
            <summary>
            No log is created.
            </summary>
        </member>
        <member name="F:Awesomium.Core.LogLevel.Normal">
            <summary>
            Logs only errors.
            </summary>
        </member>
        <member name="F:Awesomium.Core.LogLevel.Verbose">
            <summary>
            Logs everything.
            </summary>
        </member>
        <member name="T:Awesomium.Core.MouseButton">
            <summary>
            Represents the three different mouse-button types.
            </summary>
        </member>
        <member name="P:Awesomium.Core.SurfaceFactory.Surfaces">
            <summary>
            Gets a dictionary of <see cref="T:Awesomium.Core.ISurface"/> wrappers
            maintained by this factory.
            </summary>
        </member>
        <member name="T:Awesomium.Core.TerminationStatus">
            <summary>
            Indicates the termination status of an <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.Crashed"/>
            <seealso cref="T:Awesomium.Core.CrashedEventArgs"/>
            <seealso cref="P:Awesomium.Core.IWebView.TerminationStatus"/>
        </member>
        <member name="F:Awesomium.Core.TerminationStatus.Normal">
            <summary>
            Zero Exit Status.
            </summary>
        </member>
        <member name="F:Awesomium.Core.TerminationStatus.Abnormal">
            <summary>
            Non-Zero exit status.
            </summary>
        </member>
        <member name="F:Awesomium.Core.TerminationStatus.Killed">
            <summary>
            SIGKILL or Task Manager kill.
            </summary>
        </member>
        <member name="F:Awesomium.Core.TerminationStatus.Crashed">
            <summary>
            Segmentation Fault.
            </summary>
        </member>
        <member name="F:Awesomium.Core.TerminationStatus.StillRunning">
            <summary>
            Process hasn't exited yet.
            </summary>
        </member>
        <member name="F:Awesomium.Core.TerminationStatus.None">
            <summary>
            The view has not been instantiated.
            </summary>
        </member>
        <member name="T:Awesomium.Core.WebConfig">
            <summary>
            Indicates configuration settings for the <see cref="T:Awesomium.Core.WebCore"/>,
            during initialization.
            </summary>
            <remarks>
            This structure is used with <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>, to specify
            configuration settings for the <see cref="T:Awesomium.Core.WebCore"/>.
            <p/>
            The <see cref="T:Awesomium.Core.WebCore"/> is not necessarily started immediately after you call
            <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>.
            Actual initialization occurs when the first <see cref="T:Awesomium.Core.WebSession"/> 
            (see <see cref="M:Awesomium.Core.WebCore.CreateWebSession(Awesomium.Core.WebPreferences)"/>) or <see cref="T:Awesomium.Core.IWebView"/> instance is created. 
            You have a last chance to edit the configuration settings when the <see cref="E:Awesomium.Core.WebCore.Starting"/> 
            event is fired.
            <p/>
            You can force the <see cref="T:Awesomium.Core.WebCore"/> to start immediately by using the
            <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/> overload
            specifying <c>true</c> for the <c>start</c> parameter. In several scenarios, 
            this may seriously affect the auto-update feature's availability. For more
            information see <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig,System.Boolean)"/>.
            <note>
            These setting cannot be changed after the <see cref="T:Awesomium.Core.WebCore"/> has started.
            </note>
            </remarks>
            <example>
            <code>
            WebCore.Initialize( new WebConfig() { LogLevel = LogLevel.Verbose } );
            </code>
            <code lang="VB">
            WebCore.Initialize( New WebConfig() With { .LogLevel = LogLevel.Verbose } )
            </code>
            </example>
        </member>
        <member name="M:Awesomium.Core.WebConfig.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.WebConfig.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.WebConfig.op_Equality(Awesomium.Core.WebConfig,Awesomium.Core.WebConfig)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.WebConfig"/> instances are equivalent.
            </summary>
            <param name="wc1">
            The <see cref="T:Awesomium.Core.WebConfig"/> instance that is to the left of the equality operator.
            </param>
            <param name="wc2">
            The <see cref="T:Awesomium.Core.WebConfig"/> instance that is to the right of the equality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="wc1"/> and <paramref name="wc2"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.WebConfig.op_Inequality(Awesomium.Core.WebConfig,Awesomium.Core.WebConfig)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.WebConfig"/> instances are not equal.
            </summary>
            <param name="wc1">
            The <see cref="T:Awesomium.Core.WebConfig"/> instance that is to the left of the inequality operator.
            </param>
            <param name="wc2">
            The <see cref="T:Awesomium.Core.WebConfig"/> instance that is to the right of the inequality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="wc1"/> and <paramref name="wc2"/> are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Awesomium.Core.WebConfig.LogLevel">
            <summary>
            Gets or sets the level of verbosity for the logger.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebConfig.LogPath">
            <summary>
            Gets or sets the file path to the log file (should include filename, for example:
            <c>C:\\my_path\\out.log</c>). This is <c>./awesomium.log</c> by default.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebConfig.PluginsPath">
            <summary>
            Gets or sets the directory path to search for additional plugins. This is useful for
            bundling plugins with your application.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebConfig.ChildProcessPath">
            <summary>
            Gets or sets the file path to the child process. This is <c>awesomium_process</c>
            by default.
            </summary>
            <seealso cref="F:Awesomium.Core.WebConfig.CHILD_PROCESS_DEFAULT"/>
        </member>
        <member name="P:Awesomium.Core.WebConfig.UserAgent">
            <summary>
            Gets or sets the user-agent string to use instead of the default. You should only
            specify this if you want to spoof the user-agent.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebConfig.RemoteDebuggingPort">
            <summary>
            Gets or sets the port that the Awesomium Inspector's HTTP server should listen on.
            </summary>
            <remarks>
            To enable the inspector, set this value to any non-zero port (ex, 1337)
            and then go to http://127.0.0.1:1337 (or whatever port you specified)
            in some other browser.
            <note>
            Please note you must have <b>inspector.pak</b> in your working directory
            for the Inspector to load correctly.
            </note>
            Specify <c>0</c> to disable the inspector (the default).
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebConfig.HomeURL">
            <summary>
            Gets or sets the default Home URL.
            This is used with <see cref="M:Awesomium.Core.IWebView.GoToHome"/>.
            The default is: <c>about:blank</c>.
            </summary>
            <seealso cref="P:Awesomium.Core.Utilities.BlankUri"/>
        </member>
        <member name="P:Awesomium.Core.WebConfig.AutoUpdatePeriod">
            <summary>
            Gets or sets the default <see cref="M:Awesomium.Core.WebCore.Update"/>
            frequency, when <see cref="P:Awesomium.Core.WebCore.IsAutoUpdateEnabled"/>
            is <c>true</c>.
            </summary>
            <seealso cref="M:Awesomium.Core.WebCore.Update"/>
            <seealso cref="P:Awesomium.Core.WebCore.IsAutoUpdateEnabled"/>
        </member>
        <member name="P:Awesomium.Core.WebConfig.AdditionalOptions">
            <summary>
            Gets or sets additional command-line options for Chromium.
            </summary>
            <remarks>
            <note type="caution">
            This is for advanced users only, use these at your own risk.
            </note>
            Each option should be formatted as <c>--switch=value</c> or just <c>--switch</c>.
            </remarks>
            <example>
            <code>
            // Force native WebGL rendering.
            WebCore.Initialize( new WebConfig() { AdditionalOptions = new string[] { "--use-gl=desktop" } } );
            </code>
            </example>
        </member>
        <member name="T:Awesomium.Core.WebCore">
            <summary>
            Represents the <i>core</i> of Awesomium. It manages the creation and lifetime of all 
            <see cref="T:Awesomium.Core.IWebView"/> and <see cref="T:Awesomium.Core.WebSession"/> instances and maintains useful services.
            </summary>
            <remarks>
            The <see cref="T:Awesomium.Core.WebCore"/> manages the creation and lifetime of all <see cref="T:Awesomium.Core.IWebView"/>
            and <see cref="T:Awesomium.Core.WebSession"/> instances and maintains useful services like: 
            <list type="bullet">
            <item>
            <description>
            Auto-Update
            </description>
            </item>
            <item>
            <description>
            Network stack
            </description>
            </item>
            <item>
            <description>
            Inter-process messaging
            </description>
            </item>
            <item>
            <description>
            <see cref="T:Awesomium.Core.Surface"/> creation
            </description>
            </item>
            </list>
            Generally, you should initialize the <see cref="T:Awesomium.Core.WebCore"/> (see <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>) providing
            your custom configuration settings, before creating any views and shut it down (see <see cref="M:Awesomium.Core.WebCore.Shutdown"/>)
            at the end of your program.
            <p/>
            <note>
            If you do not initialize <see cref="T:Awesomium.Core.WebCore"/>, the core will automatically start, 
            using default configuration settings, when you create the first view by either calling
            <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession,Awesomium.Core.WebViewType)"/> or by instantiating a <c>WebControl</c>, or when you
            create the first <see cref="T:Awesomium.Core.WebSession"/>.
            </note>
            <p/>
            <note type="caution">
            Do not call any of the members of this class other than: 
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession,Awesomium.Core.WebViewType)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.WebCore.CreateWebSession(Awesomium.Core.WebPreferences)"/>
            </description>
            </item>
            </list>
            before starting the core.
            </note>
            </remarks>
            <threadsafety static="false" instance="false"/>
            <seealso cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>
            <seealso cref="M:Awesomium.Core.WebCore.Update"/>
        </member>
        <member name="F:Awesomium.Core.WebCore.DLLName">
            <summary>
            Gets the name of the native Awesomium library, wrapped by Awesomium.NET.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebCore.OnStart(Awesomium.Core.CoreStartingEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebCore.Starting"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebCore.OnStarted(Awesomium.Core.CoreStartEventArgs)">
            <summary>
            Triggers the Started event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebCore.OnShutdown(Awesomium.Core.CoreShutdownEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebCore.ShuttingDown"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebCore.OnCreateView(Awesomium.Core.CreatedViewEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebCore.CreatedView"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebCore.CheckAccess">
            <summary>
            Checks thread affinity.
            </summary>
            <returns>
            True if called on the correct thread. False otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)">
            <summary>
            Initializes the <see cref="T:Awesomium.Core.WebCore"/> with certain configuration settings.
            </summary>
            <param name="config">
            An instance of <see cref="T:Awesomium.Core.WebConfig"/> specifying configuration settings.
            </param>
            <remarks>
            <para>
            This method performs lazy instantiation. The <see cref="T:Awesomium.Core.WebCore"/> will start when 
            the first <see cref="T:Awesomium.Core.IWebView"/> or <see cref="T:Awesomium.Core.WebSession"/> is created.
            </para>
            <para>
            If you do not call this method, the <see cref="T:Awesomium.Core.WebCore"/> will start automatically,
            using default configuration settings, when you first create a view through <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession,Awesomium.Core.WebViewType)"/>
            or by instantiating a <c>WebControl</c>, or when you create the first <see cref="T:Awesomium.Core.WebSession"/>.
            </para>
            <note>
            If you are not sure if <see cref="T:Awesomium.Core.WebCore"/> is running, check <see cref="P:Awesomium.Core.WebCore.IsRunning"/>
            before calling this method. If <see cref="T:Awesomium.Core.WebCore"/> is running, you will have
            to shut it down (see <see cref="M:Awesomium.Core.WebCore.Shutdown"/>) and <b>restart the hosting application</b> before 
            initializing <see cref="T:Awesomium.Core.WebCore"/> again. Only a single initialization/instantiation of the 
            <see cref="T:Awesomium.Core.WebCore"/> is possible per application session (process).
            </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called while <see cref="T:Awesomium.Core.WebCore"/> is already running.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The member is called on a <see cref="T:Awesomium.Core.WebCore"/> that has previously been shut down.
            </exception>
            <seealso cref="P:Awesomium.Core.WebCore.IsRunning"/>
        </member>
        <member name="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig,System.Boolean)">
            <summary>
            Initializes the <see cref="T:Awesomium.Core.WebCore"/> with certain configuration settings.
            </summary>
            <param name="config">
            An instance of <see cref="T:Awesomium.Core.WebConfig"/> specifying configuration settings.
            </param>
            <param name="start">
            <c>true</c> if the <see cref="T:Awesomium.Core.WebCore"/> should start immediately. <c>false</c> to perform lazy instantiation:
            The <see cref="T:Awesomium.Core.WebCore"/> will start when the first <see cref="T:Awesomium.Core.IWebView"/> or <see cref="T:Awesomium.Core.WebSession"/> is created.
            </param>
            <remarks>
            <para>
            If you do not call this method, the <see cref="T:Awesomium.Core.WebCore"/> will start automatically,
            using default configuration settings, when you first create a view through <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession,Awesomium.Core.WebViewType)"/>
            or by instantiating a <c>WebControl</c>, or when you create the first <see cref="T:Awesomium.Core.WebSession"/>.
            </para>
            <note>
            If you are not sure if <see cref="T:Awesomium.Core.WebCore"/> is running, check <see cref="P:Awesomium.Core.WebCore.IsRunning"/>
            before calling this method. If <see cref="T:Awesomium.Core.WebCore"/> is running, you will have
            to shut it down (see <see cref="M:Awesomium.Core.WebCore.Shutdown"/>) and <b>restart the hosting application</b> before 
            initializing <see cref="T:Awesomium.Core.WebCore"/> again. Only a single initialization/instantiation of the 
            <see cref="T:Awesomium.Core.WebCore"/> is possible per application session (process).
            </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called while <see cref="T:Awesomium.Core.WebCore"/> is already running.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The member is called on a <see cref="T:Awesomium.Core.WebCore"/> that has previously been shut down.
            </exception>
            <seealso cref="P:Awesomium.Core.WebCore.IsRunning"/>
        </member>
        <member name="M:Awesomium.Core.WebCore.Start">
            <summary>
            Performs the actual initialization.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebCore.Shutdown">
            <summary>
            Destroys the <see cref="T:Awesomium.Core.WebCore"/> and any lingering <see cref="T:Awesomium.Core.IWebView"/> instances.
            </summary>
            <remarks>
            Make sure that this is not called while the hosting UI of any views
            created by this <see cref="T:Awesomium.Core.WebCore"/>, is still live and visible. 
            This method will destroy all views created by this <see cref="T:Awesomium.Core.WebCore"/>.
            Any attempt to access them or any member of this class after calling this method,
            will fail.
            </remarks>
            <seealso cref="P:Awesomium.Core.WebCore.IsRunning"/>
        </member>
        <member name="M:Awesomium.Core.WebCore.CreateWebSession(Awesomium.Core.WebPreferences)">
            <summary>
            Creates an <b>in-memory</b> <see cref="T:Awesomium.Core.WebSession"/> which will be used to store all user-data (such as
            cookies, cache, certificates, local databases, etc).
            </summary>
            <param name="prefs">
            A <see cref="T:Awesomium.Core.WebPreferences"/> instance specifying session specific preferences.
            </param>
            <remarks>
            The returned <see cref="T:Awesomium.Core.WebSession"/> instance can be used when you create a 
            <see cref="T:Awesomium.Core.IWebView"/>, by either specifying it as the <c>session</c> parameter in 
            <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession)"/>,
            or by assigning it to the <c>WebSession</c> property of technology specific <c>WebControls</c>, 
            when you instantiate them.
            <p/>
            <see cref="T:Awesomium.Core.IWebView"/> instances that share the same <see cref="T:Awesomium.Core.WebSession"/>, share the same cookies, cache, 
            certificates, local databases as well as the same preferences (see <see cref="T:Awesomium.Core.WebPreferences"/>).
            <note>
            You are responsible for disposing this <see cref="T:Awesomium.Core.WebSession"/> when you are done using it however note
            that you cannot dispose a <see cref="T:Awesomium.Core.WebSession"/> instance that is assigned to active views.
            </note>
            </remarks>
            <returns>
            Returns a new <see cref="T:Awesomium.Core.WebSession"/> instance that you can use with
            any number of <see cref="T:Awesomium.Core.IWebView"/> instances.
            </returns>
            <example>
            <code>
            using ( WebSession session = WebCore.CreateWebSession( new WebPreferences() { CustomCSS = "::-webkit-scrollbar { visibility: hidden; }" } ) )
            {
            	using ( WebView view = WebCore.CreateWebView( 1280, 960, session ) )
            	{
            		bool finishedLoading = false;
            
            		view.LoadURL( new Uri( "http://www.awesomium.com" ) );
            		view.LoadingFrameComplete += ( s, e ) =&gt;
            		{
            			if ( e.IsMainFrame )
            				finishedLoading = true;
            		};
            
            		while ( !finishedLoading )
            		{
            			Thread.Sleep( 100 );
            			WebCore.Update();
            		}
            
            		BitmapSurface surface = (BitmapSurface)view.Surface;
            		surface.SaveToPNG( "result.png", true );
            	}
            }
            </code>
            <code lang="VB">
            Using session As WebSession = WebCore.CreateWebSession(New WebPreferences() With {.CustomCSS = "::-webkit-scrollbar { visibility: hidden; }"})
            	Using view As WebView = WebCore.CreateWebView(1280, 960, session)
            		Dim finishedLoading As Boolean = False
            
            		view.LoadURL(New Uri("http://www.awesomium.com"))
            		AddHandler view.LoadingFrameComplete, Sub(s, e)
            													If e.IsMainFrame Then
            														finishedLoading = True
            													End If
            											  End Sub	
            
            		Do While Not finishedLoading
            			Thread.Sleep(100)
            			WebCore.Update()
            		Loop
            
            		Dim surface As BitmapSurface = CType(view.Surface, BitmapSurface)
            		surface.SaveToPNG("result.png", True)
            	End Using
            End Using
            </code>
            </example>
        </member>
        <member name="M:Awesomium.Core.WebCore.CreateWebSession(System.String,Awesomium.Core.WebPreferences)">
            <summary>
            Creates a <see cref="T:Awesomium.Core.WebSession"/> which will be used to store all user-data (such as
            cookies, cache, certificates, local databases, etc).
            </summary>
            <param name="dataPath">
            The directory path to store the data.
            </param>
            <param name="prefs">
            A <see cref="T:Awesomium.Core.WebPreferences"/> instance specifying session specific preferences.
            </param>
            <remarks>
            The returned <see cref="T:Awesomium.Core.WebSession"/> instance can be used when you create a 
            <see cref="T:Awesomium.Core.IWebView"/>, by either specifying it as the <c>session</c> parameter in 
            <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession)"/>,
            or by assigning it to the <c>WebSession</c> property of technology specific <c>WebControls</c>, 
            when you instantiate them.
            <p/>
            <see cref="T:Awesomium.Core.IWebView"/> instances that share the same <see cref="T:Awesomium.Core.WebSession"/>, share the same cookies, cache, 
            certificates, local databases as well as the same preferences (see <see cref="T:Awesomium.Core.WebPreferences"/>).
            <note>
            You are responsible for disposing this <see cref="T:Awesomium.Core.WebSession"/> when you are done using it however note
            that you cannot dispose a <see cref="T:Awesomium.Core.WebSession"/> instance that is assigned to active views.
            </note>
            </remarks>
            <returns>
            Returns a new <see cref="T:Awesomium.Core.WebSession"/> instance that you can use with
            any number of <see cref="T:Awesomium.Core.IWebView"/> instances.
            </returns>
            <example>
            <code>
            using ( WebSession session = WebCore.CreateWebSession( "C:\\MyCache", new WebPreferences() { CustomCSS = "::-webkit-scrollbar { visibility: hidden; }" } ) )
            {
            	using ( WebView view = WebCore.CreateWebView( 1280, 960, session ) )
            	{
            		bool finishedLoading = false;
            
            		view.LoadURL( new Uri( "http://www.awesomium.com" ) );
            		view.LoadingFrameComplete += ( s, e ) =&gt;
            		{
            			if ( e.IsMainFrame )
            				finishedLoading = true;
            		};
            
            		while ( !finishedLoading )
            		{
            			Thread.Sleep( 100 );
            			WebCore.Update();
            		}
            
            		BitmapSurface surface = (BitmapSurface)view.Surface;
            		surface.SaveToPNG( "result.png", true );
            	}
            }
            </code>
            <code lang="VB">
            Using session As WebSession = WebCore.CreateWebSession("C:\MyCache", New WebPreferences() With {.CustomCSS = "::-webkit-scrollbar { visibility: hidden; }"})
            	Using view As WebView = WebCore.CreateWebView(1280, 960, session)
            		Dim finishedLoading As Boolean = False
            
            		view.LoadURL(New Uri("http://www.awesomium.com"))
            		AddHandler view.LoadingFrameComplete, Sub(s, e)
            													If e.IsMainFrame Then
            														finishedLoading = True
            													End If
            											  End Sub	
            
            		Do While Not finishedLoading
            			Thread.Sleep(100)
            			WebCore.Update()
            		Loop
            
            		Dim surface As BitmapSurface = CType(view.Surface, BitmapSurface)
            		surface.SaveToPNG("result.png", True)
            	End Using
            End Using
            </code>
            </example>
            <exception cref="T:System.IO.IOException">
            The directory specified by <paramref name="dataPath"/> is read-only.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="dataPath"/> is a zero-length string, contains only white space, or contains one
            or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/> -or- 
            <paramref name="dataPath"/> is prefixed with, or contains only a colon character (:).
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="dataPath"/> is null.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified <paramref name="dataPath"/> exceeds the system-defined maximum
            length. For example, on Windows-based platforms, paths must be less than
            248 characters and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified <paramref name="dataPath"/> is invalid (for example, it is on an unmapped drive).
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="dataPath"/> contains a colon character (:) that is not part of a drive label ("C:\").
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession,Awesomium.Core.WebViewType)">
            <summary>
            Create a <see cref="T:Awesomium.Core.WebView"/> (think of it like a tab in Chrome, you can load web-pages
            into it, interact with it, and render it to a buffer).
            </summary>
            <param name="width">The initial width of the view in pixels.</param>
            <param name="height">The initial height of the view in pixels.</param>
            <param name="session">
            The <see cref="T:Awesomium.Core.WebSession"/> to use for this <see cref="T:Awesomium.Core.WebView"/>.
            </param>
            <param name="type">
            The type of WebView to create. See <see cref="T:Awesomium.Core.WebViewType"/> for more information.
            </param>
            <returns>
            A new <see cref="T:Awesomium.Core.WebView"/> instance.
            </returns>
            <remarks>
            If you call this method before initializing the <see cref="T:Awesomium.Core.WebCore"/>, Awesomium
            will automatically start with default configuration settings.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on a <see cref="T:Awesomium.Core.WebCore"/> that has previously been shut down.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A null reference has been specified for <paramref name="session"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The specified <paramref name="session"/> instance, is disposed.
            </exception>
            <seealso cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>
            <seealso cref="M:Awesomium.Core.WebCore.CreateWebSession(Awesomium.Core.WebPreferences)"/>
        </member>
        <member name="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession)">
            <summary>
            Create a <see cref="T:Awesomium.Core.WebView"/> (think of it like a tab in Chrome, you can load web-pages
            into it, interact with it, and render it to a buffer).
            </summary>
            <param name="width">The initial width of the view in pixels.</param>
            <param name="height">The initial height of the view in pixels.</param>
            <param name="session">
            The <see cref="T:Awesomium.Core.WebSession"/> to use for this <see cref="T:Awesomium.Core.WebView"/>.
            </param>
            <returns>
            A new <see cref="T:Awesomium.Core.WebView"/> instance.
            </returns>
            <remarks>
            If you call this method before initializing the <see cref="T:Awesomium.Core.WebCore"/>, Awesomium
            will automatically start with default configuration settings.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on a <see cref="T:Awesomium.Core.WebCore"/> that has previously been shut down.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A null reference has been specified for <paramref name="session"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The specified <paramref name="session"/> instance, is disposed.
            </exception>
            <seealso cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>
            <seealso cref="M:Awesomium.Core.WebCore.CreateWebSession(Awesomium.Core.WebPreferences)"/>
        </member>
        <member name="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32)">
            <summary>
            Create a <see cref="T:Awesomium.Core.WebView"/> (think of it like a tab in Chrome, you can load web-pages
            into it, interact with it, and render it to a buffer).
            </summary>
            <param name="width">The initial width of the view in pixels.</param>
            <param name="height">The initial height of the view in pixels.</param>
            <returns>
            A new <see cref="T:Awesomium.Core.WebView"/> instance.
            </returns>
            <remarks>
            If you call this method before initializing the <see cref="T:Awesomium.Core.WebCore"/>, Awesomium
            will automatically start with default configuration settings.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on a <see cref="T:Awesomium.Core.WebCore"/> that has previously been shut down.
            </exception>
            <seealso cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>
        </member>
        <member name="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebViewType)">
            <summary>
            Create a <see cref="T:Awesomium.Core.WebView"/> (think of it like a tab in Chrome, you can load web-pages
            into it, interact with it, and render it to a buffer).
            </summary>
            <param name="width">The initial width of the view in pixels.</param>
            <param name="height">The initial height of the view in pixels.</param>
            <param name="type">
            The type of WebView to create. See <see cref="T:Awesomium.Core.WebViewType"/> for more information.
            </param>
            <returns>
            A new <see cref="T:Awesomium.Core.WebView"/> instance.
            </returns>
            <remarks>
            If you call this method before initializing the <see cref="T:Awesomium.Core.WebCore"/>, Awesomium
            will automatically start with default configuration settings.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on a <see cref="T:Awesomium.Core.WebCore"/> that has previously been shut down.
            </exception>
            <seealso cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>
        </member>
        <member name="M:Awesomium.Core.WebCore.DestroyUnwrappedViews">
            <summary>
            Destroys all native views created by Awesomium during a <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>
            event that was not canceled, but were never properly wrapped.
            </summary>
            <remarks>
            <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> occurs when an <see cref="T:Awesomium.Core.IWebView"/> instance
            creates a new child view (usually the result of <c>window.open</c> or an external link). 
            <p/>
            It is your responsibility to wrap and display this new view in your application.
            <see cref="T:Awesomium.Core.WebView"/> provides a constructor that accepts a previously created web-view instance.
            (see <see cref="M:Awesomium.Core.WebView.#ctor(System.IntPtr)"/>). Similarly, technology
            specific <c>WebControls</c> provide a <c>NativeView</c> property that allows you to
            assign to the controls, a previously created web-view instance 
            (eg, <see cref="P:Awesomium.Windows.Controls.WebControl.NativeView"/>). This property should be
            set before the control loads and creates its own underlying web-view. Usually immediately 
            after instantiating the control or in the designer.
            <note type="caution">
            If you do not intend to wrap the new view, you should set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
            to <c>true</c>, to tell the core to destroy the unused web-view instance. If you fail
            to do this, the native web-view instance will remain alive until the <see cref="T:Awesomium.Core.WebCore"/>
            is shut down. This can result in many processes (<i>awesomium_process</i>) being spawned,
            but never used.
            <p/>
            The <see cref="T:Awesomium.Core.WebCore"/> provides a <see cref="M:Awesomium.Core.WebCore.DestroyUnwrappedViews"/> method.
            This can be useful for destroying such native views that were spawned by Awesomium,
            but were never wrapped.
            </note>
            <note>
            If you are wrapping the child view using a <see cref="T:Awesomium.Core.WebView"/> instance, you should call 
            <see cref="M:Awesomium.Core.IWebView.Resize(System.Int32,System.Int32)"/> on the child view immediately after the <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event, 
            to make it match your container.
            </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on a <see cref="T:Awesomium.Core.WebCore"/> that has not been started, or has been shut down.
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebCore.Update">
            <summary>
            Updates the <see cref="T:Awesomium.Core.WebCore"/> and allows it to conduct various operations such
            as updating the <see cref="T:Awesomium.Core.ISurface"/> of each view, destroying any views that are 
            queued for destruction and invoking any queued events.
            </summary>
            <remarks>
            If you are using Awesomium from a UI thread (regular use), you never need to call this method.
            If you are using Awesomium from a non graphical environment (Console application, Service or non-UI thread), 
            auto-update is not available and you must manually call this method from either your application's message loop 
            or by creating a timer. In this case, you must make sure that any calls to any of the classes of this assembly,
            are made from the same thread.
            <note>
            You can check <see cref="P:Awesomium.Core.WebCore.IsAutoUpdateEnabled"/> to know if auto-update is already enabled.
            </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on a <see cref="T:Awesomium.Core.WebCore"/> that has not been started, or has been shut down.
            </exception>
            <exception cref="T:System.AccessViolationException">
            You attempted to access the member from a thread other than
            thread where <see cref="T:Awesomium.Core.WebCore"/> was created.
            </exception>
        </member>
        <member name="E:Awesomium.Core.WebCore.Starting">
            <summary>
            Occurs when the <see cref="T:Awesomium.Core.WebCore"/> is starting.
            </summary>
            <remarks>
            <note type="caution">
            Setting <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <c>true</c>,
            will prevent the <see cref="T:Awesomium.Core.WebCore"/> from starting. 
            Use with caution.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Core.WebCore.Started">
            <summary>
            Occurs right after the <see cref="T:Awesomium.Core.WebCore"/> has successfully started.
            </summary>
        </member>
        <member name="E:Awesomium.Core.WebCore.ShuttingDown">
            <summary>
            Occurs when the <see cref="T:Awesomium.Core.WebCore"/> is shutting down.
            </summary>
        </member>
        <member name="E:Awesomium.Core.WebCore.CreatedView">
            <summary>
            Occurs when a new view has been created by the <see cref="T:Awesomium.Core.WebCore"/>.
            The view can be a <see cref="T:Awesomium.Core.WebView"/> instance or any technology specific
            <c>WebControl</c>, all implementing the <see cref="T:Awesomium.Core.IWebView"/> interface.
            </summary>
            <remarks>
            This event is not called when <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> is fired.
            It will only be called when/if the new view (see <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/>),
            is wrapped.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebCore.PackagePath">
            <summary>
            Gets the path to the loaded native Awesomium library.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebCore.IsRunning">
            <summary>
            Gets if the <see cref="T:Awesomium.Core.WebCore"/> is currently running.
            </summary>
            <seealso cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>
        </member>
        <member name="P:Awesomium.Core.WebCore.IsShuttingDown">
            <summary>
            Gets if the <see cref="T:Awesomium.Core.WebCore"/> is currently shutting down.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebCore.IsAutoUpdateEnabled">
            <summary>
            Gets if automatic update is successfully enabled.
            </summary>
            <seealso cref="M:Awesomium.Core.WebCore.Update"/>
        </member>
        <member name="P:Awesomium.Core.WebCore.AutoUpdatePeriod">
            <summary>
            Gets or sets the time interval between invocations of <see cref="M:Awesomium.Core.WebCore.Update"/>, in milliseconds.
            The default is 20.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Attempted to set this on a <see cref="T:Awesomium.Core.WebCore"/> that has not been started, or has been shut down.
            </exception>
        </member>
        <member name="P:Awesomium.Core.WebCore.HomeURL">
            <summary>
            Gets or sets the Home URL used with <see cref="M:Awesomium.Core.IWebView.GoToHome"/>.
            </summary>
            <remarks>
            This setting is used with <see cref="M:Awesomium.Core.IWebView.GoToHome"/>.
            It is also used by <see cref="T:Awesomium.Windows.Controls.WebControl"/>s to automatically
            handle the <see cref="P:System.Windows.Input.NavigationCommands.BrowseHome"/> command.
            The default is: "about:blank".
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            A null reference or an empty string defined.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Attempted to set this on a <see cref="T:Awesomium.Core.WebCore"/> that has not been started, or has been shut down.
            </exception>
            <seealso cref="M:Awesomium.Core.IWebView.GoToHome"/>
        </member>
        <member name="P:Awesomium.Core.WebCore.Views">
            <summary>
            Gets a read-only collection of views maintained by this <see cref="T:Awesomium.Core.WebCore"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebCore.Sessions">
            <summary>
            Gets a read-only collection of sessions maintained by this <see cref="T:Awesomium.Core.WebCore"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebCore.Version">
            <summary>
            Gets the version for this build of Awesomium.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Attempted to access this on a <see cref="T:Awesomium.Core.WebCore"/> that has not been started, 
            or has been shut down.
            </exception>
        </member>
        <member name="P:Awesomium.Core.WebCore.ResourceInterceptor">
            <summary>
            Gets or sets the <see cref="T:Awesomium.Core.IResourceInterceptor"/> instance that will be used to intercept all
            resources.
            </summary>
            <remarks>
            You are responsible for destroying this instance after you call <see cref="M:Awesomium.Core.WebCore.Shutdown"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Attempted to set this on a <see cref="T:Awesomium.Core.WebCore"/> that has not been started, 
            or has been shut down.
            </exception>
            <seealso cref="T:Awesomium.Core.ResourceInterceptor"/>
            <seealso cref="M:Awesomium.Core.IResourceInterceptor.OnRequest(Awesomium.Core.ResourceRequest)"/>
        </member>
        <member name="M:Awesomium.Core.WebViewIMEComposition.OnUpdate(System.Object,Awesomium.Core.IMEUpdateEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebViewIMEComposition.Updated"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebViewIMEComposition.OnRangeChanged(System.Object,Awesomium.Core.IMERangeChangedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebViewIMEComposition.RangeChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebViewIMEComposition.OnCancel(System.Object,System.EventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebViewIMEComposition.Cancel"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebViewIMEComposition.ActivateIME(System.Boolean)">
            <summary>
            Lets the <see cref="T:Awesomium.Core.IWebView"/> know you will be passing
            text input via IME and will need to be notified of any
            IME-related events (caret position, user unfocusing textbox, etc.)
            </summary><param name="activate">
            Specifies if IME should be activated.
            </param>
        </member>
        <member name="M:Awesomium.Core.WebViewIMEComposition.SetIMEComposition(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates the current IME text composition.
            </summary><param name="inputString">The string generated by your IME.</param><param name="cursorPos">The current cursor position in your IME composition.</param><param name="targetStart">The position of the beginning of the selection.</param><param name="targetEnd">The position of the end of the selection.</param>
        </member>
        <member name="M:Awesomium.Core.WebViewIMEComposition.ConfirmIMEComposition(System.String)">
            <summary>
            Confirms a current IME text composition.
            </summary><param name="inputString">The string generated by your IME.</param>
        </member>
        <member name="M:Awesomium.Core.WebViewIMEComposition.CancelIMEComposition">
            <summary>
            Cancels a current IME text composition.
            </summary>
        </member>
        <member name="E:Awesomium.Core.WebViewIMEComposition.Updated">
            <!-- No matching elements were found for the following include tag --><include file="../Awesomium.Core/Awesomium.Core_S.XML" path="doc/members/member[@name=&quot;M:Awesomium.Core.IWebViewIMEComposition.Update&quot;]/*"/>
        </member>
        <member name="E:Awesomium.Core.WebViewIMEComposition.RangeChanged">
            <!-- No matching elements were found for the following include tag --><include file="../Awesomium.Core/Awesomium.Core_S.XML" path="doc/members/member[@name=&quot;M:Awesomium.Core.IWebViewIMEComposition.RangeChanged&quot;]/*"/>
        </member>
        <member name="E:Awesomium.Core.WebViewIMEComposition.Cancel">
            <!-- No matching elements were found for the following include tag --><include file="../Awesomium.Core/Awesomium.Core_S.XML" path="doc/members/member[@name=&quot;M:Awesomium.Core.IWebViewIMEComposition.Cancel&quot;]/*"/>
        </member>
        <member name="P:Awesomium.Core.WebViewIMEComposition.Range">
            <!-- No matching elements were found for the following include tag --><include file="../Awesomium.Core/Awesomium.Core_S.XML" path="doc/members/member[@name=&quot;M:Awesomium.Core.IWebViewIMEComposition.Range&quot;]/*"/>
        </member>
        <member name="T:Awesomium.Core.WebView">
            <summary>
            The <see cref="T:Awesomium.Core.WebView"/> is similar to a tab in a browser: you can load web-pages into it, 
            interact with it, and display it however you want.
            </summary>
            <remarks>
            By default, a <see cref="T:Awesomium.Core.WebView"/> is <i>windowless</i>. It is your responsibility
            to render it on a UI or bitmap by either using any of the provided <see cref="T:Awesomium.Core.ISurface"/>
            implementations, or creating your own (also see: <see cref="P:Awesomium.Core.WebView.Surface"/>).
            <p/>
            You can create a <see cref="T:Awesomium.Core.WebView"/> using <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession,Awesomium.Core.WebViewType)"/>. If you have not initialized
            the <see cref="T:Awesomium.Core.WebCore"/> (see <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>) before creating a <see cref="T:Awesomium.Core.WebView"/>,
            the core will be initialized using default configuration settings and automatically be started
            before creating the view.
            <note>
            Unless otherwise specified, all methods are asynchronous and must
            be called from the main thread. Each <see cref="T:Awesomium.Core.WebView"/> is rendered in its own
            child-process and most API calls must be proxied through IPC messages.
            </note>
            </remarks>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Awesomium.Core.WebView.VerifyValid">
            <summary>
            Verifies the view is live. Throws an exception otherwise.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.VerifyValidParent">
            <summary>
            Verifies a windowed IWebView has specified a valid parent window.
            Throws an exception otherwise.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.AddSettingHandler(System.String,System.Action)">
            <summary>
            Adds an action to be performed at <see cref="M:Awesomium.Core.WebView.ApplyDesignTimeSettings"/>.
            </summary>
            <param name="property">The property the action is supposed to set.</param>
            <param name="handler">Delegate of the action.</param>
        </member>
        <member name="M:Awesomium.Core.WebView.ApplyDesignTimeSettings">
            <summary>
            Should be called by <see cref="T:Awesomium.Core.IWebView"/> components that support a designer,
            right after the underlying view has been created.
            </summary>
            <remarks>
            The <see cref="T:Awesomium.Core.WebView"/> does not need this.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.WebView.InitializeStandard">
            <summary>
            Standard initialization of views.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.ClearStandard">
            <summary>
            Performs standard actions when a view closes. 
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.LoginRespond(Awesomium.Core.LoginRequestEventArgs)">
            <summary>
            Login response helper.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.ChooseFilesRespond(Awesomium.Core.FileDialogEventArgs)">
            <summary>
            Select local files helper.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.ChooseDownloadPathRespond(Awesomium.Core.DownloadEventArgs)">
            <summary>
            Select download path helper.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">
            Specifies the type of service object to get.
            </param>
            <returns>
            A service object of type <paramref name="serviceType"/> or <c>null</c> (<c>Nothing</c> in Visual Basic)
            if there is no service object of type <paramref name="serviceType"/>.
            </returns>
            <remarks>
            Several <see cref="T:Awesomium.Core.IWebView"/> features can be accessed through services. This
            is because the availability of these features depends on the current state or
            the type (see <see cref="T:Awesomium.Core.WebViewType"/>) of the <see cref="T:Awesomium.Core.IWebView"/> instance.
            <p/>
            Here is a list of services currently available:
            <list type="table">
            <listheader>
            <term>Service Type</term>
            <description>Availability</description>
            </listheader>
            <item>
            <term><see cref="T:Awesomium.Core.IWebViewIMEComposition"/></term>
            <description>
            Only available when <see cref="P:Awesomium.Core.IWebView.ViewType"/> is <see cref="F:Awesomium.Core.WebViewType.Offscreen"/>.
            </description>
            </item>
            </list>
            <note>
            <h3>Awesomium.NET 1.7 Production Note:</h3>
            More <see cref="T:Awesomium.Core.IWebView"/> features that are currently either hidden
            or ignored depending on the state or the type of the <see cref="T:Awesomium.Core.IWebView"/> wrapper,
            will later be also available as services.
            </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.GoToHome">
            <summary>
            Navigates to the Home URL as defined in <see cref="P:Awesomium.Core.WebCore.HomeURL"/>.
            </summary><returns>
            <c>true</c> if the command was successfully sent. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.WebView.LoadURL(System.Uri)">
            <summary>
            Loads a URL into the view asynchronously.
            </summary><param name="url">
            The URL to load.
            </param><returns>
            <c>true</c> if the command was successfully sent. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.WebView.LoadHTML(System.String)">
            <summary>
            Loads a string of HTML into the view asynchronously.
            </summary><param name="html">
            The HTML string (ASCII) to load.
            </param><returns>
            <c>true</c> if the command was successfully sent. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.WebView.GoBack">
            <summary>
            Navigates one step backwards in history.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.GoForward">
            <summary>
            Navigates one step forward in history.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.GoToHistoryOffset(System.Int32)">
            <summary>
            Navigates back/forward in history via a relative offset.
            </summary><param name="offset">
            The relative offset in history to navigate to. (Can be negative)
            </param><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.Stop">
            <summary>
            Stops the current navigation.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.Reload(System.Boolean)">
            <summary>
            Reloads the current page.
            </summary><param name="ignoreCache">
            Indicates if cached resources should be reloaded as well.
            </param><returns>
            <c>true</c> if the command was successfully sent. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.WebView.CanGoBack">
            <summary>
            Gets if we can go back in history.
            </summary><returns>
            <c>true</c> if the view can go back in history. <c>false</c> otherwise.
            </returns><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.CanGoForward">
            <summary>
            Gets if we can go forward in history.
            </summary><returns>
            <c>true</c> if the view can go forward in history. <c>false</c> otherwise.
            </returns><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.GetLastError">
            <summary>
            Check if an error occurred during the last synchronous Javascript interoperation call.
            </summary><returns>
            An <see cref="T:Awesomium.Core.Error"/> value indicating the error that may have occurred
            during the last synchronous Javascript interoperation API call.
            </returns><seealso cref="M:Awesomium.Core.IWebView.CreateGlobalJavascriptObject(System.String)"/><seealso cref="M:Awesomium.Core.IWebView.ExecuteJavascriptWithResult(System.String)"/>
        </member>
        <member name="M:Awesomium.Core.WebView.CreateGlobalJavascriptObject(System.String)">
            <summary>
            Create a global JavaScript object that will persist between all loaded pages, 
            for the lifetime of this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><param name="name">
            The name of the object as it will appear in JavaScript.
            </param><returns>
            If this call succeeds, the returned <see cref="T:Awesomium.Core.JSValue"/> will be of type 'Object' 
            (see <see cref="P:Awesomium.Core.JSValue.IsObject"/>). You can check the reason why the call failed by calling
            <see cref="M:Awesomium.Core.IWebView.GetLastError"/> after this method.
            </returns><remarks>
            Global Objects can only contain the following JavaScript types as 
            properties:
            <list type="bullet">
            <item>
            <description>
            <c>Number</c>
            </description>
            </item>
            <item>
            <description>
            <c>String</c>
            </description>
            </item>
            <item>
            <description>
            <c>Array</c>
            </description>
            </item>
            <item>
            <description>
            <c>Null</c>
            </description>
            </item>
            <item>
            <description>
            <c>Other Global Objects</c>
            </description>
            </item>
            <item>
            <description>
            <c>Undefined</c>
            </description>
            </item>
            </list>
            <p/>
            Global Objects will retain any custom methods that are registered
            (see <see cref="M:Awesomium.Core.JSObject.SetCustomMethod(System.String,System.Boolean)"/>).
            <note>
            To create a child global-object, you should specify the full name with dot-notation for example:
            <c>parentObject.childObject</c>.
            <p/>
            The parent object should exist before attempting to make any children.
            </note>
            <note type="caution">
            You can only create objects on pages with an active DOM. (You should
            wait until the first <see cref="E:Awesomium.Core.IWebView.DocumentReady"/> event or the <see cref="E:Awesomium.Core.IWebView.ProcessCreated"/> event,
            before creating your objects).
            </note>
            </remarks><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.ExecuteJavascript(System.String)">
            <summary>
            Executes some JavaScript asynchronously in the main frame of the page.
            </summary><param name="script">
            The string of JavaScript to execute.
            </param><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.ExecuteJavascript(System.String,System.String)">
            <summary>
            Executes some JavaScript asynchronously on the page.
            </summary><param name="script">
            The string of JavaScript to execute.
            </param><param name="frameXpath">
            The xpath of the frame to execute within; leave
            this blank to execute in the main frame.
            </param><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.ExecuteJavascriptWithResult(System.String)">
            <summary>
            Executes some JavaScript synchronously in the main frame of the page, and returns a result.
            </summary><param name="script">
            The string of JavaScript to execute.
            </param><returns>
            Returns the result (if any). Any <see cref="T:Awesomium.Core.JSObject"/> returned from this
            method will be a remote proxy for an object contained within the view's process.
            If this call fails, the returned <see cref="T:Awesomium.Core.JSValue"/> will have an <c>Undefined</c> type.
            (see <see cref="P:Awesomium.Core.JSValue.IsUndefined"/>). You can check <see cref="M:Awesomium.Core.IWebView.GetLastError"/> for more
            information about the failure.
            </returns><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.ExecuteJavascriptWithResult(System.String,System.String)">
            <summary>
            Executes some JavaScript synchronously on the page, and returns a result.
            </summary><param name="script">
            The string of JavaScript to execute.
            </param><param name="frameXPath">
            The xpath of the frame to execute within; leave
            this blank to execute in the main frame.
            </param><returns>
            Returns the result (if any). Any <see cref="T:Awesomium.Core.JSObject"/> returned from this
            method will be a remote proxy for an object contained within the view's process.
            If this call fails, the returned <see cref="T:Awesomium.Core.JSValue"/> will have an <c>Undefined</c> type.
            (see <see cref="P:Awesomium.Core.JSValue.IsUndefined"/>). You can check <see cref="M:Awesomium.Core.IWebView.GetLastError"/> for more
            information about the failure.
            </returns><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.Undo">
            <summary>
            Undo the last 'edit' operation. (Similar to CTRL+Z).
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.Redo">
            <summary>
            Redo the last 'edit' operation. (Similar to CTRL+Y).
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.Cut">
            <summary>
            Performs a 'cut' operation using the system clipboard.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.Copy">
            <summary>
            Performs a 'copy' operation using the system clipboard.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.CopyHTML">
            <summary>
            Copies the HTML content currently selected in this view, to the system clipboard.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view.
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.CopyLinkAddress">
            <summary>
            Copies the target URL of the link currently under the cursor.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view.
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.CopyImageAt(System.Int32,System.Int32)">
            <summary>
            Attempt to copy an image on the page, to the system clipboard.
            This is meant to be used with <see cref="E:Awesomium.Core.IWebView.ShowContextMenu"/>.
            </summary><param name="x">The x-coordinate.</param><param name="y">The y-coordinate.</param><remarks>
            All coordinates should be localized to the view. All values are in
            pixels, the origin (0,0) begins at the top-left corner of the view,
            positive <paramref name="y"/> values are "down" and positive <paramref name="x"/> 
            values are "right".
            </remarks><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.Paste">
            <summary>
            Performs a 'paste' operation using the system clipboard.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.PasteAndMatchStyle">
            <summary>
            Performs a 'paste' operation using the system clipboard while attempting
            to preserve any styles of the original text.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.SelectAll">
            <summary>
            Performs a 'select all' operation.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)">
            <summary>
            Prints this <see cref="T:Awesomium.Core.IWebView"/> instance to a PDF file, asynchronously.
            You should generally use this method in response to a <see cref="E:Awesomium.Core.IWebView.PrintRequest"/>
            event.
            </summary><param name="outputDirectory">
            A writeable directory to write the file(s) to.
            </param><param name="config">
            The configuration settings to use.
            </param><returns>
            Returns a unique request ID that you can use later to identify
            this specific request (see <see cref="E:Awesomium.Core.IWebView.PrintFailed"/> and <see cref="E:Awesomium.Core.IWebView.PrintComplete"/>). 
            May return <c>0</c> if this method fails prematurely.
            </returns><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><seealso cref="T:Awesomium.Core.PrintConfig"/><seealso cref="E:Awesomium.Core.IWebView.PrintRequest"/><seealso cref="E:Awesomium.Core.IWebView.PrintFailed"/><seealso cref="E:Awesomium.Core.IWebView.PrintComplete"/>
        </member>
        <member name="M:Awesomium.Core.WebView.#ctor(System.IntPtr)">
            <summary>
            Create a <see cref="T:Awesomium.Core.WebView"/> instance that is wrapping an internally 
            created web-view instance.
            </summary>
            <param name="handle">
            The handle to an internally created web-view.
            </param>
            <remarks>
            This constructor can be used to create a wrapper for a web-view that has been internally created by Awesomium.
            Views are created internally by Awesomium for external links that should be opened in a new view, or popup windows
            (eg, Javascript: <c>window.open</c> and <see cref="E:Awesomium.Core.WebView.ShowCreatedWebView"/>).
            </remarks>
            <exception cref="T:System.ArgumentException">
            Attempted to wrap a web-view instance that has already been wrapped. You can access the wrapper
            through: <see cref="P:Awesomium.Core.WebCore.Views"/> and <see cref="M:Awesomium.Core.WebViewCollection.GetByHandle(System.IntPtr)"/>.
            </exception>
            <seealso cref="E:Awesomium.Core.WebView.ShowCreatedWebView"/>
        </member>
        <member name="M:Awesomium.Core.WebView.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes the view to certain pixel dimensions.
            </summary><param name="width">
            The new width in pixels.
            </param><param name="height">
            The new height in pixels.
            </param><remarks>
            Resizing the view will trigger the creation of a new
            surface, by calling <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>.
            </remarks><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><seealso cref="P:Awesomium.Core.IWebView.Width"/><seealso cref="P:Awesomium.Core.IWebView.Height"/><seealso cref="E:Awesomium.Core.IWebView.CreateSurface"/>
        </member>
        <member name="M:Awesomium.Core.WebView.FocusView">
            <summary>
            Gives the view the appearance of input focus.
            </summary><remarks>
            You should call this whenever the view gains focus.
            <note>
            If you fail to see a blinking caret when you select a text-box,
            it's usually because you forgot to call this method.
            </note>
            </remarks><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><seealso cref="E:Awesomium.Core.IWebView.FocusChanged"/><seealso cref="P:Awesomium.Core.IWebView.FocusedElementType"/>
        </member>
        <member name="M:Awesomium.Core.WebView.UnfocusView">
            <summary>
            Remove the appearance of input focus. 
            </summary><remarks>
            You should call this whenever the view loses focus.
            </remarks><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><seealso cref="E:Awesomium.Core.IWebView.FocusChanged"/><seealso cref="P:Awesomium.Core.IWebView.FocusedElementType"/>
        </member>
        <member name="M:Awesomium.Core.WebView.InjectMouseMove(System.Int32,System.Int32)">
            <summary>
            Passes a mouse-move event to the view.
            </summary><param name="x">
            The x-coordinate of the current mouse position.
            </param><param name="y">
            The y-coordinate of the current mouse position.
            </param><remarks>
            Coordinates should be localized to the view 
            and should be defined in pixels.
            </remarks><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.InjectMouseDown(Awesomium.Core.MouseButton)">
            <summary>
            Passes a mouse-down event to the view, using the last mouse-move coordinates.
            </summary><param name="button">
            Specifies the button that was pressed.
            </param><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.InjectMouseUp(Awesomium.Core.MouseButton)">
            <summary>
            Passes a mouse-up event to the view, using the last mouse-move coordinates.
            </summary><param name="button">
            Specifies the button that was pressed.
            </param><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.InjectMouseWheel(System.Int32,System.Int32)">
            <summary>
            Passes a mouse-wheel event to the view.
            </summary><param name="scrollVert">
            The amount of pixels to scroll vertically by.
            </param><param name="scrollHorz">
            The amount of pixels to scroll horizontally by.
            </param><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.InjectKeyboardEvent(Awesomium.Core.WebKeyboardEvent)">
            <summary>
            Passes a keyboard event to the view.
            </summary><param name="keyEvent">
            An <see cref="T:Awesomium.Core.WebKeyboardEvent"/> instance representing the keyboard event to pass.
            </param><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.OnBeginNavigation(System.Object,Awesomium.Core.UrlEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.BeginNavigation"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnCreateSurface(System.Object,Awesomium.Core.CreateSurfaceEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.CreateSurface"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnSelectionChanged(System.Object,Awesomium.Core.WebSelectionEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.SelectionChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnProcessCreated(System.Object,System.EventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.ProcessCreated"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnTitleChanged(System.Object,Awesomium.Core.TitleChangedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.TitleChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnAddressChanged(System.Object,Awesomium.Core.UrlEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.AddressChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnToolTipChanged(System.Object,Awesomium.Core.ToolTipChangedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.ToolTipChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnTargetURLChanged(System.Object,Awesomium.Core.UrlEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.TargetURLChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnCursorChanged(System.Object,Awesomium.Core.CursorChangedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.CursorChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnFocusChanged(System.Object,Awesomium.Core.FocusChangedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.FocusChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnShowCreatedWebView(System.Object,Awesomium.Core.ShowCreatedWebViewEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.ShowCreatedWebView"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnDocumentReady(System.Object,Awesomium.Core.UrlEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.DocumentReady"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnLoadingFrame(System.Object,Awesomium.Core.LoadingFrameEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.LoadingFrame"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnLoadingFrameFailed(System.Object,Awesomium.Core.LoadingFrameFailedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.LoadingFrameFailed"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnLoadingFrameComplete(System.Object,Awesomium.Core.FrameEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.LoadingFrameComplete"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnSelectLocalFiles(System.Object,Awesomium.Core.FileDialogEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.SelectLocalFiles"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnLoginRequest(System.Object,Awesomium.Core.LoginRequestEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.LoginRequest"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnPrintRequest(System.Object,Awesomium.Core.PrintRequestEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.PrintRequest"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnPrintFailed(System.Object,Awesomium.Core.PrintOperationEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.PrintFailed"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnPrintComplete(System.Object,Awesomium.Core.PrintCompleteEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.PrintComplete"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnDownload(System.Object,Awesomium.Core.DownloadEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.Download"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnDownloadProgress(System.Object,Awesomium.Core.DownloadProgressEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.DownloadProgress"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnDownloadComplete(System.Object,Awesomium.Core.DownloadCompleteEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.DownloadComplete"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnShowPopupMenu(System.Object,Awesomium.Core.PopupMenuEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.ShowPopupMenu"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnShowContextMenu(System.Object,Awesomium.Core.ContextMenuEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.ShowContextMenu"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnResponsiveChanged(System.Object,Awesomium.Core.ResponsiveChangedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.ResponsiveChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnCrashed(System.Object,Awesomium.Core.CrashedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.Crashed"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebView.IsProcessCreated">
            <summary>
            Indicates if the child rendering process for this view, has been spawned.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is accessed on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><seealso cref="E:Awesomium.Core.IWebView.ProcessCreated"/>
        </member>
        <member name="P:Awesomium.Core.WebView.Title">
            <summary>
            Gets the title of the page currently loaded.
            </summary><remarks>
            This property may also reflect navigation progress.
            For details, see <see cref="P:Awesomium.Core.IWebView.NavigationInfo"/>.
            </remarks><seealso cref="P:Awesomium.Core.IWebView.NavigationInfo"/><seealso cref="P:Awesomium.Core.IWebView.HasTitle"/>
        </member>
        <member name="P:Awesomium.Core.WebView.HasTitle">
            <summary>
            Gets if the currently loaded web-page has a title.
            </summary><seealso cref="P:Awesomium.Core.IWebView.Title"/><seealso cref="E:Awesomium.Core.IWebView.TitleChanged"/>
        </member>
        <member name="P:Awesomium.Core.WebView.IsLoading">
            <summary>
            Gets if any page resources are currently being loaded.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebView.IsNavigating">
            <summary>
            Gets if the view is currently navigating to a Url.
            </summary><remarks>
            Unlike <see cref="P:Awesomium.Core.IWebView.IsLoading"/> that updates when the actual contents
            of a page are being downloaded, this property is updated when navigation
            starts and updates again when loading completes.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebView.IsCrashed">
            <summary>
            Gets if the process of this <see cref="T:Awesomium.Core.IWebView"/> instance, has crashed.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebView.IsDocumentReady">
            <summary>
            Gets if the DOM (Document Object Model) for the page being loaded, is ready.
            </summary><remarks>
            This is very useful for executing Javascript on a page before its content has finished loading.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebView.IsResponsive">
            <summary>
            Gets if the process of this <see cref="T:Awesomium.Core.IWebView"/> instance, is currently responsive.
            </summary><seealso cref="E:Awesomium.Core.IWebView.ResponsiveChanged"/>
        </member>
        <member name="P:Awesomium.Core.WebView.TargetURL">
            <summary>
            Gets the target URL indicated by the web-view,
            usually as a result of hovering over a link on the page.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebView.HasTargetURL">
            <summary>
            Gets if the view is currently indicating a target URL,
            usually as a result of hovering over a link on the page.
            </summary><seealso cref="E:Awesomium.Core.IWebView.TargetURLChanged"/>
        </member>
        <member name="P:Awesomium.Core.WebView.Selection">
            <summary>
            Gets a <see cref="T:Awesomium.Core.Selection"/> providing information about the current selection range.
            </summary><seealso cref="E:Awesomium.Core.IWebView.SelectionChanged"/>
        </member>
        <member name="P:Awesomium.Core.WebView.HasSelection">
            <summary>
            Gets if the user has selected content in the current page.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebView.FocusedElementType">
            <summary>
            Gets the type of the element currently focused in the loaded page.
            </summary><remarks>
            You should generally forward keyboard events to the active <see cref="T:Awesomium.Core.IWebView"/> instance,
            whenever one of the following element types are focused:
            <list type="bullet">
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Input"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.TextInput"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.EditableContent"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Plugin"/>
            </description>
            </item>
            </list>
            This is done automatically in technology specific <c>WebControl</c>
            instances.
            </remarks><seealso cref="E:Awesomium.Core.IWebView.FocusChanged"/>
        </member>
        <member name="P:Awesomium.Core.WebView.ToolTipText">
            <summary>
            Gets the tool-tip text currently indicated by the web-view,
            usually as a result of hovering over elements in the page.
            </summary><seealso cref="E:Awesomium.Core.IWebView.ToolTipChanged"/>
        </member>
        <member name="P:Awesomium.Core.WebView.ParentView">
            <summary>
            Gets the parent view (if any) of this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            A <see cref="T:Awesomium.Core.IWebView"/> can only have a parent if it is a popup view that
            was created by Awesomium in response to a Javascript <c>window.open</c>.
            <p/>
            For more details, see <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>.
            <note type="caution">
            Be careful when you access members of the parent <see cref="T:Awesomium.Core.IWebView"/> instance.
            The parent may have been destroyed while the this (child) view, is still alive.
            Always check <see cref="P:Awesomium.Core.IWebView.IsLive"/> before accessing members on the parent view,
            to avoid exceptions.
            </note>
            </remarks><seealso cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>
        </member>
        <member name="P:Awesomium.Core.WebView.LatestContextData">
            <summary>
            Gets the latest web-view context data, usually updated by a right-click in page.
            </summary><returns>
            A <see cref="T:Awesomium.Core.WebContextMenuInfo"/> that represents the latest web-view context data.
            </returns><seealso cref="T:Awesomium.Core.WebContextMenuInfo"/><seealso cref="E:Awesomium.Core.IWebView.ShowContextMenu"/>
        </member>
        <member name="P:Awesomium.Core.WebView.TerminationStatus">
            <summary>
            Gets the termination status of this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            This is <see cref="F:Awesomium.Core.TerminationStatus.None"/> if the web-view
            has not been instantiated yet (this can be the case in a technology specific
            <c>WebControl</c>) and <see cref="F:Awesomium.Core.TerminationStatus.StillRunning"/>
            if the web-view process has not been terminated and is still running.
            </remarks><seealso cref="E:Awesomium.Core.IWebView.Crashed"/>
        </member>
        <member name="P:Awesomium.Core.WebView.ProcessID">
            <summary>
            Get the unique ID for the corresponding child-process hosting this
            <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            May return <c>0</c> if the <see cref="T:Awesomium.Core.IWebView"/> instance has crashed 
            or there is no process active.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebView.ProcessHandle">
            <summary>
            Get the handle for the corresponding child-process hosting this
            <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            This may not be initialized until some time after the
            view is actually created (when we receive the first IPC message
            from the child-process).
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebView.Surface">
            <summary>
            Gets or sets the <see cref="T:Awesomium.Core.ISurface"/> instance currently
            assigned to the view.
            </summary><remarks>
            If you are using an <see cref="T:Awesomium.Core.ISurface"/> instance capable of handling changes in
            size, you should use this property to assign it to the view.
            This surface will be used with multiple calls of <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>
            and it should be able to handle changes in size during <see cref="M:Awesomium.Core.ISurface.Initialize(Awesomium.Core.IWebView,System.Int32,System.Int32)"/>.
            In this scenario, you can ignore the <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> event.
            </remarks><exception cref="T:System.InvalidOperationException">
            The member is accessed on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><seealso cref="E:Awesomium.Core.IWebView.CreateSurface"/>
        </member>
        <member name="P:Awesomium.Core.WebView.Source">
            <summary>
            Gets or sets the URL currently presented by this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><returns>
            An absolute <see cref="T:System.Uri"/> representing the URL currently presented 
            by this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </returns><seealso cref="M:Awesomium.Core.IWebView.LoadURL(System.Uri)"/>
        </member>
        <member name="P:Awesomium.Core.WebView.NavigationInfo">
            <summary>
            Gets or sets the navigation info level.
            </summary><returns>
            A <see cref="T:Awesomium.Core.NavigationInfo"/> value indicating
            the level of navigation progress info reflected to the
            <see cref="P:Awesomium.Core.IWebView.Title"/>. The default is <see cref="F:Awesomium.Core.NavigationInfo.Verbose"/>.
            </returns><remarks>
            Navigation progress information is reflected to the control's
            <see cref="P:Awesomium.Core.IWebView.Title"/>:
            <list type="table">
            <listheader>
            <term>Level</term>
            <description>Title Value</description>
            </listheader>
            <item>
            <term><c>"None"</c></term>
            <description><see cref="P:Awesomium.Core.IWebView.Title"/> only reflects the page's title, if any.</description>
            </item>
            <item>
            <term><c>"Normal"</c></term>
            <description><see cref="P:Awesomium.Core.IWebView.Title"/> reflects the page's title as well as "Error" and "Crashed" status.</description>
            </item>
            <item>
            <term><c>"Verbose"</c></term>
            <description>
            <see cref="P:Awesomium.Core.IWebView.Title"/> reflects progress status such as "Navigating..." and "Loading...",
            until the page's title is acquired. Also reflects "Error" and "Crashed" status. (<b>Default</b>)
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebView.WebSession">
            <summary>
            Gets the session associated with this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            You can create a <see cref="P:Awesomium.Core.IWebView.WebSession"/> with your own preferences (see <see cref="P:Awesomium.Core.WebSession.Preferences"/>),
            using <see cref="M:Awesomium.Core.WebCore.CreateWebSession(Awesomium.Core.WebPreferences)"/>. You can then use this when you create a <see cref="T:Awesomium.Core.WebView"/> instance, 
            by using the <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession)"/>
            function.
            <note>
            This property is implemented as a read-write property on technology specific <c>WebControls</c>.
            You can use the setter to specify your <see cref="P:Awesomium.Core.IWebView.WebSession"/>, right after instantiating
            the <c>WebControl</c> or at design time. You cannot change this setting after the control
            has been fully loaded and its underlying web-view, has been created.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebView.IsTransparent">
            <summary>
            Gets or sets if pages should be rendered with transparency
            preserved (for ex, for pages with <c>style="background-color: transparent;"</c>)
            </summary><remarks>
            When set to <c>true</c>, the alpha channel is premultiplied. When set to <c>false</c>
            (default), the view will have an opaque, white background.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebView.ParentWindow">
            <summary>
            Gets or sets the parent window for this <see cref="T:Awesomium.Core.IWebView"/> instance. This is only valid
            for windowed <see cref="T:Awesomium.Core.IWebView"/> instances (see <see cref="F:Awesomium.Core.WebViewType.Window"/>),
            on the Windows platform.
            </summary><remarks>
            <note type="caution">
            When you use a <see cref="T:Awesomium.Core.WebView"/>, you should call this method immediately after calling 
            <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession,Awesomium.Core.WebViewType)"/>. The window for this <see cref="T:Awesomium.Core.IWebView"/> instance
            will not be created until you set <see cref="P:Awesomium.Core.IWebView.ParentWindow"/>, on the Windows platform.
            </note>
            <note>
            Technology specific <c>WebControls</c>, take care of this internally. Once set and the underlying
            window for this <see cref="T:Awesomium.Core.IWebView"/> instance has been created, this property cannot be changed.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebView.NativeWindow">
            <summary>
            Gets the actual window handle that was created by this <see cref="T:Awesomium.Core.IWebView"/> instance.
            This is only valid for windowed <see cref="T:Awesomium.Core.IWebView"/> instances (see <see cref="F:Awesomium.Core.WebViewType.Window"/>).
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebView.IsRendering">
            <summary>
            Gets or sets if internal asynchronous rendering is currently enabled.
            </summary><remarks>
            All rendering is actually done asynchronously in a separate process
            and so the page is usually continuously rendering internally.
            You should set this to <c>false</c> when your surface is not rendering
            the view's pixel buffer (for ex, when a technology specific <c>WebControl</c>
            is not visible) to save some CPU cycles.
            <note>
            Technology specific <c>WebControls</c> usually monitor the control's visibility
            or enabled status and update this property automatically. They may require
            additional steps before you are able to set this property manually. For more
            details, refer to the documentation of each <c>WebControl</c>.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebView.ViewType">
            <summary>
            Gets type of this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            For details about the various types of a <see cref="T:Awesomium.Core.IWebView"/> instance,
            read the documentation of <see cref="T:Awesomium.Core.WebViewType"/> and its members.
            <p/>
            Here is a list of the type of views that Awesomium.NET components wrap:
            
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebView.IsLive">
            <summary>
            Gets if the native web-view, is alive.
            </summary><returns>
            A <see cref="T:System.Boolean"/> value indicating if the native web-view, 
            is alive. <c>False</c> indicates that the native web-view is:
            <list type="bullet">
            <item>
            <description>
            Crashed (see <see cref="P:Awesomium.Core.IWebView.IsCrashed"/>).
            <note>
            When crashed, technology specific <c>WebControls</c> will attempt 
            to recreate the underlying view.
            For details, see: <see cref="P:Awesomium.Core.IWebView.IsCrashed"/>.
            </note>
            </description>
            </item>
            <item>
            <description>
            Prematurely destroyed (eg, using <see cref="M:Awesomium.Windows.Controls.WebControl.Close"/>).
            </description>
            </item>
            <item>
            <description>
            Not properly instantiated. This means that something went wrong
            during instantiation of either the <see cref="T:Awesomium.Core.WebCore"/> (if this
            is the first view created) or of the
            native web-view.
            </description>
            </item>
            </list>
            </returns><remarks>
            Developers should always check this property before calling <see cref="T:Awesomium.Core.IWebView"/>
            members. Trying to access the native web-view when it is not alive, 
            can throw an <see cref="T:System.InvalidOperationException"/>.
            <p/>
            For more details, refer to the documentation of view members.
            <p/>
            <note>
            This property also returns <c>false</c> when the technology specific <c>WebControls</c>
            are shown in a designer. The Awesomium <see cref="T:Awesomium.Core.WebCore"/> and the native web-view, 
            are only instantiated during runtime.
            </note>
            </remarks><example>
            <code>
            private void toolStripButton2_Click( object sender, EventArgs e )
            {
                if ( !webControl.IsLive )
                    return;
                    
                webControl.GoForward();
            }
            </code>
            <code lang="VB">
            Private Sub ToolStripButton2_Click( sender As Object, e As EventArgs ) Handles ToolStripButton2.Click
                If Not m_WebControl.IsLive Then Return
                    
                m_WebControl.GoForward()
            End Sub
            </code>
            </example>
        </member>
        <member name="P:Awesomium.Core.WebView.Width">
            <summary>
            Gets or sets the current width of the view.
            </summary><remarks>
            Resizing the view will trigger the creation of a new
            surface, by calling <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>.
            </remarks><exception cref="T:System.InvalidOperationException">
            The member is accessed on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="P:Awesomium.Core.WebView.Height">
            <summary>
            Gets or sets the current height of the view.
            </summary><remarks>
            Resizing the view will trigger the creation of a new
            surface, by calling <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>.
            </remarks><exception cref="T:System.InvalidOperationException">
            The member is accessed on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="E:Awesomium.Core.WebView.BeginNavigation">
            <summary>
            Occurs when a view begins navigating to a new URL.
            </summary>
        </member>
        <member name="E:Awesomium.Core.WebView.CreateSurface">
            <summary>
            Occurs when an <see cref="T:Awesomium.Core.ISurface"/> is requested by the view. Usually, 
            every time the size of the view changes. You should return your own 
            <see cref="T:Awesomium.Core.ISurface"/> implementation here.
            </summary><remarks>
            When <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> is called,
            <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/> reflects the previously assigned 
            <see cref="T:Awesomium.Core.ISurface"/> instance. If your surface is capable of handling resizing, 
            you can keep on using the same <see cref="T:Awesomium.Core.ISurface"/> instance on
            multiple <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> calls.
            <p/>
            When <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> is called for the first
            time, <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/> returns the <see cref="T:Awesomium.Core.ISurface"/> 
            assigned to the view using <see cref="P:Awesomium.Core.IWebView.Surface"/> or, if no <see cref="T:Awesomium.Core.ISurface"/> 
            instance has been previously specified, the default <see cref="T:Awesomium.Core.ISurface"/> assigned
            to the view by Awesomium.NET. This is either a <see cref="T:Awesomium.Core.BitmapSurface"/>
            (for <see cref="T:Awesomium.Core.WebView"/> instances) or a technology specific <see cref="T:Awesomium.Core.ISurface"/>.
            <note>
            If you are using an <see cref="T:Awesomium.Core.ISurface"/> instance capable of handling changes in
            size, you should better use <see cref="P:Awesomium.Core.IWebView.Surface"/> to assign your surface.
            This surface will be used with multiple calls of <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>
            and it should be able to handle changes in size during <see cref="M:Awesomium.Core.ISurface.Initialize(Awesomium.Core.IWebView,System.Int32,System.Int32)"/>.
            In this scenario, you can ignore the <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> event.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Core.WebView.SelectionChanged">
            <summary>
            Occurs when the selection in the current page, changes.
            </summary>
        </member>
        <member name="E:Awesomium.Core.WebView.ProcessCreated">
            <summary>
            Occurs when the child rendering process for this view, has been spawned.
            </summary><remarks>
            This event also indicates the moment when global Javascript objects can be created.
            (See: <see cref="M:Awesomium.Core.IWebView.CreateGlobalJavascriptObject(System.String)"/>)
            </remarks>
        </member>
        <member name="E:Awesomium.Core.WebView.TitleChanged">
            <summary>
            Occurs when the current page title has changed.
            </summary>
        </member>
        <member name="E:Awesomium.Core.WebView.AddressChanged">
            <summary>
            Occurs when the page URL has changed.
            </summary><seealso cref="P:Awesomium.Core.IWebView.Source"/>
        </member>
        <member name="E:Awesomium.Core.WebView.ToolTipChanged">
            <summary>
            Occurs when the tooltip text has changed. You
            should hide the tooltip when the text is empty.
            </summary><remarks>
            Technology specific <c>WebControls</c>, present their own tooltip.
            Set <see cref="P:Awesomium.Core.ToolTipChangedEventArgs.Handled"/> to <c>true</c>,
            to prevent a <c>WebControl</c> from displaying its predefined tooltip.
            </remarks>
        </member>
        <member name="E:Awesomium.Core.WebView.TargetURLChanged">
            <summary>
            Occurs when the target URL has changed. This
            is usually the result of hovering over a link on a page.
            </summary>
        </member>
        <member name="E:Awesomium.Core.WebView.CursorChanged">
            <summary>
            Occurs when the cursor has changed. This is
            is usually the result of hovering over different content.
            </summary><remarks>
            You can set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
            to <c>true</c>, to prevent a technology specific <c>WebControl</c>
            from changing the visible cursor.
            </remarks>
        </member>
        <member name="E:Awesomium.Core.WebView.FocusChanged">
            <summary>
            Occurs when the focused element changes on the page.
            This is usually the result of text-box being focused or some other
            user-interaction event.
            </summary><remarks>
            You should generally forward keyboard events to the active <see cref="T:Awesomium.Core.IWebView"/> instance,
            whenever one of the following element types are focused:
            <list type="bullet">
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Input"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.TextInput"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.EditableContent"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Plugin"/>
            </description>
            </item>
            </list>
            This is done automatically in technology specific <c>WebControl</c>
            instances.
            </remarks><seealso cref="P:Awesomium.Core.IWebView.FocusedElementType"/>
        </member>
        <member name="E:Awesomium.Core.WebView.ShowCreatedWebView">
            <summary>
            Occurs when an <see cref="T:Awesomium.Core.IWebView"/> creates a new child web-view instance
            (usually the result of <c>window.open</c> or an external link). It
            is your responsibility to display this child web-view in your
            application.
            </summary><remarks>
            <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> occurs when an <see cref="T:Awesomium.Core.IWebView"/> instance
            creates a new child view (usually the result of <c>window.open</c> or an external link). 
            <p/>
            It is your responsibility to wrap and display this new view in your application.
            <see cref="T:Awesomium.Core.WebView"/> provides a constructor that accepts a previously created web-view instance.
            (see <see cref="M:Awesomium.Core.WebView.#ctor(System.IntPtr)"/>). Similarly, technology
            specific <c>WebControls</c> provide a <c>NativeView</c> property that allows you to
            assign to the controls, a previously created web-view instance 
            (eg, <see cref="P:Awesomium.Windows.Controls.WebControl.NativeView"/>). This property should be
            set before the control loads and creates its own underlying web-view. Usually immediately 
            after instantiating the control or in the designer.
            <note type="caution">
            If you do not intend to wrap the new view, you should set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
            to <c>true</c>, to tell the core to destroy the unused web-view instance. If you fail
            to do this, the native web-view instance will remain alive until the <see cref="T:Awesomium.Core.WebCore"/>
            is shut down. This can result in many processes (<i>awesomium_process</i>) being spawned,
            but never used.
            <p/>
            The <see cref="T:Awesomium.Core.WebCore"/> provides a <see cref="M:Awesomium.Core.WebCore.DestroyUnwrappedViews"/> method.
            This can be useful for destroying such native views that were spawned by Awesomium,
            but were never wrapped.
            </note>
            <note>
            If you are wrapping the child view using a <see cref="T:Awesomium.Core.WebView"/> instance, you should call 
            <see cref="M:Awesomium.Core.IWebView.Resize(System.Int32,System.Int32)"/> on the child view immediately after the <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event, 
            to make it match your container.
            </note>
            </remarks><seealso cref="T:Awesomium.Core.ShowCreatedWebViewEventArgs"/>
        </member>
        <member name="E:Awesomium.Core.WebView.DocumentReady">
            <summary>
            Occurs when the DOM has finished parsing and the
            <c>window</c> object is available for JavaScript execution.
            </summary><seealso cref="E:Awesomium.Core.IWebView.ProcessCreated"/>
        </member>
        <member name="E:Awesomium.Core.WebView.LoadingFrame">
            <summary>
            Occurs when the page begins loading a frame.
            </summary>
        </member>
        <member name="E:Awesomium.Core.WebView.LoadingFrameFailed">
            <summary>
            Occurs when a frame fails to load. See <see cref="P:Awesomium.Core.LoadingFrameFailedEventArgs.ErrorDescription"/>
            for additional information.
            </summary>
        </member>
        <member name="E:Awesomium.Core.WebView.LoadingFrameComplete">
            <summary>
            Occurs when the page finishes loading a frame.
            </summary><remarks>
            The main frame always finishes loading last for a given page load.
            </remarks>
        </member>
        <member name="E:Awesomium.Core.WebView.SelectLocalFiles">
            <summary>
            Occurs when the page requests to display a file chooser
            dialog. This is usually the result of a user clicking on an HTML
            input element with <c>type='file'</c>.
            </summary><remarks>
            The table below presents the way the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> event is handled, 
            when <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
            If <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            the event is immediately canceled.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            controls will display their predefined dialog.
            </description>
            </item>
            </list>
            Applications can handle the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> and <see cref="E:Awesomium.Core.IWebView.Download"/> events either
            modally or non-modally. Only modal handling is officially supported by Awesomium.NET.
            <p/>
            The table below shows the methods of handling the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> and
            <see cref="E:Awesomium.Core.IWebView.Download"/> events:
            <list type="table">
            <listheader>
            <term>
            Setting
            </term>
            <description>
            Handling
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.Modal"/>
            </term>
            <description>
            Developers should provide a response through the <see cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFiles"/> or 
            <see cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFile"/> property, before the event handler exits.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (Not officially supported by Awesomium.NET)
            </term>
            <description>
            No response will be provided for the request. Developers should later provide
            a response themselves using either:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/> for <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.DidChooseDownloadPath(System.Int32,System.String)"/> or <see cref="M:Awesomium.Core.IWebView.CancelDownload(System.Int32)"/> 
            for <see cref="E:Awesomium.Core.IWebView.Download"/>
            </description>
            </item>
            </list>
            <note type="caution">
            This technique is not officially supported by Awesomium.NET. Therefore, the member
            above is not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access this member.
            </note>
            <note type="caution">
            For <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/>, if you set <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> to <see cref="F:Awesomium.Core.EventHandling.NotModal"/>, 
            you should make sure that you always call <see cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/> providing a response to the event.
            No new <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> events will occur, until a response has been provided for the last one.
            </note>
            </description>
            </item>
            </list>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> (or any other member), is ignored.
            </note>
            </remarks><seealso cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/>
        </member>
        <member name="E:Awesomium.Core.WebView.LoginRequest">
            <summary>
            Occurs when the page needs authentication from the user (for
            example, Basic HTTP Auth, NTLM Auth, etc.).
            </summary><remarks>
            The table below presents the way the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event is handled, 
            when <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
            If <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            the event is immediately canceled.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            controls will display their predefined UI.
            </description>
            </item>
            </list>
            Applications can handle the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event either
            modally or non-modally. Only modal handling is officially supported by Awesomium.NET.
            <p/>
            The table below shows the methods of handling the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event:
            <list type="table">
            <listheader>
            <term>
            Setting
            </term>
            <description>
            Handling
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.Modal"/>
            </term>
            <description>
            Developers should provide a response through the <see cref="P:Awesomium.Core.LoginRequestEventArgs.Username"/> and
            <see cref="P:Awesomium.Core.LoginRequestEventArgs.Password"/> properties, before the event handler exits.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (Not officially supported by Awesomium.NET)
            </term>
            <description>
            No response will be provided for the request. Developers should later provide
            a response themselves using any of the following methods:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.Login(System.Int32,System.String,System.String)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.CancelLogin(System.Int32)"/>
            </description>
            </item>
            </list>
            <note type="caution">
            This technique is not officially supported by Awesomium.NET. Therefore, the members
            above are not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access these members.
            </note>
            </description>
            </item>
            </list>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> (or any other member), is ignored.
            </note>
            </remarks><seealso cref="M:Awesomium.Core.IWebView.Login(System.Int32,System.String,System.String)"/><seealso cref="M:Awesomium.Core.IWebView.CancelLogin(System.Int32)"/>
        </member>
        <member name="E:Awesomium.Core.WebView.PrintRequest">
            <summary>
            Occurs when the page requests to print itself. (Usually
            the result of <c>window.print()</c> being called from JavaScript.) It is
            your responsibility to print the view to a file and handle the
            actual device printing.
            </summary><seealso cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/>
        </member>
        <member name="E:Awesomium.Core.WebView.PrintFailed">
            <summary>
            Occurs when <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/> fails. Typically because of
            bad printer configuration or invalid output path (see <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/>).
            </summary><seealso cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/>
        </member>
        <member name="E:Awesomium.Core.WebView.PrintComplete">
            <summary>
            Occurs when a <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/> operation, completes successfully.
            </summary><seealso cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/>
        </member>
        <member name="E:Awesomium.Core.WebView.Download">
            <summary>
            Occurs when the page requests to begin downloading a certain file.
            </summary><remarks>
            The table below presents the way the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> event is handled, 
            when <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
            If <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            the event is immediately canceled.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            controls will display their predefined dialog.
            </description>
            </item>
            </list>
            Applications can handle the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> and <see cref="E:Awesomium.Core.IWebView.Download"/> events either
            modally or non-modally. Only modal handling is officially supported by Awesomium.NET.
            <p/>
            The table below shows the methods of handling the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> and
            <see cref="E:Awesomium.Core.IWebView.Download"/> events:
            <list type="table">
            <listheader>
            <term>
            Setting
            </term>
            <description>
            Handling
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.Modal"/>
            </term>
            <description>
            Developers should provide a response through the <see cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFiles"/> or 
            <see cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFile"/> property, before the event handler exits.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (Not officially supported by Awesomium.NET)
            </term>
            <description>
            No response will be provided for the request. Developers should later provide
            a response themselves using either:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/> for <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.DidChooseDownloadPath(System.Int32,System.String)"/> or <see cref="M:Awesomium.Core.IWebView.CancelDownload(System.Int32)"/> 
            for <see cref="E:Awesomium.Core.IWebView.Download"/>
            </description>
            </item>
            </list>
            <note type="caution">
            This technique is not officially supported by Awesomium.NET. Therefore, the member
            above is not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access this member.
            </note>
            <note type="caution">
            For <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/>, if you set <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> to <see cref="F:Awesomium.Core.EventHandling.NotModal"/>, 
            you should make sure that you always call <see cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/> providing a response to the event.
            No new <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> events will occur, until a response has been provided for the last one.
            </note>
            </description>
            </item>
            </list>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> (or any other member), is ignored.
            </note>
            </remarks><seealso cref="M:Awesomium.Core.IWebView.DidChooseDownloadPath(System.Int32,System.String)"/><seealso cref="M:Awesomium.Core.IWebView.CancelDownload(System.Int32)"/>
        </member>
        <member name="E:Awesomium.Core.WebView.DownloadProgress">
            <summary>
            Occurs when the progress of a download is updated.
            </summary><seealso cref="M:Awesomium.Core.IWebView.CancelDownload(System.Int32)"/>
        </member>
        <member name="E:Awesomium.Core.WebView.DownloadComplete">
            <summary>
            Occurs when a download is finished.
            </summary>
        </member>
        <member name="E:Awesomium.Core.WebView.ShowPopupMenu">
            <summary>
            Occurs when the page requests to display a drop-down
            (popup) menu. This is usually the result of a user clicking on
            a <c>select</c> HTML input element.
            </summary><remarks>
            By default, technology specific <c>WebControls</c> provide
            their own drop-down (popup) menus. If you wish to prevent the
            control from displaying its own menu and handle the event yourself,
            set <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/> to <c>true</c> and then
            use any of the following methods to respond to the view:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.SelectPopupMenuItem(System.Int32)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.CancelPopupMenu"/>
            </description>
            </item>
            </list>
            These members are not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access these members.
            <note>
            The windowless <see cref="T:Awesomium.Core.WebView"/>, does not provide any internal implementation for drop-down (popup) menus.
            If you are using a <see cref="T:Awesomium.Core.WebView"/> instance with your UI application, you will have to handle
            the <see cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/> event yourself. Technology specific Awesomium.NET assemblies,
            provide predefined drop-down (popup) menu controls that you can use with your WPF or Windows Forms application.
            </note>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/> (or any other member), is ignored.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Core.WebView.ShowContextMenu">
            <summary>
            Occurs when the page requests to display a context menu. 
            This is usually the result of a user right-clicking on
            an element or plugin in the page.
            </summary>
        </member>
        <member name="E:Awesomium.Core.WebView.ResponsiveChanged">
            <summary>
            Occurs when this view's process hangs, or becomes responsive after
            a hang. Use <see cref="P:Awesomium.Core.ResponsiveChangedEventArgs.IsResponsive"/> or
            <see cref="P:Awesomium.Core.IWebView.IsResponsive"/> to check the current state of the process.
            </summary>
        </member>
        <member name="E:Awesomium.Core.WebView.Crashed">
            <summary>
            Occurs when this view's process crashes.
            </summary>
        </member>
        <member name="T:Awesomium.Core.WebViewType">
            <summary>
            Specifies the different <see cref="T:Awesomium.Core.IWebView"/> types.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebViewType.Offscreen">
            <summary>
            This type will render continuously to a pixel-buffer.
            You must implement a surface (see <see cref="T:Awesomium.Core.ISurface"/>)
            to render the buffer and inject all input (mouse/keyboard events) yourself.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebViewType.Window">
            <summary>
            This type will create a native Window to display
            the <see cref="T:Awesomium.Core.IWebView"/> and will capture all input itself.
            </summary>
        </member>
        <member name="T:Awesomium.Core.WebContextMenuInfo">
            <summary>
            Provides information and utilities for creating and displaying a 
            context menu. Used with <see cref="E:Awesomium.Core.IWebView.ShowContextMenu"/>.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebContextMenuInfo.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.WebContextMenuInfo.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Core.WebContextMenuInfo.MouseX">
            <summary>
            Gets the x-coordinate of mouse when the right-click occurred.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebContextMenuInfo.MouseY">
            <summary>
            Gets the y-coordinate of mouse when the right-click occurred.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebContextMenuInfo.MediaType">
            <summary>
            Gets the media type where the right-click occurred.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebContextMenuInfo.MediaState">
            <summary>
            Gets the state of the media where the right-click occurred.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebContextMenuInfo.LinkURL">
            <summary>
            Gets the link that was right-clicked, if any.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebContextMenuInfo.HasLinkURL">
            <summary>
            Gets if the user has right-clicked on a link.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebContextMenuInfo.SelectionText">
            <summary>
            Gets the selected text the user has right-clicked on, if any.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebContextMenuInfo.HasSelection">
            <summary>
            Gets if the user has right-clicked selected content.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebContextMenuInfo.IsEditable">
            <summary>
            Gets if the element right-clicked, is editable.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebContextMenuInfo.EditFlags">
            <summary>
            Gets the supported edit actions for the element right-clicked.
            </summary>
        </member>
        <member name="T:Awesomium.Core.WebFileChooserMode">
            <summary>
            Indicates the kind of dialog that should be presented. This enumeration also identifies
            if <see cref="T:Awesomium.Core.FileDialogEventArgs"/> is passed to a <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> or a 
            <see cref="E:Awesomium.Core.IWebView.Download"/> event.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebFileChooserMode.Open">
            <summary>
            Select a file (file should exist).
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebFileChooserMode.OpenMultiple">
            <summary>
            Select multiple files.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebFileChooserMode.OpenFolder">
            <summary>
            Select a folder (folder should exist).
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebFileChooserMode.Save">
            <summary>
            Select a file to save to.
            </summary>
        </member>
        <member name="T:Awesomium.Core.WebKeyboardEventType">
            <summary>
            An enumeration of the different <see cref="T:Awesomium.Core.WebKeyboardEvent"/> types.
            </summary>
        </member>
        <member name="T:Awesomium.Core.Modifiers">
            <summary>
            An enumeration of the different keyboard modifiers.
            </summary>
        </member>
        <member name="T:Awesomium.Core.WebKeyboardEvent">
            <summary>
            Represents a generic keyboard event that can be created from a
            platform-specific event or synthesized from a virtual event.
            </summary>
            <seealso cref="M:Awesomium.Core.IWebView.InjectKeyboardEvent(Awesomium.Core.WebKeyboardEvent)"/>
        </member>
        <member name="M:Awesomium.Core.WebKeyboardEvent.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.WebKeyboardEvent.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.WebKeyboardEvent.op_Equality(Awesomium.Core.WebKeyboardEvent,Awesomium.Core.WebKeyboardEvent)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.WebKeyboardEvent"/> instances are equivalent.
            </summary>
            <param name="ke1">
            The <see cref="T:Awesomium.Core.WebKeyboardEvent"/> instance that is to the left of the equality operator.
            </param>
            <param name="ke2">
            The <see cref="T:Awesomium.Core.WebKeyboardEvent"/> instance that is to the right of the equality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="ke1"/> and <paramref name="ke2"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.WebKeyboardEvent.op_Inequality(Awesomium.Core.WebKeyboardEvent,Awesomium.Core.WebKeyboardEvent)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.WebKeyboardEvent"/> instances are not equal.
            </summary>
            <param name="ke1">
            The <see cref="T:Awesomium.Core.WebKeyboardEvent"/> instance that is to the left of the inequality operator.
            </param>
            <param name="ke2">
            The <see cref="T:Awesomium.Core.WebKeyboardEvent"/> instance that is to the right of the inequality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="ke1"/> and <paramref name="ke2"/> are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Awesomium.Core.WebKeyboardEvent.Type">
            <summary>
            Gets or sets the type of this <see cref="T:Awesomium.Core.WebKeyboardEvent"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebKeyboardEvent.Modifiers">
            <summary>
            Gets or sets the current state of the keyboard.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebKeyboardEvent.VirtualKeyCode">
            <summary>
            Gets or sets the virtual key-code associated with this keyboard event. This is either
            directly from the event (ie, <c>WPARAM</c> on Windows) or via a mapping function.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebKeyboardEvent.NativeKeyCode">
            <summary>
            Gets or sets the actual key-code generated by the platform.
            </summary>
            <remarks>
            The DOM spec primarily uses Windows-equivalent codes (hence <see cref="P:Awesomium.Core.WebKeyboardEvent.VirtualKeyCode"/> above)
            but it helps to also specify the platform-specific key-code as well.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebKeyboardEvent.KeyIdentifier">
            <summary>
            Gets or sets a string identifying the key that was pressed.
            </summary>
            <remarks>
            This can be generated from the <see cref="P:Awesomium.Core.WebKeyboardEvent.VirtualKeyCode"/> via the 
            <see cref="M:Awesomium.Core.Utilities.GetKeyIdentifierFromVirtualKeyCode(Awesomium.Core.VirtualKey)"/>
            utility function. You can find the full list of key identifiers at:
            http://www.w3.org/TR/DOM-Level-3-Events/keyset.html
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebKeyboardEvent.Text">
            <summary>
            Gets or sets the actual text generated by this keyboard event. This is usually only a
            single character but we're generous and cap it at a max of 4 characters.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebKeyboardEvent.UnmodifiedText">
            <summary>
            Gets or sets the text generated by this keyboard event before all modifiers except
            shift are applied.
            </summary>
            <remarks>
            This is used internally for working out shortcut keys.
            This is usually only a single character but we're generous and cap it at a
            max of 4 characters.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebKeyboardEvent.IsSystemKey">
            <summary>
            Gets or sets if the pressed key is a "system key".
            </summary>
            <remarks>
            This is a Windows-only concept and should be <c>false</c> for all non-Windows platforms. 
            For more information, see the following link:
            http://msdn.microsoft.com/en-us/library/ms646286(VS.85).aspx
            </remarks>
        </member>
        <member name="T:Awesomium.Core.WebMenuItem">
            <summary>
            Represents an item in a menu. This is used for Popup Menus.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebMenuItem.Type">
            <summary>
            Gets the type of this menu item.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebMenuItem.Label">
            <summary>
            Gets the label to display to users.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebMenuItem.ToolTip">
            <summary>
            Gets the text to display when users hover over this menu item.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebMenuItem.RTL">
            <summary>
            Gets if text should be displayed right-to-left.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebMenuItem.HasDirectionalOverride">
            <summary>
            Gets if text direction has been overridden.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebMenuItem.IsEnabled">
            <summary>
            Gets if this menu item is enabled.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebMenuItem.IsChecked">
            <summary>
            Gets if this menu item is checked (only used with
            <see cref="F:Awesomium.Core.WebMenuItemType.CheckableOption"/>).
            </summary>
        </member>
        <member name="T:Awesomium.Core.WebMenuItemCollection">
            <summary>
            Represents a read-only collection of <see cref="T:Awesomium.Core.WebMenuItem"/>.
            </summary>
            <seealso cref="T:Awesomium.Core.WebMenuItem"/>
        </member>
        <member name="M:Awesomium.Core.WebMenuItemCollection.#ctor(System.Collections.Generic.IList{Awesomium.Core.WebMenuItem})">
            <inheritdoc />
        </member>
        <member name="T:Awesomium.Core.WebMenuItemType">
            <summary>
            Enumeration of the different menu item types.
            For drop-down (popup) menus, you will usually only
            need to handle <see cref="F:Awesomium.Core.WebMenuItemType.Option"/> and
            <see cref="F:Awesomium.Core.WebMenuItemType.Group"/>.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebMenuItemType.Option">
            <summary>
            Generic Option eg, <code lang="HTML">&lt;option&gt;</code>.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebMenuItemType.CheckableOption">
            <summary>
            Option with a checkbox.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebMenuItemType.Group">
            <summary>
            Group Label eg, <code lang="HTML">&lt;optgroup label="xxx"&gt;</code>.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebMenuItemType.Separator">
            <summary>
            Separator.
            </summary>
        </member>
        <member name="T:Awesomium.Core.WebPopupMenuInfo">
            <summary>
            Provides information and utilities for creating and displaying a
            drop-down (popup) menu.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/>
            <seealso cref="T:Awesomium.Core.PopupMenuEventArgs"/>
        </member>
        <member name="M:Awesomium.Core.WebPopupMenuInfo.Cancel">
            <summary>
            Cancels the <see cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/> event
            that requested the creation of this menu.
            </summary>
            <remarks>
            When you select an item or cancel the event, you should
            hide and destroy the visual drop-down (popup) menu, if any.
            <note>
            If <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/> was <c>false</c> (default),
            technology specific <c>WebControl</c> instances, handle this internally.
            </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/> event, has already been canceled.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            An item has already been selected and the response has been provided to the view.
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebPopupMenuInfo.Select(System.Int32)">
            <summary>
            Responds to the <see cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/> event
            by indicating the selected item.
            </summary>
            <param name="itemIndex">
            The selected item's index.
            </param>
            <remarks>
            When you select an item or cancel the event, you should
            hide and destroy the visual drop-down (popup) menu, if any.
            <note>
            If <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/> was <c>false</c> (default),
            technology specific <c>WebControl</c> instances, handle this internally.
            </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/> event, has already been canceled.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            An item has already been selected and a response has been provided to the view.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified index is out of range.
            </exception>
        </member>
        <member name="P:Awesomium.Core.WebPopupMenuInfo.Bounds">
            <summary>
            Gets the location to display the menu.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPopupMenuInfo.ItemHeight">
            <summary>
            Gets the suggested height of each menu item.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPopupMenuInfo.ItemFontSize">
            <summary>
            Gets the suggested font-size of each menu item.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPopupMenuInfo.SelectedItem">
            <summary>
            Gets the index of the item that should initially be selected.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPopupMenuInfo.IsRightAligned">
            <summary>
            Gets if the menu is right-aligned.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPopupMenuInfo.Items">
            <summary>
            Gets a collection of <see cref="T:Awesomium.Core.WebMenuItem"/> instances,
            indicating the members of the menu.
            </summary>
        </member>
        <member name="T:Awesomium.Core.WebPreferences">
            <summary>
            Represents the preferences for a <see cref="T:Awesomium.Core.WebSession"/>.
            </summary>
            <remarks>
            All <see cref="T:Awesomium.Core.IWebView"/> instances that belong to a specific <see cref="T:Awesomium.Core.WebSession"/>,
            share these preferences.
            </remarks>
            <seealso cref="M:Awesomium.Core.WebCore.CreateWebSession(Awesomium.Core.WebPreferences)"/>
            <seealso cref="P:Awesomium.Core.IWebView.WebSession"/>
            <seealso cref="T:Awesomium.Core.WebSession"/>
        </member>
        <member name="M:Awesomium.Core.WebPreferences.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.WebPreferences.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.WebPreferences.op_Equality(Awesomium.Core.WebPreferences,Awesomium.Core.WebPreferences)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.WebPreferences"/> instances are equivalent.
            </summary>
            <param name="wp1">
            The <see cref="T:Awesomium.Core.WebPreferences"/> instance that is to the left of the equality operator.
            </param>
            <param name="wp2">
            The <see cref="T:Awesomium.Core.WebPreferences"/> instance that is to the right of the equality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="wp1"/> and <paramref name="wp2"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.WebPreferences.op_Inequality(Awesomium.Core.WebPreferences,Awesomium.Core.WebPreferences)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.WebPreferences"/> instances are not equal.
            </summary>
            <param name="wp1">
            The <see cref="T:Awesomium.Core.WebPreferences"/> instance that is to the left of the inequality operator.
            </param>
            <param name="wp2">
            The <see cref="T:Awesomium.Core.WebPreferences"/> instance that is to the right of the inequality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="wp1"/> and <paramref name="wp2"/> are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.Javascript">
            <summary>
            Gets or sets if JavaScript should be enabled. (Default: <c>true</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.Dart">
            <summary>
            Gets or sets if Dart (experimental) should be enabled. (Default: <c>true</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.Plugins">
            <summary>
            Gets or sets if plugins (Flash, Silverlight) should be enabled.
            (Default: <c>true</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.LocalStorage">
            <summary>
            Gets or sets if HTML5 Local Storage should be enabled. (Default: <c>true</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.Databases">
            <summary>
            Gets or sets if HTML5 Databases should be enabled. (Default: <c>true</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.AppCache">
            <summary>
            Gets or sets if HTML5 App Cache should be enabled. (Default: <c>true</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.WebAudio">
            <summary>
            Gets or sets if HTML5 WebAudio should be enabled. (Default: <c>true</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.WebGL">
            <summary>
            Gets or sets if HTML5 WebGL (experimental) should be enabled.
            (Default: <c>false</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.WebSecurity">
            <summary>
            Gets or sets if web security should be enabled (prevents cross-domain
            requests, for example). (Default: <c>true</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.RemoteFonts">
            <summary>
            Gets or sets if remote fonts should be enabled. (Default: <c>true</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.SmoothScrolling">
            <summary>
            Gets or sets if smooth scrolling should be enabled. (Default: <c>false</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.EnableGPUAcceleration">
            <summary>
            Gets or sets if GPU accelerated compositing (experimental) should be
            enabled. This is only compatible with windowed <see cref="T:Awesomium.Core.IWebView"/> 
            instances at this time (see <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession,Awesomium.Core.WebViewType)"/>). 
            (Default: <c>false</c>)
            </summary>
            <seealso cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession,Awesomium.Core.WebViewType)"/>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.CustomCSS">
            <summary>
            User-defined CSS to be applied to all web-pages. This is useful for
            overriding default styles. (Default: <see cref="F:System.String.Empty"/>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.ProxyConfig">
            <summary>
            Indicates the proxy settings for all network requests. 
            Specify "none" to disable all proxy use, specify "auto" to attempt to detect the proxy using system settings 
            (e.g., via the Internet Properties dialog on Windows or the Network panel of System Preferences on Mac OSX). 
            Specify anything else to set manual proxy settings.
            </summary>
            <example>
            Possible values can be:
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><c>"none"</c></term>
            <description>No proxy. (<b>Default</b>).</description>
            </item>
            <item>
            <term><c>"auto"</c></term>
            <description>Detect system proxy settings.</description>
            </item>
            <item>
            <term><c>"http=myproxy:80;ftp=myproxy2"</c></term>
            <description>
            Use HTTP proxy "myproxy:80" for http:// URLs, and HTTP proxy 
            "myproxy2:80" for ftp:// URLs.
            </description>
            </item>
            <item>
            <term><c>"myproxy:80"</c></term>
            <description>Use HTTP proxy "foopy:80" for all URLs.</description>
            </item>
            <item>
            <term><c>"socks4://myproxy"</c></term>
            <description>Use SOCKS v4 proxy "foopy:1080" for all URLs.</description>
            </item>
            </list>
            </example>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.AcceptLanguage">
            <summary>
            Gets or sets the accept-language for the browser. (Default: <c>"en-us,en"</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.AcceptCharset">
            <summary>
            Gets or sets the accept-charset for the browser. (Default: <c>"iso-8859-1,*,utf-8"</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.DefaultEncoding">
            <summary>
            Gets or sets the default encoding for the browser. (Default: <c>"iso-8859-1"</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.ShrinkStandaloneImagesToFit">
            <summary>
            Gets or sets if standalone images should be shrunk to fit the view.
            (Default: <c>true</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.LoadImagesAutomatically">
            <summary>
            Gets or sets if images should be loaded automatically on the page.
            (Default: <c>true</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.CanScriptsOpenWindows">
            <summary>
            Gets or sets if scripts are allowed to open windows. (Default: <c>true</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.CanScriptsCloseWindows">
            <summary>
            Gets or sets if scripts are allowed to close windows. (Default: <c>true</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.CanScriptsAccessClipboard">
            <summary>
            Gets or sets if scripts are allowed to access the clipboard.
            (Default: <c>false</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.UniversalAccessFromFileURL">
            <summary>
            Gets or sets if local files can access other local files. (Default: <c>false</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.FileAccessFromFileURL">
            <summary>
            (Default: false)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.AllowInsecureContent">
            <summary>
            Gets or sets if insecure content is displayed and/or run. (Default: <c>true</c>)
            </summary>
        </member>
        <member name="T:Awesomium.Core.WebSession">
            <summary>
            Represents a session responsible for storing all user-generated data (cookies,
            cache, authentication, etc.). It can either be purely in-memory or saved
            to disk.
            </summary>
            <remarks>
            <see cref="T:Awesomium.Core.IWebView"/> instances that share the same <see cref="T:Awesomium.Core.WebSession"/>, share the same cookies, cache, 
            certificates, local databases as well as the same preferences (see <see cref="T:Awesomium.Core.WebPreferences"/>).
            </remarks>
            <example>
            <code>
            using ( WebSession session = WebCore.CreateWebSession( "C:\\MyCache", new WebPreferences() { CustomCSS = "::-webkit-scrollbar { visibility: hidden; }" } ) )
            {
            	using ( WebView view = WebCore.CreateWebView( 1280, 960, session ) )
            	{
            		bool finishedLoading = false;
            
            		view.LoadURL( new Uri( "http://www.awesomium.com" ) );
            		view.LoadingFrameComplete += ( s, e ) =&gt;
            		{
            			if ( e.IsMainFrame )
            				finishedLoading = true;
            		};
            
            		while ( !finishedLoading )
            		{
            			Thread.Sleep( 100 );
            			WebCore.Update();
            		}
            
            		BitmapSurface surface = (BitmapSurface)view.Surface;
            		surface.SaveToPNG( "result.png", true );
            	}
            }
            </code>
            <code lang="VB">
            Using session As WebSession = WebCore.CreateWebSession("C:\MyCache", New WebPreferences() With {.CustomCSS = "::-webkit-scrollbar { visibility: hidden; }"})
            	Using view As WebView = WebCore.CreateWebView(1280, 960, session)
            		Dim finishedLoading As Boolean = False
            
            		view.LoadURL(New Uri("http://www.awesomium.com"))
            		AddHandler view.LoadingFrameComplete, Sub(s, e)
            													If e.IsMainFrame Then
            														finishedLoading = True
            													End If
            											  End Sub	
            
            		Do While Not finishedLoading
            			Thread.Sleep(100)
            			WebCore.Update()
            		Loop
            
            		Dim surface As BitmapSurface = CType(view.Surface, BitmapSurface)
            		surface.SaveToPNG("result.png", True)
            	End Using
            End Using
            </code>
            </example>
            <seealso cref="M:Awesomium.Core.WebCore.CreateWebSession(Awesomium.Core.WebPreferences)"/>
            <seealso cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession,Awesomium.Core.WebViewType)"/>
        </member>
        <member name="M:Awesomium.Core.WebSession.OnDispose">
            <remarks>
            <note type="caution">
            Attempting to dispose a <see cref="T:Awesomium.Core.WebSession"/> instance that is assigned
            to active views, will fail.
            </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cannot dispose a WebSession that is assigned to active views. 
            Make sure no view is using this session before disposing it.
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebSession.AddDataSource(System.String,Awesomium.Core.Data.DataSource)">
            <summary>
            Adds a <see cref="T:Awesomium.Core.Data.DataSource"/> instance for a specified host.
            </summary>
            <param name="assetHost">
            The host to bind to the specified <paramref name="source"/>.
            </param>
            <param name="source">
            The <see cref="T:Awesomium.Core.Data.DataSource"/> instance that will handle requests for local assets.
            </param>
            <remarks>
            A <see cref="T:Awesomium.Core.Data.DataSource"/> instance is responsible for providing local assets
            when code (HTML or Javascript) from a specified host asks for them. The protocol
            for requesting local assets is: <c>asset://</c>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            An empty or <c>null</c> reference string has been specified
            for <paramref name="assetHost"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A <c>null</c> reference has been specified
            for <paramref name="source"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The specified <paramref name="source"/>, has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The specified <paramref name="source"/>, is assigned to another <see cref="T:Awesomium.Core.WebSession"/>. 
            A <see cref="T:Awesomium.Core.Data.DataSource"/> can only be used by a single session.
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebSession.GetDataSource(System.String)">
            <summary>
            Gets the <see cref="T:Awesomium.Core.Data.DataSource"/> instance previously registered for this host.
            </summary>
            <param name="assetHost">
            The host bound to the <see cref="T:Awesomium.Core.Data.DataSource"/>.
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.Data.DataSource"/> instance that is bound to the specified <paramref name="assetHost"/>,
            or <c>null</c> (<c>Nothing</c> in Visual Basic) is no <see cref="T:Awesomium.Core.Data.DataSource"/> is
            bound to the specified <paramref name="assetHost"/>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.WebSession.SetCookie(System.Uri,System.String,System.Boolean,System.Boolean)">
            <summary>
            Sets a cookie for a certain URL asynchronously.
            </summary>
            <param name="url">The URL to set the cookie on.</param>
            <param name="cookieString">
            The cookie string, for example:
            <c>"key1=value1; key2=value2"</c>
            </param>
            <param name="isHttpOnly">
            Specifies if this cookie is HTTP-only.
            </param>
            <param name="forceSessionCookie">
            Specifies if this as a session cookie. (Will not be saved to disk)
            </param>
        </member>
        <member name="P:Awesomium.Core.WebSession.IsOnDisk">
            <summary>
            Gets if this session is being synchronized to disk (else, it's in-memory
            only and all data will be lost at exit).
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebSession.DataPath">
            <summary>
            Gets the disk data path of this session, if any.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebSession.Preferences">
            <summary>
            Gets the preferences for this session.
            </summary>
            <remarks>
            <see cref="T:Awesomium.Core.IWebView"/> instances that share the same <see cref="T:Awesomium.Core.WebSession"/>, share the same cookies, cache, 
            certificates, local databases as well as the same preferences (see <see cref="T:Awesomium.Core.WebPreferences"/>).
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebSession.Views">
            <summary>
            Gets the <see cref="T:Awesomium.Core.IWebView"/> instances that share this <see cref="T:Awesomium.Core.WebSession"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebSession.DataSources">
            <summary>
            Gets a list of <see cref="T:Awesomium.Core.Data.DataSource"/> instances that have been registered with this <see cref="T:Awesomium.Core.WebSession"/>.
            </summary>
        </member>
        <member name="T:Awesomium.Core.WebViewCollection">
            <summary>
            Represents a collection of views maintained by the <see cref="T:Awesomium.Core.WebCore"/>.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebViewCollection.#ctor(System.Collections.ObjectModel.ObservableCollection{Awesomium.Core.IWebView})">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.WebViewCollection.Contains(System.IntPtr)">
            <summary>
            Determines whether an <see cref="T:Awesomium.Core.IWebView"/> instance with the specified handle, exists in the collection.
            </summary>
            <param name="instanceHandle">The handle to the <see cref="T:Awesomium.Core.IWebView"/> instance to locate.</param>
            <returns>
            <c>true</c> if an <see cref="T:Awesomium.Core.IWebView"/> instance with the specified handle exists in the collection; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.WebViewCollection.GetByHandle(System.IntPtr)">
            <summary>
            Gets the <see cref="T:Awesomium.Core.IWebView"/> instance with the specified handle, if any.
            </summary>
            <param name="instanceHandle">
            The handle to an <see cref="T:Awesomium.Core.IWebView"/> instance. (See <see cref="P:Awesomium.Core.IWebView.Instance"/>)
            </param>
            <returns>
            The <see cref="T:Awesomium.Core.IWebView"/> instance with the specified handle, or <c>null</c> (<c>Nothing</c> in Visual Basic), 
            if the specified handle is not valid.
            </returns>
        </member>
        <member name="T:Awesomium.Core.WebLoginDialogInfo">
            <summary>
            Provides information for creating and displaying a dialog 
            so that users can input their username and password.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.LoginRequest"/>
            <seealso cref="T:Awesomium.Core.LoginRequestEventArgs"/>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.SynchronousWindowPosition">
            <summary>If the calling thread and the thread that owns the window are attached to different input queues, 
            the system posts the request to the thread that owns the window. This prevents the calling thread from 
            blocking its execution while other threads process the request.</summary>
            <remarks>SWP_ASYNCWINDOWPOS</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.DeferErase">
            <summary>Prevents generation of the WM_SYNCPAINT message.</summary>
            <remarks>SWP_DEFERERASE</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.DrawFrame">
            <summary>Draws a frame (defined in the window's class description) around the window.</summary>
            <remarks>SWP_DRAWFRAME</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.FrameChanged">
            <summary>Applies new frame styles set using the SetWindowLong function. Sends a WM_NCCALCSIZE message to 
            the window, even if the window's size is not being changed. If this flag is not specified, WM_NCCALCSIZE 
            is sent only when the window's size is being changed.</summary>
            <remarks>SWP_FRAMECHANGED</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.HideWindow">
            <summary>Hides the window.</summary>
            <remarks>SWP_HIDEWINDOW</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.DoNotActivate">
            <summary>Does not activate the window. If this flag is not set, the window is activated and moved to the 
            top of either the topmost or non-topmost group (depending on the setting of the hWndInsertAfter 
            parameter).</summary>
            <remarks>SWP_NOACTIVATE</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.DoNotCopyBits">
            <summary>Discards the entire contents of the client area. If this flag is not specified, the valid 
            contents of the client area are saved and copied back into the client area after the window is sized or 
            repositioned.</summary>
            <remarks>SWP_NOCOPYBITS</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.IgnoreMove">
            <summary>Retains the current position (ignores X and Y parameters).</summary>
            <remarks>SWP_NOMOVE</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.DoNotChangeOwnerZOrder">
            <summary>Does not change the owner window's position in the Z order.</summary>
            <remarks>SWP_NOOWNERZORDER</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.DoNotRedraw">
            <summary>Does not redraw changes. If this flag is set, no repainting of any kind occurs. This applies to 
            the client area, the nonclient area (including the title bar and scroll bars), and any part of the parent 
            window uncovered as a result of the window being moved. When this flag is set, the application must 
            explicitly invalidate or redraw any parts of the window and parent window that need redrawing.</summary>
            <remarks>SWP_NOREDRAW</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.DoNotReposition">
            <summary>Same as the SWP_NOOWNERZORDER flag.</summary>
            <remarks>SWP_NOREPOSITION</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.DoNotSendChangingEvent">
            <summary>Prevents the window from receiving the WM_WINDOWPOSCHANGING message.</summary>
            <remarks>SWP_NOSENDCHANGING</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.IgnoreResize">
            <summary>Retains the current size (ignores the cx and cy parameters).</summary>
            <remarks>SWP_NOSIZE</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.IgnoreZOrder">
            <summary>Retains the current Z order (ignores the hWndInsertAfter parameter).</summary>
            <remarks>SWP_NOZORDER</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.ShowWindow">
            <summary>Displays the window.</summary>
            <remarks>SWP_SHOWWINDOW</remarks>
        </member>
    </members>
</doc>
