//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Synchronization.Core.Interface;

namespace Synchronization.Core.Registration
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName = "ISupervisorService")]
    public interface ISupervisorService
    {

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ISupervisorService/GetPath", ReplyAction = "http://tempuri.org/ISupervisorService/GetPathResponse")]
        string GetPath();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ISupervisorService/AuthorizeDevice", ReplyAction = "http://tempuri.org/ISupervisorService/AuthorizeDeviceResponse")]
        string AuthorizeDevice(string data);
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISupervisorServiceChannel : ISupervisorService, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SupervisorServiceClient : System.ServiceModel.ClientBase<ISupervisorService>, 
        ISupervisorService, 
        IServiceWatcher,
        IEqualityComparer<IServiceAuthorizationPacket>
    {
        #region Members

        IList<IServiceAuthorizationPacket> requests = new List<IServiceAuthorizationPacket>();

        #endregion

        #region C-tors

        public SupervisorServiceClient(Common.Utils.IUrlUtils urlUtils) : 
            this("mexHttpBinding_ISupervisorService", urlUtils.GetSupervisorService())
        {
        }

        private SupervisorServiceClient(string endpointConfigurationName) :
            base(endpointConfigurationName)
        {
        }

        private SupervisorServiceClient(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        private SupervisorServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        private SupervisorServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
        {
        }

        #endregion

        #region ISupervisorService members

        public string GetPath()
        {
            return base.Channel.GetPath();
        }

        public string AuthorizeDevice(string data)
        {
            return base.Channel.AuthorizeDevice(data);
        }

        #endregion

        #region IServiceWatcher members

        public event AuthorizationPacketsAlarm NewPacketsAvailable;

        public void CollectAuthorizationPackets(IList<IServiceAuthorizationPacket> extraPackets)
        {
            if (extraPackets == null || extraPackets.Count == 0)
                return;

            lock (this)
            {
                var oldCount = this.requests.Count;

                this.requests = this.requests.Union(extraPackets, this).ToList();

                if (this.requests.Count > oldCount && NewPacketsAvailable != null)
                    NewPacketsAvailable(this.requests);
            }
        }

        #endregion

        public IList<IServiceAuthorizationPacket> ServicePackets { get { return this.requests; } }

        public bool Equals(IServiceAuthorizationPacket x, IServiceAuthorizationPacket y)
        {
            return (x as AuthorizationPacket) == (y as AuthorizationPacket);
        }

        public int GetHashCode(IServiceAuthorizationPacket x)
        {
            return (x as AuthorizationPacket).GetHashCode();
        }
    }
}