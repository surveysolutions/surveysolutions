/*
* jQuery Mobile Framework : plugin to provide a date and time picker.
* Copyright (c) JTSage
* CC 3.0 Attribution.  May be relicensed without permission/notifcation.
* https://github.com/jtsage/jquery-mobile-datebox
*/

(function (a, b) { Date.prototype.getISO = function () { return String(this.getFullYear()) + "-" + ((this.getMonth() < 9) ? "0" : "") + String(this.getMonth() + 1) + "-" + ((this.getDate() < 10) ? "0" : "") + String(this.getDate()) }; Date.prototype.getComp = function () { return parseInt(this.getISO().replace(/-/g, ""), 10) }; Date.prototype.copy = function () { return this.copymod() }; Date.prototype.copymod = function (c, d) { if (typeof c === "undefined") { c = [0, 0, 0, 0, 0, 0] } if (typeof d === "undefined") { d = [0, 0, 0, 0, 0, 0] } while (c.length < 6) { c.push(0) } while (d.length < 6) { d.push(0) } return new Date(((d[0] > 0) ? d[0] : this.getFullYear() + c[0]), ((d[1] > 0) ? d[1] : this.getMonth() + c[1]), ((d[2] > 0) ? d[2] : this.getDate() + c[2]), ((d[3] > 0) ? d[3] : this.getHours() + c[3]), ((d[4] > 0) ? d[4] : this.getMinutes() + c[4]), ((d[5] > 0) ? d[5] : this.getSeconds() + c[5]), 0) }; Date.prototype.getEpoch = function () { return (this.getTime() - this.getMilliseconds()) / 1000 }; Date.prototype.adjust = function (d, c) { switch (d) { case "y": this.setFullYear(this.getFullYear() + c); break; case "m": this.setMonth(this.getMonth() + c); break; case "d": this.setDate(this.getDate() + c); break; case "h": this.setHours(this.getHours() + c); break; case "i": this.setMinutes(this.getMinutes() + c); break; case "s": this.setSeconds(this.getSeconds() + c); break } return this.getTime() }; a.widget("mobile.datebox", a.mobile.widget, { options: { version: "1.0.1-2012022700", theme: false, defaultTheme: "c", pickPageTheme: "b", pickPageInputTheme: "e", pickPageButtonTheme: "a", pickPageHighButtonTheme: "e", pickPageOHighButtonTheme: "e", pickPageOAHighButtonTheme: "e", pickPageODHighButtonTheme: "e", pickPageTodayButtonTheme: "e", pickPageSlideButtonTheme: "d", pickPageFlipButtonTheme: "b", forceInheritTheme: false, centerWindow: false, calHighToday: true, calHighPicked: true, transition: "pop", noAnimation: false, disableManualInput: false, disabled: false, wheelExists: false, swipeEnabled: true, zindex: "500", debug: false, clickEvent: "vclick", numberInputEnhance: true, internalInputType: "text", resizeListener: true, titleDialogLabel: false, meridiemLetters: ["AM", "PM"], timeOutputOverride: false, timeFormats: { "12": "%l:%M %p", "24": "%k:%M" }, durationFormat: "DD ddd, hh:ii:ss", timeOutput: false, rolloverMode: { m: true, d: true, h: true, i: true, s: true }, mode: "datebox", calShowDays: true, calShowOnlyMonth: false, useDialogForceTrue: false, useDialogForceFalse: true, fullScreen: false, fullScreenAlways: false, useDialog: false, useModal: false, useInline: false, useInlineBlind: false, useClearButton: false, collapseButtons: false, noButtonFocusMode: false, focusMode: false, noButton: false, noSetButton: false, openCallback: false, openCallbackArgs: [], closeCallback: false, closeCallbackArgs: [], open: false, nestedBox: false, lastDuration: false, fieldsOrder: false, fieldsOrderOverride: false, durationOrder: ["d", "h", "i", "s"], defaultDateFormat: "%Y-%m-%d", dateFormat: false, timeFormatOverride: false, headerFormat: false, dateOutput: false, minuteStep: 1, calTodayButton: false, calWeekMode: false, calWeekModeFirstDay: 1, calWeekModeHighlight: true, calStartDay: false, defaultPickerValue: false, defaultDate: false, minYear: false, maxYear: false, afterToday: false, beforeToday: false, maxDays: false, minDays: false, highDays: false, highDates: false, highDatesAlt: false, blackDays: false, blackDates: false, enableDates: false, fixDateArrays: false, durationSteppers: { d: 1, h: 1, i: 1, s: 1 }, useLang: "en", lang: { en: { setDateButtonLabel: "Set Date", setTimeButtonLabel: "Set Time", setDurationButtonLabel: "Set Duration", calTodayButtonLabel: "Jump to Today", titleDateDialogLabel: "Set Date", titleTimeDialogLabel: "Set Time", daysOfWeek: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], daysOfWeekShort: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"], monthsOfYear: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], monthsOfYearShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], durationLabel: ["Days", "Hours", "Minutes", "Seconds"], durationDays: ["Day", "Days"], timeFormat: 24, headerFormat: "%A, %B %-d, %Y", tooltip: "Open Date Picker", nextMonth: "Next Month", prevMonth: "Previous Month", dateFieldOrder: ["m", "d", "y"], timeFieldOrder: ["h", "i", "a"], slideFieldOrder: ["y", "m", "d"], dateFormat: "%Y-%m-%d", useArabicIndic: false, isRTL: false, calStartDay: 0, clearButton: "Clear"}} }, destroy: function () { a(this.pickPage).remove(); a.Widget.prototype.destroy.call(this) }, _dateboxHandler: function (c, e) { var d = a(this).data("datebox"); if (!c.isPropagationStopped()) { switch (e.method) { case "close": d.close(e.fromCloseButton); break; case "open": d.open(); break; case "set": a(this).val(e.value); a(this).trigger("change"); break; case "doset": if (a.inArray(d.options.mode, ["timebox", "durationbox", "timeflipbox"]) > -1) { a(this).trigger("datebox", { method: "set", value: d._formatTime(d.theDate), date: d.theDate }) } else { a(this).trigger("datebox", { method: "set", value: d._formatDate(d.theDate), date: d.theDate }) } break; case "dooffset": d._offset(e.type, e.amount, true); break; case "dorefresh": d._update(); break; case "doreset": d.hardreset(); break; case "doclear": a(this).val(""); break } } }, _getCoords: function (g) { var q = g, j = g.focusedEl.offset(), n = g.focusedEl.outerHeight(), i = g.focusedEl.outerWidth(), e = a.mobile.activePage.width(), h = a(window).scrollTop(), p = a(window).height(), o = g.pickerContent.innerWidth(), l = g.pickerContent.outerHeight(), d = false, f = 0, k = 0, c = 0, r = a(document).height(), m = { high: a(window).height(), width: a.mobile.activePage.width(), fullTop: a(window).scrollTop(), fullLeft: a(window).scrollLeft() }; if (g.options.centerWindow) { m.winTop = h + ((p / 2) - (l / 2)); m.winLeft = ((e / 2) - (o / 2)) } else { d = a(".ui-header", a.mobile.activePage); if (d.length > 0) { if (d.is(".ui-header-fixed")) { k = (d.outerHeight() + 2) } else { f += (d.outerHeight() + 2) } } d = a(".ui-footer", a.mobile.activePage); if (d.length > 0) { if (d.is(".ui-footer-fixed")) { c = (d.outerHeight() + 2) } else { r -= (d.outerHeight() + 2) } } m.winLeft = (j.left + (i / 2)) - (o / 2); if (e < 450) { m.winLeft = ((e / 2) - (o / 2)) } m.winTop = (j.top + (n / 2)) - (l / 2); if ((m.winTop + l) > r) { m.winTop += (r - (m.winTop + l)) } if (c > 0 && ((m.winTop + l - h) > (p - c))) { m.winTop = ((p - c + h - l)) } if (m.winTop < f) { m.winTop = f } if (k > 0 && (m.winTop < (h + k))) { m.winTop = h + k } else { if (h > f && h > m.winTop) { m.winTop = h + 2 } } } return m }, _fixArray: function (d) { var c = 0, e = this, g = new RegExp("^([0-9]+)-([0-9]+)-([0-9]+)$"), f = null; if (a.isArray(d)) { for (c = 0; c < d.length; c++) { f = [0]; f = g.exec(d[c]); if (f.length === 4) { d[c] = f[1] + "-" + e._zPad(parseInt(f[2], 10)) + "-" + e._zPad(parseInt(f[3], 10)) } } } return d }, _digitReplace: function (k, h) { var j = 48, c = 57, d = 1584, e = null, f = null, g = ""; if (h === -1) { j += d; c += d; d = -1584 } for (e = 0; e < k.length; e++) { f = k.charCodeAt(e); if (f >= j && f <= c) { g = g + String.fromCharCode(f + d) } else { g = g + String.fromCharCode(f) } } return g }, _makeDisplayIndic: function () { var c = this, d = this.options; c.pickerContent.find("*").each(function () { if (a(this).children().length < 1) { a(this).text(c._digitReplace(a(this).text())) } else { if (a(this).hasClass("ui-datebox-slideday")) { a(this).html(c._digitReplace(a(this).html())) } } }); c.pickerContent.find("input").each(function () { a(this).val(c._digitReplace(a(this).val())) }) }, _zPad: function (c) { return ((c < 10) ? "0" : "") + String(c) }, _makeOrd: function (d) { var c = d % 10; if (d > 9 && d < 21) { return "th" } if (c > 3) { return "th" } return ["th", "st", "nd", "rd"][c] }, _isInt: function (c) { return (c.toString().search(/^[0-9]+$/) === 0) }, _getFirstDay: function (c) { return c.copymod([0], [0, 0, 1]).getDay() }, _getRecDays: function (g, j, d) { if (j === null) { j = this.theDate.getMonth() + 1 } if (g === null) { g = this.theDate.getFullYear() } var c = this, f = new Date(g, j - 1, 1, 0, 0, 0, 0), h = [], e; if (f.getDay() > d) { f.setDate(8 - (f.getDay() - d)) } else { if (f.getDay() < d) { f.setDate(1 + (d - f.getDay())) } } h[0] = f.getISO(); for (e = 1; e < 6; e++) { f.setDate(f.getDate() + 7); if ((f.getMonth() + 1) === j) { h[e] = f.getISO() } } return h }, _getLastDate: function (c) { return 32 - c.copymod([0], [0, 0, 32, 13]).getDate() }, _getLastDateBefore: function (c) { return 32 - c.copymod([0, -1], [0, 0, 32, 13]).getDate() }, _formatter: function (e, d) { var c = this, f = this.options; if (!e.match(/%/)) { e = e.replace("HH", this._zPad(d.getHours())); e = e.replace("GG", d.getHours()); e = e.replace("hh", this._zPad(((d.getHours() === 0 || d.getHours() === 12) ? 12 : ((d.getHours() < 12) ? d.getHours() : d.getHours() - 12)))); e = e.replace("gg", ((d.getHours() === 0 || d.getHours() === 12) ? 12 : ((d.getHours() < 12) ? d.getHours() : (d.getHours() - 12)))); e = e.replace("ii", this._zPad(d.getMinutes())); e = e.replace("ss", this._zPad(d.getSeconds())); e = e.replace("AA", ((d.getHours() < 12) ? this.options.meridiemLetters[0].toUpperCase() : this.options.meridiemLetters[1].toUpperCase())); e = e.replace("aa", ((d.getHours() < 12) ? this.options.meridiemLetters[0].toLowerCase() : this.options.meridiemLetters[1].toLowerCase())); e = e.replace("SS", this._makeOrd(d.getDate())); e = e.replace("YYYY", d.getFullYear()); e = e.replace("mmmm", this.options.lang[this.options.useLang].monthsOfYearShort[d.getMonth()]); e = e.replace("mmm", this.options.lang[this.options.useLang].monthsOfYear[d.getMonth()]); e = e.replace("MM", this._zPad(d.getMonth() + 1)); e = e.replace("mm", d.getMonth() + 1); e = e.replace("dddd", this.options.lang[this.options.useLang].daysOfWeekShort[d.getDay()]); e = e.replace("ddd", this.options.lang[this.options.useLang].daysOfWeek[d.getDay()]); e = e.replace("DD", this._zPad(d.getDate())); e = e.replace("dd", d.getDate()); e = e.replace("UU", d.getEpoch()) } else { e = e.replace(/%(0|-)*([a-z])/gi, function (g, i, k, j, h) { switch (k) { case "%": return "%"; case "a": return f.lang[f.useLang].daysOfWeekShort[d.getDay()]; case "A": return f.lang[f.useLang].daysOfWeek[d.getDay()]; case "b": return f.lang[f.useLang].monthsOfYearShort[d.getMonth()]; case "B": return f.lang[f.useLang].monthsOfYear[d.getMonth()]; case "C": return d.getFullYear().toString().substr(0, 2); case "d": return ((i === "-") ? d.getDate() : c._zPad(d.getDate())); case "H": case "k": return ((i === "-") ? d.getHours() : c._zPad(d.getHours())); case "I": case "l": return ((i === "-") ? ((d.getHours() === 0 || d.getHours() === 12) ? 12 : ((d.getHours() < 12) ? d.getHours() : (d.getHours() - 12))) : c._zPad(((d.getHours() === 0 || d.getHours() === 12) ? 12 : ((d.getHours() < 12) ? d.getHours() : d.getHours() - 12)))); case "m": return ((i === "-") ? d.getMonth() + 1 : c._zPad(d.getMonth() + 1)); case "M": return ((i === "-") ? d.getMinutes() : c._zPad(d.getMinutes())); case "p": return ((d.getHours() < 12) ? f.meridiemLetters[0].toUpperCase() : f.meridiemLetters[1].toUpperCase()); case "P": return ((d.getHours() < 12) ? f.meridiemLetters[0].toLowerCase() : f.meridiemLetters[1].toLowerCase()); case "s": return d.getEpoch; case "S": return ((i === "-") ? d.getSeconds() : c._zPad(d.getSeconds())); case "w": return d.getDay(); case "y": return d.getFullYear().toString().substr(2, 2); case "Y": return d.getFullYear(); case "o": return c._makeOrd(d.getDate()); default: return g } }) } if (this.options.lang[this.options.useLang].useArabicIndic === true) { e = this._digitReplace(e) } return e }, _formatHeader: function (c) { if (this.options.headerFormat !== false) { return this._formatter(this.options.headerFormat, c) } else { return this._formatter(this.options.lang[this.options.useLang].headerFormat, c) } }, _formatDate: function (c) { return this._formatter(this.options.dateOutput, c) }, _formatTime: function (d) { var m = this, k = [false, false, false], c, h, f, e, l = this.options.durationFormat, g = [0, 0, 0, 0]; if (this.options.mode === "durationbox") { c = this.options.durationFormat; c = c.replace(/ddd/g, ".+?"); c = c.replace(/DD|ss|hh|ii/g, "([0-9Dhis]+)"); c = new RegExp("^" + c + "$"); h = c.exec(this.options.durationFormat); f = m.theDate.getEpoch() - m.initDate.getEpoch(); e = f; g[0] = parseInt(f / (60 * 60 * 24), 10); f = f - (g[0] * 60 * 60 * 24); g[1] = parseInt(f / (60 * 60), 10); f = f - (g[1] * 60 * 60); g[2] = parseInt(f / (60), 10); f = f - (g[2] * 60); g[3] = f; if (!h[0].match(/DD/)) { k[0] = true; g[1] = g[1] + (g[0] * 24) } if (!h[0].match(/hh/)) { k[1] = true; g[2] = g[2] + (g[1] * 60) } if (!h[0].match(/ii/)) { k[2] = true; g[3] = g[3] + (g[2] * 60) } l = l.replace("DD", g[0]); l = l.replace("ddd", ((g[0] > 1) ? this.options.lang[this.options.useLang].durationDays[1] : this.options.lang[this.options.useLang].durationDays[0])); l = l.replace("hh", m._zPad(g[1])); l = l.replace("ii", m._zPad(g[2])); l = l.replace("ss", m._zPad(g[3])); if (this.options.lang[this.options.useLang].useArabicIndic === true) { return this._digitReplace(l) } else { return l } } else { return this._formatter(m.options.timeOutput, d) } }, _makeDate: function (k) { k = a.trim(k); var d = this.options, n = this, e = null, m = null, l = null, c = null, f = new Date(), j = [false, false, false], g = [f.getFullYear(), f.getMonth(), f.getDate(), f.getHours(), f.getMinutes(), f.getSeconds(), 0], h; if (d.lang[this.options.useLang].useArabicIndic === true) { k = this._digitReplace(k, -1) } if (d.mode === "durationbox") { e = d.durationFormat; e = e.replace(/ddd/g, ".+?"); e = e.replace(/DD|ss|hh|ii/g, "([0-9Dhis]+)"); e = new RegExp("^" + e + "$"); m = e.exec(k); l = e.exec(d.durationFormat); if (m === null || m.length !== l.length) { if (typeof d.defaultPickerValue === "number" && d.defaultPickerValue > 0) { return new Date((n.initDate.getEpoch() + parseInt(d.defaultPickerValue, 10)) * 1000) } else { return new Date(n.initDate.getTime()) } } else { c = n.initDate.getEpoch(); for (h = 0; h < m.length; h++) { if (l[h].match(/^DD$/i)) { c = c + (parseInt(m[h], 10) * 60 * 60 * 24) } if (l[h].match(/^hh$/i)) { c = c + (parseInt(m[h], 10) * 60 * 60) } if (l[h].match(/^ii$/i)) { c = c + (parseInt(m[h], 10) * 60) } if (l[h].match(/^ss$/i)) { c = c + (parseInt(m[h], 10)) } } return new Date((c * 1000)) } } else { if (d.mode === "timebox" || d.mode === "timeflipbox") { e = d.timeOutput } else { e = d.dateOutput } if (e.match(/%/)) { e = e.replace(/%(0|-)*([a-z])/gi, function (i, p, r, q, o) { switch (r) { case "p": case "P": case "b": case "B": return "(" + i + "|.+?)"; case "H": case "k": case "I": case "l": case "m": case "M": case "S": case "d": return "(" + i + "|" + ((p === "-") ? "[0-9]{1,2}" : "[0-9]{2}") + ")"; case "s": return "(" + i + "|[0-9]+)"; case "y": return "(" + i + "|[0-9]{2})"; case "Y": return "(" + i + "|[0-9]{1,4})"; default: return ".+?" } }); e = new RegExp("^" + e + "$"); m = e.exec(k); if (d.mode === "timebox" || d.mode === "timeflipbox") { l = e.exec(d.timeOutput) } else { l = e.exec(d.dateOutput) } if (m === null || m.length !== l.length) { if (d.defaultPickerValue !== false) { if (a.isArray(d.defaultPickerValue) && d.defaultPickerValue.length === 3) { if (d.mode === "timebox" || d.mode === "timeflipbox") { return new Date(g[0], g[1], g[2], d.defaultPickerValue[0], d.defaultPickerValue[1], d.defaultPickerValue[2], 0) } else { return new Date(d.defaultPickerValue[0], d.defaultPickerValue[1], d.defaultPickerValue[2], 0, 0, 0, 0) } } else { if (typeof d.defaultPickerValue === "number") { return new Date(d.defaultPickerValue * 1000) } else { if (d.mode === "timebox" || d.mode === "timeflipbox") { c = d.defaultPickerValue.split(":"); if (c.length === 3) { f = new Date(g[0], g[1], g[2], parseInt(c[0], 10), parseInt(c[1], 10), parseInt(c[2], 10), 0); if (isNaN(f.getDate())) { f = new Date() } } } else { c = d.defaultPickerValue.split("-"); if (c.length === 3) { f = new Date(parseInt(c[0], 10), parseInt(c[1], 10) - 1, parseInt(c[2], 10), 0, 0, 0, 0); if (isNaN(f.getDate())) { f = new Date() } } } } } } } else { for (h = 0; h < m.length; h++) { if (l[h] === "%s") { g[6] = parseInt(m[h], 10) } if (l[h].match(/^%.*S$/)) { g[5] = parseInt(m[h], 10) } if (l[h].match(/^%.*M$/)) { g[4] = parseInt(m[h], 10) } if (l[h].match(/^%.*(H|k|I|l)$/)) { g[3] = parseInt(m[h], 10) } if (l[h].match(/^%.*d$/)) { g[2] = parseInt(m[h], 10) } if (l[h].match(/^%.*m$/)) { g[1] = parseInt(m[h], 10) - 1 } if (l[h].match(/^%.*Y$/)) { g[0] = parseInt(m[h], 10) } if (l[h].match(/^%.*y$/)) { if (d.afterToday === true) { g[0] = parseInt("20" + m[h], 10) } else { if (parseInt(m[h], 10) < 38) { g[0] = parseInt("20" + m[h], 10) } else { g[0] = parseInt("19" + m[h], 10) } } } if (l[h].match(/^%(0|-)*(p|P)$/)) { if (m[h].toLowerCase().charAt(0) === "a" && g[3] === 12) { g[3] = 0 } else { if (m[h].toLowerCase().charAt(0) === "p" && g[3] !== 12) { g[3] = g[3] + 12 } } } if (l[h] === "%B") { c = a.inArray(m[h], d.lang[d.useLang].monthsOfYear); if (c > -1) { g[1] = c } } if (l[h] === "%b") { c = a.inArray(m[h], d.lang[d.useLang].monthsOfYearShort); if (c > -1) { g[1] = c } } } } if (l[0].match(/%s/)) { f = new Date(g[6] * 1000) } else { if (l[0].match(/%(.)*(I|l|H|k|s|M)/)) { f = new Date(g[0], g[1], g[2], g[3], g[4], g[5], 0); if (g[0] < 100) { f.setFullYear(g[0]) } } else { f = new Date(g[0], g[1], g[2], 0, 0, 0, 0); if (g[0] < 100) { f.setFullYear(g[0]) } } } return f } else { e = e.replace(/dddd|mmmm/g, "(.+?)"); e = e.replace(/ddd|SS/g, ".+?"); e = e.replace(/mmm/g, "(.+?)"); e = e.replace(/ *AA/ig, " *(.*?)"); e = e.replace(/yyyy|dd|mm|gg|hh|ii/ig, "([0-9yYdDmMgGhHi]+)"); e = e.replace(/ss|UU/g, "([0-9sU]+)"); e = new RegExp("^" + e + "$"); m = e.exec(k); if (d.mode === "timebox" || d.mode === "timeflipbox") { l = e.exec(d.timeOutput) } else { l = e.exec(d.dateOutput) } if (m === null || m.length !== l.length) { if (d.defaultPickerValue !== false) { if (a.isArray(d.defaultPickerValue) && d.defaultPickerValue.length === 3) { if (d.mode === "timebox" || d.mode === "timeflipbox") { return new Date(g[0], g[1], g[2], d.defaultPickerValue[0], d.defaultPickerValue[1], d.defaultPickerValue[2], 0) } else { return new Date(d.defaultPickerValue[0], d.defaultPickerValue[1], d.defaultPickerValue[2], 0, 0, 0, 0) } } else { if (typeof d.defaultPickerValue === "number") { return new Date(d.defaultPickerValue * 1000) } else { if (d.mode === "timebox" || d.mode === "timeflipbox") { c = d.defaultPickerValue.split(":"); if (c.length === 3) { f = new Date(g[0], g[1], g[2], parseInt(c[0], 10), parseInt(c[1], 10), parseInt(c[2], 10), 0); if (isNaN(f.getDate())) { f = new Date() } } } else { c = d.defaultPickerValue.split("-"); if (c.length === 3) { f = new Date(parseInt(c[0], 10), parseInt(c[1], 10) - 1, parseInt(c[2], 10), 0, 0, 0, 0); if (isNaN(f.getDate())) { f = new Date() } } } } } } } else { for (h = 0; h < m.length; h++) { if (l[h].match(/^UU$/)) { g[6] = parseInt(m[h], 10) } if (l[h].match(/^gg$/i)) { g[3] = parseInt(m[h], 10) } if (l[h].match(/^hh$/i)) { g[3] = parseInt(m[h], 10) } if (l[h].match(/^ii$/i)) { g[4] = parseInt(m[h], 10) } if (l[h].match(/^ss$/)) { g[5] = parseInt(m[h], 10) } if (l[h].match(/^dd$/i)) { g[2] = parseInt(m[h], 10) } if (l[h].match(/^mm$/i)) { g[1] = parseInt(m[h], 10) - 1 } if (l[h].match(/^yyyy$/i)) { g[0] = parseInt(m[h], 10) } if (l[h].match(/^AA$/i)) { if (m[h].toLowerCase().charAt(0) === "a" && g[3] === 12) { g[3] = 0 } else { if (m[h].toLowerCase().charAt(0) === "p" && g[3] !== 12) { g[3] = g[3] + 12 } } } if (l[h].match(/^mmm$/i)) { c = a.inArray(m[h], d.lang[d.useLang].monthsOfYear); if (c > -1) { g[1] = c } } if (l[h].match(/^mmmm$/i)) { c = a.inArray(m[h], d.lang[d.useLang].monthsOfYearShort); if (c > -1) { g[1] = c } } } } if (l[0].match(/UU/)) { return new Date(g[6] * 1000) } else { if (l[0].match(/G|g|i|s|H|h|A/)) { return new Date(g[0], g[1], g[2], g[3], g[4], g[5], 0) } else { return new Date(g[0], g[1], g[2], 0, 0, 0, 0) } } } } }, _hoover: function (c) { a(c).toggleClass("ui-btn-up-" + a(c).jqmData("theme") + " ui-btn-down-" + a(c).jqmData("theme")) }, _offset: function (g, e, h) { var c = this, f = this.options, d = false; if (typeof (h) === "undefined") { h = true } c.input.trigger("datebox", { method: "offset", type: g, amount: e }); switch (g) { case "y": d = true; break; case "m": if (f.rolloverMode.m || (c.theDate.getMonth() + e < 12 && c.theDate.getMonth() + e > -1)) { d = true } break; case "d": if (f.rolloverMode.d || (c.theDate.getDate() + e > 0 && c.theDate.getDate() + e < (c._getLastDate(c.theDate) + 1))) { d = true } break; case "h": if (f.rolloverMode.h || (c.theDate.getHours() + e > -1 && c.theDate.getHours() + e < 24)) { d = true } break; case "i": if (f.rolloverMode.i || (c.theDate.getMinutes() + e > -1 && c.theDate.getMinutes() + e < 60)) { d = true } break; case "s": if (f.rolloverMode.s || (c.theDate.getSeconds() + e > -1 && c.theDate.getSeconds() + e < 60)) { d = true } break; case "a": if (c.pickerMeri.val() === f.meridiemLetters[0]) { c._offset("h", 12, false) } else { c._offset("h", -12, false) } break } if (d === true) { c.theDate.adjust(g, e) } if (h === true) { c._update() } }, _updateduration: function () { var c = this, d = c.initDate.getEpoch(); if (!c._isInt(c.pickerDay.val())) { c.pickerDay.val(0) } if (!c._isInt(c.pickerHour.val())) { c.pickerHour.val(0) } if (!c._isInt(c.pickerMins.val())) { c.pickerMins.val(0) } if (!c._isInt(c.pickerSecs.val())) { c.pickerSecs.val(0) } d = d + (parseInt(c.pickerDay.val(), 10) * 60 * 60 * 24); d = d + (parseInt(c.pickerHour.val(), 10) * 60 * 60); d = d + (parseInt(c.pickerMins.val(), 10) * 60); d = d + (parseInt(c.pickerSecs.val(), 10)); c.theDate.setTime(d * 1000); c._update() }, _checkConstraints: function () { var d = this, c = null, e = this.options; d.dateOK = true; if (e.afterToday !== false) { c = new Date(); if (d.theDate < c) { d.theDate = c } } if (e.beforeToday !== false) { c = new Date(); if (d.theDate > c) { d.theDate = c } } if (e.maxDays !== false) { c = new Date(); c.adjust("d", e.maxDays); if (d.theDate > c) { d.theDate = c } } if (e.minDays !== false) { c = new Date(); c.adjust("d", -1 * e.minDays); if (d.theDate < c) { d.theDate = c } } if (e.maxYear !== false) { c = new Date(e.maxYear, 0, 1); c.adjust("d", -1); if (d.theDate > c) { d.theDate = c } } if (e.minYear !== false) { c = new Date(e.minYear, 0, 1); if (d.theDate < c) { d.theDate = c } } if (e.blackDates !== false) { if (a.inArray(d.theDate.getISO(), e.blackDates) > -1) { d.dateOK = false } } if (e.blackDays !== false) { if (a.inArray(d.theDate.getDay(), e.blackDays) > -1) { d.dateOK = false } } if (a.inArray(e.mode, ["timebox", "durationbox", "timeflipbox"]) > -1) { d.dateOK = true } }, _orientChange: function (f) { var c = f.data.widget, g = f.data.widget.options, d = f.data.widget._getCoords(f.data.widget); f.stopPropagation(); if (!c.pickerContent.is(":visible") || g.useDialog === true) { return false } else { if (g.fullScreen == true && (d.width < 400 || g.fullScreenForce === true)) { c.pickerContent.css({ top: d.fullTop, left: d.fullLeft, height: d.high, width: d.width, maxWidth: d.width }) } else { c.pickerContent.css({ top: d.winTop, left: d.winLeft }) } } }, _update: function () { var t = this, e = t.options, p = null, g, h, j, r, n, m, k, f, s, c, q, d = { d: 60 * 60 * 24, h: 60 * 60, i: 60, s: 1 }, l = {}; t.input.trigger("datebox", { method: "refresh" }); if (e.mode === "durationbox") { g = t.theDate.getEpoch() - t.initDate.getEpoch(); if (g < 0) { g = 0; t.theDate.setTime(t.initDate.getTime()) } e.lastDuration = g; m = parseInt(g / d.d, 10); g = g - (m * d.d); t.pickerDay.val(m); m = parseInt(g / d.h, 10); g = g - (m * d.h); t.pickerHour.val(m); m = parseInt(g / d.i, 10); g = g - (m * d.i); t.pickerMins.val(m); t.pickerSecs.val(parseInt(g, 10)) } if (e.mode === "timebox") { if (e.minuteStep !== 1) { g = t.theDate.getMinutes() % e.minuteStep; if (g !== 0) { t.theDate.adjust("m", -1 * g) } } t.pickerMins.val(t._zPad(t.theDate.getMinutes())); if (e.lang[e.useLang].timeFormat === 12 || e.timeFormatOverride === 12) { if (t.theDate.getHours() > 11) { t.pickerMeri.val(e.meridiemLetters[1]); if (t.theDate.getHours() === 12) { t.pickerHour.val(12) } else { t.pickerHour.val(t.theDate.getHours() - 12) } } else { t.pickerMeri.val(e.meridiemLetters[0]); if (t.theDate.getHours() === 0) { t.pickerHour.val(12) } else { t.pickerHour.val(t.theDate.getHours()) } } } else { t.pickerHour.val(t.theDate.getHours()) } } if (e.mode === "flipbox" || e.mode === "timeflipbox") { t._checkConstraints(); f = t._makeDate(t.input.val()); t.controlsHeader.empty().html(t._formatHeader(t.theDate)); for (m = 0; m < e.fieldsOrder.length; m++) { c = true; switch (e.fieldsOrder[m]) { case "y": n = t.pickerYar.find("ul"); n.empty(); for (g = -15; g < 16; g++) { k = ((f.getFullYear() === (t.theDate.getFullYear() + g)) ? e.pickPageHighButtonTheme : e.pickPageFlipButtonTheme); if (g === 0) { k = e.pickPageButtonTheme } a("<li>", { "class": "ui-body-" + k, style: ((c === true) ? "margin-top: -453px" : "") }).html("<span>" + (t.theDate.getFullYear() + g) + "</span>").appendTo(n); c = false } break; case "m": n = t.pickerMon.find("ul"); n.empty(); for (g = -12; g < 13; g++) { p = new Date(t.theDate.getFullYear(), t.theDate.getMonth(), 1); p.adjust("m", g); k = (f.getMonth() === p.getMonth() && f.getYear() === p.getYear()) ? e.pickPageHighButtonTheme : e.pickPageFlipButtonTheme; if (g === 0) { k = e.pickPageButtonTheme } a("<li>", { "class": "ui-body-" + k, style: ((c === true) ? "margin-top: -357px" : "") }).html("<span>" + e.lang[e.useLang].monthsOfYearShort[p.getMonth()] + "</span>").appendTo(n); c = false } break; case "d": n = t.pickerDay.find("ul"); n.empty(); for (g = -15; g < 16; g++) { p = t.theDate.copy(); p.adjust("d", g); q = ""; if ((e.blackDates !== false && a.inArray(p.getISO(), e.blackDates) > -1) || (e.blackDays !== false && a.inArray(p.getDay(), e.blackDays) > -1)) { q = " ui-datebox-griddate-disable" } k = (f.getDate() === p.getDate() && f.getMonth() === p.getMonth() && f.getYear() === p.getYear()) ? e.pickPageHighButtonTheme : e.pickPageFlipButtonTheme; if (g === 0) { k = e.pickPageButtonTheme } a("<li>", { "class": "ui-body-" + k + q, style: ((c === true) ? "margin-top: -453px" : "") }).html("<span>" + p.getDate() + "</span>").appendTo(n); c = false } break; case "h": n = t.pickerHour.find("ul"); n.empty(); for (g = -12; g < 13; g++) { p = t.theDate.copy(); p.adjust("h", g); k = (g === 0) ? e.pickPageButtonTheme : e.pickPageFlipButtonTheme; a("<li>", { "class": "ui-body-" + k, style: ((c === true) ? "margin-top: -357px" : "") }).html("<span>" + ((e.lang[e.useLang].timeFormat === 12 || e.timeFormatOverride === 12) ? ((p.getHours() === 0) ? "12" : ((p.getHours() < 12) ? p.getHours() : ((p.getHours() === 12) ? "12" : (p.getHours() - 12)))) : p.getHours()) + "</span>").appendTo(n); c = false } break; case "i": n = t.pickerMins.find("ul"); n.empty(); for (g = -30; g < 31; g++) { if (e.minuteStep > 1) { t.theDate.setMinutes(t.theDate.getMinutes() - (t.theDate.getMinutes() % e.minuteStep)) } p = t.theDate.copy(); p.adjust("i", (g * e.minuteStep)); k = (g === 0) ? e.pickPageButtonTheme : e.pickPageFlipButtonTheme; a("<li>", { "class": "ui-body-" + k, style: ((c === true) ? "margin-top: -933px" : "") }).html("<span>" + t._zPad(p.getMinutes()) + "</span>").appendTo(n); c = false } break; case "a": n = t.pickerMeri.find("ul"); n.empty(); if (t.theDate.getHours() > 11) { c = "-65"; k = [e.pickPageFlipButtonTheme, e.pickPageButtonTheme] } else { c = "-33"; k = [e.pickPageButtonTheme, e.pickPageFlipButtonTheme] } a("<li>").appendTo(n).clone().appendTo(n); a("<li>", { "class": "ui-body-" + k[0], style: "margin-top: " + c + "px" }).html("<span>" + e.meridiemLetters[0] + "</span>").appendTo(n); a("<li>", { "class": "ui-body-" + k[1] }).html("<span>" + e.meridiemLetters[1] + "</span>").appendTo(n); a("<li>").appendTo(n).clone().appendTo(n); break } } } if (e.mode === "slidebox") { t._checkConstraints(); f = t._makeDate(t.input.val()); t.controlsHeader.empty().html(t._formatHeader(t.theDate)); t.controlsInput.empty(); t.controlsInput.delegate(".ui-datebox-sliderow-int>div", e.clickEvent, function (i) { i.preventDefault(); t._offset(a(this).parent().jqmData("rowtype"), parseInt(a(this).jqmData("offset"), 10)) }); t.controlsInput.delegate(".ui-datebox-sliderow-int>div", "vmouseover vmouseout", function () { t._hoover(this) }); if (e.wheelExists) { t.controlsInput.delegate(".ui-datebox-sliderow-int", "mousewheel", function (i, o) { i.preventDefault(); t._offset(a(this).jqmData("rowtype"), ((o > 0) ? 1 : -1)) }) } if (e.swipeEnabled) { t.controlsInput.delegate(".ui-datebox-sliderow-int", t.START_DRAG, function (i) { if (!t.dragMove) { t.dragMove = true; t.dragTarget = a(this); t.dragPos = parseInt(t.dragTarget.css("marginLeft").replace(/px/i, ""), 10); t.dragStart = t.touch ? i.originalEvent.changedTouches[0].pageX : i.pageX; t.dragEnd = false; i.stopPropagation(); i.preventDefault() } }) } for (m = 0; m < e.fieldsOrder.length; m++) { s = a("<div>").jqmData("rowtype", e.fieldsOrder[m]); n = a("<div>", { "class": "ui-datebox-sliderow-int" }).jqmData("rowtype", e.fieldsOrder[m]).appendTo(s); if (e.lang[e.useLang].isRTL === true) { n.css("direction", "rtl") } switch (e.fieldsOrder[m]) { case "y": s.addClass("ui-datebox-sliderow-ym"); n.css("marginLeft", "-333px"); for (g = -5; g < 6; g++) { k = ((f.getFullYear() === (t.theDate.getFullYear() + g)) ? e.pickPageHighButtonTheme : e.pickPageSlideButtonTheme); if (g === 0) { k = e.pickPageButtonTheme } a("<div>", { "class": "ui-datebox-slideyear ui-corner-all ui-btn-up-" + k }).html(t.theDate.getFullYear() + g).jqmData("offset", g).jqmData("theme", k).appendTo(n) } break; case "m": s.addClass("ui-datebox-sliderow-ym"); n.css("marginLeft", "-204px"); for (g = -6; g < 7; g++) { p = new Date(t.theDate.getFullYear(), t.theDate.getMonth(), 1); p.adjust("m", g); k = (f.getMonth() === p.getMonth() && f.getYear() === p.getYear()) ? e.pickPageHighButtonTheme : e.pickPageSlideButtonTheme; if (g === 0) { k = e.pickPageButtonTheme } a("<div>", { "class": "ui-datebox-slidemonth ui-corner-all ui-btn-up-" + k }).jqmData("offset", g).jqmData("theme", k).html(e.lang[e.useLang].monthsOfYearShort[p.getMonth()]).appendTo(n) } break; case "d": s.addClass("ui-datebox-sliderow-d"); n.css("marginLeft", "-386px"); for (g = -15; g < 16; g++) { p = t.theDate.copy(); p.adjust("d", g); q = ""; if ((e.blackDates !== false && a.inArray(p.getISO(), e.blackDates) > -1) || (e.blackDays !== false && a.inArray(p.getDay(), e.blackDays) > -1)) { q = " ui-datebox-griddate-disable" } k = (f.getDate() === p.getDate() && f.getMonth() === p.getMonth() && f.getYear() === p.getYear()) ? e.pickPageHighButtonTheme : e.pickPageSlideButtonTheme; if (g === 0) { k = e.pickPageButtonTheme } a("<div>", { "class": "ui-datebox-slideday ui-corner-all ui-btn-up-" + k + q }).jqmData("offset", g).jqmData("theme", k).html(p.getDate() + '<br /><span class="ui-datebox-slidewday">' + e.lang[e.useLang].daysOfWeekShort[p.getDay()] + "</span>").appendTo(n) } break; case "h": s.addClass("ui-datebox-sliderow-hi"); n.css("marginLeft", "-284px"); for (g = -12; g < 13; g++) { p = t.theDate.copy(); p.adjust("h", g); k = (g === 0) ? e.pickPageButtonTheme : e.pickPageSlideButtonTheme; a("<div>", { "class": "ui-datebox-slidehour ui-corner-all ui-btn-up-" + k }).jqmData("offset", g).jqmData("theme", k).html(((e.lang[e.useLang].timeFormat === 12 || e.timeFormatOverride === 12) ? ((p.getHours() === 0) ? '12<span class="ui-datebox-slidewday">AM</span>' : ((p.getHours() < 12) ? p.getHours() + '<span class="ui-datebox-slidewday">AM</span>' : ((p.getHours() === 12) ? '12<span class="ui-datebox-slidewday">PM</span>' : (p.getHours() - 12) + '<span class="ui-datebox-slidewday">PM</span>'))) : p.getHours())).appendTo(n) } break; case "i": s.addClass("ui-datebox-sliderow-hi"); n.css("marginLeft", "-896px"); for (g = -30; g < 31; g++) { p = t.theDate.copy(); p.adjust("i", g); k = (g === 0) ? e.pickPageButtonTheme : e.pickPageSlideButtonTheme; a("<div>", { "class": "ui-datebox-slidemins ui-corner-all ui-btn-up-" + k }).jqmData("offset", g).jqmData("theme", k).html(t._zPad(p.getMinutes())).appendTo(n) } break } s.appendTo(t.controlsInput) } } if (e.mode === "datebox") { t._checkConstraints(); t.controlsHeader.empty().html(t._formatHeader(t.theDate)); t.pickerMon.val(t.theDate.getMonth() + 1); t.pickerDay.val(t.theDate.getDate()); t.pickerYar.val(t.theDate.getFullYear()); if (t.dateOK !== true) { t.controlsInput.find("input").addClass("ui-datebox-griddate-disable") } else { t.controlsInput.find(".ui-datebox-griddate-disable").removeClass("ui-datebox-griddate-disable") } } if (e.mode === "calbox") { t.controlsInput.empty().html(e.lang[e.useLang].monthsOfYear[t.theDate.getMonth()] + " " + t.theDate.getFullYear()); t.controlsPlus.empty(); l = { today: -1, highlightDay: -1, presetDay: -1, nexttoday: 1, thisDate: new Date(), maxDate: new Date(), minDate: new Date(), startDay: false, currentMonth: false, weekMode: 0, weekDays: null, thisTheme: e.pickPageButtonTheme }; l.start = t._getFirstDay(t.theDate); l.end = t._getLastDate(t.theDate); l.lastend = t._getLastDateBefore(t.theDate); l.presetDate = t._makeDate(t.input.val()); if (e.calStartDay !== false || typeof e.lang[e.useLang].calStartDay === "number") { if (e.calStartDay !== false) { l.start = l.start - e.calStartDay; l.startDay = e.calStartDay } else { l.start = l.start - e.lang[e.useLang].calStartDay; l.startDay = e.lang[e.useLang].calStartDay } if (l.start < 0) { l.start = l.start + 7 } } l.prevtoday = l.lastend - (l.start - 1); l.checkDates = (e.enableDates === false && (e.afterToday !== false || e.beforeToday !== false || e.notToday !== false || e.maxDays !== false || e.minDays !== false || e.blackDates !== false || e.blackDays !== false)); if (l.thisDate.getMonth() === t.theDate.getMonth() && l.thisDate.getFullYear() === t.theDate.getFullYear()) { l.currentMonth = true; l.highlightDay = l.thisDate.getDate() } if (l.presetDate.getComp() === t.theDate.getComp()) { l.presetDay = l.presetDate.getDate() } t.calNoPrev = false; t.calNoNext = false; if (e.afterToday === true && (l.currentMonth === true || (l.thisDate.getMonth() >= t.theDate.getMonth() && t.theDate.getFullYear() === l.thisDate.getFullYear()))) { t.calNoPrev = true } if (e.beforeToday === true && (l.currentMonth === true || (l.thisDate.getMonth() <= t.theDate.getMonth() && t.theDate.getFullYear() === l.thisDate.getFullYear()))) { t.calNoNext = true } if (e.minDays !== false) { l.minDate.adjust("d", -1 * e.minDays); if (t.theDate.getFullYear() === l.minDate.getFullYear() && t.theDate.getMonth() <= l.minDate.getMonth()) { t.calNoPrev = true } } if (e.maxDays !== false) { l.maxDate.adjust("d", e.maxDays); if (t.theDate.getFullYear() === l.maxDate.getFullYear() && t.theDate.getMonth() >= l.maxDate.getMonth()) { t.calNoNext = true } } if (e.calShowDays) { if (e.lang[e.useLang].daysOfWeekShort.length < 8) { e.daysOfWeekShort = e.lang[e.useLang].daysOfWeekShort.concat(e.lang[e.useLang].daysOfWeekShort) } l.weekDays = a("<div>", { "class": "ui-datebox-gridrow" }).appendTo(t.controlsPlus); if (e.lang[e.useLang].isRTL === true) { l.weekDays.css("direction", "rtl") } for (g = 0; g <= 6; g++) { a("<div>" + e.lang[e.useLang].daysOfWeekShort[(g + l.startDay) % 7] + "</div>").addClass("ui-datebox-griddate ui-datebox-griddate-empty ui-datebox-griddate-label").appendTo(l.weekDays) } } if (e.fixDateArrays === true) { e.blackDates = t._fixArray(e.blackDates); e.highDates = t._fixArray(e.highDates); e.highDatesAlt = t._fixArray(e.highDatesAlt); e.enableDates = t._fixArray(e.enableDates) } for (h = 0; h <= 5; h++) { if (h === 0 || (h > 0 && (l.today > 0 && l.today <= l.end))) { n = a("<div>", { "class": "ui-datebox-gridrow" }); if (e.lang[e.useLang].isRTL === true) { n.css("direction", "rtl") } for (j = 0; j <= 6; j++) { if (j === 0) { l.weekMode = (l.today < 1) ? (l.prevtoday - l.lastend + e.calWeekModeFirstDay) : (l.today + e.calWeekModeFirstDay) } if (j === l.start && h === 0) { l.today = 1 } if (l.today > l.end) { l.today = -1 } if (l.today < 1) { if (e.calShowOnlyMonth) { a("<div>", { "class": "ui-datebox-griddate ui-datebox-griddate-empty" }).appendTo(n) } else { if (e.enableDates !== false) { if ((a.inArray(t.theDate.copymod([0, -1], [0, 0, l.prevtoday]).getISO(), e.enableDates) > -1) || (a.inArray(t.theDate.copymod([0, 1], [0, 0, l.nexttoday]).getISO(), e.enableDates) > -1)) { r = false } else { r = true } } else { if ((e.afterToday !== false && h === 0 && l.thisDate.getMonth() >= t.theDate.getMonth() - 1 && t.theDate.getFullYear() === l.thisDate.getFullYear() && l.thisDate.getDate() > l.prevtoday) || (e.beforeToday !== false && h !== 0 && l.thisDate.getMonth() <= t.theDate.getMonth() + 1 && t.theDate.getFullYear() === l.thisDate.getFullYear() && l.thisDate.getDate() < l.nexttoday) || (e.blackDays !== false && a.inArray(j, e.blackDays) > -1) || (e.blackDates !== false && a.inArray(t.theDate.copymod([0, -1], [0, 0, l.prevtoday]).getISO(), e.blackDates) > -1) || (e.blackDates !== false && a.inArray(t.theDate.copymod([0, 1], [0, 0, l.nexttoday]).getISO(), e.blackDates) > -1)) { r = true } else { r = false } } if (h === 0) { a("<div>" + String(l.prevtoday) + "</div>").addClass("ui-datebox-griddate ui-datebox-griddate-empty").appendTo(n).jqmData("date", ((e.calWeekMode) ? (l.weekMode + l.lastend) : l.prevtoday)).jqmData("enabled", (!r && !t.calNoPrev)).jqmData("month", -1); l.prevtoday++ } else { a("<div>" + String(l.nexttoday) + "</div>").addClass("ui-datebox-griddate ui-datebox-griddate-empty").appendTo(n).jqmData("date", ((e.calWeekMode) ? l.weekMode : l.nexttoday)).jqmData("enabled", (!r && !t.calNoNext)).jqmData("month", 1); l.nexttoday++ } } } else { r = false; if (e.enableDates) { if (a.inArray(t.theDate.copymod([0], [0, 0, l.today]).getISO(), e.enableDates) < 0) { r = true } } if (l.checkDates) { if (e.afterToday && l.thisDate.getComp() > (t.theDate.getComp() + l.today - t.theDate.getDate())) { r = true } if (!r && e.beforeToday && l.thisDate.getComp() < (t.theDate.getComp() + l.today - t.theDate.getDate())) { r = true } if (!r && e.notToday && l.today === l.highlightDay) { r = true } if (!r && e.maxDays !== false && l.maxDate.getComp() < (t.theDate.getComp() + l.today - t.theDate.getDate())) { r = true } if (!r && e.minDays !== false && l.minDate.getComp() > (t.theDate.getComp() + l.today - t.theDate.getDate())) { r = true } if (!r && (e.blackDays !== false || e.blackDates !== false)) { if ((a.inArray(j, e.blackDays) > -1) || (a.inArray(t.theDate.copymod([0], [0, 0, l.today]).getISO(), e.blackDates) > -1)) { r = true } } } if (e.calHighPicked && l.today === l.presetDay) { l.thisTheme = e.pickPageHighButtonTheme } else { if (e.calHighToday && l.today === l.highlightDay) { l.thisTheme = e.pickPageTodayButtonTheme } else { if (a.isArray(e.highDatesAlt) && (a.inArray(t.theDate.copymod([0], [0, 0, l.today]).getISO(), e.highDatesAlt) > -1)) { l.thisTheme = e.pickPageOAHighButtonTheme } else { if (a.isArray(e.highDates) && (a.inArray(t.theDate.copymod([0], [0, 0, l.today]).getISO(), e.highDates) > -1)) { l.thisTheme = e.pickPageOHighButtonTheme } else { if (a.isArray(e.highDays) && a.inArray(j, e.highDays) > -1) { l.thisTheme = e.pickPageODHighButtonTheme } else { l.thisTheme = e.pickPageButtonTheme } } } } } a("<div>" + String(l.today) + "</div>").addClass("ui-datebox-griddate ui-corner-all ui-btn-up-" + l.thisTheme + ((r) ? " ui-datebox-griddate-disable" : "")).jqmData("date", ((e.calWeekMode) ? l.weekMode : l.today)).jqmData("theme", l.thisTheme).jqmData("enabled", !r).jqmData("month", 0).appendTo(n); l.today++ } } } n.appendTo(t.controlsPlus) } t.controlsPlus.delegate("div.ui-datebox-griddate", e.clickEvent + " vmouseover vmouseout", function (i) { if (i.type === e.clickEvent) { i.preventDefault(); if (a(this).jqmData("enabled")) { if (a(this).jqmData("month") < 0) { t.theDate.adjust("m", -1); t.theDate.setDate(a(this).jqmData("date")) } else { if (a(this).jqmData("month") > 0) { t.theDate.setDate(a(this).jqmData("date")); if (!e.calWeekMode) { t.theDate.adjust("m", 1) } } else { t.theDate.setDate(a(this).jqmData("date")) } } t.input.trigger("datebox", { method: "set", value: t._formatDate(t.theDate), date: t.theDate }); t.input.trigger("datebox", { method: "close" }) } } else { if (a(this).jqmData("enabled") && typeof a(this).jqmData("theme") !== "undefined") { if (e.calWeekMode !== false && e.calWeekModeHighlight === true) { a(this).parent().find("div").each(function () { t._hoover(this) }) } else { t._hoover(this) } } } }) } if (e.lang[this.options.useLang].useArabicIndic === true) { t._makeDisplayIndic() } }, _getLongOptions: function (e) { var d, f = {}, g, c; if (a.mobile.ns == "") { g = "datebox" } else { g = a.mobile.ns.substr(0, a.mobile.ns.length - 1) + "Datebox" } for (d in e.data()) { if (d.substr(0, g.length) === g && d.length > g.length) { c = d.substr(g.length); c = c.charAt(0).toLowerCase() + c.slice(1); f[c] = e.data(d) } } return f }, _create: function () { a(document).trigger("dateboxcreate"); var c = this, d = a.extend(this.options, this.element.jqmData("options")), d = ((typeof this.element.jqmData("options") === "undefined") ? a.extend(d, this._getLongOptions(this.element)) : d); input = this.element, thisTheme = (d.theme === false && typeof (a(c).jqmData("theme")) === "undefined") ? ((typeof (input.parentsUntil(":jqmData(theme)").parent().jqmData("theme")) === "undefined") ? d.defaultTheme : input.parentsUntil(":jqmData(theme)").parent().jqmData("theme")) : d.theme, focusedEl = input.wrap('<div class="ui-input-datebox ui-shadow-inset ui-corner-all ui-body-' + thisTheme + '"></div>').parent(), theDate = new Date(), initDate = new Date(theDate.getTime()), openbutton = a('<a href="#" class="ui-input-clear" title="' + ((typeof d.lang[d.useLang].tooltip !== "undefined") ? d.lang[d.useLang].tooltip : d.lang.en.tooltip) + '">' + ((typeof d.lang[d.useLang].tooltip !== "undefined") ? d.lang[d.useLang].tooltip : d.lang.en.tooltip) + "</a>").bind(d.clickEvent, function (f) { f.preventDefault(); if (!d.disabled) { c.input.trigger("datebox", { method: "open" }); c.focusedEl.addClass("ui-focus") } setTimeout(function () { a(f.target).closest("a").removeClass(a.mobile.activeBtnClass) }, 300) }).appendTo(focusedEl).buttonMarkup({ icon: "grid", iconpos: "notext", corners: true, shadow: true }).css({ "vertical-align": "middle", display: "inline-block" }), thisPage = input.closest(".ui-page"), ns = (typeof a.mobile.ns !== "undefined") ? a.mobile.ns : "", pickPage = a("<div data-" + ns + "role='dialog' class='ui-dialog-datebox' data-" + ns + "theme='" + ((d.forceInheritTheme === false) ? d.pickPageTheme : thisTheme) + "' ><div data-" + ns + "role='header' data-" + ns + "backbtn='false' data-" + ns + "theme='a'><div class='ui-title'>PlaceHolder</div></div><div data-" + ns + "role='content'></div></div>").appendTo(a.mobile.pageContainer).page().css("minHeight", "0px").css("zIndex", d.zindex).addClass(d.transition), pickPageTitle = pickPage.find(".ui-title"), pickPageContent = pickPage.find(".ui-content"), touch = (typeof window.ontouchstart !== "undefined"), START_EVENT = touch ? "touchstart" : "mousedown", MOVE_EVENT = touch ? "touchmove" : "mousemove", END_EVENT = touch ? "touchend" : "mouseup", dragMove = false, dragStart = false, dragEnd = false, dragPos = false, dragTarget = false, dragThisDelta = 0; d.theme = thisTheme; a.extend(c, { input: input, focusedEl: focusedEl }); if (d.forceInheritTheme) { d.pickPageTheme = thisTheme; d.pickPageInputTheme = thisTheme; d.pickPageButtonTheme = thisTheme } if (d.defaultPickerValue === false && d.defaultDate !== false) { d.defaultPickerValue = d.defaultDate } if (d.numberInputEnhance === true) { if (navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPod/i)) { d.internalInputType = "number" } } a("label[for='" + input.attr("id") + "']").addClass("ui-input-text").css("verticalAlign", "middle"); if (d.mode === "timeflipbox") { d.lang[d.useLang].headerFormat = " " } if (d.noButtonFocusMode || d.useInline || d.noButton) { openbutton.hide() } c.focusedEl.bind(d.clickEvent, function () { if (!d.disabled && (d.noButtonFocusMode || d.focusMode)) { c.input.trigger("datebox", { method: "open" }); c.focusedEl.addClass("ui-focus"); c.input.removeClass("ui-focus") } }); c.input.removeClass("ui-corner-all ui-shadow-inset").focus(function () { if (!d.disabled) { c.focusedEl.addClass("ui-focus") } c.input.removeClass("ui-focus") }).blur(function () { c.focusedEl.removeClass("ui-focus"); c.input.removeClass("ui-focus") }).change(function () { c.theDate = c._makeDate(c.input.val()); c._update() }); c.input.bind("datebox", c._dateboxHandler); pickPage.find(".ui-header a").unbind("click vclick").bind(d.clickEvent, function (f) { f.preventDefault(); f.stopImmediatePropagation(); c.input.trigger("datebox", { method: "close", fromCloseButton: false }) }); a.extend(c, { pickPage: pickPage, thisPage: thisPage, pickPageContent: pickPageContent, pickPageTitle: pickPageTitle, theDate: theDate, initDate: initDate, touch: touch, START_DRAG: START_EVENT, MOVE_DRAG: MOVE_EVENT, END_DRAG: END_EVENT, dragMove: dragMove, dragStart: dragStart, dragEnd: dragEnd, dragPos: dragPos }); if (typeof a.event.special.mousewheel !== "undefined") { d.wheelExists = true } c._buildPage(); if (d.swipeEnabled) { a(document).bind(c.MOVE_DRAG, function (f) { if (c.dragMove) { if (d.mode === "slidebox") { c.dragEnd = c.touch ? f.originalEvent.changedTouches[0].pageX : f.pageX; c.dragTarget.css("marginLeft", (c.dragPos + c.dragEnd - c.dragStart) + "px"); f.preventDefault(); f.stopPropagation(); return false } else { if (d.mode === "flipbox" || d.mode === "timeflipbox") { c.dragEnd = c.touch ? f.originalEvent.changedTouches[0].pageY : f.pageY; c.dragTarget.css("marginTop", (c.dragPos + c.dragEnd - c.dragStart) + "px"); f.preventDefault(); f.stopPropagation(); return false } else { if (d.mode === "durationbox" || d.mode === "timebox" || d.mode === "datebox") { c.dragEnd = c.touch ? f.originalEvent.changedTouches[0].pageY : f.pageY; if ((c.dragEnd - c.dragStart) % 2 === 0) { dragThisDelta = (c.dragEnd - c.dragStart) / -2; if (dragThisDelta < c.dragPos) { c._offset(c.dragTarget, -1 * (c.dragTarget === "i" ? d.minuteStep : 1)) } else { if (dragThisDelta > c.dragPos) { c._offset(c.dragTarget, (c.dragTarget === "i" ? d.minuteStep : 1)) } } c.dragPos = dragThisDelta } f.preventDefault(); f.stopPropagation(); return false } } } } }); a(document).bind(c.END_DRAG, function (h) { if (c.dragMove) { c.dragMove = false; if (d.mode === "slidebox") { if (c.dragEnd !== false && Math.abs(c.dragStart - c.dragEnd) > 25) { h.preventDefault(); h.stopPropagation(); switch (c.dragTarget.parent().jqmData("rowtype")) { case "y": c._offset("y", parseInt((c.dragStart - c.dragEnd) / 84, 10)); break; case "m": c._offset("m", parseInt((c.dragStart - c.dragEnd) / 51, 10)); break; case "d": c._offset("d", parseInt((c.dragStart - c.dragEnd) / 32, 10)); break; case "h": c._offset("h", parseInt((c.dragStart - c.dragEnd) / 32, 10)); break; case "i": c._offset("i", parseInt((c.dragStart - c.dragEnd) / 32, 10)); break } } } else { if (d.mode === "flipbox" || d.mode === "timeflipbox") { if (c.dragEnd !== false) { h.preventDefault(); h.stopPropagation(); var g = c.dragTarget.parent().parent().jqmData("field"), f = parseInt((c.dragStart - c.dragEnd) / 30, 10); c._offset(g, f * ((g === "i") ? d.minuteStep : 1)) } } } c.dragStart = false; c.dragEnd = false } }) } if (c.input.is(":disabled")) { c.disable() } if (d.disableManualInput === true) { c.input.attr("readonly", true) } a(document).trigger("dateboxaftercreate") }, _makeElement: function (f, g) { var c = this, d = false, e = false; e = f.clone(); if (typeof g.attr !== "undefined") { for (d in g.attr) { if (g.attr.hasOwnProperty(d)) { e.jqmData(d, g.attr[d]) } } } return e }, _eventEnterValue: function (d) { var c = this, e = c.options, f = false; if (d.val() !== "" && c._isInt(d.val())) { switch (d.jqmData("field")) { case "m": c.theDate.setMonth(parseInt(d.val(), 10) - 1); break; case "d": c.theDate.setDate(parseInt(d.val(), 10)); break; case "y": c.theDate.setFullYear(parseInt(d.val(), 10)); break; case "i": c.theDate.setMinutes(parseInt(d.val(), 10)); break; case "h": f = parseInt(d.val(), 10); if (f === 12) { if ((e.lang[e.useLang].timeFormat === 12 || e.timeFormatOverride === 12) && c.pickerMeri.val() === e.meridiemLetters[0]) { f = 0 } } c.theDate.setHours(f); break } c._update() } }, _buildInternals: function () { var p = this, r = p.options, m, k, v, e, w = a("<div><a href='#'></a></div>"), f = a("<div>", { "class": "ui-datebox-container ui-overlay-shadow ui-corner-all ui-datebox-hidden pop ui-body-" + r.pickPageTheme }).css("zIndex", r.zindex), z = a("<input type='" + r.internalInputType + "' />").addClass("ui-input-text ui-corner-all ui-shadow-inset ui-datebox-input ui-body-" + r.pickPageInputTheme), t = a("<input type='text' />").addClass("ui-input-text ui-corner-all ui-shadow-inset ui-datebox-input ui-body-" + r.pickPageInputTheme), j = a("<div>", { "class": "ui-datebox-controls" }), i = a("<div class='ui-overlay-shadow'><ul></ul></div>"), h, B, n, s, u, d, g, l, A, C, q, c; p.calNoNext = false; p.calNoPrev = false; p.setButton = false; p.clearButton = false; p.dateOK = true; if (r.fieldsOrderOverride === false) { switch (r.mode) { case "timebox": case "timeflipbox": r.fieldsOrder = r.lang[r.useLang].timeFieldOrder; break; case "slidebox": r.fieldsOrder = r.lang[r.useLang].slideFieldOrder; break; default: r.fieldsOrder = r.lang[r.useLang].dateFieldOrder } } else { r.fieldsOrder = r.fieldsOrderOverride } if (r.timeOutputOverride !== false) { r.timeOutput = r.timeOutputOverride } else { if (r.timeFormatOverride === false) { r.timeOutput = r.timeFormats[r.lang[r.useLang].timeFormat] } else { r.timeOutput = r.timeFormats[r.timeFormatOverride] } } if (r.dateFormat !== false) { r.dateOutput = r.dateFormat } else { if (typeof r.lang[r.useLang].dateFormat !== "undefined") { r.dateOutput = r.lang[r.useLang].dateFormat } else { r.dateOutput = r.defaultDateFormat } } p.pickerContent.empty(); if (r.mode === "datebox" || r.mode === "timebox") { u = a("<div class='ui-datebox-header'><h4>Unitialized</h4></div>").appendTo(p.pickerContent).find("h4"); h = j.clone().appendTo(p.pickerContent); B = j.clone().appendTo(p.pickerContent); n = j.clone().appendTo(p.pickerContent); s = j.clone().appendTo(p.pickerContent); if (r.mode === "timebox") { u.parent().empty() } A = p._makeElement(z, { attr: { field: "m", amount: 1} }); C = p._makeElement(z, { attr: { field: "d", amount: 1} }); q = p._makeElement(z, { attr: { field: "y", amount: 1} }); d = p._makeElement(z, { attr: { field: "h", amount: 1} }); g = p._makeElement(z, { attr: { field: "i", amount: 1} }); l = p._makeElement(t, { attr: { field: "a", amount: r.minuteStep} }); B.delegate("input", "keyup", function () { p._eventEnterValue(a(this)) }); if (r.wheelExists) { B.delegate("input", "mousewheel", function (o, x) { o.preventDefault(); p._offset(a(this).jqmData("field"), ((x < 0) ? -1 : 1) * a(this).jqmData("amount")) }) } for (m = 0; m <= r.fieldsOrder.length; m++) { if (r.fieldsOrder[m] === "y") { q.appendTo(B) } if (r.fieldsOrder[m] === "m") { A.appendTo(B) } if (r.fieldsOrder[m] === "d") { C.appendTo(B) } if (r.fieldsOrder[m] === "h") { d.appendTo(B) } if (r.fieldsOrder[m] === "i") { g.appendTo(B) } if (r.fieldsOrder[m] === "a" && (r.lang[r.useLang].timeFormat === 12 || r.timeFormatOverride === 12)) { l.appendTo(B) } } if (r.swipeEnabled) { B.delegate("input", p.START_DRAG, function (o) { if (!p.dragMove) { p.dragMove = true; p.dragTarget = a(this).jqmData("field"); p.dragPos = 0; p.dragStart = p.touch ? o.originalEvent.changedTouches[0].pageY : o.pageY; p.dragEnd = false; o.stopPropagation() } }) } if (r.noSetButton === false) { p.setButton = a("<a href='#'>PlaceHolder</a>").appendTo(s).buttonMarkup({ theme: r.pickPageTheme, icon: "check", iconpos: "left", corners: true, shadow: true }).bind(r.clickEvent, function (o) { o.preventDefault(); if (p.dateOK === true) { if (r.mode === "timebox") { p.input.trigger("datebox", { method: "set", value: p._formatTime(p.theDate), date: p.theDate }) } else { p.input.trigger("datebox", { method: "set", value: p._formatDate(p.theDate), date: p.theDate }) } p.input.trigger("datebox", { method: "close" }) } }) } for (m = 0; m < p.options.fieldsOrder.length; m++) { if (r.fieldsOrder[m] !== "a" || r.lang[r.useLang].timeFormat === 12 || r.timeFormatOverride === 12) { for (k = 0; k < 2; k++) { w.clone().appendTo(((k === 0) ? h : n)).buttonMarkup({ theme: r.pickPageButtonTheme, icon: ((k === 0) ? "plus" : "minus"), iconpos: "bottom", corners: true, shadow: true }).jqmData("field", r.fieldsOrder[m]).jqmData("amount", ((r.fieldsOrder[m] === "i") ? r.minuteStep : 1)) } } } h.delegate("div", r.clickEvent, function (o) { o.preventDefault(); p._offset(a(this).jqmData("field"), a(this).jqmData("amount")) }); n.delegate("div", r.clickEvent, function (o) { o.preventDefault(); p._offset(a(this).jqmData("field"), a(this).jqmData("amount") * -1) }); a.extend(p, { controlsHeader: u, pickerDay: C, pickerMon: A, pickerYar: q, pickerHour: d, pickerMins: g, pickerMeri: l, controlsInput: B }); p.pickerContent.appendTo(p.thisPage) } if (r.mode === "durationbox") { h = j.clone().removeClass("ui-datebox-controls").addClass("ui-datebox-scontrols").appendTo(p.pickerContent); B = h.clone().appendTo(p.pickerContent); n = h.clone().appendTo(p.pickerContent); s = j.clone().appendTo(p.pickerContent); C = z.removeClass("ui-datebox-input"); d = C.clone(); g = C.clone(); c = C.clone(); B.delegate("input", "keyup", function () { if (a(this).val() !== "") { p._updateduration() } }); if (r.wheelExists) { B.delegate("input", "mousewheel", function (o, x) { o.preventDefault(); p._offset(a(this).parent().jqmData("field"), ((x < 0) ? -1 : 1)) }) } for (m = 0; m < r.durationOrder.length; m++) { switch (r.durationOrder[m]) { case "d": a("<div>", { "class": "ui-datebox-sinput" }).jqmData("field", "d").append(C).appendTo(B).prepend("<label>" + r.lang[r.useLang].durationLabel[0] + "</label>"); break; case "h": a("<div>", { "class": "ui-datebox-sinput" }).jqmData("field", "h").append(d).appendTo(B).prepend("<label>" + r.lang[r.useLang].durationLabel[1] + "</label>"); break; case "i": a("<div>", { "class": "ui-datebox-sinput" }).jqmData("field", "i").append(g).appendTo(B).prepend("<label>" + r.lang[r.useLang].durationLabel[2] + "</label>"); break; case "s": a("<div>", { "class": "ui-datebox-sinput" }).jqmData("field", "s").append(c).appendTo(B).prepend("<label>" + r.lang[r.useLang].durationLabel[3] + "</label>"); break } } if (r.swipeEnabled) { B.delegate("input", p.START_DRAG, function (o) { if (!p.dragMove) { p.dragMove = true; p.dragTarget = a(this).parent().jqmData("field"); p.dragPos = 0; p.dragStart = p.touch ? o.originalEvent.changedTouches[0].pageY : o.pageY; p.dragEnd = false; o.stopPropagation() } }) } if (r.noSetButton === false) { p.setButton = a("<a href='#'>PlaceHolder</a>").appendTo(s).buttonMarkup({ theme: r.pickPageTheme, icon: "check", iconpos: "left", corners: true, shadow: true }).bind(r.clickEvent, function (o) { o.preventDefault(); p.input.trigger("datebox", { method: "set", value: p._formatTime(p.theDate), date: p.theDate }); p.input.trigger("datebox", { method: "close" }) }) } for (m = 0; m < r.durationOrder.length; m++) { for (k = 0; k < 2; k++) { w.clone().appendTo(((k === 0) ? h : n)).buttonMarkup({ theme: r.pickPageButtonTheme, icon: ((k === 0) ? "plus" : "minus"), iconpos: "bottom", corners: true, shadow: true }).jqmData("field", r.durationOrder[m]) } } h.delegate("div", r.clickEvent, function (o) { o.preventDefault(); p._offset(a(this).jqmData("field"), r.durationSteppers[a(this).jqmData("field")]) }); n.delegate("div", r.clickEvent, function (o) { o.preventDefault(); p._offset(a(this).jqmData("field"), r.durationSteppers[a(this).jqmData("field")] * -1) }); a.extend(p, { pickerHour: d, pickerMins: g, pickerDay: C, pickerSecs: c }); p.pickerContent.appendTo(p.thisPage) } if (r.mode === "slidebox") { u = a("<div class='ui-datebox-header'><h4>Unitialized</h4></div>").appendTo(p.pickerContent).find("h4"); B = a("<div>").addClass("ui-datebox-slide").appendTo(p.pickerContent); s = a("<div>", { "class": "ui-datebox-controls" }).appendTo(p.pickerContent); if (r.noSetButton === false) { p.setButton = a("<a href='#'>PlaceHolder</a>").appendTo(s).buttonMarkup({ theme: r.pickPageTheme, icon: "check", iconpos: "left", corners: true, shadow: true }).bind(r.clickEvent, function (o) { o.preventDefault(); if (p.dateOK === true) { p.input.trigger("datebox", { method: "set", value: p._formatDate(p.theDate), date: p.theDate }); p.input.trigger("datebox", { method: "close" }) } }) } a.extend(p, { controlsHeader: u, controlsInput: B }); p.pickerContent.appendTo(p.thisPage) } if (r.mode === "flipbox" || r.mode === "timeflipbox") { u = a("<div class='ui-datebox-header'><h4>Unitialized</h4></div>").appendTo(p.pickerContent).find("h4"); B = a("<div>", { "class": "ui-datebox-flipcontent" }).appendTo(p.pickerContent); h = a("<div>", { "class": "ui-datebox-flipcenter ui-overlay-shadow" }).css("pointerEvents", "none").appendTo(p.pickerContent); s = j.clone().appendTo(p.pickerContent); C = p._makeElement(i, { attr: { field: "d", amount: 1} }); A = p._makeElement(i, { attr: { field: "m", amount: 1} }); q = p._makeElement(i, { attr: { field: "y", amount: 1} }); d = p._makeElement(i, { attr: { field: "h", amount: 1} }); g = p._makeElement(i, { attr: { field: "i", amount: r.minuteStep} }); l = p._makeElement(i, { attr: { field: "a", amount: 1} }); if (r.wheelExists) { B.delegate("div", "mousewheel", function (o, x) { o.preventDefault(); p._offset(a(this).jqmData("field"), ((x < 0) ? -1 : 1) * a(this).jqmData("amount")) }) } for (m = 0; m <= r.fieldsOrder.length; m++) { if (r.fieldsOrder[m] === "y") { q.appendTo(B) } if (r.fieldsOrder[m] === "m") { A.appendTo(B) } if (r.fieldsOrder[m] === "d") { C.appendTo(B) } if (r.fieldsOrder[m] === "h") { d.appendTo(B) } if (r.fieldsOrder[m] === "i") { g.appendTo(B) } if (r.fieldsOrder[m] === "a" && (r.lang[r.useLang].timeFormat === 12 || r.timeFormatOverride === 12)) { l.appendTo(B) } } if (r.swipeEnabled) { B.delegate("ul", p.START_DRAG, function (x, o) { if (!p.dragMove) { if (typeof o !== "undefined") { x = o } p.dragMove = true; p.dragTarget = a(this).find("li").first(); p.dragPos = parseInt(p.dragTarget.css("marginTop").replace(/px/i, ""), 10); p.dragStart = p.touch ? x.originalEvent.changedTouches[0].pageY : x.pageY; p.dragEnd = false; x.stopPropagation(); x.preventDefault() } }); h.bind(p.START_DRAG, function (o) { if (!p.dragMove) { p.dragTarget = p.touch ? o.originalEvent.changedTouches[0].pageX - a(o.currentTarget).offset().left : o.pageX - a(o.currentTarget).offset().left; if (r.fieldsOrder.length === 3) { a(p.controlsInput.find("ul").get(parseInt(p.dragTarget / 87, 10))).trigger(p.START_DRAG, o) } else { if (r.fieldsOrder.length === 2) { a(p.controlsInput.find("ul").get(parseInt(p.dragTarget / 130, 10))).trigger(p.START_DRAG, o) } } } }) } if (r.noSetButton === false) { p.setButton = a("<a href='#'>PlaceHolder</a>").appendTo(s).buttonMarkup({ theme: r.pickPageTheme, icon: "check", iconpos: "left", corners: true, shadow: true }).bind(r.clickEvent, function (o) { o.preventDefault(); if (p.dateOK === true) { if (r.mode === "timeflipbox") { p.input.trigger("datebox", { method: "set", value: p._formatTime(p.theDate), date: p.theDate }) } else { p.input.trigger("datebox", { method: "set", value: p._formatDate(p.theDate), date: p.theDate }) } p.input.trigger("datebox", { method: "close" }) } }) } a.extend(p, { controlsHeader: u, controlsInput: B, pickerDay: C, pickerMon: A, pickerYar: q, pickerHour: d, pickerMins: g, pickerMeri: l }); p.pickerContent.appendTo(p.thisPage) } if (r.mode === "calbox") { u = a("<div>", { "class": "ui-datebox-gridheader" }).appendTo(p.pickerContent); h = a("<div>", { "class": "ui-datebox-grid" }).appendTo(p.pickerContent); s = j.clone().appendTo(p.pickerContent); B = a("<div class='ui-datebox-gridlabel'><h4>Uninitialized</h4></div>").appendTo(u).find("h4"); if (r.swipeEnabled) { p.pickerContent.bind("swipeleft", function () { if (!p.calNoNext) { p._offset("m", 1) } }).bind("swiperight", function () { if (!p.calNoPrev) { p._offset("m", -1) } }) } if (r.wheelExists) { p.pickerContent.bind("mousewheel", function (o, x) { o.preventDefault(); if (x > 0 && !p.calNoNext) { if (p.theDate.getDate() > 28) { p.theDate.setDate(1) } p._offset("m", 1) } if (x < 0 && !p.calNoPrev) { if (p.theDate.getDate() > 28) { p.theDate.setDate(1) } p._offset("m", -1) } }) } a("<div class='ui-datebox-gridplus" + ((r.lang[r.useLang].isRTL === true) ? "-rtl" : "") + "'><a href='#'>" + ((typeof r.lang[r.useLang].nextMonth !== "undefined") ? r.lang[r.useLang].nextMonth : r.lang.en.nextMonth) + "</a></div>").prependTo(u).buttonMarkup({ theme: r.pickPageButtonTheme, icon: "plus", inline: true, iconpos: "notext", corners: true, shadow: true }).bind(r.clickEvent, function (o) { o.preventDefault(); if (!p.calNoNext) { if (p.theDate.getDate() > 28) { p.theDate.setDate(1) } p._offset("m", 1) } }); a("<div class='ui-datebox-gridminus" + ((r.lang[r.useLang].isRTL === true) ? "-rtl" : "") + "'><a href='#'>" + ((typeof r.lang[r.useLang].prevMonth !== "undefined") ? r.lang[r.useLang].prevMonth : r.lang.en.prevMonth) + "</a></div>").prependTo(u).buttonMarkup({ theme: r.pickPageButtonTheme, icon: "minus", inline: true, iconpos: "notext", corners: true, shadow: true }).bind(r.clickEvent, function (o) { o.preventDefault(); if (!p.calNoPrev) { if (p.theDate.getDate() > 28) { p.theDate.setDate(1) } p._offset("m", -1) } }); if (r.calTodayButton === true) { p.setButton = a("<a href='#'>PlaceHolder</a>").appendTo(s).buttonMarkup({ theme: r.pickPageTheme, icon: "check", iconpos: "left", corners: true, shadow: true }).bind(r.clickEvent, function (o) { o.preventDefault(); p.theDate = new Date(); p.theDate = new Date(p.theDate.getFullYear(), p.theDate.getMonth(), p.theDate.getDate(), 0, 0, 0, 0); p.input.trigger("datebox", { method: "doset" }) }) } a.extend(p, { controlsInput: B, controlsPlus: h }); p.pickerContent.appendTo(p.thisPage) } if (r.useClearButton === true) { p.clearButton = a("<a href='#'>PlaceHolder</a>").appendTo(s).buttonMarkup({ theme: r.pickPageTheme, icon: "delete", iconpos: "left", corners: true, shadow: true }).bind(r.clickEvent, function (o) { o.preventDefault(); p.input.val(""); p.input.trigger("datebox", { method: "clear" }); p.input.trigger("datebox", { method: "close" }) }) } if (r.collapseButtons && (p.clearButton !== false && p.setButton !== false)) { s.addClass("ui-datebox-collapse") } }, _buttonsTitle: function () { var c = this, d = this.options; if (d.titleDialogLabel === false) { if (typeof this.element.attr("title") !== "undefined") { c.pickPageTitle.html(this.element.attr("title")) } else { if (this.focusedEl.parent().find("label").text() !== "") { c.pickPageTitle.html(this.focusedEl.parent().find("label").text()) } else { switch (d.mode) { case "timebox": case "timeflipbox": c.pickPageTitle.html(d.lang[d.useLang].titleTimeDialogLabel); break; default: c.pickPageTitle.html(d.lang[d.useLang].titleDateDialogLabel); break } } } } else { c.pickPageTitle.html(d.titleDialogLabel) } if (c.clearButton !== false) { c.clearButton.find(".ui-btn-text").html(d.lang[d.useLang].clearButton) } if (c.setButton !== false) { switch (d.mode) { case "timebox": case "timeflipbox": c.setButton.find(".ui-btn-text").html(d.lang[d.useLang].setTimeButtonLabel); break; case "durationbox": c.setButton.find(".ui-btn-text").html(d.lang[d.useLang].setDurationButtonLabel); break; case "calbox": c.setButton.find(".ui-btn-text").html(d.lang[d.useLang].calTodayButtonLabel); break; default: c.setButton.find(".ui-btn-text").html(d.lang[d.useLang].setDateButtonLabel); break } } }, _buildPage: function () { var d = this, e = d.options, f = a("<div>", { "class": "ui-datebox-container ui-overlay-shadow ui-corner-all ui-datebox-hidden " + e.transition + " ui-body-" + e.pickPageTheme }).css("zIndex", e.zindex), c = a("<div>", { "class": "ui-datebox-screen ui-datebox-hidden" + ((e.useModal) ? " ui-datebox-screen-modal" : "") }).css({ "z-index": e.zindex - 1 }).appendTo(d.thisPage).bind(e.clickEvent, function (g) { g.preventDefault(); d.input.trigger("datebox", { method: "close" }) }); if (e.noAnimation) { f.removeClass(e.transition) } a.extend(d, { pickerContent: f, screen: c }); d._buildInternals(); if (e.useInline || e.useInlineBlind) { d.input.parent().parent().append(d.pickerContent); if (e.useInlineHideInput) { d.input.parent().hide() } d.input.trigger("change"); d.pickerContent.removeClass("ui-datebox-hidden") } else { if (e.centerWindow && e.useInlineHideInput) { d.input.parent().hide() } } if (e.useInline) { d.pickerContent.addClass("ui-datebox-inline"); d.open() } if (e.useInlineBlind) { d.pickerContent.addClass("ui-datebox-inlineblind"); d.pickerContent.hide() } }, hardreset: function () { this._buildInternals(); this.refresh(); this._buttonsTitle() }, refresh: function () { if (this.options.useInline === true) { this.input.trigger("change") } this._update() }, open: function () { var c = this, f = this.options, d = false, e = f.noAnimation ? "none" : f.transition, h, g; if (f.openCallback !== false) { if (!a.isFunction(this.options.openCallback)) { if (typeof window[f.openCallback] !== "undefined") { f.openCallback = window[f.openCallback] } else { f.openCallback = new Function(f.openCallback) } } h = f.openCallback.apply(c, a.merge([c.theDate], f.openCallbackArgs)); if (h == false) { return false } } c._buttonsTitle(); if (this.options.useInlineBlind) { this.pickerContent.slideDown(); return false } if (this.options.useInline) { return true } if (this.pickPage.is(":visible")) { return false } this.theDate = this._makeDate(this.input.val()); this._update(); this.input.blur(); if ((a(document).width() > 400 && !f.useDialogForceTrue) || f.useDialogForceFalse || f.fullScreen) { d = this._getCoords(this); f.useDialog = false; if (f.nestedBox === true && f.fullScreen === false) { g = a(".ui-page-active").first(); a(g).append(c.pickerContent); a(g).append(c.screen) } if (f.fullScreenAlways === false || d.width > 399) { if (f.useModal === true) { c.screen.fadeIn("slow") } else { setTimeout(function () { c.screen.removeClass("ui-datebox-hidden") }, 500) } } if (f.fullScreenAlways === true || (f.fullScreen === true && d.width < 400)) { c.pickerContent.addClass("in").css({ position: "absolute", "text-align": "center", top: d.fullTop - 5, left: d.fullLeft - 5, height: d.high, width: d.width }).removeClass("ui-datebox-hidden") } else { c.pickerContent.addClass("ui-overlay-shadow in").css({ position: "absolute", top: d.winTop, left: d.winLeft }).removeClass("ui-datebox-hidden"); a(document).bind("orientationchange.datebox", { widget: c }, function (i) { c._orientChange(i) }); if (f.resizeListener === true) { a(window).bind("resize.datebox", { widget: c }, function (i) { c._orientChange(i) }) } } } else { c.thisPage.unbind("pagehide.remove"); f.useDialog = true; c.pickPageContent.append(c.pickerContent); c.pickerContent.css({ top: "auto", left: "auto", marginLeft: "auto", marginRight: "auto" }).removeClass("ui-overlay-shadow ui-datebox-hidden"); a.mobile.changePage(c.pickPage, { transition: e }) } }, close: function (c) { var d = this, e = this.options, f; if (e.useInlineBlind) { d.pickerContent.slideUp(); return false } if (e.useInline) { return true } if (e.useDialog) { if (!c) { a(d.pickPage).dialog("close") } if (!d.thisPage.jqmData("page").options.domCache) { d.thisPage.bind("pagehide.remove", function () { a(d).remove() }) } d.pickerContent.addClass("ui-datebox-hidden").removeAttr("style").css("zIndex", d.options.zindex); d.thisPage.append(d.pickerContent) } else { if (e.useModal) { d.screen.fadeOut("slow") } else { d.screen.addClass("ui-datebox-hidden") } d.pickerContent.addClass("ui-datebox-hidden").removeAttr("style").css("zIndex", d.options.zindex).removeClass("in") } d.focusedEl.removeClass("ui-focus"); a(document).unbind("orientationchange.datebox"); if (e.resizeListener === true) { a(window).unbind("resize.datebox") } if (e.closeCallback !== false) { if (!a.isFunction(e.closeCallback)) { if (typeof window[e.closeCallback] !== "undefined") { e.closeCallback = window[e.closeCallback] } else { e.closeCallback = new Function(e.closeCallback) } } e.closeCallback.apply(d, a.merge([d.theDate], e.closeCallbackArgs)) } }, disable: function () { this.element.attr("disabled", true); this.element.parent().addClass("ui-disabled"); this.options.disabled = true; this.element.blur(); this.input.trigger("datebox", { method: "disable" }) }, enable: function () { this.element.attr("disabled", false); this.element.parent().removeClass("ui-disabled"); this.options.disabled = false; this.input.trigger("datebox", { method: "enable" }) }, _setOption: function (d, e) { var c = ["minYear", "maxYear", "afterToday", "beforeToday", "maxDays", "minDays", "highDays", "highDates", "blackDays", "blackDates", "enableDates"]; a.Widget.prototype._setOption.apply(this, arguments); if (a.inArray(d, c) > -1) { this.refresh() } else { this.hardreset() } } }); a(document).bind("pagebeforecreate", function (c) { a(":jqmData(role='datebox')", c.target).each(function () { a(this).prop("type", "text") }) }); a(document).bind("pagecreate create", function (c) { a(document).trigger("dateboxbeforecreate"); a(":jqmData(role='datebox')", c.target).each(function () { if (typeof (a(this).data("datebox")) === "undefined") { a(this).datebox() } }) }) })(jQuery);