@using System.Web.Script.Serialization
@using RavenQuestionnaire.Core.Views.Questionnaire
@model QuestionnaireView
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var m = new JavaScriptSerializer().Serialize(Model);
    var top = 0;
}
<style type="text/css">
    .window { 
	    border:0.1em dotted #d4e06b; 
	    opacity:0.8; 
	    filter:alpha(opacity=80); 
	    width:14em; height:4em; 
	    z-index:20; 
	    position:absolute; 
	    color:black;
	    font-family:helvetica, sans;
	    padding-top:0.9em; 
	    font-size:0.9em;
	    text-align:center;
	    background-color:white;
}
</style>
<h1>@Model.Title</h1>
<div id="demo">
    @*@foreach (var question in Model.Questions)
    {
        var id = "window" + question.PublicKey;
        <div class="window" id="id" style="top: @top em">@question.QuestionText</div>
    }*@
</div>
@*<div class="">
    @Html.ActionLink("Back to List of Questionnaires", "Index", null, new { @class = "btn" })
</div>*@

<script>
    (function () {
        
        var data = @m

        window.jsPlumbDemo = {

            init: function () {

                var fillColor = "gray";
                // notice the 'curviness' argument to this Bezier curve.  the curves on this page are far smoother
                // than the curves on the first demo, which use the default curviness value.
                jsPlumb.Defaults.Connector = ["Bezier", { curviness: 50}];
                jsPlumb.Defaults.DragOptions = { cursor: "pointer", zIndex: 2000 };
                jsPlumb.Defaults.PaintStyle = { strokeStyle: "gray", lineWidth: 2 };
                jsPlumb.Defaults.EndpointStyle = { radius: 9, fillStyle: "gray" };
                jsPlumb.Defaults.HoverPaintStyle = { strokeStyle: "#ec9f2e" };
                jsPlumb.Defaults.EndpointHoverStyle = { fillStyle: "#ec9f2e" };
                jsPlumb.Defaults.Anchors = ["BottomCenter", "TopCenter"];

                // declare some common values:
                var arrowCommon = { foldback: 0.7, fillStyle: fillColor, width: 14 };
                // use three-arg spec to create two different arrows with the common values:
                var overlays = [
                                ["Arrow", { location: 0.7 }, arrowCommon],
                                ["Arrow", { location: 0.3, direction: -1 }, arrowCommon]
                        ];

                jsPlumb.connect({ source: "window3", target: "window6", overlays: overlays });
                jsPlumb.connect({ source: "window1", target: "window2", overlays: overlays });
                jsPlumb.connect({ source: "window1", target: "window3", overlays: overlays });
                jsPlumb.connect({ source: "window2", target: "window4", overlays: overlays });
                jsPlumb.connect({ source: "window2", target: "window5", overlays: overlays });

                jsPlumb.draggable(jsPlumb.getSelector(".window"));
            }
        };

    })();
</script>