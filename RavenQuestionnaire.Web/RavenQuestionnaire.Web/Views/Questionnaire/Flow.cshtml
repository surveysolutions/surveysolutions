@using System.Web.Script.Serialization
@using Main.Core.View
@using Main.Core.View.Question
@using RavenQuestionnaire.Core.Views.Group
@using RavenQuestionnaire.Core.Views.Questionnaire
@model QuestionnaireView
@{
    this.ViewBag.Title = "Flow";
    var serializer = new JavaScriptSerializer();

}
<style>
	.canvas
	{
		position: relative;
		border: 1px solid red;
		margin: 0 auto;
		padding: 20px;
		min-height: 900px;
	}

	.w
	{
		z-index: 4;
		box-shadow: 2px 2px 19px #e0e0e0;
		-o-box-shadow: 2px 2px 19px #e0e0e0;
		-webkit-box-shadow: 2px 2px 19px #e0e0e0;
		-moz-box-shadow: 2px 2px 19px #e0e0e0;
		-moz-border-radius: 0.5em;
		border-radius: 0.5em;
		cursor: move;
		text-align: center;
		margin-bottom: 30px;
	}

	.display-question
	{
		width: 40%;
	}

	.ep
	{
		position: absolute;
		bottom: -8px;
		left: 50%;
		margin-left: -8px;
		width: 16px;
		height: 16px;
		background-color: #C7EEFE;
		cursor: pointer;
	}
</style>
<script src="../../Scripts/jquery.jsPlumb-1.3.4-all.js" type="text/javascript"> </script>
<script src="../../Scripts/flow.js" type="text/javascript"> </script>
<script type="text/javascript">
    var survey = @Html.Raw(serializer.Serialize(this.Model)) ;
</script>
<script>
        
    (function() {
        jsPlumbDemo.initConnections = function() {
            var canvas = $('#canvas');

            var canvasWidth = canvas.outerWidth();
            var canvasHeight = canvas.outerHeight();


            (function($) {
                //Transition Out
                $.fn.makeAbsolute = function(selector) {
                    var $groups = [];

                    function traverse(elems) {
                        var queue = [];
                        $(elems).each(function(i, el) {
                            queue.push(el);
                        });

                        var next = queue.shift();
                        while (next) {
                            if ($(next).children('.group-body').length > 0) {
                                $.each($(next).children('.group-body').children('.w').get().reverse(), function(i, el) {
                                    queue.push(el);
                                });
                            }
                            $groups.push(next);
                            next = queue.shift();
                        }
                    }

                    traverse($('#canvas').children('.w').get().reverse());

                    $.each($groups, function(i, el) {
                        var pos = $(el).position();
                        var width = $(el).outerWidth();
                        var height = $(el).outerHeight();
                        $(el).css('position', 'absolute')
                            .css('min-height', height)
                            .css('min-width', width)
                            .css('left', pos.left)
                            .css('top', pos.top)
                            .css('margin-left', 0);

                    });

                    return $($groups).promise().done(function() {
                    });

                };

            })(jQuery);


            $.when($('#canvas').makeAbsolute('.w')).done(function() {
                $('#canvas').css('padding', 0)
                    .css('min-height', canvasHeight)
                    .css('min-width', canvasWidth);
            });
            @*   
            @if (Model.Connections.Length != 0)
            {
                foreach (var connection in Model.Connections)
                {
                    <text>
                    var connection = jsPlumb.connect({ source: "@connection.Source",target: "@connection.Target", scope:$("#@connection.Source").attr('scope')});
                    var label = connection.getOverlay("label");
                    label.setLabel("@Html.Raw(connection.LabelText)");
                    @if (!string.IsNullOrEmpty(connection.LabelText))
                    {
                        <text>
                        label.canvas.classList.add("initialized");
                        </text>
                    }
                    jsPlumbDemo.labelTexts[connection.id]="@Html.Raw(connection.LabelText)";
                    jsPlumbDemo.labelConditions[connection.id]="@Html.Raw(connection.Condition)";
                    </text>
                }
            }
            *@ ;
            jsPlumb.repaintEverything();
        };
    })();
</script>
<h2>Flow</h2>
<div id="canvas" class="canvas">
    @this.RenderChildren(this.Model.Children)
</div>
@helper RenderChildren(IEnumerable<ICompositeView> model)
{
    int counter = 1;
    foreach (ICompositeView item in model)
    {
        if ((item as QuestionView) != null)
        {
            @RenderQuestion(item as QuestionView)
            counter++;
        }
        else
        {
            @RenderGroup(item as GroupView)
        }
    }
}
@helper RenderQuestion(QuestionView question)
{
    if (!string.IsNullOrEmpty(question.ConditionExpression))
    {
        <script type="text/javascript">
            addCondition('@Html.Raw(question.ConditionExpression)');
        </script>
    }
    <div id="@question.PublicKey" scope="@question.Parent" class="w display-question">
        <div class="question-header">
            <h3>@Html.Raw(question.Title)</h3>
        </div>
        <div class="question-body">
        </div>
        <div class="ep">
        </div>
    </div>
}
@helper RenderGroup(GroupView group)
{
    <div id="@group.PublicKey" scope="@(group.Parent.HasValue ? group.Parent.Value.ToString() : "canvas")"  class="w display-group">
        <div class="group-header">
            <h3>@Html.DisplayFor(modelItem => group.Title)</h3>
            @if (!string.IsNullOrEmpty(group.Description))
            {
                <h5>@group.Description</h5>
            }
        </div>
        <div class="group-body">
            @RenderChildren(group.Children)
        </div>
        <div class="ep">
        </div>
    </div>
}