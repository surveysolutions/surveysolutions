@using System.Web.Script.Serialization
@using Main.Core.View
@using Main.Core.View.Question
@using RavenQuestionnaire.Core.Views.Group
@using RavenQuestionnaire.Core.Views.Questionnaire
@model QuestionnaireView
@{
    ViewBag.Title = "Flow";
    var serializer = new JavaScriptSerializer();
}
<script src="../../Scripts/jquery.jsPlumb-1.3.4-all.js" type="text/javascript"></script>
<script src="../../Scripts/flow.js" type="text/javascript"></script>
<script type="text/javascript">
    var survey = @Html.Raw(serializer.Serialize(Model)) ;
</script>
@*
<script>
    (function () {
        jsPlumbDemo.initConnections = function () {
            @if (Model.Connections.Length != 0)
            {
                foreach (var connection in Model.Connections)
                {
                    <text>
                    var connection = jsPlumb.connect({ source: "@connection.Source",target: "@connection.Target", scope:$("#@connection.Source").attr('scope')});
                    var label = connection.getOverlay("label");
                    label.setLabel("@Html.Raw(connection.LabelText)");
                    @if (!string.IsNullOrEmpty(connection.LabelText))
                    {
                        <text>
                        label.canvas.classList.add("initialized");
                        </text>
                    }
                    jsPlumbDemo.labelTexts[connection.id]="@Html.Raw(connection.LabelText)";
                    jsPlumbDemo.labelConditions[connection.id]="@Html.Raw(connection.Condition)";
                    </text>
                }
            }
            jsPlumb.repaintEverything();
        };
        jsPlumb.bind("contextmenu", function(component, originalEvent) {
                var con = "con_";
                if (component.id.substring(0,con.length) == con) {
                       if ($('#'+component.sourceId).hasClass("group"))
                           return false;
                       
                       var connection = component;
                       $.ajax({
                        type: "POST",
                        url: "@Url.Action("_GetAnswers", "Question")",
                        data: JSON.stringify({ PublicKey:connection.sourceId, TargetPublicKey : connection.targetId, QuestionnaireId: @Model.Id }),
                        contentType: 'application/json, charset=utf-8',
                        statusCode: {
                            200: function(response) {
                                $("#editConnection").html(response);
                                OpenModal();
                            },
                            500: function(response) {
                                $.jGrowl("error on getting answers");
                            }
                        }
                    });
                    originalEvent.preventDefault();
                }
                return false;
            });
    })();
</script>
*@
<h2>Flow</h2>
<div>
   @RenderChildren(Model.Children)
</div>
@helper RenderChildren(IEnumerable<ICompositeView> model)
{
    foreach (var item in model)
    {
        if ((item as QuestionView) != null)
        {
            @RenderQuestion(item as QuestionView);
        }
        else
        {
            @RenderGroup(item as GroupView);
        }
    }
}
@helper RenderQuestion(QuestionView question)
{
    <div class="display-question">
        <div class="question-header">
            <h3>@Html.Raw(question.Title)</h3>
        </div>
        <div class="question-body">
        </div>
    </div>
}
@helper RenderGroup(GroupView group)
{
    <div class="display-group">
        <div class="group-header">
            <h3>@Html.DisplayFor(modelItem => group.Title)</h3>
            @if (!string.IsNullOrEmpty(group.Description))
            {
                <h5>@group.Description</h5>
            }
        </div>
        <div class="group-body">
            @RenderChildren(group.Children)
        </div>
    </div>
}