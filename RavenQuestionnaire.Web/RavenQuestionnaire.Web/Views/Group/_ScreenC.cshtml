@using Questionnaire.Core.Web.Helpers
@using Main.Core.Entities.SubEntities
@using RavenQuestionnaire.Core.Views.Question
@using RavenQuestionnaire.Web.Utils
@model CompleteQuestionnaireViewV
<script type="text/javascript">
    !function ($) {

        $(function () {

            // fix sub nav on scroll
            var $win = $(window)
      , $nav = $('.subnav')
      , navTop = $('.subnav').length && $('.subnav').offset().top - 40
      , isFixed = 0;

            processScroll();

            $win.on('scroll', processScroll);

            function processScroll() {
                var i, scrollTop = $win.scrollTop();
                if (scrollTop >= navTop && !isFixed) {
                    isFixed = 1
                    $nav.addClass('subnav-fixed');
                } else if (scrollTop <= navTop && isFixed) {
                    isFixed = 0
                    $nav.removeClass('subnav-fixed');
                }
            }
        })
    } (window.jQuery);
</script>
<div class="subnav">
    <div class="row-fluid">
        <div class="span9">
            <h2>@Model.CurrentGroup.GroupText</h2>
        </div>
        <div class="span3 progress-container">
            @Html.Partial("ProgressBar", Model.Totals)
        </div>
    </div>
</div>
@RenderGroup(Model.CurrentGroup)
@helper  RenderGroup(CompleteGroupViewV currentGroup)
    {
        if (currentGroup.Propagated == Propagate.Propagated || currentGroup.Propagated == Propagate.AutoPropagated)
        {
            //if (currentGroup.Propagated != Propagate.AutoPropagated)
            { 
    <div class="clearfix">
        <p class="pull-right">
            @RenderAddButton(Model, currentGroup.PublicKey)
            @Html.ValidationMessage("PropagationError")
        </p>
    </div>
            }
    @RenderPropagatebleGroup(currentGroup)
        }
        else
        {
            foreach (var question in currentGroup.Questions)
            {

                using (Ajax.BeginForm("SaveSingleResultC", "CompleteQuestionnaire", new AjaxOptions()
                {
                    InsertionMode = InsertionMode.Replace,
                    UpdateTargetId = Model.CurrentGroup.GetClientId("div"),
                    OnBegin = "ShowOverlay",
                    OnComplete = "HideOverlay",
                    OnFailure = "HideOverlay"
                }))
                {
                    using (Html.BeginCollectionItem("questions", true, question.PublicKey))
                    {
                        Html.RenderPartial("~/Views/Question/_TakeRow.cshtml", question);

                    }
                    using (Html.BeginCollectionItem("settings", true, question.PublicKey))
                    {
    @Html.Hidden("ParentGroupPublicKey", Model.CurrentGroup.PublicKey)
    @Html.Hidden("QuestionnaireId", Model.Id)
                    }
                }
            }
        }
        foreach (var @group in currentGroup.Groups)
        {
    <text>@RenderGroup(@group)</text>
        }
}
@helper  RenderPropagatebleGroup(CompleteGroupViewV currentGroup)
    {
        var blocksPerRow = 2;
        var index = 0;
        for (int i = 0; i < Math.Ceiling(currentGroup.PropagatedGroupsCount / (double)blocksPerRow); i++)
        {
            var spanClass   = "span" + (12 / blocksPerRow).ToString();
    <div class="row-fluid">
        @for (int j = 0; (j < blocksPerRow) && (index<currentGroup.PropagatedGroupsCount); j++)
        {
            var pgroup = currentGroup.PropagatedGroups[index];
             var first = currentGroup.PropagatedQuestions.First();
                        if (currentGroup.PropogationPublicKeys[index] == ViewBag.PropogationGroupKey)
            {
            <text>
            <script type="text/javascript">
                $('#@currentGroup.PropogationPublicKeys[index]').modal('show');
            </script>
            </text>
            }
            <div class="@spanClass">
                <div class="well">
                    @RenderQuestion(first.Questions[index], currentGroup.PublicKey, pgroup.PropogationKey, new QuestionRenderOptions { isHorizontal = false })
                    <div class="form-actions">
                        <a class="btn btn-primary" data-toggle="modal" href="#@currentGroup.PropogationPublicKeys[index]">
                            <i class="icon-pencil icon-white"></i>Edit</a>
                        @if (!pgroup.AutoPropagate)
                        {
                            @RenderDeleteButton(Model, currentGroup.PublicKey, currentGroup.PropogationPublicKeys[index])
                        }
                    </div>
                    <div class="modal hide" id="@currentGroup.PropogationPublicKeys[index]">
                        <div class="modal-header">
                            <a class="close" data-dismiss="modal">&times;</a>
                            <h3>@pgroup.FirstAnswer</h3>
                        </div>
                        <div class="modal-body" style="height: 420px; overflow-y: scroll">
                            @foreach (var pquestion in currentGroup.PropagatedQuestions.Skip(1))
                            {
                                @RenderQuestion(pquestion.Questions[index], currentGroup.PublicKey, currentGroup.PropogationPublicKeys[index], new QuestionRenderOptions { isHorizontal = true })
                            }
                        </div>
                    </div>
                </div>
            </div>
            {
                index++;
            }
        }
    </div>
        }
}
@helper RenderQuestion(CompleteQuestionView question, Guid groupPublicKey, Guid propogationPublicKey, QuestionRenderOptions qOptions)
    {
        var options = new AjaxOptions()
        {
            InsertionMode = InsertionMode.Replace,
            UpdateTargetId = Model.CurrentGroup.GetClientId("div"),
            OnBegin = "ShowOverlay",
            OnComplete = "HideOverlay",
            OnFailure = "HideOverlay",
        };
        using (Ajax.BeginForm("SaveSingleResultC", "CompleteQuestionnaire", null, options, new { autocomplete = "off", @class = qOptions.isHorizontal ? "form-horizontal" : "" }))
        {
    <div class="control-group">
        <label class="control-label">@question.Title</label>
        <div class="controls">
            @using (Html.BeginCollectionItem("questions", true, question.PublicKey + "_" + propogationPublicKey))
            {
                @Html.Hidden("PublicKey", question.PublicKey)
                ViewBag.EnabledRadioBoxSettings = new Dictionary<string, object>();
                if (!question.Enabled)
                {
                    ViewBag.EnabledRadioBoxSettings.Add("Disabled", true);
                }
                Html.RenderPartial(string.Format("~/Views/Answer/AnswerListView/_{0}.cshtml", question.QuestionType), question);
                @Html.BootstrapValidationMessage(string.Format("questions[{0}_{1}].AnswerValue", question.PublicKey, propogationPublicKey))
            }
            @using (Html.BeginCollectionItem("settings", true, groupPublicKey + "_" + propogationPublicKey))
            {
                @Html.Hidden("ParentGroupPublicKey", Model.CurrentGroup.PublicKey)
                @Html.Hidden("QuestionnaireId", Model.Id)
                @Html.Hidden("PropogationPublicKey", propogationPublicKey)
            }
        </div>
    </div>
        }
}
@helper RenderAddButton(CompleteQuestionnaireViewV model, Guid currentGroupPublicKey)
    {
        var addAjaxOptions = new AjaxOptions { InsertionMode = InsertionMode.Replace, UpdateTargetId = Model.CurrentGroup.GetClientId("div"), OnBegin = "ShowOverlay", OnComplete = "HideOverlay", OnFailure = "HideOverlay" };
        var rparams = new { publicKey = currentGroupPublicKey, questionnaireId = Model.Id, parentGroupPublicKey = Model.CurrentGroup.PublicKey, salt = (new Random()).NextDouble() };
    @Ajax.ActionLinkWithIcon("Add", "PropagateGroupC", "Group", rparams, addAjaxOptions, new { @class = "btn btn-success" }, "icon-plus icon-white")
}
@helper RenderDeleteButton(CompleteQuestionnaireViewV model, Guid currentGroupPublicKey, Guid pKey)
    {
        var removeAjaxOptions = new AjaxOptions { InsertionMode = InsertionMode.Replace, UpdateTargetId = Model.CurrentGroup.GetClientId("div"), OnBegin = "ShowOverlay", OnComplete = "HideOverlay", OnFailure = "HideOverlay" };
        var rparams = new { propagationKey = pKey, publicKey = currentGroupPublicKey, questionnaireId = Model.Id, parentGroupPublicKey = Model.CurrentGroup.PublicKey, salt = (new Random()).NextDouble() };
    @Ajax.ActionLinkWithIcon("Remove", "DeletePropagatedGroupC", "Group", rparams, removeAjaxOptions, new { @class = "btn btn-danger" }, "icon-trash icon-white")
}
