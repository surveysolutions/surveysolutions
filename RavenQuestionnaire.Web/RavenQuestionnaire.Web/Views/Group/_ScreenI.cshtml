@using Questionnaire.Core.Web.Helpers
@using RavenQuestionnaire.Core.Entities.SubEntities
@using RavenQuestionnaire.Core.Views.CompleteQuestionnaire.Vertical
@using RavenQuestionnaire.Core.Views.Question
@using RavenQuestionnaire.Web.Utils
@model CompleteQuestionnaireViewV
<script type="text/javascript">
    !function ($) {

        $(function () {

            // fix sub nav on scroll
            var $win = $(/*"#content"*/document), $nav = $('.subnav'), navTop = $('.subnav').length && $('.subnav').offset().top - 40, isFixed = 0;

            processScroll();

            $win.on('scroll', processScroll);

            function processScroll() {
                var i, scrollTop = $win.scrollTop();
                if (scrollTop >= navTop && !isFixed) {
                    isFixed = 1
                    $nav.addClass('subnav-fixed');
                    /*$('#sidebar').css('top', '40px');*/
                } else if (scrollTop <= navTop && isFixed) {
                    isFixed = 0
                    $nav.removeClass('subnav-fixed');
                    /*$('#sidebar').css('top', '0px');*/
                }
            }

            if (typeof document.body.style.webkitOverflowScrolling === "undefined") {
                var xScrollers = document.getElementsByClassName("scroll-x");
                for (var i = 0; i < xScrollers.length; i++)
                    new iScroll(xScrollers[i], { vScroll: false });
            }

            $('input[type="text"]').click(function (e) {
                $(this).focus(); e.stopPropagation();
            });
            $('input[type="number"]').click(function (e) {
                $(this).focus(); e.stopPropagation();
            });
            
        });
    } (window.jQuery);
</script>
<div class="subnav">
    <div class="row-fluid">
        <div class="span9">
            <h3>@Model.CurrentGroup.GroupText</h3>
        </div>
        <div class="span3" style="padding-top: 4px;">
            @Html.Partial("ProgressBar", Model.Totals)
        </div>
    </div>
</div>
@RenderGroup(Model.CurrentGroup)
@RenderNextPrevGroupButton(Model)
<script type="text/javascript">
    $(document).ready(function () {
        adjust();
    });
    $(window).resize(function () {
        adjust();
    });
    function adjust() {
        $('#headerTableWrap').css("width", $('#contentTableWrap').css('width'));
    }
</script>
@helper  RenderGroup(CompleteGroupViewV currentGroup)
    {
        if (currentGroup.Propagated != Propagate.None)
        {
            if (currentGroup.Propagated != Propagate.AutoPropagated)
            { 
    <div class="clearfix">
        <p class="pull-right">
            @Html.ValidationMessage("PropagationError")
            @RenderAddButton(Model, currentGroup.PublicKey)
        </p>
    </div>
            }
            if (currentGroup.PropagatedGroupsCount > 0)
            {
    <div class="col-wrap1">
        <div class="col-wrap2">
            <div class="col1">
                <div style="overflow: hidden">
                    <div id="headerTableWrap">
                        @RenderPropagatebleGroup(currentGroup)
                    </div>
                </div>
            </div>
            <div class="col2">
                <div style="overflow: hidden; margin-right: 200px;">
                    <div id="contentTableWrap" style="margin-left: -204px;" class="scroll-x">
                        @RenderPropagatebleGroup(currentGroup)
                    </div>
                </div>
            </div>
            <div class="clear">
            </div>
        </div>
    </div>
            }

        }
        else
        {
    <text> @RenderSimpleGroup(currentGroup)</text>
        }
}
@helper  RenderSimpleGroup(CompleteGroupViewV simpleGroup)
    {
        /*if (!string.IsNullOrWhiteSpace(simpleGroup.GroupText))
        {
            <h3>@simpleGroup.GroupText</h3>
        }*/
        foreach (var question in simpleGroup.Questions)
        {
    <text>@RenderSimpleQuestion(question)</text>
        }
        foreach (var @group in simpleGroup.Groups)
        {
    <div class="group">
        @RenderGroup(@group)
    </div>
        }
}
@helper  RenderPropagatebleGroup(CompleteGroupViewV currentGroup)
    {
    
    <table class="table  table-striped table-bordered" style="width: auto;">
        <thead>
        </thead>
        @foreach (var pquestion in currentGroup.PropagatedQuestions)
        {
            <tr>
                <th>
                    <div style="width: 184px;">@pquestion.QuestionText</div>
                </th>
                @for (int index = 0; index < pquestion.Questions.Count; index++)
                {
                    var question = pquestion.Questions[index];
                    <td>
                        @RenderQuestion(question, currentGroup.PublicKey, currentGroup.PropogationPublicKeys[index])
                    </td>
                }
            </tr>
        }
        @if (!currentGroup.AutoPropagate.Any(a => a))
        {
            <tr>
                <td>
                </td>
                @for (int i = 0; i < currentGroup.PropogationPublicKeys.Count; i++)
                {
                    <td>
                        @if (!currentGroup.AutoPropagate[i])
                        {
                            <text>@RenderDeleteButton(Model, currentGroup.PublicKey, currentGroup.PropogationPublicKeys[i])</text>
                        }
                    </td>
                }
            </tr>
        }
    </table>
}
@helper RenderSimpleQuestion(CompleteQuestionView question)
    {
    var ajaxOptions = new AjaxOptions
                          {
                              InsertionMode = InsertionMode.Replace,
                              UpdateTargetId = Model.CurrentGroup.GetClientId("div"),
                              OnBegin = "ShowOverlay",
                              OnComplete = "HideOverlay",
                              OnFailure = "HideOverlay"
                          };
    using (Ajax.BeginForm("SaveSingleResultI", "CompleteQuestionnaire", ajaxOptions))
    {
        using (Html.BeginCollectionItem("questions", true, question.PublicKey))
        {
            Html.RenderPartial("~/Views/Question/_TakeRow.cshtml", question);
        }
        using (Html.BeginCollectionItem("settings", true, question.PublicKey))
        {
            @Html.Hidden("ParentGroupPublicKey", Model.CurrentGroup.PublicKey)
            @Html.Hidden("QuestionnaireId", Model.Id)
        }
    }
}
@helper RenderQuestion(CompleteQuestionView question, Guid groupKey, Guid propagationKey)
    {
        var ajaxOptions = new AjaxOptions
                              {
                                  InsertionMode = InsertionMode.Replace,
                                  UpdateTargetId = Model.CurrentGroup.GetClientId("div"),
                                  OnBegin = "ShowOverlay",
                                  OnComplete = "HideOverlay",
                                  OnFailure = "HideOverlay"
                              };
        using (Ajax.BeginForm("SaveSingleResultI", "CompleteQuestionnaire", null, ajaxOptions, new { autocomplete = "off" }))
        {
            using (Html.BeginCollectionItem("questions", true, question.PublicKey + "_" + propagationKey))
            {
                @Html.Hidden("PublicKey", question.PublicKey)
                ViewBag.EnabledRadioBoxSettings = new Dictionary<string, object>();
                if (!question.Enabled)
                {
                    ViewBag.EnabledRadioBoxSettings.Add("Disabled", true);
                }

                Html.RenderPartial(string.Format("~/Views/Answer/AnswerListView/_{0}.cshtml", question.QuestionType), question);
    @Html.BootstrapValidationMessage(string.Format("questions[{0}_{1}].AnswerValue", question.PublicKey, propagationKey))
            }
            using (Html.BeginCollectionItem("settings", true, groupKey + "_" + propagationKey))
            {
    @Html.Hidden("ParentGroupPublicKey", Model.CurrentGroup.PublicKey)
    @Html.Hidden("QuestionnaireId", Model.Id)
    @Html.Hidden("PropogationPublicKey", propagationKey)
            }
        }
}
@helper RenderAddButton(CompleteQuestionnaireViewV model, Guid currentGroupPublicKey)
    {
        var addAjaxOptions = new AjaxOptions { InsertionMode = InsertionMode.Replace, UpdateTargetId = Model.CurrentGroup.GetClientId("div"), OnBegin = "ShowOverlay", OnComplete = "HideOverlay", OnFailure = "HideOverlay" };
        var rparams = new { publicKey = currentGroupPublicKey, questionnaireId = Model.Id, parentGroupPublicKey = Model.CurrentGroup.PublicKey, salt = (new Random()).NextDouble() };
    @Ajax.ActionLinkWithIcon("Add", "PropagateGroupI", "Group", rparams, addAjaxOptions, new { @class = "btn btn-success" }, "icon-plus icon-white")
}
@helper RenderDeleteButton(CompleteQuestionnaireViewV model, Guid currentGroupPublicKey, Guid pKey)
    {
        var removeAjaxOptions = new AjaxOptions { InsertionMode = InsertionMode.Replace, UpdateTargetId = Model.CurrentGroup.GetClientId("div"), OnBegin = "ShowOverlay", OnComplete = "HideOverlay", OnFailure = "HideOverlay" };
        var rparams = new { propagationKey = pKey, publicKey = currentGroupPublicKey, questionnaireId = Model.Id, parentGroupPublicKey = Model.CurrentGroup.PublicKey, salt = (new Random()).NextDouble() };
    @Ajax.ActionLinkWithIcon("Remove", "DeletePropagatedGroupI", "Group", rparams, removeAjaxOptions, new { @class = "btn btn-danger" }, "icon-trash icon-white")
}
@helper RenderNextPrevGroupButton(CompleteQuestionnaireViewV model)
    {
        int prevSpan = 0;
        int curSpan = 12;
        int nexSpan = 0;
        CompleteGroupHeaders prev = null;
        CompleteGroupHeaders curr = null;
        CompleteGroupHeaders next = null;

        foreach (var gh in Model.Groups)
        {
            if (!gh.IsCurrent && curr == null)
            {
                prevSpan = 4;
                prev = gh;
            }
            else if (gh.IsCurrent)
            {
                curSpan -= prevSpan;
                curr = gh;
            }
            else
            {
                next = gh;
                nexSpan = 4;
                curSpan -= nexSpan;
                break;
            }
        }
@*    <div class="row-fluid show-grid">
        @if (prev != null)
        {
            <div class="span@(prevSpan)">
                <p class="center">
                    @Html.ActionLink("Prev Group", "QuestionI", "CompleteQuestionnaire", new { id = Model.Id, group = prev.PublicKey }, new { @class = "btn small " })
                </p>
            </div>
        }
        @if (curr != null)
        {
            <div class="span@(curSpan)">
                <p class="center">@curr.GroupText</p>
            </div>
        }
        @if (next != null)
        {
            <div class="span@(nexSpan)">
                <p class="center">
                    @Html.ActionLink("Next Group", "QuestionI", "CompleteQuestionnaire", new { id = Model.Id, group = next.PublicKey }, new { @class = "btn small btn-primary" })
                </p>
            </div>
        }
    </div>*@
        
    <table class="table table-striped table-bordered table-condensed" id="navTable" style="margin-top: 10px;">
        <tbody>
            <tr style="text-align: center">
                @if (prev != null)
                {
                    <td style="text-align: center">
                        @Html.ActionLink("Prev Group", "QuestionI", "CompleteQuestionnaire", new { id = Model.Id, group = prev.PublicKey }, new { @class = "btn small " })
                    </td>
                }
                @if (curr != null)
                {
                    <td style="text-align: center">@curr.GroupText
                    </td>
                }
                @if (next != null)
                {
                    <td style="text-align: center">
                        @Html.ActionLink("Next Group", "QuestionI", "CompleteQuestionnaire", new { id = Model.Id, group = next.PublicKey }, new { @class = "btn small btn-primary" })
                    </td>
                }
            </tr>
        </tbody>
    </table>
        
@*<div class="group" style="text-align: center">
        <div class="row-fluid">
            <div class="span2">
                @if (prev != null)
                {
                    @Html.ActionLink("Prev Group", "QuestionI", "CompleteQuestionnaire", new { id = Model.Id, group = prev.PublicKey }, new { @class = "btn small " })
                }
                &nbsp;
            </div>
            <div class="span7">
                @if (curr != null)
                {
                    @curr.GroupText
                }
            </div>
            <div class="span2">
                @if (next != null)
                {
                    @Html.ActionLink("Next Group", "QuestionI", "CompleteQuestionnaire", new { id = Model.Id, group = next.PublicKey }, new { @class = "btn small btn-primary" })
                }
                &nbsp;
            </div>
        </div>
    </div>*@
    
}
