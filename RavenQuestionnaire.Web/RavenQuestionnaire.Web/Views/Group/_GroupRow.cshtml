@using Questionnaire.Core.Web.Helpers
@using Main.Core.Entities.SubEntities
@using RavenQuestionnaire.Core.Views.Group

@model GroupView
@{ var currentRowId = ClientIdHelper.GetUniqueIdByEntityName(EntityNames.Group, Model.PublicKey.ToString());
   var allQuestions = "divAllQuestions" + Model.PublicKey;
   var allGroups = "divAllGroups" + Model.PublicKey;
   var hideFunctionName = "HideCreateQuestionForm" + Model.PublicKey.ToString().Replace('-', '_');
}
<script>
    function @hideFunctionName (content) {
        //      $('#addNewQuestion').modal('hide');
        if ($(content.responseText).children('div#divCreateForm form').length == 0) {
            $('#@allQuestions').html(content.responseText);
            $('#addNewQuestion').modal('hide');
        }
    }
</script>
<div id="group-@(Model.PublicKey)" class="display-group">
<input type="checkbox" id="@Model.PublicKey.ToString()" style="position: absolute; z-index: -999; right: 50px;"/>
    <div class="group-header"  data-toggle="collapse" data-target=".group-body-@(Model.PublicKey)" >
        <h3>@Html.DisplayFor(modelItem => Model.Title)            
                @if (!string.IsNullOrEmpty(Model.Description))
                {
                    <div>Description: @Model.Description</div>
                }            
        </h3>
        <div class="btn-group">
            @Html.ActionLink("Add Question", "Create", "Question", new { id = Model.QuestionnaireKey, groupPublicKey = Model.PublicKey }, new { @class = "btn btn-success btn-mini" })
            @*@if (@Model.Propagated == Propagate.None)
            {
                <text>@Html.ActionLink("Add Group", "Create", "Group", new { id = Model.QuestionnaireKey, parentGroup = Model.PublicKey }, new { @class = "btn btn-success btn-mini" })</text>
            }*@
            @Html.ActionLink("Add Group", "Create", "Group", new { id = Model.QuestionnaireKey, parentGroup = Model.PublicKey }, new { @class = "btn btn-success btn-mini" })
            @Html.ActionLink("Edit", "Edit", "Group", new { publicKey = Model.PublicKey, questionnaireId = Model.QuestionnaireKey }, new { @class = "btn btn-success btn-mini" })
            @Html.ActionLink("Delete", "Delete", "Group", new { publicKey = Model.PublicKey, parentPublicKey = Model.Parent, questionnaireId = Model.QuestionnaireKey }, new { @class = "btn btn-success btn-mini" })
            @Html.ActionLink("Move", "Move", "Group", new { PublicKeyGroup = Model.PublicKey, QuestionnaireId = Model.QuestionnaireKey }, new { @class = "btn btn-success btn-mini" })            
        </div>
    </div>
    <div class="group-body group-body-@(Model.PublicKey) collapse in">
    <div class="alert alert-success">
            <strong>@Model.PublicKey</strong>
        </div>
        @if (!string.IsNullOrEmpty(Model.ConditionExpression))
        {
            <div class="alert alert-success">
               <strong>Condition:</strong> @Model.ConditionExpression
            </div>
        }
    <div>
        @{ Html.RenderPartial("~/Views/Questionnaire/_RenderChildren.cshtml", Model.Children); }
    </div>
    </div>
</div>
