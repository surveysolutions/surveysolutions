@using Questionnaire.Core.Web.Helpers
@using RavenQuestionnaire.Core.Entities.SubEntities
@using RavenQuestionnaire.Core.Views.CompleteQuestionnaire.Vertical
@using RavenQuestionnaire.Web.Utils
@model CompleteQuestionnaireViewV

<script type="text/javascript">
    !function ($) {

        $(function() {

            // fix sub nav on scroll
            var $win = $(window)
      , $nav = $('.subnav')
      , navTop = $('.subnav').length && $('.subnav').offset().top - 40
      , isFixed = 0;

            processScroll();

            $win.on('scroll', processScroll);

            function processScroll() {
                var i, scrollTop = $win.scrollTop();
                if (scrollTop >= navTop && !isFixed) {
                    isFixed = 1
                    $nav.addClass('subnav-fixed');
                } else if (scrollTop <= navTop && isFixed) {
                    isFixed = 0
                    $nav.removeClass('subnav-fixed');
                }
            }
        });
    } (window.jQuery);
</script>
<div class="subnav">
   <h2>@Model.CurrentGroup.GroupText</h2>
</div>
@RenderGroup(Model.CurrentGroup)
<script type="text/javascript">
    $(document).ready(function () {
        $('#headerTableWrap').css("width", $('#contentTableWrap').css('width'));
    })
</script>
@helper  RenderGroup(CompleteGroupViewV currentGroup)
    {
        if (currentGroup.Propagated == Propagate.Propagated)
        {
            if (currentGroup.Propagated != Propagate.AutoPropagated)
            { 
    <div class="clearfix">
        <p class="pull-right">
            @RenderAddButton(Model, currentGroup.PublicKey)
            @Html.ValidationMessage("PropagationError")
        </p>
    </div>
            }
    <div class="col-wrap1">
        <div class="col-wrap2">
            <div class="col1">
                <div style="overflow: hidden">
                    <div id="headerTableWrap">
                        @RenderPropagatebleGroup(currentGroup)
                    </div>
                </div>
            </div>
            <div class="col2">
                <div style="overflow: hidden; overflow-x: scroll; margin-right: 200px;">
                    <div id="contentTableWrap" style="margin-left: -204px;">
                        @RenderPropagatebleGroup(currentGroup)
                    </div>
                </div>
            </div>
            <div class="clear">
            </div>
        </div>
    </div>
        }
        else
        {
            foreach (var question in currentGroup.Questions)
            {

                using (Ajax.BeginForm("SaveSingleResult", "CompleteQuestionnaire", new AjaxOptions() { InsertionMode = InsertionMode.Replace, UpdateTargetId = Model.CurrentGroup.GetClientId("div") }))
                {
                    using (Html.BeginCollectionItem("questions", true, question.PublicKey))
                    {
                        Html.RenderPartial("~/Views/Question/_TakeRow.cshtml", question);

                    }
                    using (Html.BeginCollectionItem("settings", true, question.PublicKey))
                    {
    @Html.Hidden("ParentGroupPublicKey", Model.CurrentGroup.PublicKey)
    @Html.Hidden("QuestionnaireId", Model.Id)
                    }
                }
            }
        }
        foreach (var @group in currentGroup.Groups)
        {
    <text>@RenderGroup(@group)</text>
        }
}
@helper  RenderPropagatebleGroup(CompleteGroupViewV currentGroup)
    {
        
    <table class="table  table-striped table-bordered" style="width: auto;">
        <thead>
        </thead>
        @foreach (var pquestion in currentGroup.PropagatedQuestions)
        {
            <tr>
                <th>
                    <div style="width: 184px;">@pquestion.QuestionText</div>
                </th>
                @for (int index = 0; index < pquestion.Questions.Count; index++)
                {
                    var question = pquestion.Questions[index];
                    <td>
                        @using (Ajax.BeginForm("SaveSingleResultV", "CompleteQuestionnaire", null, new AjaxOptions()
                        {
                            InsertionMode = InsertionMode.Replace,
                            UpdateTargetId = Model.CurrentGroup.GetClientId("div")
                        }, new { autocomplete = "off" }))
                        {
                            using (Html.BeginCollectionItem("questions", true, question.PublicKey + "_" + currentGroup.PropogationPublicKeys[index]))
                            {
                            @Html.Hidden("PublicKey", question.PublicKey)
                                ViewBag.EnabledRadioBoxSettings = new Dictionary<string, object>();
                                if (!question.Enabled)
                                {
                                    ViewBag.EnabledRadioBoxSettings.Add("Disabled", true);
                                }

                                Html.RenderPartial(string.Format("~/Views/Answer/AnswerListView/_{0}.cshtml", question.QuestionType), question);

                            @Html.ValidationMessage("AnswerValue")
                            }
                            using (Html.BeginCollectionItem("settings", true, currentGroup.PublicKey + "_" + currentGroup.PropogationPublicKeys[index]))
                            {
                            @Html.Hidden("ParentGroupPublicKey", Model.CurrentGroup.PublicKey)
                            @Html.Hidden("QuestionnaireId", Model.Id)
                            @Html.Hidden("PropogationPublicKey", currentGroup.PropogationPublicKeys[index])
                            }
                        }
                    </td>
                }
            </tr>
            
        }
        @if (!currentGroup.AutoPropagate)
        {
            <tr>
                <td>
                </td>
                @foreach (var pKey in currentGroup.PropogationPublicKeys)
                {
                    <td>
                        @RenderDeleteButton(Model, currentGroup.PublicKey, pKey)
                    </td>
                }
            </tr>
        }
    </table>
}
@helper RenderAddButton(CompleteQuestionnaireViewV model, Guid currentGroupPublicKey)
    {
        var addAjaxOptions = new AjaxOptions { InsertionMode = InsertionMode.Replace, UpdateTargetId = Model.CurrentGroup.GetClientId("div"), OnBegin = "ShowOverlay", OnComplete = "HideOverlay", OnFailure = "HideOverlay" };
        var rparams = new { publicKey = currentGroupPublicKey, questionnaireId = Model.Id, parentGroupPublicKey = Model.CurrentGroup.PublicKey };
    @Ajax.ActionLinkWithIcon("Add", "PropagateGroupV", "Group", rparams, addAjaxOptions, new { @class = "btn btn-success" }, "icon-plus icon-white")
}
@helper RenderDeleteButton(CompleteQuestionnaireViewV model, Guid currentGroupPublicKey, Guid pKey)
    {
        var removeAjaxOptions = new AjaxOptions { InsertionMode = InsertionMode.Replace, UpdateTargetId = Model.CurrentGroup.GetClientId("div"), OnBegin = "ShowOverlay", OnComplete = "HideOverlay", OnFailure = "HideOverlay" };
        var rparams = new { propagationKey = pKey, publicKey = currentGroupPublicKey, questionnaireId = Model.Id, parentGroupPublicKey = Model.CurrentGroup.PublicKey };
    @Ajax.ActionLinkWithIcon("Remove", "DeletePropagatedGroupV", "Group", rparams, removeAjaxOptions, new { @class = "btn btn-danger" }, "icon-trash icon-white")
}
