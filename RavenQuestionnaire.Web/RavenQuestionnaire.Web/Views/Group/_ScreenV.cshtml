@using Questionnaire.Core.Web.Helpers
@using RavenQuestionnaire.Core.Entities.SubEntities
@using RavenQuestionnaire.Core.Views.CompleteQuestionnaire.Vertical
@using RavenQuestionnaire.Core.Views.Question
@model CompleteQuestionnaireViewV
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style type="text/css">
    .col1 td
    {
        visibility: hidden;
    }
    .col2 th
    {
        visibility: hidden;
    }
    .col-wrap1
    {
        width: 100%;
    }
    
    .col-wrap2
    {
        width: 100%;
        margin-right: -100%; 
        position: relative;
        left: 200px;
    }
    
    .col1
    {
        float: left;
        width: 200px;
        margin-right: -100%;
        position: relative;
        left: -200px;
    }
    
    .clear
    {
        clear: both;
        font-size: 0;
        overflow: hidden; 
    }
</style>

@RenderGroup(Model.CurrentGroup)
@helper  RenderGroup(CompleteGroupViewV currentGroup)
    {
        if (currentGroup.Propagated == Propagate.Propagated)
        {
            if (currentGroup.Propagated != Propagate.AutoPropagated)
            { 
                <div class="clearfix">
                <p class="pull-right">
    @Ajax.ActionLink("Add", "PropagateGroupV", "Group", new
{
    publicKey = currentGroup.PublicKey,
    questionnaireId = Model.Id,
    parentGroupPublicKey = Model.CurrentGroup.PublicKey
},
                    new AjaxOptions() { InsertionMode = InsertionMode.Replace, UpdateTargetId = Model.CurrentGroup.GetClientId("div") },
                new { @class = "btn btn-success" })
    @Html.ValidationMessage("PropagationError")
    </p></div>
            }
    <div class="col-wrap1">
        <div class="col-wrap2">
            <div class="col1">
                <div style="overflow: hidden">
                    @RenderPropagatebleGroup(currentGroup)
                </div>
            </div>
            <div class="col2">
                <div style="overflow: hidden; overflow-x: scroll; margin-right: 200px;">
                    <div style="margin-left: -204px;">
                        @RenderPropagatebleGroup(currentGroup)
                    </div>
                </div>
            </div>
            <div class="clear">
            </div>
        </div>
    </div>
        

        }
        else
        {
            foreach (var question in currentGroup.Questions)
            {

                using (Ajax.BeginForm("SaveSingleResult", "CompleteQuestionnaire", new AjaxOptions() { InsertionMode = InsertionMode.Replace, UpdateTargetId = Model.CurrentGroup.GetClientId("div") }))
                {
                    using (Html.BeginCollectionItem("questions", true, question.PublicKey))
                    {
                        Html.RenderPartial("~/Views/Question/_TakeRow.cshtml", question);

                    }
                    using (Html.BeginCollectionItem("settings", true, question.PublicKey))
                    {
    @Html.Hidden("ParentGroupPublicKey", Model.CurrentGroup.PublicKey)
    @Html.Hidden("QuestionnaireId", Model.Id)
                    }
                }
            }
        }
        foreach (var @group in currentGroup.Groups)
        {
    <text>@RenderGroup(@group)</text>
        }
}
@helper  RenderPropagatebleGroup(CompleteGroupViewV currentGroup)
    {
    <table class="table  table-striped table-bordered" style="width: auto;">
        <thead>
        </thead>
        @foreach (var pquestion in currentGroup.PropagatedQuestions)
        {
            <tr>
                <th>
                    <div style="width: 184px;">@pquestion.QuestionText</div>
                </th>
                @for (int index = 0; index < pquestion.Questions.Count; index++)
                {
                    var question = pquestion.Questions[index];
                    <td>
                        @using (Ajax.BeginForm("SaveSingleResultV", "CompleteQuestionnaire", null, new AjaxOptions()
                        {
                            InsertionMode = InsertionMode.Replace,
                            UpdateTargetId = Model.CurrentGroup.GetClientId("div")
                        }, new { autocomplete = "off" }))
                        {
                            using (Html.BeginCollectionItem("questions", true, question.PublicKey + "_" + currentGroup.PropogationPublicKeys[index]))
                            {
                            @Html.Hidden("PublicKey", question.PublicKey)
                                ViewBag.EnabledRadioBoxSettings = new Dictionary<string, object>();
                                if (!question.Enabled)
                                {
                                    ViewBag.EnabledRadioBoxSettings.Add("Disabled", true);
                                }

                                Html.RenderPartial(string.Format("~/Views/Answer/AnswerListView/_{0}.cshtml", question.QuestionType), question);

                            @Html.ValidationMessage("AnswerValue")
                            }
                            using (Html.BeginCollectionItem("settings", true, currentGroup.PublicKey + "_" + currentGroup.PropogationPublicKeys[index]))
                            {
                            @Html.Hidden("ParentGroupPublicKey", Model.CurrentGroup.PublicKey)
                            @Html.Hidden("QuestionnaireId", Model.Id)
                            @Html.Hidden("PropogationPublicKey", currentGroup.PropogationPublicKeys[index])
                            }
                        }
                    </td>
                }
            </tr>
            
        }
        @if (!currentGroup.AutoPropagate)
        {
            <tr>
                <td>
                </td>
                @foreach (var pKey in currentGroup.PropogationPublicKeys)
                {
                    <td>
                        @Ajax.ActionLink("Remove", "DeletePropagatedGroupV", "Group", new { propagationKey = pKey, publicKey = currentGroup.PublicKey, questionnaireId = Model.Id, parentGroupPublicKey = Model.CurrentGroup.PublicKey },
                                                                new AjaxOptions() { InsertionMode = InsertionMode.Replace, UpdateTargetId = Model.CurrentGroup.GetClientId("div") },
                                                                new { @class = "btn btn-danger" })
                    </td>
                }
            </tr>
        }
    </table>
}