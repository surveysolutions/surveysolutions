@using Questionnaire.Core.Web.Helpers
@using RavenQuestionnaire.Core.Views.Question
@using RavenQuestionnaire.Web.Utils
@model QuestionView
@{var hideFunctionName = Model.GroupPublicKey.HasValue ? "HideCreateQuestionForm" + Model.GroupPublicKey.ToString().Replace('-', '_') : "HideCreateQuestionForm";
  if (ViewBag.Images != null)
  {
      var images = ViewBag.Images as SelectList;
      this.ViewBag.Images = images;
  }
}
@using (Ajax.BeginForm("Save", "Question",
                                         new AjaxOptions
                                             {
                                                 UpdateTargetId = "addNewQuestion",
                                                 OnComplete = @hideFunctionName
                                             }))
{
    <div id="divCreateForm" class="modal open form-horizontal">
        <div class="modal-header">
            <a class="close" data-dismiss="modal">&times;</a>
            <h3>Edit question form</h3>
        </div>
        <div class="modal-body">
            @using (Html.BeginCollectionItem("question", Model.PublicKey))
            {
                @Html.BootstrapValidationSummary("")
                <div class="control-group">
                    @Html.LabelFor(model => model.QuestionText, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(model => model.QuestionText)
                        @Html.ValidationMessageFor(model => model.QuestionText)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(model => model.StataExportCaption, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(model => model.StataExportCaption)
                        @Html.ValidationMessageFor(model => model.StataExportCaption)
                    </div>
                </div>
                 
                <div class="control-group">
                    <label class="control-label">Type</label>
                    <div class="controls">
                        @Html.EnumDropDownListFor(model => Model.QuestionType)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(model => model.ConditionExpression, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(model => Model.ConditionExpression)
                        @Html.ValidationMessageFor(model => model.ConditionExpression)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(model => model.Instructions, new { @class = "control-label" })
                    <div class="controls">
                        @Html.TextAreaFor(model => model.Instructions)
                        @Html.ValidationMessageFor(model => model.Instructions)
                    </div>
                </div>
                if (Model.PublicKey != Guid.Empty)
                {
                @Html.HiddenFor(model => model.PublicKey)
                }
                @Html.HiddenFor(model => model.GroupPublicKey)
                @Html.HiddenFor(model => model.QuestionnaireId)

                Html.RenderPartial("~/Views/Answer/_EditAnswers.cshtml", Model);

            }
        </div>
        <div class="modal-footer">
            <input type="submit" value="Save" class="btn btn-primary" />
        </div>
    </div>
}
