@using Main.Core.Entities.SubEntities
@using Core.Supervisor.Views.Status
@using ClientDependency.Core.Mvc
@model StatusView
@{
    this.ViewBag.Title = "Statuses";
    var statuses = SurveyStatus.GetAllStatuses().Where(s => s.PublicId != SurveyStatus.Unknown.PublicId).Where(s => s.PublicId != SurveyStatus.Unassign.PublicId).Aggregate("{", (current, status) => current + string.Format("'{0}':'{1}',", status.PublicId, status.Name));
    statuses = statuses.Substring(0, statuses.Length - 1);
    statuses += "}";
}
@{ Html.RequiresJs("plotSettings.js", "Scripts", 70); }
<script type="text/javascript">
    var sortData = undefined;
    var pageSize = @Model.PageSize;
    var statusFilter = '@Model.Status.PublicId';
    
    var chart;
    $(document).ready(function() {
        document.filterUser = "";
        $('#statusFilter').editable().on('save', function(e, params) {
            statusFilter = params.newValue;
            sortData = [{ Field: "Title", Direction: "Asc" }];
            getTablePage(sortData, 1);
        });

        makeSortable();
        onPagingClick();
        init();
    });

    function makeSortable() {
        $("#questionnaireTable table").tablesorter({
                send: function(data) {
                    sortData = JSON.parse(JSON.stringify(data));
                    getTablePage(data, 1);
                }
        });
    }

    function onPagingClick() {
        $(".pagination li:not(.disabled):not(.active) a").click(function(e) {
            var page = getParameterByName($(this).attr('href'), "page");
            getTablePage(sortData, page === "" ? 1 : page * 1);
            return false;
        });
    }

    function getTablePage(data, page) {
        $.ajax({
                type: "POST",
                url: "@Url.Action("StatusViewTable", "Survey")",
                data: JSON.stringify({ StatusId: statusFilter, SortOrder: data, Pager: { Page: page, PageSize: pageSize } }),
                contentType: 'application/json, charset=utf-8',
                statusCode: {
                    200: function(response) {
                        $('#questionnaireTable tbody').html($(response).find('#table tbody').html());
                        $('#paging').html($(response).find('#paging').html());
                        
                        var parsedHTML = response.replace(/script/gi, 'rickscript'); 
                        $(parsedHTML).find('rickscript').each(function (index, domEle) {
                            if (!$(this).attr('src')) {
                                eval($(this).text()); 
                            }
                        });
                        init();
                        
                        onPagingClick();
                    }
                }
            });
    }

    function getParameterByName(ref, name) {
        name = name.replace( /[\[]/ , "\\\[").replace( /[\]]/ , "\\\]");
        var regexS = "[\\?&]" + name + "=([^&#]*)";
        var regex = new RegExp(regexS);
        var results = regex.exec(ref);
        if (results == null)
            return "";
        else
            return decodeURIComponent(results[1].replace( /\+/g , " "));
    }
    
</script>
<h2>Summary by Status. Items by  <a href="#" id="statusFilter" 
                  data-placement="right" 
                  data-type="select" 
                  data-prepend='Any'             
                  data-source="@Html.Raw(statuses)"
                  data-original-title="Select status">@this.Model.Status.Name</a> status</h2>


<div id="questionnaireTable">
    @this.Html.Partial("_StatusTable", this.Model)
</div>
