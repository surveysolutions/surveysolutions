@using System.Web.Script.Serialization
@using Core.Supervisor.Views.Index
@model IndexView
@{
    var r = new JavaScriptSerializer();
    var xTitles = r.Serialize(@Model.Items.Select(t => t.Title).ToArray());
    var colors = new string[] { "#049cdb", "#46a546", "#9d261d", "#ffc40d", "#f89406", "#c3325f", "#FF9655", "#FFF263", "#6AF9C4" };
}
<p>
    <div id="switcher" class="btn-group">
        <button id="column" class="btn btn-primary">Column</button>
        <button id="bar" class="btn">Bar</button>
        <button id="pie" class="btn">Pie</button>
    </div>
</p>
<script type="text/javascript">
    $(document).ready(function () {
        var active = "btn-primary";
        $("#column").click(function() {
            if (!$(this).hasClass(active)) {
                $("#switcher .btn").removeClass(active);
                $(this).addClass(active);
            }
            $('#container').css('height', '400px');
            drawPlot('column');
        });
        
        $("#bar").click(function() {
            if (!$(this).hasClass(active)) {
                $("#switcher .btn").removeClass(active);
                $(this).addClass(active);
            }
            $('#container').css('height', '800px');
            drawPlot('bar');
        });
        
        $("#pie").click(function() {
            if (!$(this).hasClass(active)) {
                $("#switcher .btn").removeClass(active);
                $(this).addClass(active);
            }
            $('#container').css('height', '600px');
            drawPlot('pie');
        });
       

        drawPlot('column');
    });

    var barData = [
        {
            name: 'Total',
            data: @Json.Encode(@Model.Items.Select(t => t.Total).ToArray()) ,
            stack: 'total'
        },
        {
            name: 'Approved',
            data: @Json.Encode(@Model.Items.Select(t => t.Approve).ToArray()) ,
            stack: 'parts'
        },
        {
            name: 'Unassign',
            data: @Json.Encode(@Model.Items.Select(t => t.Unassign).ToArray()) ,
            stack: 'parts'
        },
        {
            name: 'Initial',
            data: @Json.Encode(@Model.Items.Select(t => t.Initial).ToArray()) ,
            stack: 'parts'
        },
        {
            name: 'Redo',
            data: @Json.Encode(@Model.Items.Select(t => t.Redo).ToArray()) ,
            stack: 'parts'
        },
        {
            name: 'Complete',
            data: @Json.Encode(@Model.Items.Select(t => t.Complete).ToArray()) ,
            stack: 'parts'
        },
        {
            name: 'Error',
            data: @Json.Encode(@Model.Items.Select(t => t.Error).ToArray()) ,
            stack: 'parts'
        }
    ];
    data = @Html.Raw(Json.Encode(@Model.Items.Select((t, index) => new
    {
        y = t.Total, 
        color = colors[index],
        drilldown = new
        {
            name = t.Title,
            title = string.Join(string.Empty, t.Title.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).Select(s => s[0])),
            categories = new[] { "Unassign", "Initial", "Redo", "Complete", "Approve", "Error" },
            data = new[] { t.Unassign, t.Initial, t.Redo, t.Complete, t.Approve, t.Error },
            color = colors[index]
        }
    }).ToArray())) ; 
    
    // Build the data arrays
        var browserData = [];
        var versionsData = [];
        for (var i = 0; i < data.length; i++) {
    
            // add browser data
            browserData.push({
                name: data[i].drilldown.name,
                title: data[i].drilldown.title,
                y: data[i].y,
                color: data[i].color
            });
    
            // add version data
            for (var j = 0; j < data[i].drilldown.data.length; j++) {
                var brightness = 0.2 - (j / data[i].drilldown.data.length) / 5 ;
                versionsData.push({
                    name: data[i].drilldown.categories[j],
                    y: data[i].drilldown.data[j],
                    color: Highcharts.Color(data[i].color).brighten(brightness).get()
                });
            }
        }

    var pieData = [
            {
                type: 'pie',
                name: 'Totals',
                data: browserData,
                size: '60%',
                dataLabels: {
                    formatter: function() {
                        return this.y > 0 ? this.point.title : null;
                    },
                    color: 'white',
                    distance: -40
                }
            }, 
            {
                type: 'pie',
                name: 'Statuses',
                data: versionsData,
                showInLegend: false,
                innerSize: '60%',
                dataLabels: {
                    formatter: function() {
                        // display only if larger than 1
                        return this.y > 0 ? '<b>'+ this.point.name +':</b> '+ this.y   : null;
                    }
                }
            }
    ];
    var data = {
        column: barData,
        bar: barData,
        pie: pieData
    };
    var chart;
    var drawPlot = function(type) {
        $("#container").html('');
        var highchartsOptions = Highcharts.setOptions({ colors: @Html.Raw(Json.Encode(colors))});
        chart = new Highcharts.Chart({
                chart: {
                    renderTo: 'container',
                    type: type,
                    marginBottom: 70,
                    marginRight: 5,
                    marginTop: 30
                },
                xAxis: {
                    categories: @Html.Raw(xTitles)
                },
                yAxis: {
                    title: {
                        text: 'Count'
                    },
                    plotLines: [{
                        value: 0,
                        width: 1,
                        color: '#808080'
                    }],
                    allowDecimals: false
                },
                title: {
                    text: ""
                },
                tooltip: {
                    formatter: function() {
                        return '<b>' + this.series.name + '</b><br/>' +
                            this.x + ': ' + this.y;
                    }
                },
                legend: {
                    align: 'right',
                    verticalAlign: 'top',
                    borderWidth: 0,
                    y: -10
                },
                plotOptions: {
                    series: {
                        pointWidth: 20
                    },
                    pie: {
                        shadow: false,
                        allowPointSelect: true,
                        showInLegend: true
                    }
                },
                series: data[type]
            });
    };
</script>
<script type="text/javascript">

</script>
<div id="container" style="width: 100%; min-width: 400px; min-height: 400px; height: 400px;
    margin: 0 auto">
</div>
