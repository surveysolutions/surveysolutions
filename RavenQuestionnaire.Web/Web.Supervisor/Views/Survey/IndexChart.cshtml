@using System.Web.Script.Serialization
@using Core.Supervisor.Views.Index
@using Web.Supervisor.Models
@model IndexView
@{
    var r = new JavaScriptSerializer();
    var xTitles = r.Serialize(@Model.Items.Select(t => t.Title).ToArray());
    var colors = new[] { "#049cdb", "#46a546", "#c3325f", "#f89406", "#673301", "#ffc40d", "#400180", "#018080", "#9d261d" };
    var chartData = ViewBag.GraphData as InterviewerChartModel;
}
<p>
    <div id="switcher" class="btn-group">
        <button id="column" class="btn btn-primary">Column</button>
        <button id="bar" class="btn">Bar</button>
        <button id="pie" class="btn">Pie</button>
        <button id="scatter" class="btn">Scatter</button>
    </div>
</p>
<script type="text/javascript">

    init = function() {
        var containerSettings = {
            column: { 'height': '400px' },
            bar: { 'height': 80 * @(@Model.Items.Count) + 'px' },
            pie: { 'height': '600px' },
            scatter: { 'height': '500px' }
        };

        var active = "btn-primary";

        $('#switcher button').each(function(i, el) {
            var self = this;
            $(self).click(function() {
                var id = $(self).attr('id');
                if (!$(self).hasClass(active)) {
                    $("#switcher .btn").removeClass(active);
                    $(self).addClass(active);
                }
                $('#container').css(containerSettings[id]);
                drawPlot(id);
            });
        });
       
        $("#column").click();
    };
    xTitles = @Html.Raw(xTitles);
    barData = @Html.Raw(Json.Encode(chartData.BarData)) ;
    scatterData = @Html.Raw(Json.Encode(chartData.ScatterData)) ;
    
    data = @Html.Raw(Json.Encode(@Model.Items.Select((t, index) => new { y = t.Total, color = colors[index], drilldown = new { name = t.Title, title = string.Join(string.Empty, t.Title.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).Select(s => s[0])), categories = new[] { "Unassign", "Initial", "Redo", "Complete", "Approve", "Error" }, data = new[] { t.Unassign, t.Initial, t.Redo, t.Complete, t.Approve, t.Error }, color = colors[index] } }).ToArray())) ;
    
    pieData = [
        {
            type: 'pie',
            name: 'Totals',
            data: @Html.Raw(Json.Encode(chartData.BrowserData)),
            size: '60%',
            dataLabels: {
                formatter: function() {
                    return this.y > 0 ? this.point.title : null;
                },
                color: 'white',
                distance: -40
            }
        },
        {
            type: 'pie',
            name: 'Statuses',
            data: @Html.Raw(Json.Encode(chartData.VersionsData)),
            showInLegend: false,
            innerSize: '60%',
            dataLabels: {
                formatter: function() {
                    // display only if larger than 1
                    return this.y > 0 ? '<b>' + this.point.name + ':</b> ' + this.y : null;
                }
            }
        }
    ];

        
    plotSettings = {
        column: {
            chart: {
                renderTo: 'container',
                type: 'column',
                marginBottom: 70,
                marginRight: 5,
                marginTop: 30
            },
            xAxis: {
                categories: @Html.Raw(xTitles)
            },
            yAxis: {
                title: {
                    text: 'Count'
                },
                plotLines: [{
                    value: 0,
                    width: 1,
                    color: '#808080'
                }],
                allowDecimals: false
            },
            title: {
                text: ""
            },
            tooltip: {
                formatter: function() {
                    return '<b>' + this.series.name + '</b><br/>' +
                        this.x + ': ' + this.y;
                }
            },
            legend: {
                align: 'center',
                verticalAlign: 'top',
                borderWidth: 0,
                y: -10
            },
            plotOptions: {
                column: {
                    stacking: 'normal'
                },
                bar: {
                    stacking: 'normal'
                },
                series: {
                    pointWidth: 20
                },
                pie: {
                    shadow: false,
                    allowPointSelect: true,
                    showInLegend: true
                }
            },
            series: barData
        },
        bar: {
            chart: {
                renderTo: 'container',
                type: 'bar',
                marginBottom: 70,
                marginRight: 5,
                marginTop: 30
            },
            xAxis: {
                categories: @Html.Raw(xTitles)
            },
            yAxis: {
                title: {
                    text: 'Count'
                },
                plotLines: [{
                    value: 0,
                    width: 1,
                    color: '#808080'
                }],
                allowDecimals: false
            },
            title: {
                text: ""
            },
            tooltip: {
                formatter: function() {
                    return '<b>' + this.series.name + '</b><br/>' +
                        this.x + ': ' + this.y;
                }
            },
            legend: {
                align: 'center',
                verticalAlign: 'top',
                borderWidth: 0,
                y: -10
            },
            plotOptions: {
                column: {
                    stacking: 'normal'
                },
                bar: {
                    stacking: 'normal'
                },
                series: {
                    pointWidth: 20
                }
            },
            series: barData
        },
        pie: {
            chart: {
                renderTo: 'container',
                type: 'pie',
                marginBottom: 70,
                marginRight: 5,
                marginTop: 30
            },
            
            title: {
                text: ""
            },
            tooltip: {
                formatter: function() {
                    return '<b>' + this.series.name + '</b><br/>' +
                        this.x + ': ' + this.y;
                }
            },
            legend: {
                align: 'center',
                verticalAlign: 'top',
                borderWidth: 0,
                y: -10
            },
            plotOptions: {
                pie: {
                    shadow: false,
                    allowPointSelect: true,
                    showInLegend: true
                }
            },
            series: pieData
        },
        scatter: {
            chart: {
                renderTo: 'container',
                type: 'scatter',
                marginBottom: 70,
                marginRight: 5,
                marginTop: 50,
                zoomType: 'xy'
            },
            xAxis: {
                title: {
                    text: 'In progress'
                },
                allowDecimals: false
            },
            yAxis: {
                title: {
                    text: 'Complete'
                },
                plotLines: [{
                    value: 0,
                    width: 1,
                    color: '#808080'
                }],
                allowDecimals: false
            },
            title: {
                text: ""
            },
            tooltip: {
                 formatter: function() {
                        return ''+
                        this.x +' in progress, '+ this.y +' complete';
                }
            },
            legend: {
                align: 'center',
                verticalAlign: 'top',
                borderWidth: 0,
                y: -10
            },
            plotOptions: {
                scatter: {
                    marker: {
                        radius: 7,
                        states: {
                            hover: {
                                enabled: true,
                                lineColor: 'rgb(100,100,100)'
                            }
                        }
                    },
                    states: {
                        hover: {
                            marker: {
                                enabled: false
                            }
                        }
                    }
                }
            },
            series: scatterData
        }
    };
    chart;
    drawPlot = function(type) {
        $("#container").html('');
        var highchartsOptions = Highcharts.setOptions({ colors: @Html.Raw(Json.Encode(colors)) });
        chart = new Highcharts.Chart(plotSettings[type]);
    };
</script>
<div id="container" style="width: 100%; min-width: 400px; min-height: 400px; height: 400px;
    margin: 0 auto">
</div>
