@using System.Web.Script.Serialization
@using Core.Supervisor.Views.Index
@using Core.Supervisor.Views.Status
@model StatusView
@{
    var r = new JavaScriptSerializer();
    var xTitles = r.Serialize(@Model.Items.Select(t => t.User.Name).ToArray());
    var colors = new[] { "#049cdb", "#46a546", "#c3325f", "#f89406", "#673301", "#ffc40d", "#400180", "#018080", "#9d261d" };

}
<p>
    <div id="switcher" class="btn-group">
        <button id="column" class="btn btn-primary">Column</button>
        <button id="bar" class="btn">Bar</button>
        <button id="pie" class="btn">Pie</button>
    </div>
</p>
<script type="text/javascript">

    init = function() {
        var containerSettings = {
            column: { 'height': '400px' },
            bar: { 'height': 80 * @(@Model.Items.Count) + 'px' },
            pie: { 'height': '600px' }
        };

        var active = "btn-primary";

        $('#switcher button').each(function(i, el) {
            var self = this;
            $(self).click(function() {
                var id = $(self).attr('id');
                if (!$(self).hasClass(active)) {
                    $("#switcher .btn").removeClass(active);
                    $(self).addClass(active);
                }
                $('#container').css(containerSettings[id]);
                drawPlot(id);
            });
        });
       
        $("#column").click();
    };
    xTitles = @Html.Raw(xTitles);
    barData = [
        {
            name: 'Total',
            data: @Json.Encode(@Model.Items.Select(t => t.Items.Sum(kvp => kvp.Value)).ToArray()) ,
            stack: 'total'
        }
        @foreach (var header in Model.Headers)
        {
            <text>,</text>
            <text>@Html.Raw(Json.Encode(new
             {
                 name = string.Join(string.Empty, header.Title.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).Select(s => s[0])),
                 title = header.Title,
                 data = @Model.Items.Select(t => t.Items[header]).ToArray(),
                 stack = "parts"
             }))</text>
        }
    ];
    data = @Html.Raw(Json.Encode(@Model.Items.Select((t, index) =>
    new
    {
        y = t.Items.Values.Sum(),
        color = colors[index],
        drilldown = new
        {
            name = t.User.Name,
            categories = t.Items.Keys.Select(k => string.Join(string.Empty, k.Title.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).Select(s => s[0]))).ToArray(),
            data = t.Items.Values.ToArray(),
            color = colors[index]
        }
    }).ToArray())) ;

    // Build the data arrays
    browserData = [];
    versionsData = [];
    for (var i = 0; i < data.length; i++) {

        // add browser data
        browserData.push({
                name: data[i].drilldown.name,
                title: data[i].drilldown.title,
                category: xTitles[i],
                y: data[i].y,
                color: data[i].color
            });

        // add version data
        for (var j = 0; j < data[i].drilldown.data.length; j++) {
            var brightness = 0.2 - (j / data[i].drilldown.data.length) / 5;
            versionsData.push({
                    category: xTitles[i],
                    name: data[i].drilldown.categories[j],
                    y: data[i].drilldown.data[j],
                    color: Highcharts.Color(data[i].color).brighten(brightness).get()
                });
        }
    }

    pieData = [
        {
            type: 'pie',
            name: 'Totals',
            data: browserData,
            size: '60%',
            dataLabels: {
                formatter: function() {
                    return this.y > 0 ? this.point.category : null;
                },
                color: 'white',
                distance: -40
            }
        },
        {
            type: 'pie',
            name: 'Statuses',
            data: versionsData,
            showInLegend: false,
            innerSize: '60%',
            dataLabels: {
                formatter: function() {
                    // display only if larger than 1
                    return this.y > 0 ? '<b>' + this.point.name + ':</b> ' + this.y : null;
                }
            }
        }
    ];
    data = {
        column: barData,
        bar: barData,
        pie: pieData
    };
    chart;
    drawPlot = function(type) {
        $("#container").html('');
        var highchartsOptions = Highcharts.setOptions({ colors: @Html.Raw(Json.Encode(colors)) });
        chart = new Highcharts.Chart({
                chart: {
                    renderTo: 'container',
                    type: type,
                    marginBottom: 70,
                    marginRight: 5,
                    marginTop: 30
                },
                xAxis: {
                    categories: @Html.Raw(xTitles)
                },
                yAxis: {
                    title: {
                        text: 'Count'
                    },
                    plotLines: [{
                        value: 0,
                        width: 1,
                        color: '#808080'
                    }],
                    allowDecimals: false
                },
                title: {
                    text: ""
                },
                tooltip: {
                    formatter: function() {
                        return '<b>' + this.series.name + '</b><br/>' +
                            this.x + ': ' + this.y;
                    }
                },
                legend: {
                    align: 'center',
                    verticalAlign: 'top',
                    borderWidth: 0,
                    y: -10
                },
                plotOptions: {
                    column: {
                        stacking: 'normal'
                    },
                    bar: {
                        stacking: 'normal'
                    },
                    series: {
                        pointWidth: 20
                    },
                    pie: {
                        shadow: false,
                        allowPointSelect: true,
                        showInLegend: true
                    }
                },
                series: data[type]
            });
    };
</script>
<div id="container" style="width: 100%; min-width: 400px; min-height: 400px; height: 400px;
    margin: 0 auto">
</div>
