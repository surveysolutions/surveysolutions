@using Core.Supervisor.Views.Assignment
@using Main.Core.Entities.SubEntities
@model AssignmentView
@{
    ViewBag.Title = "Surveys";
    var statuses = SurveyStatus.GetAllStatuses().Where(s => s.PublicId != SurveyStatus.Unknown.PublicId).Aggregate("{", (current, status) => current + string.Format("'{0}':'{1}',", status.PublicId, status.Name));
    statuses = statuses.Substring(0, statuses.Length - 1);
    statuses += "}";
}
<script src="../../Scripts/sorter.js" type="text/javascript"></script>
<script src="../../Scripts/grid.js" t="text/javascript"></script>
<script type="text/javascript">
    var sortData = undefined;
    var userFilter = "@(Model.User.Id)", 
        statusFilter = "@(Model.Status.PublicId)", 
        templateFilter = "@(Model.Template.TemplateId)";
    var withHeaders = false;
    var pageSize = @Model.PageSize;
    $(document).ready(function() {

       
        $('#userFilter').editable().on('save', function(e, params) {
            userFilter = params.newValue;
            sortData = [{ Field: "Responsible.Name", Direction: "Asc" }];
            withHeaders = false;
            getTablePage(sortData, 1);
        });
        
        $('#statusFilter').editable().on('save', function(e, params) {
            statusFilter = params.newValue;
            sortData = [{ Field: "Responsible.Name", Direction: "Asc" }];
            withHeaders = false;
            getTablePage(sortData, 1);
        });
        
         $('#templateFilter').editable().on('save', function(e, params) {
            templateFilter = params.newValue;
            sortData = [{ Field: "Responsible.Name", Direction: "Asc" }];
             withHeaders = true;
            getTablePage(sortData, 1);
            
        });

        makeSortable();
        onPagingClick();

        $.fn.editable.defaults.success = function(data) {
            //debugger;
            if (data.status=="ok") {
                $('#row-' + data.cqId).find('.td-status').text(data.statusName);
                var isTransparent = false;
                if (data.statusId!=statusFilter && statusFilter!="00000000-0000-0000-0000-000000000000") {
                    isTransparent = true;
                }
                if (data.userId!=userFilter && userFilter!="00000000-0000-0000-0000-000000000000") {
                    isTransparent = true;
                }
                if(isTransparent){
                    $('#row-' + data.cqId).addClass("transparent");
                }
                else {
                    $('#row-' + data.cqId).removeClass("transparent");
                }
            }else {
                
            }
        };
        $.fn.editable.defaults.error = function(data) {
           //debugger;
        };
        makeAssignable();
    });
    
   function makeAssignable() {
       $('.editable').each(function(i, el) {
           var element = $(el);
           var toggler = element.attr("data-toggle-element");
           element.editable().on('save', function(e, params) {
               element.attr('href', "@Url.Action("Index", "Survey")" + "?UserId=" + params.newValue);
           });
           $(toggler).click(function(e) {
               e.stopPropagation();
               e.preventDefault();
               $(element).editable("toggle");
           });
       });
   }
   
    function makeSortable() {
        $("#questionnaireTable table").tablesorter({
                send: function(data) {
                    sortData = JSON.parse(JSON.stringify(data));
                    getTablePage(data, 1);
                }
        });
    }
        
     function onPagingClick() {
        $(".pagination li:not(.disabled):not(.active) a").click(function(e) {
            var page = getParameterByName($(this).attr('href'), "page");
            getTablePage(sortData, page === "" ? 1 : page * 1);
            return false;
        });
    }

    function getTablePage(data, page) {
        $.ajax({
                type: "POST",
                url: "@Url.Action("AssignmentViewTable", "Survey")",
                data: JSON.stringify({ Id: templateFilter, UserId: userFilter, StatusId :statusFilter, SortOrder: data, Pager: { Page: page, PageSize: pageSize } }),
                contentType: 'application/json, charset=utf-8',
                statusCode: {
                    200: function(response) {
                       
                        if(withHeaders) {
                             $('#questionnaireTable table').html($(response).find('#table').html());    
                            makeSortable();
                        }
                        else {
                            $('#questionnaireTable tbody').html($(response).find('#table tbody').html());    
                        }
                         $('#paging').html($(response).find('#paging').html());
                        onPagingClick();
                        makeAssignable();
                           withHeaders = false;
                    }
                }
            });
    }

    function getParameterByName(ref, name) {
        name = name.replace( /[\[]/ , "\\\[").replace( /[\]]/ , "\\\]");
        var regexS = "[\\?&]" + name + "=([^&#]*)";
        var regex = new RegExp(regexS);
        var results = regex.exec(ref);
        if (results == null)
            return "";
        else
            return decodeURIComponent(results[1].replace( /\+/g , " "));
    }
    
    function HideForm(data) {
        var json = jQuery.parseJSON(data.responseText);
        $('#row-' + json.cqId).removeClass("showForm");

        if (json.userId != null && json.userName != null) {
            $('#link-' + json.cqId).replaceWith('<a id="link-' + json.cqId + '" href="/User/Statistics/' + json.userId + '">' + json.userName + '</a>');
        }
        else {
            $('#link-' + json.cqId).replaceWith('<a id="link-' + json.cqId + '" href="/User/Statistics/"></a>');
        }
    }
</script>
<h3><a href="#" id="statusFilter" 
                  data-placement="right" 
                  data-type="select" 
                  data-prepend='All'             
                  data-source="@Html.Raw(statuses)"
                  data-original-title="Select status">@this.Model.Status.Name</a> by
    <a href="#" id="userFilter" 
                  data-placement="bottom" 
                  data-type="select" 
                  data-source="@Url.Action("UsersJson", "User")"
                  data-prepend='Anyone'             
                  data-original-title="Select user">@this.Model.User.Name</a> in <a href="#" id="templateFilter" 
                  data-placement="bottom" 
                  data-type="select" 
                  data-source="@Url.Action("Templates", "Survey")"
                  data-prepend='Any'             
                  data-original-title="Select template">@(Model.Template.Title)</a>
    survey</h3>
<div id="questionnaireTable">
    @Html.Partial("_TableGroup", Model)
</div>