@using System.Runtime.Serialization.Formatters
@using System.Web.Optimization
@using Newtonsoft.Json
@model Core.Supervisor.Views.ChangeStatus.ChangeStatusView
@{
    ViewBag.Title = "Change state survey";
}
<h2>@Model.QuestionnaireTitle <small>(ver. @Model.QuestionnaireVersion)</small></h2>
<div class="row-fluid">
    <div class="span12">
        <div class="control-group">
            <label class="control-label" for="comment">Comment</label>
            <div class="controls">
                <textarea rows="3" class="input-block-level" id="comment" data-bind="value: $root.comment"></textarea>
            </div>
        </div>
    </div>
</div>
<div class="row-fluid">
    <div class="span6">
        <button class="btn btn-success" data-bind="click: $root.approve">Approve</button>
    </div>
    <div class="span6">
        <div class="pull-right">
            <button class="btn btn-danger" data-bind="click: $root.reject">Reject</button>
        </div>
    </div>
</div>
<div class="row-fluid">
    <div class="span6 offset3">
        <h3>State change history</h3>
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>User</th>
                    <th>set status</th>
                    <th>with comment</th>
                    <th>on</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var ch in Model.StatusHistory)
                {
                    <tr>
                        <td>user
                        </td>
                        <td>
                            @ch.Status
                        </td>
                        <td>
                            @ch.Comment
                        </td>
                        <td>
                            @ch.Date.ToLocalTime()
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<div id="output">
    <div class="inner">
        <div class="title">
            <button type="button" class="close" data-bind="click: hideOutput">&times;</button>
            <span>Errors log</span>
        </div>
        <div class="body">
            <ul data-bind="foreach: errors" class="error-list">
                <li class="error">
                    <span data-bind="html: error"></span>
                </li>
            </ul>
        </div>
    </div>
</div>
@section scripts
{
    <script type="text/javascript">
        var input = window.input || (function(document) {
            'use strict';
            var currentUser = @Html.Raw(JsonConvert.SerializeObject(ViewBag.CurrentUser));
            return {
                interviewId: '@Model.InterviewId',
                currentUser: currentUser,
                commandExecutionUrl: '@Url.Action("Execute", "Command", new { }, Request.Url.Scheme)',
                backUrl: '@Url.Action("Interviews", "Survey", new { statchange = "_______" }, Request.Url.Scheme)',
            };
        }(document));

            window.input = input;
    </script>

    @Scripts.Render("~/js/lib-modules")
    @Scripts.Render("~/js/interview-changeState")

    <script type="text/javascript">
        (function() {
            var root = this;

            define3RdPartyModules();
            loadPluginsAndBoot();

            function define3RdPartyModules() {
                // These are already loaded via bundles. 
                // We define them and put them in the root object.
                define('jquery', [], function() { return root.jQuery; });
                define('ko', [], function() { return root.ko; });
                define('amplify', [], function() { return root.amplify; });
                define('moment', [], function() { return root.moment; });
                define('lodash', [], function() { return root._; });
                define('director', [], function() { return root.Router; });
                define('input', [], function() { return root.input; });
            }

            function loadPluginsAndBoot() {
                requirejs.config({
                    baseUrl: '@Url.Content("~/Scripts/lib/")',
                    config: {
                        'waitSeconds': 15
                    },
                    paths: {
                        app: '@Url.Content("~/Scripts/changeState/app/")'
                    }
                });

                boot();
            }

            function boot() {
                requirejs(['jquery', 'knockout', 'amplify', 'lodash', 'app/viewmodel'],
                    function($, ko, amplify, _, viewmodel) {
                        $('#umbrella').attr('data-bind', 'visible:isSaving');
                        $('#umbrella-message').attr('data-bind', 'text:savingMessage');

                        $(document).ready(function() {
                            viewmodel.init();
                            ko.applyBindings(viewmodel);
                        });

                    });
            }
        })();
    </script>
}
