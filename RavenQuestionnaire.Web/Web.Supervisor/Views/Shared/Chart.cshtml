@using Web.Supervisor.Models
@using System.Web.Script.Serialization

@model ChartDataModel

 <script src="@Url.Content("~/Scripts/highcharts.js")" type = "text/javascript"></script>

@{
    var values = Json.Encode(@Model.Data.Select(t => t.Value).ToArray());
    var r = new JavaScriptSerializer();
    var xTitles = r.Serialize(@Model.Data.Select(t => t.Key).ToArray());
    var list = new SelectList(new List<string> {"line", "bar", "pie"}, "line") ;
    var pair = string.Empty;
    for (int i = 0; i < Model.Data.Count(); i++)
    {
        pair = (string.IsNullOrEmpty(pair) ? pair +"[" : pair+",") + " [\"" + Model.Data.Keys.ToArray()[i] + "\", " + Model.Data.Values.ToArray()[i] + "]";
    }
    pair = pair + "]";
}

@Html.DropDownList("chartType", @list)

<div id="container" style="min-width: 400px; height: 450px; margin: 0 auto"></div>
 
<script type="text/javascript">
$(function() {
    var chart;
    $(document).ready(function() {
        $("#chartType").change(function() {
            Draw($(this).val());
        });
        Draw('line');
    });

    function Draw(typeLine) {
        $("#container").html('');
        Highcharts.theme = { colors: ['#058DC7', '#50B432', '#ED561B', '#DDDF00', '#24CBE5', '#64E572', '#FF9655', '#FFF263', '#6AF9C4'] };
        Highcharts.setOptions(Highcharts.theme);
        chart = new Highcharts.Chart({
                chart: {
                    renderTo: 'container',
                    type: typeLine,
                    marginRight: 130,
                    marginBottom: 70
                },
                title: {
                    text: '@Model.Title',
                    x: -20
                },
                xAxis: {
                    categories: @Html.Raw(xTitles)
                },
                yAxis: {
                    title: {
                        text: 'Count'
                    },
                    plotLines: [{
                        value: 0,
                        width: 1,
                        color: '#808080'
                    }]
                },
                tooltip: {
                    formatter: GetToolTip(typeLine)
                },
                legend: {
                    layout: 'vertical',
                    align: 'right',
                    verticalAlign: 'top',
                    x: 0,
                    y: 100,
                    borderWidth: 0
                },
                series: [{
                    data: SelectData(typeLine)
                }]
        });
    }
    
    function SelectData(typeLine) {
        if (typeLine == 'pie') {
            return @Html.Raw(pair) ;
        }
        else {
            return @values ;
        }
    }

    function GetToolTip(typeLine) {
        if (typeLine == 'pie') {
            return;
        }
        else {
            "{ function() { return this.x + ': ' + this.y; }}";
        }
    }
});
</script>