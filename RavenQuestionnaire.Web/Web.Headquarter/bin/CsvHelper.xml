<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CsvHelper</name>
    </assembly>
    <members>
        <member name="T:CsvHelper.Configuration.CsvClassMap">
            <summary>
             Maps class properties to CSV fields.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvClassMap.Properties">
            <summary>
            The class property mappings.
            </summary>
        </member>
        <member name="T:CsvHelper.ReflectionHelper">
            <summary>
            Common reflection tasks.
            </summary>
        </member>
        <member name="M:CsvHelper.ReflectionHelper.GetAttribute``1(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Gets the first attribute of type T on property.
            </summary>
            <typeparam name="T">Type of attribute to get.</typeparam>
            <param name="property">The <see cref="T:System.Reflection.PropertyInfo"/> to get the attribute from.</param>
            <param name="inherit">True to search inheritance tree, otherwise false.</param>
            <returns>The first attribute of type T, otherwise null.</returns>
        </member>
        <member name="M:CsvHelper.ReflectionHelper.GetTypeConverterFromAttribute(System.Reflection.PropertyInfo)">
            <summary>
            Gets the <see cref="T:System.ComponentModel.TypeConverter"/> for the <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
            <param name="property">The property to get the <see cref="T:System.ComponentModel.TypeConverter"/> from.</param>
            <returns>The <see cref="T:System.ComponentModel.TypeConverter"/> </returns>
        </member>
        <member name="M:CsvHelper.ReflectionHelper.GetProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the property from the expression.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="expression">The expression.</param>
            <returns>The <see cref="T:System.Reflection.PropertyInfo"/> for the expression.</returns>
        </member>
        <member name="T:CsvHelper.Configuration.CsvPropertyMapCollection">
            <summary>
            A collection that holds <see cref="T:CsvHelper.Configuration.CsvPropertyMap"/>'s.
            </summary>
        </member>
        <member name="T:CsvHelper.CsvHelperException">
            <summary>
            Represents errors that occur in CsvHelper.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvHelperException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvHelperException"/> class.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvHelperException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvHelperException"/> class
            with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper.CsvHelperException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvHelperException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:CsvHelper.CsvHelperException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvHelperException"/> class
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:CsvHelper.CsvDuplicateHeaderFieldNameException">
            <summary>
            An error that occurs when there is more than one header field with the same name.
            </summary>
        </member>
        <member name="T:CsvHelper.CsvReaderException">
            <summary>
            Represents errors that occur while reading a CSV file.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvReaderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvReaderException"/> class.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvReaderException"/> class
            with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper.CsvReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvReaderException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:CsvHelper.CsvReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvReaderException"/> class
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:CsvHelper.CsvDuplicateHeaderFieldNameException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvDuplicateHeaderFieldNameException"/> class
            with the name of the duplicate header field.
            </summary>
            <param name="fieldName">Name of the duplicate header field.</param>
        </member>
        <member name="T:CsvHelper.Configuration.CsvConfiguration">
            <summary>
            Configuration used for reading and writing CSV data.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.CsvConfiguration.PropertyMap``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Maps a property of a class to a CSV field.
            </summary>
            <param name="expression">The property to map.</param>
        </member>
        <member name="M:CsvHelper.Configuration.CsvConfiguration.PropertyMap(System.Reflection.PropertyInfo)">
            <summary>
            Maps a property of a class to a CSV field.
            </summary>
            <param name="property">The property to map.</param>
        </member>
        <member name="M:CsvHelper.Configuration.CsvConfiguration.ClassMapping``2">
            <summary>
            Use a <see cref="T:CsvHelper.Configuration.CsvClassMap`1"/> to configure mappings.
            When using a class map, no properties are mapped by default.
            Only properties specified in the mapping are used.
            </summary>
            <typeparam name="TMap">The type of mapping class to use.</typeparam>
            <typeparam name="TClass">The type of custom class that is being mapped.</typeparam>
        </member>
        <member name="M:CsvHelper.Configuration.CsvConfiguration.ClassMapping``1">
            <summary>
            Use a <see cref="T:CsvHelper.Configuration.CsvClassMap`1"/> to configure mappings.
            When using a class map, no properties are mapped by default.
            Only properties specified in the mapping are used.
            </summary>
            <typeparam name="TMap">The type of mapping class to use.</typeparam>
        </member>
        <member name="M:CsvHelper.Configuration.CsvConfiguration.ClassMapping(CsvHelper.Configuration.CsvClassMap)">
            <summary>
            Use a <see cref="T:CsvHelper.Configuration.CsvClassMap"/> instance to configure mappings.
            When using a class map, no properties are mapped by default.
            Only properties specified in the mapping are used.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.CsvConfiguration.AttributeMapping``1">
            <summary>
            Use <see cref="T:CsvHelper.Configuration.CsvFieldAttribute"/>s to configure mappings.
            All properties are mapped by default and attribute mapping 
            will change the default property behavior.
            </summary>
            <typeparam name="TClass">The type of custom class that contains the attributes.</typeparam>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.Properties">
            <summary>
            Gets the property mappings.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.PropertyBindingFlags">
            <summary>
            Gets or sets the property binding flags.
            This determines what properties on the custom
            class are used. Default is Public | Instance.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.HasHeaderRecord">
            <summary>
            Gets or sets a value indicating if the
            CSV file has a header record.
            Default is true.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.IsStrictMode">
            <summary>
            Gets or sets a value indicating if strict reading is enabled.
            True to enable strict reading, otherwise false.
            Strict reading will cause a <see cref="T:CsvHelper.CsvMissingFieldException"/>
            to be thrown if a named index is not found.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.Delimiter">
            <summary>
            Gets or sets the delimiter used to separate fields.
            Default is ',';
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.Quote">
            <summary>
            Gets or sets the character used to quote fields.
            Default is '"'.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.Comment">
            <summary>
            Gets or sets the character used to denote
            a line that is commented out. Default is '#'.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.AllowComments">
            <summary>
            Gets or sets a value indicating if comments are allowed.
            True to allow commented out lines, otherwise false.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.BufferSize">
            <summary>
            Gets or sets the size of the buffer
            used for reading and writing CSV files.
            Default is 2048.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.UseInvariantCulture">
            <summary>
            Gets or sets a value indicating if InvariantCulture
            should be used when reading and writing. True to
            use InvariantCulture, false to use CurrentCulture.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.FieldCount">
            <summary>
            Gets or sets the number of fields the CSV file has.
            If this is known ahead of time, set
            to make parsing more efficient.
            </summary>
        </member>
        <member name="T:CsvHelper.Configuration.CsvPropertyMapComparer">
            <summary>
            Used to compare <see cref="T:CsvHelper.Configuration.CsvPropertyMap"/>s.
            The order is by field index ascending. Any
            fields that don't have an index are pushed
            to the bottom.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.CsvPropertyMapComparer.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of CsvPropertyMapComparer.
            </summary>
            <param name="useFieldName">True to compare by Name, otherwise compares by Index.</param>
        </member>
        <member name="M:CsvHelper.Configuration.CsvPropertyMapComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <returns>
            Value 
                                Condition 
                                Less than zero 
                            <paramref name="x"/> is less than <paramref name="y"/>. 
                                Zero 
                            <paramref name="x"/> equals <paramref name="y"/>. 
                                Greater than zero 
                            <paramref name="x"/> is greater than <paramref name="y"/>. 
            </returns>
            <param name="x">The first object to compare. 
                            </param><param name="y">The second object to compare. 
                            </param><exception cref="T:System.ArgumentException">Neither <paramref name="x"/> nor <paramref name="y"/> implements the <see cref="T:System.IComparable"/> interface.
                                -or- 
                            <paramref name="x"/> and <paramref name="y"/> are of different types and neither one can handle comparisons with the other. 
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:CsvHelper.Configuration.CsvPropertyMapComparer.Compare(CsvHelper.Configuration.CsvPropertyMap,CsvHelper.Configuration.CsvPropertyMap)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <returns>
            Value 
                                Condition 
                                Less than zero
                            <paramref name="x"/> is less than <paramref name="y"/>.
                                Zero
                            <paramref name="x"/> equals <paramref name="y"/>.
                                Greater than zero
                            <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
            <param name="x">The first object to compare.
                            </param><param name="y">The second object to compare.
                            </param>
        </member>
        <member name="T:CsvHelper.Configuration.CsvPropertyMap">
            <summary>
            Mapping info for a property to a CSV field.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.CsvPropertyMap.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Creates a new <see cref="T:CsvHelper.Configuration.CsvPropertyMap"/> instance using the specified property.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.CsvPropertyMap.Name(System.String)">
            <summary>
            When reading, is used to get the field
            at the index of the name if there was a
            header specified. If there is an index
            specified, that will take precedence over
            the name. When writing, sets
            the name of the field in the header record.
            </summary>
            <param name="name">The name of the CSV field.</param>
        </member>
        <member name="M:CsvHelper.Configuration.CsvPropertyMap.Index(System.Int32)">
            <summary>
            When reading, is used to get the field at
            the given index. When writing, the fields
            will be written in the order of the field
            indexes.
            </summary>
            <param name="index">The index of the CSV field.</param>
        </member>
        <member name="M:CsvHelper.Configuration.CsvPropertyMap.Ignore">
            <summary>
            Ignore the property when reading and writing.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.CsvPropertyMap.Ignore(System.Boolean)">
            <summary>
            Ignore the property when reading and writing.
            </summary>
            <param name="ignore">True to ignore, otherwise false.</param>
        </member>
        <member name="M:CsvHelper.Configuration.CsvPropertyMap.TypeConverter(System.ComponentModel.TypeConverter)">
            <summary>
            Specifies the <see cref="M:CsvHelper.Configuration.CsvPropertyMap.TypeConverter(System.ComponentModel.TypeConverter)"/> to use
            when converting the property to and from a CSV field.
            </summary>
            <param name="typeConverter">The TypeConverter to use.</param>
        </member>
        <member name="M:CsvHelper.Configuration.CsvPropertyMap.TypeConverter``1">
            <summary>
            Specifies the <see cref="M:CsvHelper.Configuration.CsvPropertyMap.TypeConverter(System.ComponentModel.TypeConverter)"/> to use
            when converting the property to and from a CSV field.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the 
            <see cref="M:CsvHelper.Configuration.CsvPropertyMap.TypeConverter(System.ComponentModel.TypeConverter)"/> to use.</typeparam>
        </member>
        <member name="P:CsvHelper.Configuration.CsvPropertyMap.PropertyValue">
            <summary>
            Gets the property value.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvPropertyMap.NameValue">
            <summary>
            Gets the name value.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvPropertyMap.IndexValue">
            <summary>
            Gets the index value.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvPropertyMap.TypeConverterValue">
            <summary>
            Gets the type converter value.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvPropertyMap.IgnoreValue">
            <summary>
            Gets a value indicating whether the field should be ignored.
            </summary>
        </member>
        <member name="T:CsvHelper.ICsvParser">
            <summary>
            Defines methods used the parse a CSV file.
            </summary>
        </member>
        <member name="M:CsvHelper.ICsvParser.Read">
            <summary>
            Reads a record from the CSV file.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of fields for the record read.</returns>
        </member>
        <member name="P:CsvHelper.ICsvParser.Configuration">
            <summary>
            Gets or sets the configuration.
            </summary>
        </member>
        <member name="P:CsvHelper.ICsvParser.FieldCount">
            <summary>
            Gets the field count.
            </summary>
        </member>
        <member name="T:CsvHelper.Configuration.CsvFieldAttribute">
            <summary>
            Used to set behavior of a field when
            reading a writing a CSV file.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvFieldAttribute.Name">
            <summary>
            When reading, is used to get the field
            at the index of the name if there was a
            header specified. When writing, sets
            the name of the field in the header record.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvFieldAttribute.Index">
            <summary>
            When reading, is used to get the field at
            the given index. If a Name is specified,
            that will be used instead. When writing, the fields
            will be written in the order of the field
            indexes.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvFieldAttribute.Ignore">
            <summary>
            Ignore the property when reading and writing.
            </summary>
        </member>
        <member name="T:CsvHelper.Configuration.CsvClassMap`1">
            <summary>
            Maps class properties to CSV fields.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of class to map.</typeparam>
        </member>
        <member name="M:CsvHelper.Configuration.CsvClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Maps a property to a CSV field.
            </summary>
            <param name="expression">The property to map.</param>
        </member>
        <member name="T:CsvHelper.CsvHelper">
            <summary>
            Reads to and writes from CSV files.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvHelper.#ctor(System.IO.Stream)">
            <summary>
            Creates a new instance of <see cref="T:CsvHelper.CsvHelper"/>
            using defaults.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> attached to a CSV file.</param>
        </member>
        <member name="M:CsvHelper.CsvHelper.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:CsvHelper.CsvHelper.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">True if the instance needs to be disposed of.</param>
        </member>
        <member name="M:CsvHelper.CsvHelper.CheckDisposed">
            <summary>
            Checks if the instance has been disposed of.
            </summary>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="P:CsvHelper.CsvHelper.Configuration">
            <summary>
            The configuration used for reading and writing CSV files.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvHelper.Reader">
            <summary>
            Reads data from a CSV file.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvHelper.Writer">
            <summary>
            Writes data to a CSV file.
            </summary>
        </member>
        <member name="T:CsvHelper.ICsvReader">
            <summary>
            Defines methods used to read parsed data
            from a CSV file.
            </summary>
        </member>
        <member name="M:CsvHelper.ICsvReader.Read">
            <summary>
            Advances the reader to the next record.
            </summary>
            <returns>True if there are more records, otherwise false.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReader.GetField(System.Int32)">
            <summary>
            Gets the raw field at index.
            </summary>
            <param name="index">The index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReader.GetField(System.String)">
            <summary>
            Gets the raw field at name.
            </summary>
            <param name="name">The named index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReader.GetField``1(System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at index.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The index of the field.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReader.GetField``1(System.String)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at name.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReader.GetField``1(System.Int32,System.ComponentModel.TypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at index using
            the given <see cref="T:System.ComponentModel.TypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The index of the field.</param>
            <param name="converter">The <see cref="T:System.ComponentModel.TypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReader.GetField``1(System.String,System.ComponentModel.TypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at name using
            the given <see cref="T:System.ComponentModel.TypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="converter">The <see cref="T:System.ComponentModel.TypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReader.TryGetField``1(System.Int32,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at index.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The index of the field.</param>
            <param name="field">The field converted to type T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReader.TryGetField``1(System.String,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at name.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReader.TryGetField``1(System.Int32,System.ComponentModel.TypeConverter,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at index
            using the specified <see cref="T:System.ComponentModel.TypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The index of the field.</param>
            <param name="converter">The <see cref="T:System.ComponentModel.TypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReader.TryGetField``1(System.String,System.ComponentModel.TypeConverter,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at name
            using the specified <see cref="T:System.ComponentModel.TypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="converter">The <see cref="T:System.ComponentModel.TypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReader.GetRecord``1">
            <summary>
            Gets the record converted into <see cref="T:System.Type"/> T.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the record.</typeparam>
            <returns>The record converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReader.GetRecords``1">
            <summary>
            Gets all the records in the CSV file and
            converts each to <see cref="T:System.Type"/> T. The Read method
            should not be used when using this.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the record.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> of records.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReader.InvalidateRecordCache``1">
            <summary>
            Invalidates the record cache for the given type. After <see cref="M:CsvHelper.ICsvReader.GetRecord``1"/> is called the
            first time, code is dynamically generated based on the <see cref="T:CsvHelper.Configuration.CsvPropertyMapCollection"/>,
            compiled, and stored for the given type T. If the <see cref="T:CsvHelper.Configuration.CsvPropertyMapCollection"/>
            changes, <see cref="M:CsvHelper.ICsvReader.InvalidateRecordCache``1"/> needs to be called to updated the
            record cache.
            </summary>
        </member>
        <member name="P:CsvHelper.ICsvReader.Configuration">
            <summary>
            Gets or sets the configuration.
            </summary>
        </member>
        <member name="P:CsvHelper.ICsvReader.Parser">
            <summary>
            Gets the parser.
            </summary>
        </member>
        <member name="P:CsvHelper.ICsvReader.FieldHeaders">
            <summary>
            Gets the field headers.
            </summary>
        </member>
        <member name="P:CsvHelper.ICsvReader.CurrentRecord">
            <summary>
            Get the current record;
            </summary>
        </member>
        <member name="P:CsvHelper.ICsvReader.Item(System.Int32)">
            <summary>
            Gets the raw field at index.
            </summary>
            <param name="index">The index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="P:CsvHelper.ICsvReader.Item(System.String)">
            <summary>
            Gets the raw string field at name.
            </summary>
            <param name="name">The named index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="T:CsvHelper.CsvParser">
            <summary>
            Parses a CSV file.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvParser.#ctor(System.IO.TextReader)">
            <summary>
            Creates a new parser using the given <see cref="T:System.IO.StreamReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.IO.StreamReader"/> with the CSV file data.</param>
        </member>
        <member name="M:CsvHelper.CsvParser.#ctor(System.IO.TextReader,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            Creates a new parser using the given <see cref="T:System.IO.StreamReader"/>
            and <see cref="T:CsvHelper.Configuration.CsvConfiguration"/>.
            </summary>
            <param name="reader">The <see cref="T:System.IO.StreamReader"/> with teh CSV file data.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:CsvHelper.CsvParser.Read">
            <summary>
            Reads a record from the CSV file.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of fields for the record read.
            If there are no more records, null is returned.</returns>
        </member>
        <member name="M:CsvHelper.CsvParser.AddFieldToRecord(System.Int32@,System.String,System.Boolean)">
            <summary>
            Adds the field to the current record.
            </summary>
            <param name="recordPosition">The record position to add the field to.</param>
            <param name="field">The field to add.</param>
            <param name="hasQuotes">True if the field is quoted, otherwise false.</param>
        </member>
        <member name="M:CsvHelper.CsvParser.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:CsvHelper.CsvParser.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">True if the instance needs to be disposed of.</param>
        </member>
        <member name="M:CsvHelper.CsvParser.CheckDisposed">
            <summary>
            Checks if the instance has been disposed of.
            </summary>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="P:CsvHelper.CsvParser.Configuration">
            <summary>
            Gets or sets the configuration.
            </summary>
        </member>
        <member name="T:CsvHelper.ICsvWriter">
            <summary>
            Defines methods used to write to a CSV file.
            </summary>
        </member>
        <member name="M:CsvHelper.ICsvWriter.WriteField(System.String)">
            <summary>
            Writes the field to the CSV file.
            When all fields are written for a record,
            <see cref="M:CsvHelper.ICsvWriter.NextRecord"/> must be called
            to complete writing of the current record.
            </summary>
            <param name="field">The field to write.</param>
        </member>
        <member name="M:CsvHelper.ICsvWriter.WriteField``1(``0)">
            <summary>
            Writes the field to the CSV file.
            When all fields are written for a record,
            <see cref="M:CsvHelper.ICsvWriter.NextRecord"/> must be called
            to complete writing of the current record.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="field">The field to write.</param>
        </member>
        <member name="M:CsvHelper.ICsvWriter.NextRecord">
            <summary>
            Ends writing of the current record
            and starts a new record. This is used
            when manually writing records with <see cref="M:CsvHelper.ICsvWriter.WriteField``1(``0)"/>
            </summary>
        </member>
        <member name="M:CsvHelper.ICsvWriter.WriteRecord``1(``0)">
            <summary>
            Writes the record to the CSV file.
            </summary>
            <typeparam name="T">The type of the record.</typeparam>
            <param name="record">The record to write.</param>
        </member>
        <member name="M:CsvHelper.ICsvWriter.WriteRecords``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes the list of records to the CSV file.
            </summary>
            <typeparam name="T">The type of the record.</typeparam>
            <param name="records">The list of records to write.</param>
        </member>
        <member name="M:CsvHelper.ICsvWriter.InvalidateRecordCache``1">
            <summary>
            Invalidates the record cache for the given type. After <see cref="M:CsvHelper.ICsvWriter.WriteRecord``1(``0)"/> is called the
            first time, code is dynamically generated based on the <see cref="T:CsvHelper.Configuration.CsvPropertyMapCollection"/>,
            compiled, and stored for the given type T. If the <see cref="T:CsvHelper.Configuration.CsvPropertyMapCollection"/>
            changes, <see cref="M:CsvHelper.ICsvWriter.InvalidateRecordCache``1"/> needs to be called to updated the
            record cache.
            </summary>
        </member>
        <member name="P:CsvHelper.ICsvWriter.Configuration">
            <summary>
            Gets or sets the configuration.
            </summary>
        </member>
        <member name="T:CsvHelper.CsvMissingFieldException">
            <summary>
            Represents an error caused because a field is missing
            in the header while reading a CSV file.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvMissingFieldException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvMissingFieldException"/> class.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvMissingFieldException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvMissingFieldException"/> class
            with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper.CsvMissingFieldException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvMissingFieldException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:CsvHelper.CsvMissingFieldException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvMissingFieldException"/> class
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:CsvHelper.CsvParserException">
            <summary>
            Represents errors that occur while parsing a CSV file.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvParserException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvParserException"/> class.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvParserException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvParserException"/> class
            with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper.CsvParserException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvParserException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:CsvHelper.CsvParserException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvParserException"/> class
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:CsvHelper.CsvWriter">
            <summary>
            Used to write CSV files.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Creates a new CSV writer using the given <see cref="T:System.IO.StreamWriter"/>.
            </summary>
            <param name="writer">The writer used to write the CSV file.</param>
        </member>
        <member name="M:CsvHelper.CsvWriter.#ctor(System.IO.TextWriter,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            Creates a new CSV writer using the given <see cref="T:System.IO.StreamWriter"/>
            and <see cref="T:CsvHelper.Configuration.CsvConfiguration"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.StreamWriter"/> use to write the CSV file.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteField(System.String)">
            <summary>
            Writes the field to the CSV file.
            When all fields are written for a record,
            <see cref="M:CsvHelper.ICsvWriter.NextRecord"/> must be called
            to complete writing of the current record.
            </summary>
            <param name="field">The field to write.</param>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteField``1(``0)">
            <summary>
            Writes the field to the CSV file.
            When all fields are written for a record,
            <see cref="M:CsvHelper.ICsvWriter.NextRecord"/> must be called
            to complete writing of the current record.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="field">The field to write.</param>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteField``1(``0,System.ComponentModel.TypeConverter)">
            <summary>
            Writes the field to the CSV file.
            When all fields are written for a record,
            <see cref="M:CsvHelper.ICsvWriter.NextRecord"/> must be called
            to complete writing of the current record.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="field">The field to write.</param>
            <param name="converter">The converter used to convert the field into a string.</param>
        </member>
        <member name="M:CsvHelper.CsvWriter.NextRecord">
            <summary>
            Ends writing of the current record
            and starts a new record. This is used
            when manually writing records with <see cref="M:CsvHelper.ICsvWriter.WriteField``1(``0)"/>
            </summary>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteRecord``1(``0)">
            <summary>
            Writes the record to the CSV file.
            </summary>
            <typeparam name="T">The type of the record.</typeparam>
            <param name="record">The record to write.</param>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteRecords``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes the list of records to the CSV file.
            </summary>
            <typeparam name="T">The type of the record.</typeparam>
            <param name="records">The list of records to write.</param>
        </member>
        <member name="M:CsvHelper.CsvWriter.InvalidateRecordCache``1">
            <summary>
            Invalidates the record cache for the given type. After <see cref="M:CsvHelper.ICsvWriter.WriteRecord``1(``0)"/> is called the
            first time, code is dynamically generated based on the <see cref="T:CsvHelper.Configuration.CsvPropertyMapCollection"/>,
            compiled, and stored for the given type T. If the <see cref="T:CsvHelper.Configuration.CsvPropertyMapCollection"/>
            changes, <see cref="M:CsvHelper.ICsvWriter.InvalidateRecordCache``1"/> needs to be called to updated the
            record cache.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvWriter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:CsvHelper.CsvWriter.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">True if the instance needs to be disposed of.</param>
        </member>
        <member name="M:CsvHelper.CsvWriter.CheckDisposed">
            <summary>
            Checks if the instance has been disposed of.
            </summary>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteHeader``1">
            <summary>
            Writes the header record from the given properties.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvWriter.GetWriteRecordAction``1">
            <summary>
            Gets the action delegate used to write the custom
            class object to the writer.
            </summary>
            <typeparam name="T">The type of the custom class being written.</typeparam>
            <returns>The action delegate.</returns>
        </member>
        <member name="P:CsvHelper.CsvWriter.Configuration">
            <summary>
            Gets or sets the configuration.
            </summary>
        </member>
        <member name="T:CsvHelper.CsvReader">
            <summary>
            Reads data that was parsed from <see cref="T:CsvHelper.ICsvParser"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvReader.#ctor(System.IO.TextReader)">
            <summary>
            Creates a new CSV reader using the given <see cref="T:System.IO.TextReader"/> and
            <see cref="T:CsvHelper.CsvParser"/> as the default parser.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:CsvHelper.CsvReader.#ctor(CsvHelper.ICsvParser)">
            <summary>
            Creates a new CSV reader using the given <see cref="T:CsvHelper.ICsvParser"/>.
            </summary>
            <param name="parser">The <see cref="T:CsvHelper.ICsvParser"/> used to parse the CSV file.</param>
        </member>
        <member name="M:CsvHelper.CsvReader.Read">
            <summary>
            Advances the reader to the next record.
            If HasHeaderRecord is true (true by default), the first record of
            the CSV file will be automatically read in as the header record
            and the second record will be returned.
            </summary>
            <returns>True if there are more records, otherwise false.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField(System.Int32)">
            <summary>
            Gets the raw field at index.
            </summary>
            <param name="index">The index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField(System.String)">
            <summary>
            Gets the raw field at name.
            </summary>
            <param name="name">The named index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField``1(System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at index.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The index of the field.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField``1(System.String)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at name.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField``1(System.Int32,System.ComponentModel.TypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at index using
            the given <see cref="T:System.ComponentModel.TypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The index of the field.</param>
            <param name="converter">The <see cref="T:System.ComponentModel.TypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField``1(System.String,System.ComponentModel.TypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at name using
            the given <see cref="T:System.ComponentModel.TypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="converter">The <see cref="T:System.ComponentModel.TypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField``1(System.Int32,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at index.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The index of the field.</param>
            <param name="field">The field converted to type T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField``1(System.String,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at name.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField``1(System.Int32,System.ComponentModel.TypeConverter,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at index
            using the specified <see cref="T:System.ComponentModel.TypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The index of the field.</param>
            <param name="converter">The <see cref="T:System.ComponentModel.TypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField``1(System.String,System.ComponentModel.TypeConverter,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at name
            using the specified <see cref="T:System.ComponentModel.TypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="converter">The <see cref="T:System.ComponentModel.TypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetRecord``1">
            <summary>
            Gets the record converted into <see cref="T:System.Type"/> T.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the record.</typeparam>
            <returns>The record converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetRecords``1">
            <summary>
            Gets all the records in the CSV file and
            converts each to <see cref="T:System.Type"/> T. The Read method
            should not be used when using this.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the record.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> of records.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.InvalidateRecordCache``1">
            <summary>
            Invalidates the record cache for the given type. After <see cref="M:CsvHelper.ICsvReader.GetRecord``1"/> is called the
            first time, code is dynamically generated based on the <see cref="T:CsvHelper.Configuration.CsvPropertyMapCollection"/>,
            compiled, and stored for the given type T. If the <see cref="T:CsvHelper.Configuration.CsvPropertyMapCollection"/>
            changes, <see cref="M:CsvHelper.ICsvReader.InvalidateRecordCache``1"/> needs to be called to updated the
            record cache.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:CsvHelper.CsvReader.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">True if the instance needs to be disposed of.</param>
        </member>
        <member name="M:CsvHelper.CsvReader.CheckDisposed">
            <summary>
            Checks if the instance has been disposed of.
            </summary>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:CsvHelper.CsvReader.CheckHasBeenRead">
            <summary>
            Checks if the reader has been read yet.
            </summary>
            <exception cref="T:CsvHelper.CsvReaderException"/>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField(System.Int32,System.ComponentModel.TypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:System.ComponentModel.TypeConverter"/>.
            </summary>
            <param name="index">The index of the field.</param>
            <param name="converter">The <see cref="T:System.ComponentModel.TypeConverter"/> used to convert the field to <see cref="T:System.Object"/>.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField(System.String,System.ComponentModel.TypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:System.ComponentModel.TypeConverter"/>.
            </summary>
            <param name="name">The named index of the field.</param>
            <param name="converter">The <see cref="T:System.ComponentModel.TypeConverter"/> used to convert the field to <see cref="T:System.Object"/>.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetFieldIndex(System.String)">
            <summary>
            Gets the index of the field at name if found.
            </summary>
            <param name="name">The name of the field to get the index for.</param>
            <returns>The index of the field if found, otherwise -1.</returns>
            <exception cref="T:CsvHelper.CsvReaderException">Thrown if there is no header record.</exception>
            <exception cref="T:CsvHelper.CsvMissingFieldException">Thrown if there isn't a field with name.</exception>
        </member>
        <member name="M:CsvHelper.CsvReader.ParseNamedIndexes">
            <summary>
            Parses the named indexes from the header record.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvReader.GetReadRecordFunc``1">
            <summary>
            Gets the function delegate used to populate
            a custom class object with data from the reader.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of object that is created
            and populated.</typeparam>
            <returns>The function delegate.</returns>
        </member>
        <member name="P:CsvHelper.CsvReader.Configuration">
            <summary>
            Gets or sets the configuration.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvReader.Parser">
            <summary>
            Gets the parser.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvReader.FieldHeaders">
            <summary>
            Gets the field headers.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvReader.CurrentRecord">
            <summary>
            Get the current record;
            </summary>
        </member>
        <member name="P:CsvHelper.CsvReader.Item(System.Int32)">
            <summary>
            Gets the raw field at index.
            </summary>
            <param name="index">The index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="P:CsvHelper.CsvReader.Item(System.String)">
            <summary>
            Gets the raw string field at name.
            </summary>
            <param name="name">The named index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="T:CsvHelper.CsvWriterException">
            <summary>
            Represents errors that occur while writing a CSV file.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvWriterException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvWriterException"/> class.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvWriterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvWriterException"/> class
            with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper.CsvWriterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvWriterException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:CsvHelper.CsvWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvWriterException"/> class
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
    </members>
</doc>
