name: Android build

on:
  push:
  workflow_dispatch:
  
jobs:

  prepare-src:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set Version
        id: setVersion
        run: |
          curl -sL https://github.com/mikefarah/yq/releases/download/3.4.1/yq_linux_amd64 -o yq
          chmod +x ./yq
          ./yq w -i ./GitVersion.yml next-version $(cat ./src/.version)
          dotnet tool install --global GitVersion.Tool
          dotnet gitversion /updateprojectfiles

          dotnet gitversion /showvariable AssemblySemFileVer > .version
          dotnet gitversion /showvariable BuildMetaData > .buildNumber
          dotnet gitversion /showvariable EscapedBranchName > .branch 
      - run: tar -czf sources.tar.gz --exclude=./src/Installation ./src ./build ./libs Security .version .buildNumber .branch Dockerfile.*
      - uses: actions/upload-artifact@v2
        with:
          name: sources
          path: ./sources.tar.gz
          retention-days: 1

  android_apps:
    runs-on: windows-latest
    needs: [ prepare-src ]
    strategy:
      matrix:
        image:
          - name: WBCapi.apk
            args: -noSupervisor -noExtInterviewer
          - name: WBCapi.Ext.apk
            args: -noSupervisor -noLiteInterviewer
          - name: Supervisor.apk
            args: -noExtInterviewer -noLiteInterviewer
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 'true'
    steps:
      - run: git config --system core.longpaths true
      - uses: actions/download-artifact@v2
        with:
          name: sources
          path: ./
      - run: tar -xzf sources.tar.gz

      - uses: microsoft/setup-msbuild@v1.0.2
      - name: build
        shell: pwsh
        run: |
          ./build/build.Android.ps1 `
            -BuildNumber $(gc .buildNumber) `
            -BuildConfiguration Release `
            -branch $(gc .branch) `
            -KeystorePassword ${{ secrets.ANDROID_KEY }} `
            ${{ matrix.image.args }}
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.image.name }}
          path: ./Artifacts/${{ matrix.image.name }}

  android_storage:
    runs-on: ubuntu-latest
    needs: android_apps
    
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: sources
          path: ./
      - run: tar -xzf sources.tar.gz

      - uses: actions/download-artifact@v2
        with:
          path: build/androidFiles

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-${{ matrix.image.name }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-android-buildx-

      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_AUTOMATION }}

      - name: Prepare version tags
        id: prep        
        run: |
          # https://github.com/docker/build-push-action#complete-workflow
          DOCKER_IMAGE=ghcr.io/${{ github.repository_owner }}/android
          VERSION=$(cat ./.version)
          BRANCH=$(cat ./.branch)
          
          TAGS="${DOCKER_IMAGE}:$BRANCH"
          if [[ $VERSION =~ ^([0-9]{1,4})\.([0-9]{1,4})\.([0-9]{1,4})(\.[0-9]{1,10})?$  ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${DOCKER_IMAGE}:$BRANCH"
            if [ "$BRANCH" = 'release' ]; then
              TAGS="$TAGS,${DOCKER_IMAGE}:${VERSION}"
              TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR}"
              TAGS="$TAGS,${DOCKER_IMAGE}:latest"
            fi
          fi
          echo "TAGS: $TAGS"
          echo "TAGS: $VERSION"

          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.androidServer
          platforms: linux/amd64 #, linux/arm64
          push: true
          tags: ${{ steps.prep.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          labels: |
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.vendor=Survey Solutions

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
