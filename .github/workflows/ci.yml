name: ci

on:
  push:
    paths:
      - 'src/**'

  pull_request:

concurrency: 
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  unit-web:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
      - uses: actions/checkout@v2
      
      - name: Install Google Fonts
        run: |
          wget -O Noto_Sans.zip https://fonts.google.com/download?family=Noto%20Sans
          unzip -d noto_sans/ Noto_Sans.zip
          mv noto_sans /usr/share/fonts/
          fc-cache -fv
          
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '7.0.x'
      - name: Headquarters unit tests
        run: |
          dotnet test src/Tests/WB.Tests.Unit \
            --collect:"XPlat Code Coverage" \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
      - name: Headquarters web tests
        run: |
          dotnet test src/Tests/WB.Tests.Web \
            --collect:"XPlat Code Coverage" \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
      - name: Designer unit tests
        run: |
          dotnet test src/Tests/WB.Tests.Unit.Designer \
            --collect:"XPlat Code Coverage" \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
      - name: Test coverage artifacts
        uses: actions/upload-artifact@v2
        with:
          name: test-coverage
          retention-days: 1
          path: |
            src/Tests/WB.Tests.Unit/TestResults/**/*.xml
            src/Tests/WB.Tests.Web/TestResults/**/*.xml
            src/Tests/WB.Tests.Unit.Designer/TestResults/**/*.xml

  integration:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    env:
      PG_USER: postgres
      PG_PASSWORD: P@$$w0rd

    services:
      postgres:
        image: postgres:13.1
        env:
          POSTGRES_USER: ${{ env.PG_USER }}
          POSTGRES_PASSWORD: ${{ env.PG_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
 
    steps:
      - uses: actions/checkout@v2
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '7.0.x'

      - name: Create db connection string
        run: echo "DB_CONN=Server=127.0.0.1;Port=${{ job.services.postgres.ports[5432] }};User Id=${{ env.PG_USER }};Password=${{ env.PG_PASSWORD }};" >> $GITHUB_ENV

      - name: Headquarters tests
        run: |
          echo "[ConnectionStrings]\nTestConnection=\"${{ env.DB_CONN }}Database=postgres;CommandTimeout=60;\"" > appsettings.ini
          dotnet test src/Tests/WB.Tests.Integration \
            --collect:"XPlat Code Coverage" \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
      - name: Designer tests
        run: |
          echo "[ConnectionSettings]\nTestConnectionStringFormat=\"${{ env.DB_CONN }}Database=testdb_{0};CommandTimeout=60;\"" > appsettings.ini
          dotnet test src/Tests/WB.Tests.Integration.Designer \
            --collect:"XPlat Code Coverage" \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
      - name: Export service tests
        run: |
          dotnet test src/Services/Export/WB.Services.Export.Tests \
            --collect:"XPlat Code Coverage" \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
      - name: Scheduler service tests
        run: |
          echo "{ \"ConnectionStrings\": { \"DefaultConnection\": \"${{ env.DB_CONN }}Database=export_service_tests;\" }}" > appsettings.json
          dotnet test src/Services/Core/WB.Services.Scheduler.Tests \
            --collect:"XPlat Code Coverage" \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

      - name: Test coverage artifacts
        uses: actions/upload-artifact@v2
        with:
          name: test-coverage
          retention-days: 1
          path: |
            src/Tests/WB.Tests.Integration/TestResults/**/*.xml
            src/Tests/WB.Tests.Integration.Designer/TestResults/**/*.xml
            src/Services/Export/WB.Services.Export.Tests/TestResults/**/*.xml
            src/Services/Core/WB.Services.Scheduler.Tests/TestResults/**/*.xml

  code-analysis:
    if: |
      github.event_name == 'pull_request' || 
      github.ref == 'refs/heads/master' ||
      github.ref == 'refs/heads/rc' ||
      github.ref == 'refs/heads/release'
    needs: [unit-web, integration]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '7.0.x'

      - uses: actions/setup-java@v1
        with:
          java-version: '17'    

      - name: setup sonar scanner
        run: dotnet tool install --global dotnet-sonarscanner

      - uses: actions/download-artifact@v2
        id: test-results
        with:
          name: test-coverage
          path: test-results

      - name: build with scan
        run: |
          dotnet sonarscanner begin \
            /k:"surveysolutions_surveysolutions" \
            /o:"surveysolutions" \
            /v:"$(cat ./src/.version)" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.exclusions="**/migrations/**" \
            /d:sonar.cs.opencover.reportsPaths="${{ steps.test-results.outputs.download-path }}/**/*.xml"
          dotnet build './src/WB without Xamarin.sln'
          dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  code-analysis-js:
    if: |
      github.event_name == 'pull_request' || 
      github.ref == 'refs/heads/master' ||
      github.ref == 'refs/heads/rc' ||
      github.ref == 'refs/heads/release'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Read version
        id: version
        run: |
          ver=$(cat ./src/.version | awk -F. '{printf "%s.%02d.%d\n", $1, $2, $3}')
          echo ::set-output name=version::$ver
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.organization=surveysolutions
            -Dsonar.projectKey=surveysolutions_frontend
            -Dsonar.projectVersion="${{ steps.version.outputs.version }}"
            -Dsonar.sourceEncoding=UTF-8
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
