name: Docker build

on:
  push:
  workflow_dispatch:
  
jobs:
  push:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        image:
          - name: headquarters
            file: Dockerfile.hq
          - name: webtester
            file: Dockerfile.webtester
          - name: designer
            file: Dockerfile.designer
          - name: export
            file: Dockerfile.export
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set Version
        id: setVersion        
        run: |
          curl -sL https://github.com/mikefarah/yq/releases/download/3.4.1/yq_linux_amd64 -o yq
          chmod +x ./yq
          ./yq w -i ./GitVersion.yml next-version $(cat ./src/.version)
          dotnet tool install --global GitVersion.Tool

          dotnet gitversion /updateprojectfiles
          echo "::set-output name=version::$(dotnet gitversion /showvariable AssemblySemFileVer)"

      - name: Prepare
        id: prep
        # https://github.com/docker/build-push-action#complete-workflow
        run: |
          DOCKER_IMAGE=ghcr.io/${{ github.repository }}/${{ matrix.image.name }}
          VERSION=${{ steps.setVersion.outputs.version }}

          TAGS="${DOCKER_IMAGE}:${VERSION}"
          
          if [[ $VERSION =~ ^([0-9]{1,4})\.([0-9]{1,4})\.([0-9]{1,4})(\.[0-9]{1,10})?$  ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
          fi
          echo "TAGS: $TAGS"
          echo "TAGS: $VERSION"

          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_AUTOMATION }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./${{ matrix.image.file }}
          platforms: linux/amd64, linux/arm64
          push: true
          tags: ${{ steps.prep.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  android_apps:
    runs-on: windows-latest
    strategy:
      matrix:
        image:
          - name: WBCapi.apk
            args: -noSupervisor -noExtInterviewer
          - name: WBCapi.Ext.apk
            args: -noSupervisor -noLiteInterviewer
          - name: Supervisor.apk
            args: -noExtInterviewer -noLiteInterviewer         
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 'true'
    steps:
      - run: git config --system core.longpaths true
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set Version
        id: setVersion        
        run: |
          curl.exe -sL https://github.com/mikefarah/yq/releases/download/3.4.1/yq_windows_amd64.exe -o yq.exe
          ./yq.exe w -i ./GitVersion.yml next-version (gc ./src/.version)
          dotnet tool install --global GitVersion.Tool

          dotnet gitversion /updateprojectfiles
          echo "::set-output name=version::$(dotnet gitversion /showvariable AssemblySemFileVer)"
          echo "::set-output name=buildNumber::$(dotnet gitversion /showvariable BuildMetaData)"
          echo "::set-output name=branch::$(dotnet gitversion /showvariable EscapedBranchName)"
        shell: powershell
      - uses: microsoft/setup-msbuild@v1.0.2
      - name: build
        shell: pwsh
        run: |          
          ./build/build.Android.ps1 `
            -BuildNumber ${{ steps.setVersion.outputs.buildNumber }} `
            -BuildConfiguration Release `
            -branch ${{ steps.setVersion.outputs.branch }} `
            -KeystorePassword ${{ secrets.ANDROID_KEY }} `
            ${{ matrix.image.args }}
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.image.name }}
          path: ./Artifacts/${{ matrix.image.name }}

  android_storage:
    runs-on: ubuntu-latest
    needs: android_apps
    
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v2
        with:
          path: build/androidFiles

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_AUTOMATION }}

      - uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
 
      - name: Prepare version tags
        id: prep        
        run: |
          curl -sL https://github.com/mikefarah/yq/releases/download/3.4.1/yq_linux_amd64 -o yq
          chmod +x ./yq
          ./yq w -i ./GitVersion.yml next-version $(cat ./src/.version)
          dotnet tool install --global GitVersion.Tool

          dotnet gitversion /updateprojectfiles
          echo "::set-output name=version::$(dotnet gitversion /showvariable AssemblySemFileVer)"

          # https://github.com/docker/build-push-action#complete-workflow
          DOCKER_IMAGE=ghcr.io/${{ github.repository }}/android
          VERSION=$(dotnet gitversion /showvariable AssemblySemFileVer)

          TAGS="${DOCKER_IMAGE}:${VERSION}"
          
          if [[ $VERSION =~ ^([0-9]{1,4})\.([0-9]{1,4})\.([0-9]{1,4})(\.[0-9]{1,10})?$  ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
          fi
          echo "TAGS: $TAGS"
          echo "TAGS: $VERSION"

          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.androidServer
          platforms: linux/amd64, linux/arm64
          push: true
          tags: ${{ steps.prep.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
