name: Docker build

on:
  push:
  workflow_dispatch:
  
jobs:
  prepare-src:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set Version
        id: setVersion
        run: |
          curl -sL https://github.com/mikefarah/yq/releases/download/3.4.1/yq_linux_amd64 -o yq
          chmod +x ./yq
          ./yq w -i ./GitVersion.yml next-version $(cat ./src/.version)
          dotnet tool install --global GitVersion.Tool
          dotnet gitversion /updateprojectfiles

          dotnet gitversion /showvariable AssemblySemFileVer > .version
          dotnet gitversion /showvariable BuildMetaData > .buildNumber
          dotnet gitversion /showvariable EscapedBranchName > .branch 
      - run: tar -czf sources.tar.gz --exclude=./src/Installation ./src ./libs .version Dockerfile.*
      - uses: actions/upload-artifact@v2
        with:
          name: sources
          path: ./sources.tar.gz
          retention-days: 1

  build-js-ui:
    runs-on: ubuntu-latest
    needs: [ prepare-src ]
    strategy:
      matrix:
        project:
          - name: frontend
            dir: src/UI/WB.UI.Frontend
            
          - name: questionnaire-app
            dir: src/UI/WB.UI.Designer/questionnaire-app
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: sources
          path: ./
      - run: tar -xzf sources.tar.gz

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('${{ matrix.project.dir }}/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}- 
      - run: npm ci && npm run build
        working-directory: ${{ matrix.project.dir }}

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.project.name }}
          path: ${{ matrix.project.dir }}/dist
          retention-days: 1


  docker:
    runs-on: ubuntu-latest
    needs: [ build-js-ui ]
    strategy:
      matrix:
        image:
          - name: headquarters
            file: Dockerfile.hq
            js: frontend
          - name: headquarters_full
            file: Dockerfile.hq_full
            js: frontend
          - name: webtester
            file: Dockerfile.webtester
            js: frontend
          - name: designer
            file: Dockerfile.designer
            js: questionnaire-app
          - name: export
            file: Dockerfile.export
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: sources
          path: ./
      - run: ls
      - run: tar -xzf sources.tar.gz

      - uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.image.js }}
          path: ./build/jsFiles/${{ matrix.image.js }}
  
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Prepare
        id: prep
        # https://github.com/docker/build-push-action#complete-workflow
        run: |
          DOCKER_IMAGE=ghcr.io/${{ github.repository_owner }}/${{ matrix.image.name }}
          VERSION=$(cat .version)
          BRANCH=$(cat .branch)
          TAGS="${DOCKER_IMAGE}:$BRANCH"

          if [[ $VERSION =~ ^([0-9]{1,4})\.([0-9]{1,4})\.([0-9]{1,4})(\.[0-9]{1,10})?$  ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${DOCKER_IMAGE}:$BRANCH"

            if [ "$BRANCH" = 'release' ]; then
              TAGS="$TAGS,${DOCKER_IMAGE}:${VERSION}"
              TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR}"
              TAGS="$TAGS,${DOCKER_IMAGE}:latest"
            fi
          fi

          echo "TAGS: $TAGS"
          echo "TAGS: $VERSION"

          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=buildNumber::$(cat .buildNumber)
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_AUTOMATION }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./${{ matrix.image.file }}
          platforms: linux/amd64 #, linux/arm64
          push: true
          tags: ${{ steps.prep.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          build-args: |
            BUILD_NUMBER=${{ steps.prep.outputs.buildNumber }}
          labels: |
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.vendor=Survey Solutions

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
