@using reCAPTCHA.AspNetCore
@using WB.Enumerator.Native.Resources
@using WB.UI.Headquarters.Models.WebInterview
@using WB.UI.Headquarters.Services
@using WB.UI.Shared.Web.Captcha
@model WB.UI.Headquarters.Models.WebInterview.StartWebInterview
@{
    bool isPasswordInvalid = ViewData.ModelState.ContainsKey("InvalidPassword") && ViewData.ModelState["InvalidPassword"].Errors.Any();
    bool isResume = Model is ResumeWebInterview;
}

@inject ICaptchaProvider captchaProvider

@if (Model.ServerUnderLoad)
{
    <p><strong>@Html.Raw(WebInterview.ServerUnderLoad)</strong></p>
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    if (Model.UseCaptcha && !Model.ServerUnderLoad)
    {
        if (ViewData.ModelState.ContainsKey("InvalidCaptcha") && ViewData.ModelState["InvalidCaptcha"].Errors.Any())
        {
            <div class="form-group has-error">
                <p>
                    <span class="help-block">
                        @Html.ValidationMessage("InvalidCaptcha")
                    </span>
                </p>
            </div>
        }
            <div class="form-group">
                @if (captchaProvider is RecaptchaProvider)
                {
                    @inject IOptions<RecaptchaSettings> RecaptchaSettings
                        @Html.Recaptcha(RecaptchaSettings.Value)
                }
                else if (captchaProvider is HostedCaptchaProvider hosted)
                {
                    @hosted.Render(Html)
                }
            </div>
    }

    if (Model.HasPassword)
    {
        <div class="form-group @(isPasswordInvalid? "has-error": "")">
            <label class="font-bold primary-text">@WebInterview.EnterPasswordText</label>
            <input class="form-control" type="password" name="password" placeholder="Enter the password" />
            @if (isPasswordInvalid)
            {
                <span class="help-block">@Html.ValidationMessage("InvalidPassword")</span>
            }
        </div>
    }

    if (Model.ServerUnderLoad)
    {
        <div class="row-element">
            <button class="btn btn-success btn-lg" onClick="window.location.reload(); return false;">@WebInterview.RefreshPage</button>
        </div>
    }
    else
    {
        <div class="row-element mb-20">
            <button class="btn btn-success btn-lg" type="submit">@(isResume ? WebInterview.ResumeInterview : WebInterview.Start)</button>
        </div>
    }

    if (Model.PendingInterviewId != Guid.Empty)
    {
        <input name="resume" class="btn btn-success btn-lg" type="submit" value="@WebInterview.ResumeInterview" />
    }
}
