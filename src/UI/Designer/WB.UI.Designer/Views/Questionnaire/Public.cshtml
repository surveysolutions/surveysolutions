@using WB.UI.Designer.BootstrapSupport
@using WB.UI.Designer.BootstrapSupport.HtmlHelpers
@using WB.UI.Designer.Extensions
@using WB.UI.Designer.Models
@using WB.UI.Designer.Utils
@model IPagedList<QuestionnairePublicListViewModel>

@{
    ViewBag.Title = "Public Questionnaires";
}

@if (Model.TotalCount == 0)
{
    @Html.Partial("_list_search_form")
    <p class="text-center" style="line-height: 10em">This list does not contain any records</p>
}
else
{
    @Html.Partial("_list_search_form")
    <table id="questionnaire-table-header" class="table  table-header">
        <thead>
        <tr>
            @ShowTableHeaderCell("Title", "Title")
            @ShowTableHeaderCell("LastEntryDate", "Last modified")
            @ShowTableHeaderCell("CreationDate", "Created date")
            @ShowTableHeaderCell("CreatorName", "Created By")
            <th>
            </th>
        </tr>
        </thead>
    </table>
    <div id="table-content-holder">
        <table id="questionnaire-table-content" class="table table-content">
            <tbody>
                @foreach (var listViewModel in Model)
                {
                    var routevalues = listViewModel.GetIdValue();
                    var itemId = listViewModel.GetId();
                    var itemType = listViewModel.GetLabel();
                    var itemName = Uri.EscapeDataString(listViewModel.GetName());
                    
                    <tr class="@(listViewModel.IsDeleted? "deleted": "")">
                        <td class="search-value">
                            @Html.ActionLink(listViewModel.Title, "Open", "App", routevalues, null)
                        </td>
                        <td class="date">
                            @listViewModel.LastEntryDate.FormatDate()
                        </td>
                        <td class="date">
                            @listViewModel.CreationDate.FormatDate()
                        </td>
                        <td class="email">
                            @listViewModel.CreatorName
                        </td>
                        <td>
                            @{
                    var actionModel = listViewModel as IActionItem;
                    if (actionModel != null)
                    {
                        if (actionModel.CanCopy || actionModel.CanDelete || actionModel.CanEdit || actionModel.CanExport || actionModel.CanPreview || actionModel.CanPrint || actionModel.CanSynchronize || actionModel.CanOpen)
                        {
                            <div class="btn-group pull-right">
                                <a class="btn btn-default dropdown-toggle" data-toggle="dropdown" href="#">
                                    Action
                                    <span class="caret"></span>
                                </a>
                                <ul class="dropdown-menu">
                                    @{
                            if (actionModel.CanSynchronize)
                            {
                                <li>@Html.ActionLink("Export to HQ", "Export", "Admin", routevalues, null)</li>
                            }
                            if (actionModel.CanCopy)
                            {
                                <li>@Html.ActionLink("Clone", "Clone", "Questionnaire", routevalues, null)</li>
                            }
                            if (actionModel.CanExportToPdf)
                            {
                                <li class="divider"></li>
                                        <li>@Html.ActionLink("Export as PDF", "exportquestionnaire", "Pdf", routevalues, null)</li>
                            }
                            if (actionModel.CanDelete)
                            {
                                <li class="divider"></li>
                                        <li><a href="#mDelete" data-bind='click: deleteItem.bind($data,"@itemId    ", "@itemType    ", "@itemName    ")' data-toggle="modal">Delete</a></li>
                            }
                                    }
                                </ul>
                            </div>
                        }
                    }
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        @Html.Pager(Model.PageIndex + 1, Model.TotalPages, x => Url.Action(WB.UI.Designer.GlobalHelper.CurrentAction, WB.UI.Designer.GlobalHelper.CurrentController, new { p = x, sb = ViewBag.SortBy, so = ViewBag.SortOrder, f = ViewBag.Filter }), 2)
    </div>
}
@section Modal
{
    <div>
        @Html.Partial("DeleteModalDialog")
    </div>
}
@functions
{
    private string ActionWithOrderField(string sortField)
    {
        var sortOrder = (int?)ViewBag.SortOrder;
        return Url.Action(
            WB.UI.Designer.GlobalHelper.CurrentAction,
            new
            {
                p = ViewBag.PageIndex,
                sb = sortField,
                so = CustomExtensions.InvertBooleableInt(sortOrder, ViewBag.SortBy == sortField),
                f = ViewBag.Filter
            });
    }

}
@helper ShowTableHeaderCell(string field, string title)
{
    var isTableSortedByThisField = ViewBag.SortBy == field;
    <th class="@(isTableSortedByThisField ? "ordered" : "")">
        <a href="@ActionWithOrderField(field)">
            @title
        @{
            if (isTableSortedByThisField)
            {
                <span class="glyphicon glyphicon-triangle-@(((int?)ViewBag.SortOrder).ToBool() ? "top" : "bottom")"></span>
            }
        }
    </a>
</th>
}