@using System.Diagnostics
@using AngleSharp.Dom.Events
@using WB.UI.Designer.Resources
@using WB.UI.Shared.Web.Extensions
@using WB.Core.BoundedContexts.Designer.Implementation.Services

@model WB.UI.Designer.Models.QuestionnaireViewModel

@{
    ViewBag.Title = QuestionnaireController.CreateNew;
}

<div id="edit-form">
    @if (TempData.ContainsKey(Alerts.SUCCESS))
    {
        <div class="alert alert-success header">@Html.Raw(@TempData[Alerts.SUCCESS])</div>
    }
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        <h1>@QuestionnaireController.CreateNewQuestionnaire</h1>
        if (TempData.ContainsKey(Alerts.ERROR))
        {
            <p class="note has-error">@Html.Raw(@TempData[Alerts.ERROR])</p>
        }
        <div class="form-group">
            @Html.TextBoxFor(x => x.Title, new { @class = "form-control", placeholder = QuestionnaireController.QuestionnaireTitle })
            @Html.ValidationMessageFor(x => x.Title, null, new { @class = "help-inline" })
        </div>
        <div class="form-group">
            @Html.TextBoxFor(x => x.SubTitle, new { @class = "form-control", placeholder = QuestionnaireController.QuestionnaireSubTitle })
            @Html.ValidationMessageFor(x => x.SubTitle, null, new { @class = "help-inline" })
        </div>
        <div class="form-group">
            @Html.DropDownListFor(x => x.StudyType, StudyTypeProvider.GetStudyTypeItems().Select(i => new SelectListItem() { Text = i.Title, Value = i.Code.ToString() }), QuestionnaireController.SelectStudyType, new { @class = "form-control selectpicker", placeholder = QuestionnaireController.StudyType })
            @Html.ValidationMessageFor(x => x.StudyType, null, new {@class = "help-inline"})
        </div>
        <div class="form-group">
            @Html.TextBoxFor(x => x.Version, new { @class = "form-control", placeholder = QuestionnaireController.Version })
            @Html.ValidationMessageFor(x => x.Version, null, new { @class = "help-inline" })
        </div>
        <div class="form-group">
            @Html.TextBoxFor(x => x.VersionNotes, new { @class = "form-control", placeholder = QuestionnaireController.VersionNotes })
            @Html.ValidationMessageFor(x => x.VersionNotes, null, new { @class = "help-inline" })
        </div>
        <div class="form-group">
            @Html.DropDownListFor(x => x.KindOfData, KindOfDataProvider.GetKindOfDataItems().Select(i => new SelectListItem() { Text = i.Title, Value = i.Code.ToString() }), QuestionnaireController.SelectKindOfData, new { @class = "form-control selectpicker", placeholder = QuestionnaireController.KindOfData })
            @Html.ValidationMessageFor(x => x.KindOfData, null, new { @class = "help-inline" })
        </div>
        <div class="form-group">
            @Html.DropDownListFor(x => x.Country, CountryListProvider.GetCounryItems().Select(i => new SelectListItem() { Text = i.Title, Value = i.Code }), QuestionnaireController.SelectCountry, new { @class = "form-control selectpicker", placeholder = QuestionnaireController.Country })
            @Html.ValidationMessageFor(x => x.Country, null, new { @class = "help-inline" })
        </div>
        <div class="form-group">
            @Html.TextBoxFor(x => x.Year, new { @class = "form-control", placeholder = QuestionnaireController.Year })
            @Html.ValidationMessageFor(x => x.Year, null, new { @class = "help-inline" })
        </div>
        <div class="form-group">
            @Html.TextBoxFor(x => x.Language, new { @class = "form-control", placeholder = QuestionnaireController.Language })
            @Html.ValidationMessageFor(x => x.Language, null, new { @class = "help-inline" })
        </div>
        <div class="form-group">
            @Html.TextBoxFor(x => x.Coverage, new { @class = "form-control", placeholder = QuestionnaireController.Coverage })
            @Html.ValidationMessageFor(x => x.Coverage, null, new { @class = "help-inline" })
        </div>
        <div class="form-group">
            @Html.TextBoxFor(x => x.Universe, new { @class = "form-control", placeholder = QuestionnaireController.Universe })
            @Html.ValidationMessageFor(x => x.Universe, null, new { @class = "help-inline" })
        </div>
        <div class="form-group">
            @Html.TextBoxFor(x => x.UnitOfAnalysis, new { @class = "form-control", placeholder = QuestionnaireController.UnitOfAnalysis })
            @Html.ValidationMessageFor(x => x.UnitOfAnalysis, null, new { @class = "help-inline" })
        </div>
        <div class="form-group">
            @Html.TextBoxFor(x => x.PrimaryInvestigator, new { @class = "form-control", placeholder = QuestionnaireController.PrimaryInvestigator })
            @Html.ValidationMessageFor(x => x.PrimaryInvestigator, null, new { @class = "help-inline" })
        </div>
        <div class="form-group">
            @Html.TextBoxFor(x => x.Funding, new { @class = "form-control", placeholder = QuestionnaireController.Funding })
            @Html.ValidationMessageFor(x => x.Funding, null, new { @class = "help-inline" })
        </div>
        <div class="form-group">
            @Html.TextBoxFor(x => x.Consultant, new { @class = "form-control", placeholder = QuestionnaireController.Consultant })
            @Html.ValidationMessageFor(x => x.Consultant, null, new { @class = "help-inline" })
        </div>
        <div class="form-group">
            @Html.DropDownListFor(x => x.ModeOfDataCollection, ModeOfDataCollectionProvider.GetModeOfDataCollectionItems().Select(i => new SelectListItem() { Text = i.Title, Value = i.Code.ToString() }), QuestionnaireController.SelectModeOfDataCollection, new { @class = "form-control selectpicker", placeholder = QuestionnaireController.ModeOfDataCollection })
            @Html.ValidationMessageFor(x => x.ModeOfDataCollection, null, new { @class = "help-inline" })
        </div>
        <div class="form-group">
            @Html.TextBoxFor(x => x.Notes, new { @class = "form-control", placeholder = QuestionnaireController.Notes })
            @Html.ValidationMessageFor(x => x.Notes, null, new { @class = "help-inline" })
        </div>
        <div class="form-group">
            @Html.TextBoxFor(x => x.Keywords, new { @class = "form-control", placeholder = QuestionnaireController.Keywords })
            @Html.ValidationMessageFor(x => x.Keywords, null, new { @class = "help-inline" })
        </div>
        <div class="form-group">
            @Html.CheckBoxFor(x => x.AgreeToMakeThisQuestionnairePubic, new { @id = "is-agree-to-make-public-questionnaire", @class = "wb-checkbox" })
            <label for="is-agree-to-make-public-questionnaire">
                <span></span>@QuestionnaireController.AgreeToMakeThisQuestionnairePubic
            </label><br />
        </div>

        <div class="form-actions">
            <input type="submit" class="btn btn-success btn-lg" value="@QuestionnaireController.Create" id="inputSubmitQuestionnaire" />
            @Html.ActionLink(QuestionnaireController.Cancel, "Index", "Questionnaire", null, new { @class = "btn " })
        </div>
    }
</div>

@section Scripts {
    @Styles.Render("~/editform-css")
    @Scripts.Render("~/editform")
    <script>
        $(function () {
            $('#edit-form').submit(function () {
                $('#inputSubmitQuestionnaire').attr("disabled", true);
                return true;
            });
        });</script>
}