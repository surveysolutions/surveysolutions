@using System.Runtime.Serialization.Formatters
@using System.Web.Script.Serialization
@using Newtonsoft.Json
@using WB.UI.Designer
@using WB.UI.Designer.Utils
@model WB.UI.Designer.Models.QuestionnaireEditView

@{
    ViewBag.Title = "Edit " + Model.Questionnaire.Title;
    var serializer = new JavaScriptSerializer(new TypeResolver());
}
@section Styles{
    @Styles.Render("~/content/edit")
    <!--[if IE 7]>
      <link href="~/Content/font-awesome-ie7.min.css" rel="stylesheet" />
    <![endif]-->
}
@section Scripts{
    <script type="text/javascript">
        var input = window.input || (function(document) {
            'use strict';
            var q = @Html.Raw(JsonConvert.SerializeObject(Model.Questionnaire, Formatting.None, new JsonSerializerSettings()
                    {
                        TypeNameHandling = TypeNameHandling.Objects,
                        TypeNameAssemblyFormat = FormatterAssemblyStyle.Simple
                    }));
            return {
                questionnaire: q,
                sharedPersons: @Html.Raw(Json.Encode(Model.SharedPersons)),
                commandExecutionUrl: '@Url.Action("Execute", "Command", new {}, Request.Url.Scheme)',
                url: {
                    checkUserUrl: '@Url.Action("FindByEmail", "Account", null, Request.Url.Scheme)',
                    lackOfPermitsUrl: '@Url.Action("LackOfPermits", "Questionnaire", null, Request.Url.Scheme)'
                },
                settings: {
                    messages: {
                        unhandledExceptionMessage: 'An unexpected error occurred. We are sorry for inconvenience. Please try to refresh this page and if this error will occure again, contact support via following email: <a href="mailto:@AppSettings.Instance.SupportEmail">@AppSettings.Instance.SupportEmail</a>'
                    }
                }
            };
        }(document));

        window.input = input;
    </script>
    @Scripts.Render("~/designer")
    <script type="text/javascript">
        (function() {
            var root = this;

            define3rdPartyModules();
            loadPluginsAndBoot();

            function define3rdPartyModules() {
                // These are already loaded via bundles. 
                // We define them and put them in the root object.
                define('jquery', [], function() { return root.jQuery; });
                define('ko', [], function() { return root.ko; });
                define('amplify', [], function() { return root.amplify; });
                define('infuser', [], function() { return root.infuser; });
                define('moment', [], function() { return root.moment; });
                define('sammy', [], function() { return root.Sammy; });
                define('pnotify', [], function() { return root.jQuery.pnotify; });
                define('underscore', [], function() { return root._; });
                define('bootbox', [], function() { return root.bootbox; });
                define('input', [], function() { return root.input; });
            }

            function loadPluginsAndBoot() {
                requirejs.config({
                    baseUrl: '@Url.Content("~/Scripts/lib/")',
                    paths: {
                        'ace/mode/ncalc': '/ace/mode-ncalc'
                    }
                });
                requirejs([
                    'ko.bindingHandlers',
                    'ko.debug.helpers'
                ], boot);
            }

            function boot() {
                require(['jquery', 'config', 'dataprimer', 'binder', 'route-config'],
                    function($, config, dataprimer, binder, routeConfig) {
                        $.when(dataprimer.fetch())
                            .done(binder.bind)
                            .done(routeConfig.register);
                    });
            }
        })();
    </script>

}

<div id="unsavedWarningMessageContainer" class="statistics" data-bind="with: statistics">
    <div id="unsavedWarningMessage" class="alert" data-bind="visible: hasUnsaved()">
        <strong>Warning!</strong> <span data-bind="html: unsavedWarningMessage"></span>
    </div>
</div>
<div id="stacks" data-bind="css: {'output-visible': isOutputVisible}">

    <div id="footer">
        <div class="inner">
            <div class="row-fluid">

                <div class="span4">
                    <div class="form-horizontal" id="search-form">
                        <div class="control-group">
                            <label class="control-label">Search question</label>
                            <div class="controls">
                                <div id="filter">
                                    <button type="button" class="close" data-bind="click: $root.clearFilter">&times</button>
                                    <input type="text" class="transparent" maxlength="255" data-bind="value: filter, valueUpdate: 'afterkeydown'">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="span6">
                    <div class="statistics">
                        <ul class="nav nav-pills" data-bind="with: statistics">
                            <li><a>Groups: <span class="badge" data-bind="text: groups"></span></a></li>
                            <li><a>Questions: <span class="badge" data-bind="text: questions"></span></a></li>
                        </ul>
                    </div>

                </div>
                <div class="span2">
                    <div id="footer-buttons" class="pull-right">
                        <button class="btn btn-info btn-small" data-bind="click: $root.toggleOutput">
                            <span data-bind="visible: isOutputVisible">Hide</span><span data-bind="    hidden: isOutputVisible">Show</span> errors
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="output" class="stack">
        <div class="inner">
            <div class="title">
                <button type="button" class="close" data-bind="click: $root.toggleOutput">&times</button>
                <span>Errors log</span>
            </div>
            <div class="body">
                <ul data-bind="foreach: errors" class="error-list">
                    <li class="error">
                        <span data-bind="html: $data"></span>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <div id="questionnaire" class="stack">
        <div class="inner">
            <div class="body">
                <ul data-bind="with: questionnaire" class="list">
                    <li>
                        <button id="toggleAllChapters" class="btn btn-info btn-mini" data-toggle="tooltip" data-bind="click: $root.toggleAllChapters, tooltip: $root.toggleAllChaptersTooltip">
                            <span data-bind="visible: $root.isAllChaptersExpanded"><sup><i class="icon-minus icon-white"></i></sup><sub><i class="icon-minus icon-white"></i></sub></span>
                            <span data-bind="visible:  $root.isAllChaptersExpanded()==false"><sup><i class="icon-plus icon-white"></i></sup><sub><i class="icon-plus icon-white"></i></sub></span>
                        </button>
                        <div class="q-item-wrap q-questionnaire" data-bind="css: {selected : isSelected}">

                            <div class="q-item">
                                <div class="group-actions  pull-right">
                                    <div class="btn-group">
                                        <a class="btn dropdown-toggle btn-success btn-mini" data-toggle="dropdown" href="#"><i class=" icon-download icon-white"></i>
                                        </a>
                                        <ul class="dropdown-menu">
                                            <li><a data-bind="click: $root.addChapter" tabindex="-1" href="#"><i class="icon-plus"></i>Add chapter</a></li>
                                        </ul>
                                    </div>
                                </div>
                                <a class="q-title" data-bind="attr: {href: getHref() }, text: title"></a>
                                <i class="icon-warning-sign" data-bind="visible: dirtyFlag().isDirty"></i>
                            </div>
                        </div>
                    </li>
                </ul>
                <!-- ko ifnot: isFilterMode -->
                <ul id="chapters-list" data-bind="sortable: {data: chapters, beforeMove: $root.isMovementPossible}" class="list">
                    <li data-bind="template: { name: 'GroupView' }, allowDrop : true"></li>
                </ul>
                <!-- /ko -->
                <!-- ko if: isFilterMode -->
                <ul id="search-results" data-bind="foreach: searchResult" class="list">
                    <li data-bind="template: { name: template + 'Search' }"></li>
                </ul>
                <!-- /ko -->
            </div>
        </div>
    </div>
    <div id="details-questionnaire" class="details stack" data-bind="with: questionnaire ">
        <div class="inner">
            @{
                this.Html.RenderPartial(this.Model.IsOwner ? "_QuestionnaireDetailsForOwner" : "_QuestionnaireDetails");
            } 
        </div>
    </div>
    <div id="details-group" class="details stack" data-bind="with:selectedGroup ">
        <div class="inner">
            @{
                this.Html.RenderPartial("_GroupDetails");
            }
        </div>
    </div>
    <div id="details-question" class="details stack" data-bind="with:selectedQuestion ">
        <div class="inner">
            @{
                this.Html.RenderPartial("_QuestionDetails");
            }
        </div>
    </div>

</div>

<script type="text/html" id="GroupView">
    <div class="ui-expander" data-bind="expand: isExpanded">
        <button class="btn btn-info btn-mini ui-expander-head pull-left"><i class="icon-plus icon-white"></i><i class="icon-minus icon-white"></i></button>
        <div class="q-item-wrap q-group" data-bind="css: {selected : isSelected, new : isNew}, popover : tip">
            <div class="handler"></div>
            <div class="q-item">
                <div class="group-actions  pull-right">
                    <div class="btn-group">
                        <a class="btn dropdown-toggle btn-success btn-mini" data-toggle="dropdown" href="#"><i class=" icon-download icon-white"></i>
                        </a>
                        <ul class="dropdown-menu">
                            <li><a data-bind="click: $root.addQuestion" tabindex="-1" href="#"><i class="icon-plus"></i>Add Question</a></li>
                            <li><a data-bind="click: $root.addGroup, visible: gtype()=='None'" tabindex="-1" href="#"><i class="icon-plus"></i>Add Group</a></li>
                            <li data-bind="css: {disabled: isNew()}"><a data-bind="    click: $root.cloneGroup" tabindex="-1" href="#"><i class="icon-copy"></i>Clone Group</a></li>
                            <li><a data-bind="click: $root.deleteGroup" tabindex="-1" href="#"><i class="icon-remove"></i>Remove</a></li>
                        </ul>
                    </div>
                </div>
                <a class="q-title" data-bind="attr: {href: getHref() },text: title"></a>
                <i class="icon-warning-sign" data-bind="visible: dirtyFlag().isDirty"></i>
            </div>
        </div>
        <ul data-bind="sortable: { data: children, beforeMove: $root.isMovementPossible}" class="list ui-expander-content">
            @*<ul data-bind="foreach: children" class="list ui-expander-content">*@
            <li data-bind="template: { name: $data.template}"></li>
        </ul>
    </div>
</script>
<script type="text/html" id="QuestionView">
    <div class="q-item-wrap q-question" data-bind="css: {selected : isSelected, new : isNew}">
        <div class="handler"></div>
        <div class="q-item">
            <div class="group-actions  pull-right">
                <div class="btn-group">
                    <a class="btn dropdown-toggle btn-success btn-mini" data-toggle="dropdown" href="#"><i class=" icon-download icon-white"></i>
                    </a>
                    <ul class="dropdown-menu">
                        <li><a data-bind="click: $root.deleteQuestion" tabindex="-1" href="#"><i class="icon-remove"></i>Remove</a></li>
                        <li data-bind="css: {disabled: isNew()}"><a data-bind="    click: $root.cloneQuestion" tabindex="-1" href="#"><i class="icon-copy"></i>Clone Question</a></li>
                    </ul>
                </div>
            </div>
            <span class="alias" data-bind="text: alias"></span>
            <a class="q-title" data-bind="attr: {href: getHref() },text: title"></a>
            <i class="icon-warning-sign" data-bind="visible: dirtyFlag().isDirty"></i>
        </div>
    </div>
</script>
<script type="text/html" id="QuestionViewSearch">
    <div class="q-item-wrap q-question" data-bind="css: {selected : isSelected, new : isNew}">
        <div class="q-item">
            <div class="group-actions  pull-right">
                <div class="btn-group">
                    <a class="btn dropdown-toggle btn-success btn-mini" data-toggle="dropdown" href="#"><i class=" icon-download icon-white"></i>
                    </a>
                    <ul class="dropdown-menu">
                        <li><a data-bind="click: $root.deleteQuestion" tabindex="-1" href="#"><i class="icon-remove"></i>Remove</a></li>
                    </ul>
                </div>
            </div>
            <span class="alias" data-bind="text: alias"></span>
            <a class="q-title" data-bind="attr: {href: getHref() },text: title"></a>
            <i class="icon-warning-sign" data-bind="visible: dirtyFlag().isDirty"></i>
        </div>
    </div>
</script>
@{
    this.Html.RenderPartial("_QuestionTypes");
}
