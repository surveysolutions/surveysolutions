@using System.Web.Mvc.Html
@using Main.Core.Documents
@using Main.Core.Entities.Composite
@using WB.Core.BoundedContexts.Designer.Views.Questionnaire.ChangeHistory
@using WB.Core.GenericSubdomains.Utils
@using WB.UI.Designer.BootstrapSupport
@using WB.UI.Designer.BootstrapSupport.HtmlHelpers
@using WB.UI.Designer.Extensions
@using WB.UI.Designer.Models
@using WB.UI.Designer.Utils
@model WB.Core.BoundedContexts.Designer.Views.Questionnaire.ChangeHistory.QuestionnaireChangeHistory

@{
    ViewBag.Title = "Questionnaire change history";
}
@section Scripts {
    @Scripts.Render("~/list")
}

<table id="questionnaire-table-header" class="table  table-header">
    <thead>
        <tr>
            <th>
                @Html.ActionLink("<- Back to " + Model.Title, "open", "App", new { id = Model.Id.FormatGuid() }, new { @class = "btn btn-default" })
            </th>
            <th>UserName</th>
            <th>Timestamp</th>
        </tr>
    </thead>
</table>
<div id="table-content-holder">
    <div class="scroller-container">
        @if (Model == null || Model.ChangeHistory.Count == 0)
        {
            <p class="text-center" style="line-height: 10em">This list does not contain any records</p>
        }
        else
        {
            var rows = Model.ChangeHistory.ToPagedList(page: Model.PageIndex, pageSize: Model.PageSize, totalCount: Model.TotalCount);
            <table id="questionnaire-table-content" class="table table-content">
                <tbody>
                @foreach (var listViewModel in rows)
                {

                    <tr>
                        <td class="search-value">
                            @Html.FormatQuestionnaireHistoricalRecord(Url, Model.Id, listViewModel)
                        </td>
                        <td>@listViewModel.UserName</td>
                        <td>@listViewModel.Timestamp</td>
                    </tr>
                }
                </tbody>
            </table>
            @Html.Pager(rows.PageIndex + 1, rows.TotalPages, x => Url.Action(WB.UI.Designer.GlobalHelper.CurrentAction, WB.UI.Designer.GlobalHelper.CurrentController, new
            {
                page = x,
                id = Model.Id
            }), 2)
        }
    </div>
</div>