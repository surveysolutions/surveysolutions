@using System.Web.Optimization
@{
    this.Layout = "~/Views/ControlPanel/Layout.ControlPanel.cshtml";
    this.ViewBag.Title = "Control Panel: Read Side";
}
<div class="page-header">
    <h3>
        <div class="row">
            <div class="col-md-9">
                <div>
                    Read Side Control Panel &nbsp; <small><span class="label label-success" data-bind="visible: isRebuildRunning">In progress</span></small>
                </div>
                <div><small>App version: <span data-bind="text: readSideApplicationVersion">?</span> / DB version: <span data-bind="text: readSideDatabaseVersion">?</span></small></div>
            </div>
            <div class="col-md-3">
                <div class="pull-right">
                    <button type="submit" class="btn btn-primary inline-inputs" data-bind="click: rebuild, enable: !isRebuildRunning()">
                        <span class="glyphicon glyphicon-cog"></span> &nbsp; Rebuild
                    </button>
                    <button class="btn inline-inputs margin-left10" data-bind="click: stopRebuilding, enable: isRebuildRunning">
                        <span class="glyphicon glyphicon-remove"></span> &nbsp; Stop
                    </button>
                </div>
            </div>
        </div>
    </h3>
</div>
<div class="panel panel-default">
    <div class="panel-heading">
        <h4 class="panel-title">
            <a data-toggle="collapse" data-target="#filter" href="#filter" class="collapsed">Rebuild by (default : by events)</a>
        </h4>
    </div>
    <div id="filter" class="panel-collapse collapse">
        <div class="panel-body">
            <ul class="nav nav-tabs nav-justified">
                <li data-bind="click: setRebuildByType(Designer.VM.ControlPanel.ReadSide.RebuildReadSideType.All), css: {active: rebuildByAll()}"><a href="#">By events</a></li>
                <li data-bind="click: setRebuildByType(Designer.VM.ControlPanel.ReadSide.RebuildReadSideType.ByHandlers), css: {active: rebuildByHandlers()}"><a href="#">By handlers</a></li>
                <li data-bind="click: setRebuildByType(Designer.VM.ControlPanel.ReadSide.RebuildReadSideType.ByHandlersAndEventSource), css: {active: rebuildByHandlersAndEventSource()}"><a href="#">By handlers & event sources</a></li>
            </ul>
            <div class="panel-body" data-bind="visible: rebuildByAll()">
                <label>Skip events:</label>
                <input type="number" class="form-control" data-bind="value: numberOfSkipedEvents" />
                <div class="help-block">
                    If any of events are skipped, then views will not be deleted.
                </div>
            </div>
            <div class="panel-body" data-bind="visible: rebuildByHandlers()">
                <label>Skip events:</label>
                <input type="number" class="form-control" data-bind="value: numberOfSkipedEvents" />
                <div class="help-block">
                    If any of events are skipped, then views will not be deleted.
                </div>
                <br />
                <!-- ko if: eventHanlers().length > 0 -->
                <table class="table table-striped table-bordered table-condensed table-hover">
                    <thead>
                        <tr>
                            <th></th>
                            <th>Name</th>
                            <th>Builds</th>
                            <th>Uses</th>
                        </tr>
                    </thead>
                    <tbody data-bind="foreach: eventHanlers()">
                        <tr>
                            <td><input type='checkbox' data-bind="value: Name, checked: isChecked" name="handlers" /></td>

                            <td><b data-bind="text: Name"></b></td>
                            <td data-bind="text: BuildsViews.join(', ')"></td>
                            <td data-bind="text: UsesViews.join(', ')"></td>
                        </tr>
                    </tbody>
                </table>
                <!-- /ko -->
            </div>
            <div class="panel-body" data-bind="visible: rebuildByHandlersAndEventSource()">
                <label>Rebuild for event sources:</label>
                <textarea class="form-control" data-bind="value: listOfEventSourcesForRebuild" rows="5"></textarea>
                <div class="help-block">
                    If any of events are skipped, then views will not be deleted.
                </div>
                <br />
                <!-- ko if: eventHanlersForPartialRebuild().length > 0 -->
                <table class="table table-striped table-bordered table-condensed table-hover">
                    <thead>
                        <tr>
                            <th></th>
                            <th>Name</th>
                            <th>Builds</th>
                            <th>Uses</th>
                        </tr>
                    </thead>
                    <tbody data-bind="foreach: eventHanlersForPartialRebuild()">
                        <tr>
                            <td><input type='checkbox' data-bind="value: Name, checked: isChecked" name="handlers" /></td>

                            <td><b data-bind="text: Name"></b></td>
                            <td data-bind="text: BuildsViews.join(', ')"></td>
                            <td data-bind="text: UsesViews.join(', ')"></td>
                        </tr>
                    </tbody>
                </table>
                <!-- /ko -->
            </div>
        </div>
    </div>

</div>

<div>
    <div class="panel-body">
        <div class="well well-sm">Current rebuild stage: &nbsp;<b data-bind="text: currentRebuildStatus, css: {'has-error': hasErrors}" ></b></div>
        <div class="row">
            <div class="col-md-8">
                <!-- ko if: readSideRepositoryWriters().length > 0 -->
                <table class="table table-striped table-bordered table-condensed table-hover">
                    <tbody data-bind="foreach: readSideRepositoryWriters()">
                        <tr>
                            <td data-bind="text: WriterName"></td>
                            <td data-bind="text: Status" style="white-space: pre"></td>
                        </tr>
                    </tbody>
                </table>
                <!-- /ko -->
                <!-- ko if: rebuildDenormalizerStatistic().length > 0 -->

                <table class="table table-striped table-bordered table-condensed table-hover">
                    <tbody data-bind="foreach: rebuildDenormalizerStatistic()">
                        <tr>
                            <td data-bind="text: DenormalizerName"></td>
                            <td data-bind="text: timeSpentDescription"></td>
                            <td data-bind="text: timeSpentInPersentDescription"></td>
                        </tr>
                    </tbody>
                </table>
                <!-- /ko -->
            </div>
            <div class="col-md-4">
                <ul class="list-group">
                    <li class="list-group-item">
                        <span class="badge" data-bind="date:lastStatusUpdateTime, format: 'MM/DD/YYYY HH:mm:ss'"></span>
                        Updated from server
                    </li>
                    <li class="list-group-item">
                        <span class="badge" data-bind="date:lastRebuildDate, format: 'MM/DD/YYYY HH:mm'"></span>
                        Last rebuild date
                    </li>
                    <li class="list-group-item">
                        <span class="badge" data-bind="text:readSideRepositoryWriters().length"></span>
                        Registered writers
                    </li>
                </ul>
                <ul class="list-group">
                    <li class="list-group-item">
                        <span class="badge" data-bind="text: skippedEvents"></span>
                        Skipped events
                    </li>
                    <li class="list-group-item">
                        <span class="badge" data-bind="text: totalEvents"></span>
                        Total events
                    </li>
                    <li class="list-group-item">
                        <span class="badge" data-bind="text: processedEvents"></span>
                        Processed events
                    </li>
                    <li class="list-group-item">
                        <span class="badge" data-bind="text: failedEvents"></span>
                        Failed events
                    </li>
                    <li class="list-group-item">
                        <span class="badge" data-bind="text: speed"></span>
                        Speed(events per minute)
                    </li>
                    <li class="list-group-item">
                        <span class="badge" data-bind="text: timeSpent"></span>
                        Time spent republishing
                    </li>
                    <li class="list-group-item">
                        <span class="badge" data-bind="text: estimatedTime"></span>
                        Estimated time
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>
<div>
    <div class="panel-body">
        <!-- ko if: rebuildErrors().length > 0 -->
        <table class="table table-striped table-bordered table-condensed table-hover">
            <thead>
                <tr>
                    <th style="width: 1px">Error date</th>
                    <th>Error message</th>
                </tr>
            </thead>
            <tbody data-bind="foreach: rebuildErrors()">
                <tr>
                    <td class="text-nowrap" data-bind="date: ErrorTime, format:'MM/DD/YYYY HH:mm:ss'"></td>
                    <td>
                        <div class="accordion-group accordion-caret">
                            <div class="accordion-heading">
                                <a class="accordion-toggle collapsed" data-toggle="collapse" data-bind="attr:{ href: '#'+ ErrorKey()}">
                                    <strong data-bind="text: ErrorMessage"></strong>
                                </a>
                            </div>
                            <div class="accordion-body collapse" data-bind="attr:{ id: ErrorKey}">
                                <pre class="accordion-inner margin-left10" data-bind="text: InnerException"></pre>
                            </div>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
        <!-- /ko -->
    </div>
</div>

@section scripts
        {
    <style>
        .accordion-caret .accordion-toggle:hover {
            text-decoration: none;
        }

            .accordion-caret .accordion-toggle:hover span,
            .accordion-caret .accordion-toggle:hover strong {
                text-decoration: underline;
            }

        .accordion-caret .accordion-toggle:not(.collapsed):before {
            content: "▾";
            margin-right: 0px;
        }

        .accordion-caret .accordion-toggle.collapsed:before {
            content: "▸";
            margin-right: 0px;
        }
        .has-error {
            color: red;
        }
    </style>

    @Scripts.Render("~/readsidebundle")
    <script type="text/javascript">
        var updateRebuildStatusApiUrl = '@Url.RouteUrl("DefaultApiWithAction", new { httproute = "", controller = "ControlPanelApi", action = "GetReadSideStatus" })';
        var eventHandlersApiUrl = '@Url.RouteUrl("DefaultApiWithAction", new { httproute = "", controller = "ControlPanelApi", action = "GetAllAvailableHandlers" })';
        var rebuildApiUrl = '@Url.RouteUrl("DefaultApiWithAction", new { httproute = "", controller = "ControlPanelApi", action = "RebuildReadSide" })';
        var stopRebuildApiUrl = '@Url.RouteUrl("DefaultApiWithAction", new { httproute = "", controller = "ControlPanelApi", action = "StopReadSideRebuilding" })';

        var viewModel = new Designer.VM.ControlPanel.ReadSide(rebuildApiUrl, eventHandlersApiUrl, updateRebuildStatusApiUrl, stopRebuildApiUrl);
        viewModel.load();

        ko.applyBindings(viewModel);
    </script>
}
