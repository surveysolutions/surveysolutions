@model WB.UI.Designer.Views.Questionnaire.QuestionnaireView

@{
    this.ViewBag.Title = "PDF Preview";
}
@section Styles
{
    <meta http-equiv="X-UA-Compatible" content="IE=edge"> 

    @Styles.Render("~/Content/pdf.css")
}
@section Scripts
{
    @Scripts.Render("~/simplepage")
    @Scripts.Render("~/Scripts/compatibility.js")
    @Scripts.Render("~/Scripts/pdf.js")

    
    
    <script type="text/javascript">
        $(function() {
            var url = '@Url.Action("ExportQuestionnaire", "Pdf", new {id = Model.PublicKey})';

            //
            // Disable workers to avoid yet another cross-origin issue (workers need the URL of
            // the script to be loaded, and currently do not allow cross-origin scripts)
            //
            PDFJS.disableWorker = true;

            var pdfDoc = null,
                pageNum = 1,
                scale = 1.6,
                canvas = $('#the-canvas')[0],
                ctx = canvas.getContext('2d');

            //
            // Get page info from document, resize canvas accordingly, and render page
            //

            function renderPage(num) {
                // Using promise to fetch the page
                pdfDoc.getPage(num).then(function(page) {
                    var viewport = page.getViewport(scale);
                    canvas.height = viewport.height;
                    canvas.width = viewport.width;

                    // Render PDF page into canvas context
                    var renderContext = {
                        canvasContext: ctx,
                        viewport: viewport
                    };
                    page.render(renderContext);
                });
            }

            var togglePrevNextButtons = function(currentPageNum, totalPages) {
                if (currentPageNum <= 1) {
                    $('.prevPage').attr('disabled', 'disabled');
                }
                
                if (currentPageNum > 1) {
                    $('.prevPage').removeAttr('disabled');
                }

                if (currentPageNum == totalPages) {
                    $('.nextPage').attr('disabled', 'disabled');
                }
                
                if (currentPageNum < totalPages) {
                    $('.next').removeAttr('disabled');
                }
            };

            //
            // Go to previous page
            //
            $('.prevPage').click(function() {
                if (pageNum <= 1) {
                    return;
                }
                debugger;
                pageNum--;
                togglePrevNextButtons(pageNum, pdfDoc.numPages);
                renderPage(pageNum);
            });

            $('.nextPage').click(function() {
                if (pageNum >= pdfDoc.numPages) {
                    return;
                }

                pageNum++;
                togglePrevNextButtons(pageNum, pdfDoc.numPages);

                renderPage(pageNum);
            });

            //
            // Asynchronously download PDF as an ArrayBuffer
            //
            PDFJS.getDocument(url).then(function(_pdfDoc) {
                pdfDoc = _pdfDoc;
                renderPage(pageNum);
            });
        })
    </script>

}
<div class="pdf-preview">

    <div class="buttons">
        @Html.ActionLink("Download PDF", "ExportQuestionnaire", new { id = Model.PublicKey }, new { @class = "btn" })
        <div class="well-small">
            <a class="btn icon-arrow-left prevPage" title="prev page" disabled="disabled"></a>
            <a class="btn icon-arrow-right nextPage" title="next page"></a>
        </div>
    </div>

    <div class="content">
        <canvas id="the-canvas"></canvas>
    </div>

    <div class="buttons">
         <div class="well-small">
            <a class="btn icon-arrow-left prevPage" title="prev page" disabled="disabled"></a>
            <a class="btn icon-arrow-right nextPage" title="next page"></a>
        </div>
        @Html.ActionLink("Download PDF", "ExportQuestionnaire", new { id = Model.PublicKey }, new { @class = "btn" })
    </div>

</div>

