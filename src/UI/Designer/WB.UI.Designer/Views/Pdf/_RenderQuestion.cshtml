@using System
@using System.Linq
@using Main.Core.Entities.SubEntities
@using WB.Core.BoundedContexts.Designer.Resources
@using WB.Core.BoundedContexts.Designer.Views.Questionnaire.Pdf
@using WB.Core.SharedKernels.Questionnaire.Documents
@using WB.UI.Designer.Utils
@model Main.Core.Entities.SubEntities.IQuestion
@{
    PdfQuestionnaireModel questionnaire = ViewBag.Questionnaire;
    var question = Model;
}
<div class="question-container">
    <div class="question">
        <div class="question-title" id="@questionnaire.GetItemRef(question.PublicKey)">@Html.Raw(questionnaire.GetQuestionTitle(question))</div>
        <div class="common-info">
            @if (questionnaire.QuestionHasInstructions(question))
            {
                <div class="instructions">
                    <span>I</span>@questionnaire.GetQuestionInstructionExcerpt(question)
                    @if (questionnaire.InstructionIsTooLong(question))
                    {
                        <div class="more">
                            <a href="#@questionnaire.GetInstructionsRef(question.PublicKey)">@Pdf.Format(PdfStrings.AppendixLink, question.Instructions.Length - questionnaire.Settings.InstructionsExcerptLength, questionnaire.GetEntityIndexInAppendix(question.PublicKey, "I"))</a>
                        </div>
                    }
                </div>
            }
            @if (questionnaire.QuestionHasOptionsFilter(question))
            {
                <div class="instructions">
                    <span>F</span>@questionnaire.GetQuestionOptionsFilterExcerpt(question)
                    @if (questionnaire.OptionsFilterIsTooLong(question))
                    {
                        <div class="more">
                            <a href="#@questionnaire.GetOptionsFilterRef(question.PublicKey)">
                                @Pdf.Format(PdfStrings.AppendixLink, questionnaire.GetQuestionOptionsFilter(question).Length - questionnaire.Settings.VariableExpressionExcerptLength, questionnaire.GetEntityIndexInAppendix(question.PublicKey, "F"))
                            </a>
                        </div>
                    }
                </div>
            }

            @if (questionnaire.QuestionHasEnablementCondition(question))
            {
                <div class="condition"><span>E</span>@questionnaire.GetExpressionExcerpt(question.ConditionExpression)
                    @if (questionnaire.ExpressionIsTooLong(question.ConditionExpression))
                    {
                        <div class="more">
                            <a href="#@questionnaire.GetConditionRef(question.PublicKey)">
                                @Pdf.Format(PdfStrings.AppendixLink, question.ConditionExpression.Length - questionnaire.Settings.ExpressionExcerptLength, questionnaire.GetEntityIndexInAppendix(question.PublicKey, "E"))
                            </a>
                        </div>
                    }
                </div>
            }

            @for (int i = 0; i < questionnaire.GetValidationsCount(question.ValidationConditions); i++)
            {
                var validation = question.ValidationConditions[i];
                <div class="validation-expression"><span>@(validation.Severity == ValidationSeverity.Warning ?"W":"E")@(i + 1)</span>@questionnaire.GetExpressionExcerpt(validation.Expression)
                    @if (questionnaire.ExpressionIsTooLong(validation.Expression))
                    {
                        <div class="more">
                            <a href="#@questionnaire.GetValidationsRef(question.PublicKey)">
                                @Pdf.Format(PdfStrings.AppendixLink, validation.Expression.Length - questionnaire.Settings.ExpressionExcerptLength, questionnaire.GetEntityIndexInAppendix(question.PublicKey, "V"))
                            </a>
                        </div>
                    }
                </div>
                if (!string.IsNullOrWhiteSpace(@validation.Message))
                {
                    <div class="validation-message"><span>M@(i + 1)</span>@validation.Message</div>
                }
            }
        </div>
    </div>
    <div class="answer">
        <div class="question-meta">
            <div class="type">
                @questionnaire.GetFormattedQuestionType(question)
                @if (!questionnaire.IsInterviewerQuestion(question))
                {
                    <br />
                    <span>@string.Format(PdfStrings.Scope, questionnaire.GetQuestionScope(question))</span>
                }
            </div>
            <div class="variable_name">@question.StataExportCaption</div>
        </div>

        @switch (question.QuestionType)
            {
                case QuestionType.SingleOption:
                <div class="answer-editor">
                    @foreach (var option in question.Answers.Take(questionnaire.Settings.OptionsExcerptCount))
                    {
                        <div class="option">
                            <div class="option-value"><span >@questionnaire.GetFormattedOptionValue(question.Answers, @option.AnswerValue)</span></div>
                            <div class="option-text">
                                <input type="radio" id="@question.StataExportCaption-@option.AnswerValue" name="@question.StataExportCaption">
                                <label for="@question.StataExportCaption-@option.AnswerValue">@option.AnswerText</label>
                            </div>
                        </div>
                    }
                    @if (question.Answers.Count > questionnaire.Settings.OptionsExcerptCount)
                    {
                        <div class="more">
                            <a href="#@questionnaire.GetOptionsRef(question.PublicKey)">
                                @Pdf.Format(PdfStrings.AppendixLink, question.Answers.Count - questionnaire.Settings.OptionsExcerptCount, questionnaire.GetEntityIndexInAppendix(question.PublicKey, "O"))
                            </a>
                        </div>
                    }
                </div>
                break;
            case QuestionType.MultyOption:
                <div class="answer-editor multi-option">
                    @foreach (var option in question.Answers.Take(questionnaire.Settings.OptionsExcerptCount))
                    {
                        <div class="option">
                            <div class="option-value">
                                @questionnaire.GetFormattedOptionValue(question.Answers, @option.AnswerValue)
                            </div>
                            @if (questionnaire.IsYesNoMultiQuestion(question))
                            {
                                <div class="yes_no_multiselect">
                                    <input type="radio" id="@question.StataExportCaption-@option.AnswerValue-yes" name="@question.StataExportCaption-@option.AnswerValue">
                                    <label for="@question.StataExportCaption-@option.AnswerValue-yes"></label>
                                    <span style="vertical-align: top;">/</span>
                                    <input type="radio" id="@question.StataExportCaption-@option.AnswerValue-no" name="@question.StataExportCaption-@option.AnswerValue">
                                    <label for="@question.StataExportCaption-@option.AnswerValue-no"></label>
                                </div>
                                <div class="yes_no-option-text">@option.AnswerText</div>
                            }
                            else
                            {
                                <div class="option-text">
                                    <input type="checkbox" id="@question.StataExportCaption-@option.AnswerValue" name="@question.StataExportCaption">
                                    <label for="@question.StataExportCaption-@option.AnswerValue">@option.AnswerText</label>
                                </div>
                            }
                        </div>
                    }
                    @if (question.Answers.Count > questionnaire.Settings.OptionsExcerptCount)
                    {
                        <div class="more">
                            <a href="#@questionnaire.GetOptionsRef(question.PublicKey)">
                                @Pdf.Format(PdfStrings.AppendixLink, question.Answers.Count - questionnaire.Settings.OptionsExcerptCount, questionnaire.GetEntityIndexInAppendix(question.PublicKey, "O"))
                            </a>
                        </div>
                    }
                </div>
                break;
            case QuestionType.Numeric:
                <div class="answer-editor">
                    <input type="number" class="dashes">
                </div>
                break;
            case QuestionType.DateTime:
                <div class="answer-editor">
                    <input type="date" class="points">
                </div>
                break;
            case QuestionType.GpsCoordinates:
                <div class="answer-editor gps">
                    <input type="text" class="dashes">
                    <sup>N</sup>
                    <input type="text" class="dashes">
                    <sup>W</sup>
                    <input type="text" class="dashes">
                    <sup>A</sup>
                </div>
                break;
            case QuestionType.Text:
                <div class="answer-editor">
                    <input type="text" class="points">
                </div>
                break;
            case QuestionType.TextList:
                <div class="answer-editor">
                    <input type="text" class="points">
                </div>
                break;
            case QuestionType.QRBarcode:
                <div class="answer-editor">
                </div>
                break;
            case QuestionType.Multimedia:
                <div class="answer-editor">
                </div>
                break;
            case QuestionType.Area:
                <div class="answer-editor">
                </div>
                break;
            case QuestionType.Audio:
                <div class="answer-editor">
                </div>
            break;
        }
    </div>
</div>