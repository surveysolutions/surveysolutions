@using WB.UI.Designer.BootstrapSupport
@using WB.UI.Designer.BootstrapSupport.HtmlHelpers
@using WB.UI.Designer.Extensions
@using WB.UI.Designer.Models
@using WB.UI.Designer.Resources
@using WB.UI.Designer.Utils
@using WB.UI.Shared.Web.Extensions
@model IPagedList<QuestionnaireListViewModel>

<div class="wrapper-questionnaire-table clearfix">
    <table id="questionnaire-table-header" class="table table-header @ViewBag.TableCssClass">
        <thead>
            <tr>
                @ShowTableHeaderCell("Title", QuestionnaireController.Title, true)
                @ShowTableHeaderCell("LastEntryDate", QuestionnaireController.LastModified)
                @ShowTableHeaderCell("CreationDate", QuestionnaireController.CreatedDate)
                @ShowTableHeaderCell("CreatorName", QuestionnaireController.CreatedBy)
                <th>
                </th>
            </tr>
        </thead>
    </table>
    <div id="table-content-holder" class="list-with-icons @ViewBag.TableCssClass">
        <div class="scroller-container">
            @ShowNotificationToUserIfNeeded()
            @if (Model.TotalCount == 0)
            {
                <p class="text-center" style="line-height: 10em">@QuestionnaireController.EmptyList</p>
            }
            else
            {
                <table id="questionnaire-table-content" class="table table-content ">
                    <tbody>
                        @foreach (var listViewModel in Model)
                {
                    var routevalues = listViewModel.GetIdValue();
                    var itemId = listViewModel.GetId();
                    var itemType = listViewModel.GetLabel();
                    var itemName = Uri.EscapeDataString(listViewModel.GetName());
                    var pdfDownloadUrl = Url.Action("download", "Pdf", routevalues);
                    var pdfStatusUrl = Url.Action("status", "Pdf", routevalues);
                    var pdfRetryUrl = Url.Action("Retry", "Pdf", routevalues);
                    var getLanguagesUrl = Url.Action("GetLanguages", "Questionnaire", routevalues);
                    var openActionName = listViewModel.IsFolder ? "Public" : "Details";
                    var iconCssClass = listViewModel.IsFolder ? "tree-icon folder-closed" : "tree-icon";

                            <tr class="@(listViewModel.IsDeleted ? "deleted" : "")">
                                <td class="search-value">
                                    <a href="@Url.Action(openActionName, "Questionnaire", routevalues)">
                                        <span class="@iconCssClass"></span>
                                        @listViewModel.Title
                                    </a>
                                </td>
                                <td class="date">
                                    <time datetime="@listViewModel.LastEntryDate.ToString("o")">@listViewModel.LastEntryDate.FormatDate()</time>

                                </td>
                                <td class="date">
                                    <time datetime="@listViewModel.CreationDate.ToString("o")">@listViewModel.CreationDate.FormatDate()</time>
                                </td>
                                <td class="email">
                                    @listViewModel.Owner
                                </td>
                                <td>
                                    @{
                                        var actionModel = listViewModel as IActionItem;
                                        if (actionModel != null)
                                        {
                                            if (actionModel.CanCopy || actionModel.CanDelete || actionModel.CanExport || actionModel.CanSynchronize || actionModel.CanOpen)
                                            {
                                                <div class="btn-group pull-right">
                                                    <a class="btn btn-default dropdown-toggle" data-toggle="dropdown" href="#">
                                                        @QuestionnaireController.Action
                                                        <span class="caret"></span>
                                                    </a>
                                                    <ul class="dropdown-menu">
                                                        <li>@Html.ActionLink(QuestionnaireController.Open, openActionName, "Questionnaire", routevalues, null)</li>
                                                        @{
                                                            if (actionModel.CanCopy)
                                                            {
                                                                <li>@Html.ActionLink(QuestionnaireController.Copy, "Clone", "Questionnaire", routevalues, null)</li>
                                                            }
                                                            if (actionModel.CanExportToPdf)
                                                            {
                                                                <li class="divider"></li>
                                                                <li>
                                                                    <a href="#mExportPdf" onclick='questionnaireActionModel.exportItemAsPdf("@itemId", "@itemType", "@itemName", "@pdfDownloadUrl", "@pdfStatusUrl", "@pdfRetryUrl", "@getLanguagesUrl")' data-toggle="modal">@QuestionnaireController.ExportAsPDF</a>
                                                                </li>
                                                            }
                                                            if (actionModel.CanSynchronize)
                                                            {
                                                                <li>@Html.ActionLink(QuestionnaireController.Backup, "BackupQuestionnaire", "Admin", routevalues, null)</li>
                                                            }
                                                            if (actionModel.CanAssignFolder)
                                                            {
                                                                <li class="divider"></li>
                                                                <li><a href="#mAssignFolder" onclick='questionnaireActionModel.assignFolder("@itemId", "@itemType", "@itemName")' data-toggle="modal">@QuestionnaireController.AssignFolder</a></li>
                                                            }
                                                            if (actionModel.CanDelete)
                                                            {
                                                                <li class="divider"></li>
                                                                <li><a href="#mDelete" onclick='questionnaireActionModel.deleteItem("@itemId", "@itemType", "@itemName")' data-toggle="modal">@QuestionnaireController.Delete</a></li>
                                                            }
                                                        }
                                                    </ul>
                                                </div>
                                                                }
                                                            }
                                    }
                                </td>
                            </tr>
                                                            }
                    </tbody>
                </table>
                @Html.Pager(Model.PageIndex + 1, Model.TotalPages, x => Url.Action(WB.UI.Designer.GlobalHelper.CurrentAction, WB.UI.Designer.GlobalHelper.CurrentController, new { p = x, sb = ViewBag.SortBy, so = ViewBag.SortOrder, f = ViewBag.Filter }), 2)
                                                            }
        </div>
    </div>
</div>

    @helper ShowTableHeaderCell(string field, string title, bool showSearch = false)
    {
var isTableSortedByThisField = ViewBag.SortBy == field;
    <th class="@(isTableSortedByThisField ? "ordered" : "")">
        <a href="@ActionWithOrderField(field)">
            @title
            @{
                if (isTableSortedByThisField)
                {
                    <span class="glyphicon glyphicon-triangle-@(((int?)ViewBag.SortOrder).ToBool() ? "bottom" : "top")"></span>
                }
            }
        </a>
        @if (showSearch)
        {
            @Html.Partial("_list_search_form")
        }
    </th>
}

    @functions
{
        private string ActionWithOrderField(string sortField)
        {
            var sortOrder = (int?)ViewBag.SortOrder;
            return Url.Action(
                WB.UI.Designer.GlobalHelper.CurrentAction,
                new
                {
                    p = ViewBag.PageIndex,
                    sb = sortField,
                    so = CustomExtensions.InvertBooleableInt(sortOrder, ViewBag.SortBy == sortField),
                    f = ViewBag.Filter,
                    id = ViewBag.FolderId
                });
        }

    }
    @helper ShowNotificationToUserIfNeeded()
    {
if (!string.IsNullOrWhiteSpace(ViewData["UserNotification"] as string)
    || TempData.ContainsKey(Alerts.SUCCESS)
    || TempData.ContainsKey(Alerts.ERROR))
{
        <div id="table-message">
            <p>
                @if (TempData.ContainsKey(Alerts.SUCCESS))
                {
                    @(Html.Raw(@TempData[Alerts.SUCCESS]))
                }
                else if (TempData.ContainsKey(Alerts.ERROR))
                {
                    @(Html.Raw(@TempData[Alerts.ERROR]))
                }
                else
                {
                    @(Html.Raw(ViewData["UserNotification"]))
                }
            </p>
            <a href="#" class="cross" title="@QuestionnaireController.Close" onclick=" $('#table-message').hide() "></a>
        </div>
}
}
