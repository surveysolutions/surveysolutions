define('expressionParser', [], function () {
/* This is PEG grammar that should be compiled in javascript:
{ 
var variables = {};
}
start = phrase 
{
 var result = []
 for(v in variables ){
   result.push(v);
 }
return result;
}

phrase = sep* expression  (operatorWithSeparator expression)*  sep*

expression = "(" phrase")" /  exp   / "contains(" variableOrNumericExpressionWithSeparator  "," sep* variableOrNumericExpression sep* ")"/ in

in = "in(" variableOrNumericExpressionWithSeparator ( "," sep* variableOrNumeric sep*)+ ")"

operatorWithSeparator = sep* operator sep*

operator =  "and" / "or"

operation = ">=" / "<=" / ">" / "<" / "==" / "!=" / "=" 

exp = left:left sep*operation sep* right:right

left = mathOperation / variableOrNumericExpression 

right = mathOperation / variableOrNumericExpression 

mathOperation = additive

additive = left:multiplicative sep* ("+" / "-") sep* right:additive { return left + right; } / multiplicative

multiplicative = left:primary sep* ("*" / "/") sep* right:multiplicative { return left * right; } / primary

primary = variableOrNumericExpression / "(" additive:additive ")" { return additive; }

variableOrNumericExpressionWithSeparator = sep* variableOrNumericExpression sep*

variableOrNumericExpression = value: variableOrNumeric {
    if (value.type=="variable") return value; return undefined; 
}

variableOrNumeric = value: variable {return {type: "variable", value: value}} / value: numeric {return {type:"numeric", value: value}}

variable = "[" letters:([A-Za-z_0-9]+) "]" {var word= letters.join(''); variables[word]=word; return word; }

numeric = digits:[0-9]+ { return parseInt(digits.join(''))
}

sep = [' '\t\r\n]
*/
        
        // This is compiled parser
    expressionParser = (function () {
        /*
         * Generated by PEG.js 0.7.0.
         *
         * http://pegjs.majda.cz/
         */

        function quote(s) {
            /*
             * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
             * string literal except for the closing quote character, backslash,
             * carriage return, line separator, paragraph separator, and line feed.
             * Any character may appear in the form of an escape sequence.
             *
             * For portability, we also escape escape all control and non-ASCII
             * characters. Note that "\0" and "\v" escape sequences are not used
             * because JSHint does not like the first and IE the second.
             */
            return '"' + s
             .replace(/\\/g, '\\\\')  // backslash
             .replace(/"/g, '\\"')    // closing quote character
             .replace(/\x08/g, '\\b') // backspace
             .replace(/\t/g, '\\t')   // horizontal tab
             .replace(/\n/g, '\\n')   // line feed
             .replace(/\f/g, '\\f')   // form feed
             .replace(/\r/g, '\\r')   // carriage return
             .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
             + '"';
        }

        var result = {
            /*
             * Parses the input with a generated parser. If the parsing is successfull,
             * returns a value explicitly or implicitly specified by the grammar from
             * which the parser was generated (see |PEG.buildParser|). If the parsing is
             * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
             */
            parse: function (input, startRule) {
                var parseFunctions = {
                    "start": parse_start,
                    "phrase": parse_phrase,
                    "expression": parse_expression,
                    "in": parse_in,
                    "operatorWithSeparator": parse_operatorWithSeparator,
                    "operator": parse_operator,
                    "operation": parse_operation,
                    "exp": parse_exp,
                    "left": parse_left,
                    "right": parse_right,
                    "additive": parse_additive,
                    "multiplicative": parse_multiplicative,
                    "primary": parse_primary,
                    "variableOrNumericExpressionWithSeparator": parse_variableOrNumericExpressionWithSeparator,
                    "variableOrNumericExpression": parse_variableOrNumericExpression,
                    "variableOrNumeric": parse_variableOrNumeric,
                    "variable": parse_variable,
                    "numeric": parse_numeric,
                    "sep": parse_sep
                };

                if (startRule !== undefined) {
                    if (parseFunctions[startRule] === undefined) {
                        throw new Error("Invalid rule name: " + quote(startRule) + ".");
                    }
                } else {
                    startRule = "start";
                }

                var pos = { offset: 0, line: 1, column: 1, seenCR: false };
                var reportFailures = 0;
                var rightmostFailuresPos = { offset: 0, line: 1, column: 1, seenCR: false };
                var rightmostFailuresExpected = [];
                var cache = {};

                function padLeft(input, padding, length) {
                    var result = input;

                    var padLength = length - input.length;
                    for (var i = 0; i < padLength; i++) {
                        result = padding + result;
                    }

                    return result;
                }

                function escape(ch) {
                    var charCode = ch.charCodeAt(0);
                    var escapeChar;
                    var length;

                    if (charCode <= 0xFF) {
                        escapeChar = 'x';
                        length = 2;
                    } else {
                        escapeChar = 'u';
                        length = 4;
                    }

                    return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
                }

                function clone(object) {
                    var result = {};
                    for (var key in object) {
                        result[key] = object[key];
                    }
                    return result;
                }

                function advance(pos, n) {
                    var endOffset = pos.offset + n;

                    for (var offset = pos.offset; offset < endOffset; offset++) {
                        var ch = input.charAt(offset);
                        if (ch === "\n") {
                            if (!pos.seenCR) { pos.line++; }
                            pos.column = 1;
                            pos.seenCR = false;
                        } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                            pos.line++;
                            pos.column = 1;
                            pos.seenCR = true;
                        } else {
                            pos.column++;
                            pos.seenCR = false;
                        }
                    }

                    pos.offset += n;
                }

                function matchFailed(failure) {
                    if (pos.offset < rightmostFailuresPos.offset) {
                        return;
                    }

                    if (pos.offset > rightmostFailuresPos.offset) {
                        rightmostFailuresPos = clone(pos);
                        rightmostFailuresExpected = [];
                    }

                    rightmostFailuresExpected.push(failure);
                }

                function parse_start() {
                    var cacheKey = "start@" + pos.offset;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = clone(cachedResult.nextPos);
                        return cachedResult.result;
                    }

                    var result0;
                    var pos0;

                    pos0 = clone(pos);
                    result0 = parse_phrase();
                    if (result0 !== null) {
                        result0 = (function (offset, line, column) {
                            var result = []
                            for (v in variables) {
                                result.push(v);
                            }
                            return result;
                        })(pos0.offset, pos0.line, pos0.column);
                    }
                    if (result0 === null) {
                        pos = clone(pos0);
                    }

                    cache[cacheKey] = {
                        nextPos: clone(pos),
                        result: result0
                    };
                    return result0;
                }

                function parse_phrase() {
                    var cacheKey = "phrase@" + pos.offset;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = clone(cachedResult.nextPos);
                        return cachedResult.result;
                    }

                    var result0, result1, result2, result3, result4;
                    var pos0, pos1;

                    pos0 = clone(pos);
                    result0 = [];
                    result1 = parse_sep();
                    while (result1 !== null) {
                        result0.push(result1);
                        result1 = parse_sep();
                    }
                    if (result0 !== null) {
                        result1 = parse_expression();
                        if (result1 !== null) {
                            result2 = [];
                            pos1 = clone(pos);
                            result3 = parse_operatorWithSeparator();
                            if (result3 !== null) {
                                result4 = parse_expression();
                                if (result4 !== null) {
                                    result3 = [result3, result4];
                                } else {
                                    result3 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result3 = null;
                                pos = clone(pos1);
                            }
                            while (result3 !== null) {
                                result2.push(result3);
                                pos1 = clone(pos);
                                result3 = parse_operatorWithSeparator();
                                if (result3 !== null) {
                                    result4 = parse_expression();
                                    if (result4 !== null) {
                                        result3 = [result3, result4];
                                    } else {
                                        result3 = null;
                                        pos = clone(pos1);
                                    }
                                } else {
                                    result3 = null;
                                    pos = clone(pos1);
                                }
                            }
                            if (result2 !== null) {
                                result3 = [];
                                result4 = parse_sep();
                                while (result4 !== null) {
                                    result3.push(result4);
                                    result4 = parse_sep();
                                }
                                if (result3 !== null) {
                                    result0 = [result0, result1, result2, result3];
                                } else {
                                    result0 = null;
                                    pos = clone(pos0);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos0);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos0);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos0);
                    }

                    cache[cacheKey] = {
                        nextPos: clone(pos),
                        result: result0
                    };
                    return result0;
                }

                function parse_expression() {
                    var cacheKey = "expression@" + pos.offset;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = clone(cachedResult.nextPos);
                        return cachedResult.result;
                    }

                    var result0, result1, result2, result3, result4, result5, result6;
                    var pos0;

                    pos0 = clone(pos);
                    if (input.charCodeAt(pos.offset) === 40) {
                        result0 = "(";
                        advance(pos, 1);
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"(\"");
                        }
                    }
                    if (result0 !== null) {
                        result1 = parse_phrase();
                        if (result1 !== null) {
                            if (input.charCodeAt(pos.offset) === 41) {
                                result2 = ")";
                                advance(pos, 1);
                            } else {
                                result2 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\")\"");
                                }
                            }
                            if (result2 !== null) {
                                result0 = [result0, result1, result2];
                            } else {
                                result0 = null;
                                pos = clone(pos0);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos0);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos0);
                    }
                    if (result0 === null) {
                        result0 = parse_exp();
                        if (result0 === null) {
                            pos0 = clone(pos);
                            if (input.substr(pos.offset, 9) === "contains(") {
                                result0 = "contains(";
                                advance(pos, 9);
                            } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"contains(\"");
                                }
                            }
                            if (result0 !== null) {
                                result1 = parse_variableOrNumericExpressionWithSeparator();
                                if (result1 !== null) {
                                    if (input.charCodeAt(pos.offset) === 44) {
                                        result2 = ",";
                                        advance(pos, 1);
                                    } else {
                                        result2 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("\",\"");
                                        }
                                    }
                                    if (result2 !== null) {
                                        result3 = [];
                                        result4 = parse_sep();
                                        while (result4 !== null) {
                                            result3.push(result4);
                                            result4 = parse_sep();
                                        }
                                        if (result3 !== null) {
                                            result4 = parse_variableOrNumericExpression();
                                            if (result4 !== null) {
                                                result5 = [];
                                                result6 = parse_sep();
                                                while (result6 !== null) {
                                                    result5.push(result6);
                                                    result6 = parse_sep();
                                                }
                                                if (result5 !== null) {
                                                    if (input.charCodeAt(pos.offset) === 41) {
                                                        result6 = ")";
                                                        advance(pos, 1);
                                                    } else {
                                                        result6 = null;
                                                        if (reportFailures === 0) {
                                                            matchFailed("\")\"");
                                                        }
                                                    }
                                                    if (result6 !== null) {
                                                        result0 = [result0, result1, result2, result3, result4, result5, result6];
                                                    } else {
                                                        result0 = null;
                                                        pos = clone(pos0);
                                                    }
                                                } else {
                                                    result0 = null;
                                                    pos = clone(pos0);
                                                }
                                            } else {
                                                result0 = null;
                                                pos = clone(pos0);
                                            }
                                        } else {
                                            result0 = null;
                                            pos = clone(pos0);
                                        }
                                    } else {
                                        result0 = null;
                                        pos = clone(pos0);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos0);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos0);
                            }
                            if (result0 === null) {
                                result0 = parse_in();
                            }
                        }
                    }

                    cache[cacheKey] = {
                        nextPos: clone(pos),
                        result: result0
                    };
                    return result0;
                }

                function parse_in() {
                    var cacheKey = "in@" + pos.offset;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = clone(cachedResult.nextPos);
                        return cachedResult.result;
                    }

                    var result0, result1, result2, result3, result4, result5, result6, result7;
                    var pos0, pos1;

                    pos0 = clone(pos);
                    if (input.substr(pos.offset, 3) === "in(") {
                        result0 = "in(";
                        advance(pos, 3);
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"in(\"");
                        }
                    }
                    if (result0 !== null) {
                        result1 = parse_variableOrNumericExpressionWithSeparator();
                        if (result1 !== null) {
                            pos1 = clone(pos);
                            if (input.charCodeAt(pos.offset) === 44) {
                                result3 = ",";
                                advance(pos, 1);
                            } else {
                                result3 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\",\"");
                                }
                            }
                            if (result3 !== null) {
                                result4 = [];
                                result5 = parse_sep();
                                while (result5 !== null) {
                                    result4.push(result5);
                                    result5 = parse_sep();
                                }
                                if (result4 !== null) {
                                    result5 = parse_variableOrNumeric();
                                    if (result5 !== null) {
                                        result6 = [];
                                        result7 = parse_sep();
                                        while (result7 !== null) {
                                            result6.push(result7);
                                            result7 = parse_sep();
                                        }
                                        if (result6 !== null) {
                                            result3 = [result3, result4, result5, result6];
                                        } else {
                                            result3 = null;
                                            pos = clone(pos1);
                                        }
                                    } else {
                                        result3 = null;
                                        pos = clone(pos1);
                                    }
                                } else {
                                    result3 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result3 = null;
                                pos = clone(pos1);
                            }
                            if (result3 !== null) {
                                result2 = [];
                                while (result3 !== null) {
                                    result2.push(result3);
                                    pos1 = clone(pos);
                                    if (input.charCodeAt(pos.offset) === 44) {
                                        result3 = ",";
                                        advance(pos, 1);
                                    } else {
                                        result3 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("\",\"");
                                        }
                                    }
                                    if (result3 !== null) {
                                        result4 = [];
                                        result5 = parse_sep();
                                        while (result5 !== null) {
                                            result4.push(result5);
                                            result5 = parse_sep();
                                        }
                                        if (result4 !== null) {
                                            result5 = parse_variableOrNumeric();
                                            if (result5 !== null) {
                                                result6 = [];
                                                result7 = parse_sep();
                                                while (result7 !== null) {
                                                    result6.push(result7);
                                                    result7 = parse_sep();
                                                }
                                                if (result6 !== null) {
                                                    result3 = [result3, result4, result5, result6];
                                                } else {
                                                    result3 = null;
                                                    pos = clone(pos1);
                                                }
                                            } else {
                                                result3 = null;
                                                pos = clone(pos1);
                                            }
                                        } else {
                                            result3 = null;
                                            pos = clone(pos1);
                                        }
                                    } else {
                                        result3 = null;
                                        pos = clone(pos1);
                                    }
                                }
                            } else {
                                result2 = null;
                            }
                            if (result2 !== null) {
                                if (input.charCodeAt(pos.offset) === 41) {
                                    result3 = ")";
                                    advance(pos, 1);
                                } else {
                                    result3 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\")\"");
                                    }
                                }
                                if (result3 !== null) {
                                    result0 = [result0, result1, result2, result3];
                                } else {
                                    result0 = null;
                                    pos = clone(pos0);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos0);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos0);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos0);
                    }

                    cache[cacheKey] = {
                        nextPos: clone(pos),
                        result: result0
                    };
                    return result0;
                }

                function parse_operatorWithSeparator() {
                    var cacheKey = "operatorWithSeparator@" + pos.offset;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = clone(cachedResult.nextPos);
                        return cachedResult.result;
                    }

                    var result0, result1, result2, result3;
                    var pos0;

                    pos0 = clone(pos);
                    result0 = [];
                    result1 = parse_sep();
                    while (result1 !== null) {
                        result0.push(result1);
                        result1 = parse_sep();
                    }
                    if (result0 !== null) {
                        result1 = parse_operator();
                        if (result1 !== null) {
                            result2 = [];
                            result3 = parse_sep();
                            while (result3 !== null) {
                                result2.push(result3);
                                result3 = parse_sep();
                            }
                            if (result2 !== null) {
                                result0 = [result0, result1, result2];
                            } else {
                                result0 = null;
                                pos = clone(pos0);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos0);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos0);
                    }

                    cache[cacheKey] = {
                        nextPos: clone(pos),
                        result: result0
                    };
                    return result0;
                }

                function parse_operator() {
                    var cacheKey = "operator@" + pos.offset;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = clone(cachedResult.nextPos);
                        return cachedResult.result;
                    }

                    var result0;

                    if (input.substr(pos.offset, 3) === "and") {
                        result0 = "and";
                        advance(pos, 3);
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"and\"");
                        }
                    }
                    if (result0 === null) {
                        if (input.substr(pos.offset, 2) === "or") {
                            result0 = "or";
                            advance(pos, 2);
                        } else {
                            result0 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"or\"");
                            }
                        }
                    }

                    cache[cacheKey] = {
                        nextPos: clone(pos),
                        result: result0
                    };
                    return result0;
                }

                function parse_operation() {
                    var cacheKey = "operation@" + pos.offset;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = clone(cachedResult.nextPos);
                        return cachedResult.result;
                    }

                    var result0;

                    if (input.substr(pos.offset, 2) === ">=") {
                        result0 = ">=";
                        advance(pos, 2);
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\">=\"");
                        }
                    }
                    if (result0 === null) {
                        if (input.substr(pos.offset, 2) === "<=") {
                            result0 = "<=";
                            advance(pos, 2);
                        } else {
                            result0 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"<=\"");
                            }
                        }
                        if (result0 === null) {
                            if (input.charCodeAt(pos.offset) === 62) {
                                result0 = ">";
                                advance(pos, 1);
                            } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\">\"");
                                }
                            }
                            if (result0 === null) {
                                if (input.charCodeAt(pos.offset) === 60) {
                                    result0 = "<";
                                    advance(pos, 1);
                                } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"<\"");
                                    }
                                }
                                if (result0 === null) {
                                    if (input.substr(pos.offset, 2) === "==") {
                                        result0 = "==";
                                        advance(pos, 2);
                                    } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("\"==\"");
                                        }
                                    }
                                    if (result0 === null) {
                                        if (input.substr(pos.offset, 2) === "!=") {
                                            result0 = "!=";
                                            advance(pos, 2);
                                        } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                                matchFailed("\"!=\"");
                                            }
                                        }
                                        if (result0 === null) {
                                            if (input.charCodeAt(pos.offset) === 61) {
                                                result0 = "=";
                                                advance(pos, 1);
                                            } else {
                                                result0 = null;
                                                if (reportFailures === 0) {
                                                    matchFailed("\"=\"");
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    cache[cacheKey] = {
                        nextPos: clone(pos),
                        result: result0
                    };
                    return result0;
                }

                function parse_exp() {
                    var cacheKey = "exp@" + pos.offset;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = clone(cachedResult.nextPos);
                        return cachedResult.result;
                    }

                    var result0, result1, result2, result3, result4;
                    var pos0;

                    pos0 = clone(pos);
                    result0 = parse_left();
                    if (result0 !== null) {
                        result1 = [];
                        result2 = parse_sep();
                        while (result2 !== null) {
                            result1.push(result2);
                            result2 = parse_sep();
                        }
                        if (result1 !== null) {
                            result2 = parse_operation();
                            if (result2 !== null) {
                                result3 = [];
                                result4 = parse_sep();
                                while (result4 !== null) {
                                    result3.push(result4);
                                    result4 = parse_sep();
                                }
                                if (result3 !== null) {
                                    result4 = parse_right();
                                    if (result4 !== null) {
                                        result0 = [result0, result1, result2, result3, result4];
                                    } else {
                                        result0 = null;
                                        pos = clone(pos0);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos0);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos0);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos0);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos0);
                    }

                    cache[cacheKey] = {
                        nextPos: clone(pos),
                        result: result0
                    };
                    return result0;
                }

                function parse_left() {
                    var cacheKey = "left@" + pos.offset;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = clone(cachedResult.nextPos);
                        return cachedResult.result;
                    }

                    var result0;

                    result0 = parse_additive();
                    if (result0 === null) {
                        result0 = parse_variableOrNumericExpression();
                    }

                    cache[cacheKey] = {
                        nextPos: clone(pos),
                        result: result0
                    };
                    return result0;
                }

                function parse_right() {
                    var cacheKey = "right@" + pos.offset;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = clone(cachedResult.nextPos);
                        return cachedResult.result;
                    }

                    var result0;

                    result0 = parse_additive();
                    if (result0 === null) {
                        result0 = parse_variableOrNumericExpression();
                    }

                    cache[cacheKey] = {
                        nextPos: clone(pos),
                        result: result0
                    };
                    return result0;
                }

                function parse_additive() {
                    var cacheKey = "additive@" + pos.offset;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = clone(cachedResult.nextPos);
                        return cachedResult.result;
                    }

                    var result0, result1, result2, result3, result4;
                    var pos0, pos1;

                    pos0 = clone(pos);
                    pos1 = clone(pos);
                    result0 = parse_multiplicative();
                    if (result0 !== null) {
                        result1 = [];
                        result2 = parse_sep();
                        while (result2 !== null) {
                            result1.push(result2);
                            result2 = parse_sep();
                        }
                        if (result1 !== null) {
                            if (input.charCodeAt(pos.offset) === 43) {
                                result2 = "+";
                                advance(pos, 1);
                            } else {
                                result2 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"+\"");
                                }
                            }
                            if (result2 === null) {
                                if (input.charCodeAt(pos.offset) === 45) {
                                    result2 = "-";
                                    advance(pos, 1);
                                } else {
                                    result2 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"-\"");
                                    }
                                }
                            }
                            if (result2 !== null) {
                                result3 = [];
                                result4 = parse_sep();
                                while (result4 !== null) {
                                    result3.push(result4);
                                    result4 = parse_sep();
                                }
                                if (result3 !== null) {
                                    result4 = parse_additive();
                                    if (result4 !== null) {
                                        result0 = [result0, result1, result2, result3, result4];
                                    } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                    if (result0 !== null) {
                        result0 = (function (offset, line, column, left, right) { return left + right; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4]);
                    }
                    if (result0 === null) {
                        pos = clone(pos0);
                    }
                    if (result0 === null) {
                        result0 = parse_multiplicative();
                    }

                    cache[cacheKey] = {
                        nextPos: clone(pos),
                        result: result0
                    };
                    return result0;
                }

                function parse_multiplicative() {
                    var cacheKey = "multiplicative@" + pos.offset;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = clone(cachedResult.nextPos);
                        return cachedResult.result;
                    }

                    var result0, result1, result2, result3, result4;
                    var pos0, pos1;

                    pos0 = clone(pos);
                    pos1 = clone(pos);
                    result0 = parse_primary();
                    if (result0 !== null) {
                        result1 = [];
                        result2 = parse_sep();
                        while (result2 !== null) {
                            result1.push(result2);
                            result2 = parse_sep();
                        }
                        if (result1 !== null) {
                            if (input.charCodeAt(pos.offset) === 42) {
                                result2 = "*";
                                advance(pos, 1);
                            } else {
                                result2 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"*\"");
                                }
                            }
                            if (result2 === null) {
                                if (input.charCodeAt(pos.offset) === 47) {
                                    result2 = "/";
                                    advance(pos, 1);
                                } else {
                                    result2 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"/\"");
                                    }
                                }
                            }
                            if (result2 !== null) {
                                result3 = [];
                                result4 = parse_sep();
                                while (result4 !== null) {
                                    result3.push(result4);
                                    result4 = parse_sep();
                                }
                                if (result3 !== null) {
                                    result4 = parse_multiplicative();
                                    if (result4 !== null) {
                                        result0 = [result0, result1, result2, result3, result4];
                                    } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                    if (result0 !== null) {
                        result0 = (function (offset, line, column, left, right) { return left * right; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4]);
                    }
                    if (result0 === null) {
                        pos = clone(pos0);
                    }
                    if (result0 === null) {
                        result0 = parse_primary();
                    }

                    cache[cacheKey] = {
                        nextPos: clone(pos),
                        result: result0
                    };
                    return result0;
                }

                function parse_primary() {
                    var cacheKey = "primary@" + pos.offset;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = clone(cachedResult.nextPos);
                        return cachedResult.result;
                    }

                    var result0, result1, result2;
                    var pos0, pos1;

                    result0 = parse_variableOrNumericExpression();
                    if (result0 === null) {
                        pos0 = clone(pos);
                        pos1 = clone(pos);
                        if (input.charCodeAt(pos.offset) === 40) {
                            result0 = "(";
                            advance(pos, 1);
                        } else {
                            result0 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"(\"");
                            }
                        }
                        if (result0 !== null) {
                            result1 = parse_additive();
                            if (result1 !== null) {
                                if (input.charCodeAt(pos.offset) === 41) {
                                    result2 = ")";
                                    advance(pos, 1);
                                } else {
                                    result2 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\")\"");
                                    }
                                }
                                if (result2 !== null) {
                                    result0 = [result0, result1, result2];
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                        if (result0 !== null) {
                            result0 = (function (offset, line, column, additive) { return additive; })(pos0.offset, pos0.line, pos0.column, result0[1]);
                        }
                        if (result0 === null) {
                            pos = clone(pos0);
                        }
                    }

                    cache[cacheKey] = {
                        nextPos: clone(pos),
                        result: result0
                    };
                    return result0;
                }

                function parse_variableOrNumericExpressionWithSeparator() {
                    var cacheKey = "variableOrNumericExpressionWithSeparator@" + pos.offset;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = clone(cachedResult.nextPos);
                        return cachedResult.result;
                    }

                    var result0, result1, result2, result3;
                    var pos0;

                    pos0 = clone(pos);
                    result0 = [];
                    result1 = parse_sep();
                    while (result1 !== null) {
                        result0.push(result1);
                        result1 = parse_sep();
                    }
                    if (result0 !== null) {
                        result1 = parse_variableOrNumericExpression();
                        if (result1 !== null) {
                            result2 = [];
                            result3 = parse_sep();
                            while (result3 !== null) {
                                result2.push(result3);
                                result3 = parse_sep();
                            }
                            if (result2 !== null) {
                                result0 = [result0, result1, result2];
                            } else {
                                result0 = null;
                                pos = clone(pos0);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos0);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos0);
                    }

                    cache[cacheKey] = {
                        nextPos: clone(pos),
                        result: result0
                    };
                    return result0;
                }

                function parse_variableOrNumericExpression() {
                    var cacheKey = "variableOrNumericExpression@" + pos.offset;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = clone(cachedResult.nextPos);
                        return cachedResult.result;
                    }

                    var result0;
                    var pos0;

                    pos0 = clone(pos);
                    result0 = parse_variableOrNumeric();
                    if (result0 !== null) {
                        result0 = (function (offset, line, column, value) {
                            if (value.type == "variable") return value; return undefined;
                        })(pos0.offset, pos0.line, pos0.column, result0);
                    }
                    if (result0 === null) {
                        pos = clone(pos0);
                    }

                    cache[cacheKey] = {
                        nextPos: clone(pos),
                        result: result0
                    };
                    return result0;
                }

                function parse_variableOrNumeric() {
                    var cacheKey = "variableOrNumeric@" + pos.offset;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = clone(cachedResult.nextPos);
                        return cachedResult.result;
                    }

                    var result0;
                    var pos0;

                    pos0 = clone(pos);
                    result0 = parse_variable();
                    if (result0 !== null) {
                        result0 = (function (offset, line, column, value) { return { type: "variable", value: value } })(pos0.offset, pos0.line, pos0.column, result0);
                    }
                    if (result0 === null) {
                        pos = clone(pos0);
                    }
                    if (result0 === null) {
                        pos0 = clone(pos);
                        result0 = parse_numeric();
                        if (result0 !== null) {
                            result0 = (function (offset, line, column, value) { return { type: "numeric", value: value } })(pos0.offset, pos0.line, pos0.column, result0);
                        }
                        if (result0 === null) {
                            pos = clone(pos0);
                        }
                    }

                    cache[cacheKey] = {
                        nextPos: clone(pos),
                        result: result0
                    };
                    return result0;
                }

                function parse_variable() {
                    var cacheKey = "variable@" + pos.offset;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = clone(cachedResult.nextPos);
                        return cachedResult.result;
                    }

                    var result0, result1, result2;
                    var pos0, pos1;

                    pos0 = clone(pos);
                    pos1 = clone(pos);
                    if (input.charCodeAt(pos.offset) === 91) {
                        result0 = "[";
                        advance(pos, 1);
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"[\"");
                        }
                    }
                    if (result0 !== null) {
                        if (/^[A-Za-z_0-9]/.test(input.charAt(pos.offset))) {
                            result2 = input.charAt(pos.offset);
                            advance(pos, 1);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("[A-Za-z_0-9]");
                            }
                        }
                        if (result2 !== null) {
                            result1 = [];
                            while (result2 !== null) {
                                result1.push(result2);
                                if (/^[A-Za-z_0-9]/.test(input.charAt(pos.offset))) {
                                    result2 = input.charAt(pos.offset);
                                    advance(pos, 1);
                                } else {
                                    result2 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("[A-Za-z_0-9]");
                                    }
                                }
                            }
                        } else {
                            result1 = null;
                        }
                        if (result1 !== null) {
                            if (input.charCodeAt(pos.offset) === 93) {
                                result2 = "]";
                                advance(pos, 1);
                            } else {
                                result2 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"]\"");
                                }
                            }
                            if (result2 !== null) {
                                result0 = [result0, result1, result2];
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                    if (result0 !== null) {
                        result0 = (function (offset, line, column, letters) { var word = letters.join(''); variables[word] = word; return word; })(pos0.offset, pos0.line, pos0.column, result0[1]);
                    }
                    if (result0 === null) {
                        pos = clone(pos0);
                    }

                    cache[cacheKey] = {
                        nextPos: clone(pos),
                        result: result0
                    };
                    return result0;
                }

                function parse_numeric() {
                    var cacheKey = "numeric@" + pos.offset;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = clone(cachedResult.nextPos);
                        return cachedResult.result;
                    }

                    var result0, result1;
                    var pos0;

                    pos0 = clone(pos);
                    if (/^[0-9]/.test(input.charAt(pos.offset))) {
                        result1 = input.charAt(pos.offset);
                        advance(pos, 1);
                    } else {
                        result1 = null;
                        if (reportFailures === 0) {
                            matchFailed("[0-9]");
                        }
                    }
                    if (result1 !== null) {
                        result0 = [];
                        while (result1 !== null) {
                            result0.push(result1);
                            if (/^[0-9]/.test(input.charAt(pos.offset))) {
                                result1 = input.charAt(pos.offset);
                                advance(pos, 1);
                            } else {
                                result1 = null;
                                if (reportFailures === 0) {
                                    matchFailed("[0-9]");
                                }
                            }
                        }
                    } else {
                        result0 = null;
                    }
                    if (result0 !== null) {
                        result0 = (function (offset, line, column, digits) {
                            return parseInt(digits.join(''))
                        })(pos0.offset, pos0.line, pos0.column, result0);
                    }
                    if (result0 === null) {
                        pos = clone(pos0);
                    }

                    cache[cacheKey] = {
                        nextPos: clone(pos),
                        result: result0
                    };
                    return result0;
                }

                function parse_sep() {
                    var cacheKey = "sep@" + pos.offset;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = clone(cachedResult.nextPos);
                        return cachedResult.result;
                    }

                    var result0;

                    if (/^[' '\t\r\n]/.test(input.charAt(pos.offset))) {
                        result0 = input.charAt(pos.offset);
                        advance(pos, 1);
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("[' '\\t\\r\\n]");
                        }
                    }

                    cache[cacheKey] = {
                        nextPos: clone(pos),
                        result: result0
                    };
                    return result0;
                }


                function cleanupExpected(expected) {
                    expected.sort();

                    var lastExpected = null;
                    var cleanExpected = [];
                    for (var i = 0; i < expected.length; i++) {
                        if (expected[i] !== lastExpected) {
                            cleanExpected.push(expected[i]);
                            lastExpected = expected[i];
                        }
                    }
                    return cleanExpected;
                }



                var variables = {};


                var result = parseFunctions[startRule]();

                /*
                 * The parser is now in one of the following three states:
                 *
                 * 1. The parser successfully parsed the whole input.
                 *
                 *    - |result !== null|
                 *    - |pos.offset === input.length|
                 *    - |rightmostFailuresExpected| may or may not contain something
                 *
                 * 2. The parser successfully parsed only a part of the input.
                 *
                 *    - |result !== null|
                 *    - |pos.offset < input.length|
                 *    - |rightmostFailuresExpected| may or may not contain something
                 *
                 * 3. The parser did not successfully parse any part of the input.
                 *
                 *   - |result === null|
                 *   - |pos.offset === 0|
                 *   - |rightmostFailuresExpected| contains at least one failure
                 *
                 * All code following this comment (including called functions) must
                 * handle these states.
                 */
                if (result === null || pos.offset !== input.length) {
                    var offset = Math.max(pos.offset, rightmostFailuresPos.offset);
                    var found = offset < input.length ? input.charAt(offset) : null;
                    var errorPosition = pos.offset > rightmostFailuresPos.offset ? pos : rightmostFailuresPos;

                    throw new this.SyntaxError(
                      cleanupExpected(rightmostFailuresExpected),
                      found,
                      offset,
                      errorPosition.line,
                      errorPosition.column
                    );
                }

                return result;
            },

            /* Returns the parser source code. */
            toSource: function () { return this._source; }
        };

        /* Thrown when a parser encounters a syntax error. */

        result.SyntaxError = function (expected, found, offset, line, column) {
            function buildMessage(expected, found) {
                var expectedHumanized, foundHumanized;

                switch (expected.length) {
                    case 0:
                        expectedHumanized = "end of input";
                        break;
                    case 1:
                        expectedHumanized = expected[0];
                        break;
                    default:
                        expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
                          + " or "
                          + expected[expected.length - 1];
                }

                foundHumanized = found ? quote(found) : "end of input";

                return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
            }

            this.name = "SyntaxError";
            this.expected = expected;
            this.found = found;
            this.message = buildMessage(expected, found);
            this.offset = offset;
            this.line = line;
            this.column = column;
        };

        result.SyntaxError.prototype = Error.prototype;

        return result;
    })();
        return {
            expressionParser: expressionParser
        };
    });