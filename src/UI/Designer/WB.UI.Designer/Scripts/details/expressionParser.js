define('expressionParser', [], function () {
    /* This is PEG grammar that should be compiled in javascript:
{ 
var variables = {};
}
start = phrase 
{
var result = []
for(v in variables ){
result.push(v);
}
return result;
}
    
phrase = sep* expression  (operatorWithSeparator expression)*  sep*
    
expression = "(" phrase")" /  exp   / "contains" sep* "(" variableOrNumericExpressionWithSeparator  "," sep* variableOrNumericExpression sep* ")"/ in
    
in = "in" sep* "(" variableOrNumericExpressionWithSeparator ( "," sep* variableOrNumeric sep*)+ ")"
    
operatorWithSeparator = sep* operator sep*
    
operator =  "and" / "or"
    
operation = ">=" / "<=" / ">" / "<" / "==" / "!=" / "=" 
    
exp = left:left sep*operation sep* right:right
    
left = mathOperation / variableOrNumericExpression 
    
right = mathOperation / variableOrNumericExpression 
    
mathOperation = additive
    
additive = left:multiplicative sep* ("+" / "-") sep* right:additive { return left + right; } / multiplicative
    
multiplicative = left:primary sep* ("*" / "/") sep* right:multiplicative { return left * right; } / primary
    
primary = variableOrNumericExpression / "(" additive:additive ")" { return additive; }
    
variableOrNumericExpressionWithSeparator = sep* variableOrNumericExpression sep*
    
variableOrNumericExpression = value: variableOrNumeric {
if (value.type=="variable") return value; return undefined; 
}
    
variableOrNumeric = value: variable {return {type: "variable", value: value}} / value: numeric {return {type:"numeric", value: value}}
    
variable = "[" letters:([A-Za-z_0-9]+) "]" {var word= letters.join(''); variables[word]=word; return word; }

number_frac  = "." chars:[0-9]*
        { return "." + chars.join(''); }

numeric 
    = chars:[0-9]+ frac:number_frac?
        { return parseFloat(chars.join('') + frac); }
    
sep = [' '\t\r\n]
    */

    // This is compiled parser
    expressionParser = (function () {
        /*
         * Generated by PEG.js 0.8.0.
         *
         * http://pegjs.majda.cz/
         */

        function peg$subclass(child, parent) {
            function ctor() { this.constructor = child; }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
        }

        function SyntaxError(message, expected, found, offset, line, column) {
            this.message = message;
            this.expected = expected;
            this.found = found;
            this.offset = offset;
            this.line = line;
            this.column = column;

            this.name = "SyntaxError";
        }

        peg$subclass(SyntaxError, Error);

        function parse(input) {
            var options = arguments.length > 1 ? arguments[1] : {},

                peg$FAILED = {},

                peg$startRuleFunctions = { start: peg$parsestart },
                peg$startRuleFunction = peg$parsestart,

                peg$c0 = function () {
                    var result = []
                    for (v in variables) {
                        result.push(v);
                    }
                    return result;
                },
                peg$c1 = peg$FAILED,
                peg$c2 = [],
                peg$c3 = "(",
                peg$c4 = { type: "literal", value: "(", description: "\"(\"" },
                peg$c5 = ")",
                peg$c6 = { type: "literal", value: ")", description: "\")\"" },
                peg$c7 = "contains",
                peg$c8 = { type: "literal", value: "contains", description: "\"contains\"" },
                peg$c9 = ",",
                peg$c10 = { type: "literal", value: ",", description: "\",\"" },
                peg$c11 = "in",
                peg$c12 = { type: "literal", value: "in", description: "\"in\"" },
                peg$c13 = "and",
                peg$c14 = { type: "literal", value: "and", description: "\"and\"" },
                peg$c15 = "or",
                peg$c16 = { type: "literal", value: "or", description: "\"or\"" },
                peg$c17 = ">=",
                peg$c18 = { type: "literal", value: ">=", description: "\">=\"" },
                peg$c19 = "<=",
                peg$c20 = { type: "literal", value: "<=", description: "\"<=\"" },
                peg$c21 = ">",
                peg$c22 = { type: "literal", value: ">", description: "\">\"" },
                peg$c23 = "<",
                peg$c24 = { type: "literal", value: "<", description: "\"<\"" },
                peg$c25 = "==",
                peg$c26 = { type: "literal", value: "==", description: "\"==\"" },
                peg$c27 = "!=",
                peg$c28 = { type: "literal", value: "!=", description: "\"!=\"" },
                peg$c29 = "=",
                peg$c30 = { type: "literal", value: "=", description: "\"=\"" },
                peg$c31 = "+",
                peg$c32 = { type: "literal", value: "+", description: "\"+\"" },
                peg$c33 = "-",
                peg$c34 = { type: "literal", value: "-", description: "\"-\"" },
                peg$c35 = function (left, right) { return left + right; },
                peg$c36 = "*",
                peg$c37 = { type: "literal", value: "*", description: "\"*\"" },
                peg$c38 = "/",
                peg$c39 = { type: "literal", value: "/", description: "\"/\"" },
                peg$c40 = function (left, right) { return left * right; },
                peg$c41 = function (additive) { return additive; },
                peg$c42 = function (value) {
                    if (value.type == "variable") return value; return undefined;
                },
                peg$c43 = function (value) { return { type: "variable", value: value } },
                peg$c44 = function (value) { return { type: "numeric", value: value } },
                peg$c45 = "[",
                peg$c46 = { type: "literal", value: "[", description: "\"[\"" },
                peg$c47 = /^[A-Za-z_0-9]/,
                peg$c48 = { type: "class", value: "[A-Za-z_0-9]", description: "[A-Za-z_0-9]" },
                peg$c49 = "]",
                peg$c50 = { type: "literal", value: "]", description: "\"]\"" },
                peg$c51 = function (letters) { var word = letters.join(''); variables[word] = word; return word; },
                peg$c52 = ".",
                peg$c53 = { type: "literal", value: ".", description: "\".\"" },
                peg$c54 = /^[0-9]/,
                peg$c55 = { type: "class", value: "[0-9]", description: "[0-9]" },
                peg$c56 = function (chars) { return "." + chars.join(''); },
                peg$c57 = null,
                peg$c58 = function (chars, frac) { return parseFloat(chars.join('') + frac); },
                peg$c59 = /^[' '\t\r\n]/,
                peg$c60 = { type: "class", value: "[' '\\t\\r\\n]", description: "[' '\\t\\r\\n]" },

                peg$currPos = 0,
                peg$reportedPos = 0,
                peg$cachedPos = 0,
                peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
                peg$maxFailPos = 0,
                peg$maxFailExpected = [],
                peg$silentFails = 0,

                peg$result;

            if ("startRule" in options) {
                if (!(options.startRule in peg$startRuleFunctions)) {
                    throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
                }

                peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
            }

            function text() {
                return input.substring(peg$reportedPos, peg$currPos);
            }

            function offset() {
                return peg$reportedPos;
            }

            function line() {
                return peg$computePosDetails(peg$reportedPos).line;
            }

            function column() {
                return peg$computePosDetails(peg$reportedPos).column;
            }

            function expected(description) {
                throw peg$buildException(
                  null,
                  [{ type: "other", description: description }],
                  peg$reportedPos
                );
            }

            function error(message) {
                throw peg$buildException(message, null, peg$reportedPos);
            }

            function peg$computePosDetails(pos) {
                function advance(details, startPos, endPos) {
                    var p, ch;

                    for (p = startPos; p < endPos; p++) {
                        ch = input.charAt(p);
                        if (ch === "\n") {
                            if (!details.seenCR) { details.line++; }
                            details.column = 1;
                            details.seenCR = false;
                        } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                            details.line++;
                            details.column = 1;
                            details.seenCR = true;
                        } else {
                            details.column++;
                            details.seenCR = false;
                        }
                    }
                }

                if (peg$cachedPos !== pos) {
                    if (peg$cachedPos > pos) {
                        peg$cachedPos = 0;
                        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
                    }
                    advance(peg$cachedPosDetails, peg$cachedPos, pos);
                    peg$cachedPos = pos;
                }

                return peg$cachedPosDetails;
            }

            function peg$fail(expected) {
                if (peg$currPos < peg$maxFailPos) { return; }

                if (peg$currPos > peg$maxFailPos) {
                    peg$maxFailPos = peg$currPos;
                    peg$maxFailExpected = [];
                }

                peg$maxFailExpected.push(expected);
            }

            function peg$buildException(message, expected, pos) {
                function cleanupExpected(expected) {
                    var i = 1;

                    expected.sort(function (a, b) {
                        if (a.description < b.description) {
                            return -1;
                        } else if (a.description > b.description) {
                            return 1;
                        } else {
                            return 0;
                        }
                    });

                    while (i < expected.length) {
                        if (expected[i - 1] === expected[i]) {
                            expected.splice(i, 1);
                        } else {
                            i++;
                        }
                    }
                }

                function buildMessage(expected, found) {
                    function stringEscape(s) {
                        function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

                        return s
                          .replace(/\\/g, '\\\\')
                          .replace(/"/g, '\\"')
                          .replace(/\x08/g, '\\b')
                          .replace(/\t/g, '\\t')
                          .replace(/\n/g, '\\n')
                          .replace(/\f/g, '\\f')
                          .replace(/\r/g, '\\r')
                          .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function (ch) { return '\\x0' + hex(ch); })
                          .replace(/[\x10-\x1F\x80-\xFF]/g, function (ch) { return '\\x' + hex(ch); })
                          .replace(/[\u0180-\u0FFF]/g, function (ch) { return '\\u0' + hex(ch); })
                          .replace(/[\u1080-\uFFFF]/g, function (ch) { return '\\u' + hex(ch); });
                    }

                    var expectedDescs = new Array(expected.length),
                        expectedDesc, foundDesc, i;

                    for (i = 0; i < expected.length; i++) {
                        expectedDescs[i] = expected[i].description;
                    }

                    expectedDesc = expected.length > 1
                      ? expectedDescs.slice(0, -1).join(", ")
                          + " or "
                          + expectedDescs[expected.length - 1]
                      : expectedDescs[0];

                    foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

                    return "Expected " + expectedDesc + " but " + foundDesc + " found.";
                }

                var posDetails = peg$computePosDetails(pos),
                    found = pos < input.length ? input.charAt(pos) : null;

                if (expected !== null) {
                    cleanupExpected(expected);
                }

                return new SyntaxError(
                  message !== null ? message : buildMessage(expected, found),
                  expected,
                  found,
                  pos,
                  posDetails.line,
                  posDetails.column
                );
            }

            function peg$parsestart() {
                var s0, s1;

                s0 = peg$currPos;
                s1 = peg$parsephrase();
                if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c0();
                }
                s0 = s1;

                return s0;
            }

            function peg$parsephrase() {
                var s0, s1, s2, s3, s4, s5, s6;

                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parsesep();
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parsesep();
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseexpression();
                    if (s2 !== peg$FAILED) {
                        s3 = [];
                        s4 = peg$currPos;
                        s5 = peg$parseoperatorWithSeparator();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parseexpression();
                            if (s6 !== peg$FAILED) {
                                s5 = [s5, s6];
                                s4 = s5;
                            } else {
                                peg$currPos = s4;
                                s4 = peg$c1;
                            }
                        } else {
                            peg$currPos = s4;
                            s4 = peg$c1;
                        }
                        while (s4 !== peg$FAILED) {
                            s3.push(s4);
                            s4 = peg$currPos;
                            s5 = peg$parseoperatorWithSeparator();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parseexpression();
                                if (s6 !== peg$FAILED) {
                                    s5 = [s5, s6];
                                    s4 = s5;
                                } else {
                                    peg$currPos = s4;
                                    s4 = peg$c1;
                                }
                            } else {
                                peg$currPos = s4;
                                s4 = peg$c1;
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = [];
                            s5 = peg$parsesep();
                            while (s5 !== peg$FAILED) {
                                s4.push(s5);
                                s5 = peg$parsesep();
                            }
                            if (s4 !== peg$FAILED) {
                                s1 = [s1, s2, s3, s4];
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }

                return s0;
            }

            function peg$parseexpression() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 40) {
                    s1 = peg$c3;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c4); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsephrase();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                            s3 = peg$c5;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c6); }
                        }
                        if (s3 !== peg$FAILED) {
                            s1 = [s1, s2, s3];
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$parseexp();
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 8) === peg$c7) {
                            s1 = peg$c7;
                            peg$currPos += 8;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c8); }
                        }
                        if (s1 !== peg$FAILED) {
                            s2 = [];
                            s3 = peg$parsesep();
                            while (s3 !== peg$FAILED) {
                                s2.push(s3);
                                s3 = peg$parsesep();
                            }
                            if (s2 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 40) {
                                    s3 = peg$c3;
                                    peg$currPos++;
                                } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c4); }
                                }
                                if (s3 !== peg$FAILED) {
                                    s4 = peg$parsevariableOrNumericExpressionWithSeparator();
                                    if (s4 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 44) {
                                            s5 = peg$c9;
                                            peg$currPos++;
                                        } else {
                                            s5 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c10); }
                                        }
                                        if (s5 !== peg$FAILED) {
                                            s6 = [];
                                            s7 = peg$parsesep();
                                            while (s7 !== peg$FAILED) {
                                                s6.push(s7);
                                                s7 = peg$parsesep();
                                            }
                                            if (s6 !== peg$FAILED) {
                                                s7 = peg$parsevariableOrNumericExpression();
                                                if (s7 !== peg$FAILED) {
                                                    s8 = [];
                                                    s9 = peg$parsesep();
                                                    while (s9 !== peg$FAILED) {
                                                        s8.push(s9);
                                                        s9 = peg$parsesep();
                                                    }
                                                    if (s8 !== peg$FAILED) {
                                                        if (input.charCodeAt(peg$currPos) === 41) {
                                                            s9 = peg$c5;
                                                            peg$currPos++;
                                                        } else {
                                                            s9 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c6); }
                                                        }
                                                        if (s9 !== peg$FAILED) {
                                                            s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                                                            s0 = s1;
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c1;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c1;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c1;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$c1;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c1;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c1;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                        if (s0 === peg$FAILED) {
                            s0 = peg$parsein();
                        }
                    }
                }

                return s0;
            }

            function peg$parsein() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c11) {
                    s1 = peg$c11;
                    peg$currPos += 2;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c12); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$parsesep();
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parsesep();
                    }
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 40) {
                            s3 = peg$c3;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c4); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsevariableOrNumericExpressionWithSeparator();
                            if (s4 !== peg$FAILED) {
                                s5 = [];
                                s6 = peg$currPos;
                                if (input.charCodeAt(peg$currPos) === 44) {
                                    s7 = peg$c9;
                                    peg$currPos++;
                                } else {
                                    s7 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c10); }
                                }
                                if (s7 !== peg$FAILED) {
                                    s8 = [];
                                    s9 = peg$parsesep();
                                    while (s9 !== peg$FAILED) {
                                        s8.push(s9);
                                        s9 = peg$parsesep();
                                    }
                                    if (s8 !== peg$FAILED) {
                                        s9 = peg$parsevariableOrNumeric();
                                        if (s9 !== peg$FAILED) {
                                            s10 = [];
                                            s11 = peg$parsesep();
                                            while (s11 !== peg$FAILED) {
                                                s10.push(s11);
                                                s11 = peg$parsesep();
                                            }
                                            if (s10 !== peg$FAILED) {
                                                s7 = [s7, s8, s9, s10];
                                                s6 = s7;
                                            } else {
                                                peg$currPos = s6;
                                                s6 = peg$c1;
                                            }
                                        } else {
                                            peg$currPos = s6;
                                            s6 = peg$c1;
                                        }
                                    } else {
                                        peg$currPos = s6;
                                        s6 = peg$c1;
                                    }
                                } else {
                                    peg$currPos = s6;
                                    s6 = peg$c1;
                                }
                                if (s6 !== peg$FAILED) {
                                    while (s6 !== peg$FAILED) {
                                        s5.push(s6);
                                        s6 = peg$currPos;
                                        if (input.charCodeAt(peg$currPos) === 44) {
                                            s7 = peg$c9;
                                            peg$currPos++;
                                        } else {
                                            s7 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c10); }
                                        }
                                        if (s7 !== peg$FAILED) {
                                            s8 = [];
                                            s9 = peg$parsesep();
                                            while (s9 !== peg$FAILED) {
                                                s8.push(s9);
                                                s9 = peg$parsesep();
                                            }
                                            if (s8 !== peg$FAILED) {
                                                s9 = peg$parsevariableOrNumeric();
                                                if (s9 !== peg$FAILED) {
                                                    s10 = [];
                                                    s11 = peg$parsesep();
                                                    while (s11 !== peg$FAILED) {
                                                        s10.push(s11);
                                                        s11 = peg$parsesep();
                                                    }
                                                    if (s10 !== peg$FAILED) {
                                                        s7 = [s7, s8, s9, s10];
                                                        s6 = s7;
                                                    } else {
                                                        peg$currPos = s6;
                                                        s6 = peg$c1;
                                                    }
                                                } else {
                                                    peg$currPos = s6;
                                                    s6 = peg$c1;
                                                }
                                            } else {
                                                peg$currPos = s6;
                                                s6 = peg$c1;
                                            }
                                        } else {
                                            peg$currPos = s6;
                                            s6 = peg$c1;
                                        }
                                    }
                                } else {
                                    s5 = peg$c1;
                                }
                                if (s5 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                        s6 = peg$c5;
                                        peg$currPos++;
                                    } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c6); }
                                    }
                                    if (s6 !== peg$FAILED) {
                                        s1 = [s1, s2, s3, s4, s5, s6];
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c1;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }

                return s0;
            }

            function peg$parseoperatorWithSeparator() {
                var s0, s1, s2, s3, s4;

                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parsesep();
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parsesep();
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseoperator();
                    if (s2 !== peg$FAILED) {
                        s3 = [];
                        s4 = peg$parsesep();
                        while (s4 !== peg$FAILED) {
                            s3.push(s4);
                            s4 = peg$parsesep();
                        }
                        if (s3 !== peg$FAILED) {
                            s1 = [s1, s2, s3];
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }

                return s0;
            }

            function peg$parseoperator() {
                var s0;

                if (input.substr(peg$currPos, 3) === peg$c13) {
                    s0 = peg$c13;
                    peg$currPos += 3;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c14); }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c15) {
                        s0 = peg$c15;
                        peg$currPos += 2;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c16); }
                    }
                }

                return s0;
            }

            function peg$parseoperation() {
                var s0;

                if (input.substr(peg$currPos, 2) === peg$c17) {
                    s0 = peg$c17;
                    peg$currPos += 2;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c18); }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c19) {
                        s0 = peg$c19;
                        peg$currPos += 2;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c20); }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 62) {
                            s0 = peg$c21;
                            peg$currPos++;
                        } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c22); }
                        }
                        if (s0 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 60) {
                                s0 = peg$c23;
                                peg$currPos++;
                            } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c24); }
                            }
                            if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 2) === peg$c25) {
                                    s0 = peg$c25;
                                    peg$currPos += 2;
                                } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c26); }
                                }
                                if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 2) === peg$c27) {
                                        s0 = peg$c27;
                                        peg$currPos += 2;
                                    } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c28); }
                                    }
                                    if (s0 === peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 61) {
                                            s0 = peg$c29;
                                            peg$currPos++;
                                        } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c30); }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                return s0;
            }

            function peg$parseexp() {
                var s0, s1, s2, s3, s4, s5;

                s0 = peg$currPos;
                s1 = peg$parseleft();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$parsesep();
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parsesep();
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseoperation();
                        if (s3 !== peg$FAILED) {
                            s4 = [];
                            s5 = peg$parsesep();
                            while (s5 !== peg$FAILED) {
                                s4.push(s5);
                                s5 = peg$parsesep();
                            }
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseright();
                                if (s5 !== peg$FAILED) {
                                    s1 = [s1, s2, s3, s4, s5];
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }

                return s0;
            }

            function peg$parseleft() {
                var s0;

                s0 = peg$parseadditive();
                if (s0 === peg$FAILED) {
                    s0 = peg$parsevariableOrNumericExpression();
                }

                return s0;
            }

            function peg$parseright() {
                var s0;

                s0 = peg$parseadditive();
                if (s0 === peg$FAILED) {
                    s0 = peg$parsevariableOrNumericExpression();
                }

                return s0;
            }

            function peg$parseadditive() {
                var s0, s1, s2, s3, s4, s5;

                s0 = peg$currPos;
                s1 = peg$parsemultiplicative();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$parsesep();
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parsesep();
                    }
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 43) {
                            s3 = peg$c31;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c32); }
                        }
                        if (s3 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 45) {
                                s3 = peg$c33;
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c34); }
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = [];
                            s5 = peg$parsesep();
                            while (s5 !== peg$FAILED) {
                                s4.push(s5);
                                s5 = peg$parsesep();
                            }
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseadditive();
                                if (s5 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c35(s1, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$parsemultiplicative();
                }

                return s0;
            }

            function peg$parsemultiplicative() {
                var s0, s1, s2, s3, s4, s5;

                s0 = peg$currPos;
                s1 = peg$parseprimary();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$parsesep();
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parsesep();
                    }
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 42) {
                            s3 = peg$c36;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c37); }
                        }
                        if (s3 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 47) {
                                s3 = peg$c38;
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c39); }
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = [];
                            s5 = peg$parsesep();
                            while (s5 !== peg$FAILED) {
                                s4.push(s5);
                                s5 = peg$parsesep();
                            }
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsemultiplicative();
                                if (s5 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c40(s1, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$parseprimary();
                }

                return s0;
            }

            function peg$parseprimary() {
                var s0, s1, s2, s3;

                s0 = peg$parsevariableOrNumericExpression();
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s1 = peg$c3;
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c4); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parseadditive();
                        if (s2 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 41) {
                                s3 = peg$c5;
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c6); }
                            }
                            if (s3 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c41(s2);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                }

                return s0;
            }

            function peg$parsevariableOrNumericExpressionWithSeparator() {
                var s0, s1, s2, s3, s4;

                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parsesep();
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parsesep();
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsevariableOrNumericExpression();
                    if (s2 !== peg$FAILED) {
                        s3 = [];
                        s4 = peg$parsesep();
                        while (s4 !== peg$FAILED) {
                            s3.push(s4);
                            s4 = peg$parsesep();
                        }
                        if (s3 !== peg$FAILED) {
                            s1 = [s1, s2, s3];
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }

                return s0;
            }

            function peg$parsevariableOrNumericExpression() {
                var s0, s1;

                s0 = peg$currPos;
                s1 = peg$parsevariableOrNumeric();
                if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c42(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parsevariableOrNumeric() {
                var s0, s1;

                s0 = peg$currPos;
                s1 = peg$parsevariable();
                if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c43(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parsenumeric();
                    if (s1 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c44(s1);
                    }
                    s0 = s1;
                }

                return s0;
            }

            function peg$parsevariable() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 91) {
                    s1 = peg$c45;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c46); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    if (peg$c47.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c48); }
                    }
                    if (s3 !== peg$FAILED) {
                        while (s3 !== peg$FAILED) {
                            s2.push(s3);
                            if (peg$c47.test(input.charAt(peg$currPos))) {
                                s3 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c48); }
                            }
                        }
                    } else {
                        s2 = peg$c1;
                    }
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 93) {
                            s3 = peg$c49;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c50); }
                        }
                        if (s3 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c51(s2);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }

                return s0;
            }

            function peg$parsenumber_frac() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 46) {
                    s1 = peg$c52;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c53); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    if (peg$c54.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c55); }
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        if (peg$c54.test(input.charAt(peg$currPos))) {
                            s3 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c55); }
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c56(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }

                return s0;
            }

            function peg$parsenumeric() {
                var s0, s1, s2;

                s0 = peg$currPos;
                s1 = [];
                if (peg$c54.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c55); }
                }
                if (s2 !== peg$FAILED) {
                    while (s2 !== peg$FAILED) {
                        s1.push(s2);
                        if (peg$c54.test(input.charAt(peg$currPos))) {
                            s2 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c55); }
                        }
                    }
                } else {
                    s1 = peg$c1;
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsenumber_frac();
                    if (s2 === peg$FAILED) {
                        s2 = peg$c57;
                    }
                    if (s2 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c58(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }

                return s0;
            }

            function peg$parsesep() {
                var s0;

                if (peg$c59.test(input.charAt(peg$currPos))) {
                    s0 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c60); }
                }

                return s0;
            }


            var variables = {};


            peg$result = peg$startRuleFunction();

            if (peg$result !== peg$FAILED && peg$currPos === input.length) {
                return peg$result;
            } else {
                if (peg$result !== peg$FAILED && peg$currPos < input.length) {
                    peg$fail({ type: "end", description: "end of input" });
                }

                throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
            }
        }

        return {
            SyntaxError: SyntaxError,
            parse: parse
        };
    })();
    return {
        expressionParser: expressionParser
    };
});