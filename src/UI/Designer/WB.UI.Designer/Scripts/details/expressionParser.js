define('expressionParser', [],
    function () {
        expressionParser = (function () {
            /*
             * Generated by PEG.js 0.7.0.
             *
             * http://pegjs.majda.cz/
             */

            function quote(s) {
                /*
                 * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
                 * string literal except for the closing quote character, backslash,
                 * carriage return, line separator, paragraph separator, and line feed.
                 * Any character may appear in the form of an escape sequence.
                 *
                 * For portability, we also escape escape all control and non-ASCII
                 * characters. Note that "\0" and "\v" escape sequences are not used
                 * because JSHint does not like the first and IE the second.
                 */
                return '"' + s
                 .replace(/\\/g, '\\\\')  // backslash
                 .replace(/"/g, '\\"')    // closing quote character
                 .replace(/\x08/g, '\\b') // backspace
                 .replace(/\t/g, '\\t')   // horizontal tab
                 .replace(/\n/g, '\\n')   // line feed
                 .replace(/\f/g, '\\f')   // form feed
                 .replace(/\r/g, '\\r')   // carriage return
                 .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
                 + '"';
            }

            var result = {
                /*
                 * Parses the input with a generated parser. If the parsing is successfull,
                 * returns a value explicitly or implicitly specified by the grammar from
                 * which the parser was generated (see |PEG.buildParser|). If the parsing is
                 * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
                 */
                parse: function (input, startRule) {
                    var parseFunctions = {
                        "start": parse_start,
                        "phrase": parse_phrase,
                        "expression": parse_expression,
                        "operatorWithSeparator": parse_operatorWithSeparator,
                        "operator": parse_operator,
                        "operation": parse_operation,
                        "exp": parse_exp,
                        "left": parse_left,
                        "right": parse_right,
                        "additive": parse_additive,
                        "multiplicative": parse_multiplicative,
                        "primary": parse_primary,
                        "variableOrNumericExpression": parse_variableOrNumericExpression,
                        "variableOrNumeric": parse_variableOrNumeric,
                        "variable": parse_variable,
                        "numeric": parse_numeric,
                        "sep": parse_sep
                    };

                    if (startRule !== undefined) {
                        if (parseFunctions[startRule] === undefined) {
                            throw new Error("Invalid rule name: " + quote(startRule) + ".");
                        }
                    } else {
                        startRule = "start";
                    }

                    var pos = 0;
                    var reportFailures = 0;
                    var rightmostFailuresPos = 0;
                    var rightmostFailuresExpected = [];

                    function padLeft(input, padding, length) {
                        var result = input;

                        var padLength = length - input.length;
                        for (var i = 0; i < padLength; i++) {
                            result = padding + result;
                        }

                        return result;
                    }

                    function escape(ch) {
                        var charCode = ch.charCodeAt(0);
                        var escapeChar;
                        var length;

                        if (charCode <= 0xFF) {
                            escapeChar = 'x';
                            length = 2;
                        } else {
                            escapeChar = 'u';
                            length = 4;
                        }

                        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
                    }

                    function matchFailed(failure) {
                        if (pos < rightmostFailuresPos) {
                            return;
                        }

                        if (pos > rightmostFailuresPos) {
                            rightmostFailuresPos = pos;
                            rightmostFailuresExpected = [];
                        }

                        rightmostFailuresExpected.push(failure);
                    }

                    function parse_start() {
                        var result0;
                        var pos0;

                        pos0 = pos;
                        result0 = parse_phrase();
                        if (result0 !== null) {
                            result0 = (function (offset) {
                                var result = []
                                for (v in variables) {
                                    result.push(v);
                                }
                                return result;
                            })(pos0);
                        }
                        if (result0 === null) {
                            pos = pos0;
                        }
                        return result0;
                    }

                    function parse_phrase() {
                        var result0, result1, result2, result3;
                        var pos0, pos1;

                        pos0 = pos;
                        result0 = parse_expression();
                        if (result0 !== null) {
                            result1 = [];
                            pos1 = pos;
                            result2 = parse_operatorWithSeparator();
                            if (result2 !== null) {
                                result3 = parse_expression();
                                if (result3 !== null) {
                                    result2 = [result2, result3];
                                } else {
                                    result2 = null;
                                    pos = pos1;
                                }
                            } else {
                                result2 = null;
                                pos = pos1;
                            }
                            while (result2 !== null) {
                                result1.push(result2);
                                pos1 = pos;
                                result2 = parse_operatorWithSeparator();
                                if (result2 !== null) {
                                    result3 = parse_expression();
                                    if (result3 !== null) {
                                        result2 = [result2, result3];
                                    } else {
                                        result2 = null;
                                        pos = pos1;
                                    }
                                } else {
                                    result2 = null;
                                    pos = pos1;
                                }
                            }
                            if (result1 !== null) {
                                result0 = [result0, result1];
                            } else {
                                result0 = null;
                                pos = pos0;
                            }
                        } else {
                            result0 = null;
                            pos = pos0;
                        }
                        return result0;
                    }

                    function parse_expression() {
                        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
                        var pos0;

                        pos0 = pos;
                        if (input.charCodeAt(pos) === 40) {
                            result0 = "(";
                            pos++;
                        } else {
                            result0 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"(\"");
                            }
                        }
                        if (result0 !== null) {
                            result1 = parse_phrase();
                            if (result1 !== null) {
                                if (input.charCodeAt(pos) === 41) {
                                    result2 = ")";
                                    pos++;
                                } else {
                                    result2 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\")\"");
                                    }
                                }
                                if (result2 !== null) {
                                    result0 = [result0, result1, result2];
                                } else {
                                    result0 = null;
                                    pos = pos0;
                                }
                            } else {
                                result0 = null;
                                pos = pos0;
                            }
                        } else {
                            result0 = null;
                            pos = pos0;
                        }
                        if (result0 === null) {
                            result0 = parse_exp();
                            if (result0 === null) {
                                pos0 = pos;
                                if (input.substr(pos, 9) === "contains(") {
                                    result0 = "contains(";
                                    pos += 9;
                                } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"contains(\"");
                                    }
                                }
                                if (result0 !== null) {
                                    result1 = [];
                                    result2 = parse_sep();
                                    while (result2 !== null) {
                                        result1.push(result2);
                                        result2 = parse_sep();
                                    }
                                    if (result1 !== null) {
                                        result2 = parse_variableOrNumericExpression();
                                        if (result2 !== null) {
                                            result3 = [];
                                            result4 = parse_sep();
                                            while (result4 !== null) {
                                                result3.push(result4);
                                                result4 = parse_sep();
                                            }
                                            if (result3 !== null) {
                                                if (input.charCodeAt(pos) === 44) {
                                                    result4 = ",";
                                                    pos++;
                                                } else {
                                                    result4 = null;
                                                    if (reportFailures === 0) {
                                                        matchFailed("\",\"");
                                                    }
                                                }
                                                if (result4 !== null) {
                                                    result5 = [];
                                                    result6 = parse_sep();
                                                    while (result6 !== null) {
                                                        result5.push(result6);
                                                        result6 = parse_sep();
                                                    }
                                                    if (result5 !== null) {
                                                        result6 = parse_variableOrNumericExpression();
                                                        if (result6 !== null) {
                                                            result7 = [];
                                                            result8 = parse_sep();
                                                            while (result8 !== null) {
                                                                result7.push(result8);
                                                                result8 = parse_sep();
                                                            }
                                                            if (result7 !== null) {
                                                                if (input.charCodeAt(pos) === 41) {
                                                                    result8 = ")";
                                                                    pos++;
                                                                } else {
                                                                    result8 = null;
                                                                    if (reportFailures === 0) {
                                                                        matchFailed("\")\"");
                                                                    }
                                                                }
                                                                if (result8 !== null) {
                                                                    result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                                                                } else {
                                                                    result0 = null;
                                                                    pos = pos0;
                                                                }
                                                            } else {
                                                                result0 = null;
                                                                pos = pos0;
                                                            }
                                                        } else {
                                                            result0 = null;
                                                            pos = pos0;
                                                        }
                                                    } else {
                                                        result0 = null;
                                                        pos = pos0;
                                                    }
                                                } else {
                                                    result0 = null;
                                                    pos = pos0;
                                                }
                                            } else {
                                                result0 = null;
                                                pos = pos0;
                                            }
                                        } else {
                                            result0 = null;
                                            pos = pos0;
                                        }
                                    } else {
                                        result0 = null;
                                        pos = pos0;
                                    }
                                } else {
                                    result0 = null;
                                    pos = pos0;
                                }
                            }
                        }
                        return result0;
                    }

                    function parse_operatorWithSeparator() {
                        var result0, result1, result2, result3;
                        var pos0;

                        pos0 = pos;
                        result0 = [];
                        result1 = parse_sep();
                        while (result1 !== null) {
                            result0.push(result1);
                            result1 = parse_sep();
                        }
                        if (result0 !== null) {
                            result1 = parse_operator();
                            if (result1 !== null) {
                                result2 = [];
                                result3 = parse_sep();
                                while (result3 !== null) {
                                    result2.push(result3);
                                    result3 = parse_sep();
                                }
                                if (result2 !== null) {
                                    result0 = [result0, result1, result2];
                                } else {
                                    result0 = null;
                                    pos = pos0;
                                }
                            } else {
                                result0 = null;
                                pos = pos0;
                            }
                        } else {
                            result0 = null;
                            pos = pos0;
                        }
                        return result0;
                    }

                    function parse_operator() {
                        var result0;

                        if (input.substr(pos, 3) === "and") {
                            result0 = "and";
                            pos += 3;
                        } else {
                            result0 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"and\"");
                            }
                        }
                        if (result0 === null) {
                            if (input.substr(pos, 2) === "or") {
                                result0 = "or";
                                pos += 2;
                            } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"or\"");
                                }
                            }
                        }
                        return result0;
                    }

                    function parse_operation() {
                        var result0;

                        if (input.substr(pos, 2) === ">=") {
                            result0 = ">=";
                            pos += 2;
                        } else {
                            result0 = null;
                            if (reportFailures === 0) {
                                matchFailed("\">=\"");
                            }
                        }
                        if (result0 === null) {
                            if (input.substr(pos, 2) === "<=") {
                                result0 = "<=";
                                pos += 2;
                            } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"<=\"");
                                }
                            }
                            if (result0 === null) {
                                if (input.charCodeAt(pos) === 62) {
                                    result0 = ">";
                                    pos++;
                                } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\">\"");
                                    }
                                }
                                if (result0 === null) {
                                    if (input.charCodeAt(pos) === 60) {
                                        result0 = "<";
                                        pos++;
                                    } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("\"<\"");
                                        }
                                    }
                                    if (result0 === null) {
                                        if (input.substr(pos, 2) === "==") {
                                            result0 = "==";
                                            pos += 2;
                                        } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                                matchFailed("\"==\"");
                                            }
                                        }
                                        if (result0 === null) {
                                            if (input.substr(pos, 2) === "!=") {
                                                result0 = "!=";
                                                pos += 2;
                                            } else {
                                                result0 = null;
                                                if (reportFailures === 0) {
                                                    matchFailed("\"!=\"");
                                                }
                                            }
                                            if (result0 === null) {
                                                if (input.charCodeAt(pos) === 61) {
                                                    result0 = "=";
                                                    pos++;
                                                } else {
                                                    result0 = null;
                                                    if (reportFailures === 0) {
                                                        matchFailed("\"=\"");
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        return result0;
                    }

                    function parse_exp() {
                        var result0, result1, result2, result3, result4;
                        var pos0;

                        pos0 = pos;
                        result0 = parse_left();
                        if (result0 !== null) {
                            result1 = [];
                            result2 = parse_sep();
                            while (result2 !== null) {
                                result1.push(result2);
                                result2 = parse_sep();
                            }
                            if (result1 !== null) {
                                result2 = parse_operation();
                                if (result2 !== null) {
                                    result3 = [];
                                    result4 = parse_sep();
                                    while (result4 !== null) {
                                        result3.push(result4);
                                        result4 = parse_sep();
                                    }
                                    if (result3 !== null) {
                                        result4 = parse_right();
                                        if (result4 !== null) {
                                            result0 = [result0, result1, result2, result3, result4];
                                        } else {
                                            result0 = null;
                                            pos = pos0;
                                        }
                                    } else {
                                        result0 = null;
                                        pos = pos0;
                                    }
                                } else {
                                    result0 = null;
                                    pos = pos0;
                                }
                            } else {
                                result0 = null;
                                pos = pos0;
                            }
                        } else {
                            result0 = null;
                            pos = pos0;
                        }
                        return result0;
                    }

                    function parse_left() {
                        var result0;

                        result0 = parse_additive();
                        if (result0 === null) {
                            result0 = parse_variableOrNumericExpression();
                        }
                        return result0;
                    }

                    function parse_right() {
                        var result0;

                        result0 = parse_additive();
                        if (result0 === null) {
                            result0 = parse_variableOrNumericExpression();
                        }
                        return result0;
                    }

                    function parse_additive() {
                        var result0, result1, result2, result3, result4;
                        var pos0, pos1;

                        pos0 = pos;
                        pos1 = pos;
                        result0 = parse_multiplicative();
                        if (result0 !== null) {
                            result1 = [];
                            result2 = parse_sep();
                            while (result2 !== null) {
                                result1.push(result2);
                                result2 = parse_sep();
                            }
                            if (result1 !== null) {
                                if (input.charCodeAt(pos) === 43) {
                                    result2 = "+";
                                    pos++;
                                } else {
                                    result2 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"+\"");
                                    }
                                }
                                if (result2 === null) {
                                    if (input.charCodeAt(pos) === 45) {
                                        result2 = "-";
                                        pos++;
                                    } else {
                                        result2 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("\"-\"");
                                        }
                                    }
                                }
                                if (result2 !== null) {
                                    result3 = [];
                                    result4 = parse_sep();
                                    while (result4 !== null) {
                                        result3.push(result4);
                                        result4 = parse_sep();
                                    }
                                    if (result3 !== null) {
                                        result4 = parse_additive();
                                        if (result4 !== null) {
                                            result0 = [result0, result1, result2, result3, result4];
                                        } else {
                                            result0 = null;
                                            pos = pos1;
                                        }
                                    } else {
                                        result0 = null;
                                        pos = pos1;
                                    }
                                } else {
                                    result0 = null;
                                    pos = pos1;
                                }
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                        if (result0 !== null) {
                            result0 = (function (offset, left, right) { return left + right; })(pos0, result0[0], result0[4]);
                        }
                        if (result0 === null) {
                            pos = pos0;
                        }
                        if (result0 === null) {
                            result0 = parse_multiplicative();
                        }
                        return result0;
                    }

                    function parse_multiplicative() {
                        var result0, result1, result2, result3, result4;
                        var pos0, pos1;

                        pos0 = pos;
                        pos1 = pos;
                        result0 = parse_primary();
                        if (result0 !== null) {
                            result1 = [];
                            result2 = parse_sep();
                            while (result2 !== null) {
                                result1.push(result2);
                                result2 = parse_sep();
                            }
                            if (result1 !== null) {
                                if (input.charCodeAt(pos) === 42) {
                                    result2 = "*";
                                    pos++;
                                } else {
                                    result2 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"*\"");
                                    }
                                }
                                if (result2 === null) {
                                    if (input.charCodeAt(pos) === 47) {
                                        result2 = "/";
                                        pos++;
                                    } else {
                                        result2 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("\"/\"");
                                        }
                                    }
                                }
                                if (result2 !== null) {
                                    result3 = [];
                                    result4 = parse_sep();
                                    while (result4 !== null) {
                                        result3.push(result4);
                                        result4 = parse_sep();
                                    }
                                    if (result3 !== null) {
                                        result4 = parse_multiplicative();
                                        if (result4 !== null) {
                                            result0 = [result0, result1, result2, result3, result4];
                                        } else {
                                            result0 = null;
                                            pos = pos1;
                                        }
                                    } else {
                                        result0 = null;
                                        pos = pos1;
                                    }
                                } else {
                                    result0 = null;
                                    pos = pos1;
                                }
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                        if (result0 !== null) {
                            result0 = (function (offset, left, right) { return left * right; })(pos0, result0[0], result0[4]);
                        }
                        if (result0 === null) {
                            pos = pos0;
                        }
                        if (result0 === null) {
                            result0 = parse_primary();
                        }
                        return result0;
                    }

                    function parse_primary() {
                        var result0, result1, result2;
                        var pos0, pos1;

                        result0 = parse_variableOrNumericExpression();
                        if (result0 === null) {
                            pos0 = pos;
                            pos1 = pos;
                            if (input.charCodeAt(pos) === 40) {
                                result0 = "(";
                                pos++;
                            } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"(\"");
                                }
                            }
                            if (result0 !== null) {
                                result1 = parse_additive();
                                if (result1 !== null) {
                                    if (input.charCodeAt(pos) === 41) {
                                        result2 = ")";
                                        pos++;
                                    } else {
                                        result2 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("\")\"");
                                        }
                                    }
                                    if (result2 !== null) {
                                        result0 = [result0, result1, result2];
                                    } else {
                                        result0 = null;
                                        pos = pos1;
                                    }
                                } else {
                                    result0 = null;
                                    pos = pos1;
                                }
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                            if (result0 !== null) {
                                result0 = (function (offset, additive) { return additive; })(pos0, result0[1]);
                            }
                            if (result0 === null) {
                                pos = pos0;
                            }
                        }
                        return result0;
                    }

                    function parse_variableOrNumericExpression() {
                        var result0;
                        var pos0;

                        pos0 = pos;
                        result0 = parse_variableOrNumeric();
                        if (result0 !== null) {
                            result0 = (function (offset, value) {
                                if (value.type == "variable") return value; return undefined;
                            })(pos0, result0);
                        }
                        if (result0 === null) {
                            pos = pos0;
                        }
                        return result0;
                    }

                    function parse_variableOrNumeric() {
                        var result0;
                        var pos0;

                        pos0 = pos;
                        result0 = parse_variable();
                        if (result0 !== null) {
                            result0 = (function (offset, value) { return { type: "variable", value: value } })(pos0, result0);
                        }
                        if (result0 === null) {
                            pos = pos0;
                        }
                        if (result0 === null) {
                            pos0 = pos;
                            result0 = parse_numeric();
                            if (result0 !== null) {
                                result0 = (function (offset, value) { return { type: "numeric", value: value } })(pos0, result0);
                            }
                            if (result0 === null) {
                                pos = pos0;
                            }
                        }
                        return result0;
                    }

                    function parse_variable() {
                        var result0, result1, result2;
                        var pos0, pos1;

                        pos0 = pos;
                        pos1 = pos;
                        if (input.charCodeAt(pos) === 91) {
                            result0 = "[";
                            pos++;
                        } else {
                            result0 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"[\"");
                            }
                        }
                        if (result0 !== null) {
                            if (/^[A-Za-z_0-9]/.test(input.charAt(pos))) {
                                result2 = input.charAt(pos);
                                pos++;
                            } else {
                                result2 = null;
                                if (reportFailures === 0) {
                                    matchFailed("[A-Za-z_0-9]");
                                }
                            }
                            if (result2 !== null) {
                                result1 = [];
                                while (result2 !== null) {
                                    result1.push(result2);
                                    if (/^[A-Za-z_0-9]/.test(input.charAt(pos))) {
                                        result2 = input.charAt(pos);
                                        pos++;
                                    } else {
                                        result2 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("[A-Za-z_0-9]");
                                        }
                                    }
                                }
                            } else {
                                result1 = null;
                            }
                            if (result1 !== null) {
                                if (input.charCodeAt(pos) === 93) {
                                    result2 = "]";
                                    pos++;
                                } else {
                                    result2 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"]\"");
                                    }
                                }
                                if (result2 !== null) {
                                    result0 = [result0, result1, result2];
                                } else {
                                    result0 = null;
                                    pos = pos1;
                                }
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                        if (result0 !== null) {
                            result0 = (function (offset, letters) { var word = letters.join(''); variables[word] = word; return word; })(pos0, result0[1]);
                        }
                        if (result0 === null) {
                            pos = pos0;
                        }
                        return result0;
                    }

                    function parse_numeric() {
                        var result0, result1;
                        var pos0;

                        pos0 = pos;
                        if (/^[0-9]/.test(input.charAt(pos))) {
                            result1 = input.charAt(pos);
                            pos++;
                        } else {
                            result1 = null;
                            if (reportFailures === 0) {
                                matchFailed("[0-9]");
                            }
                        }
                        if (result1 !== null) {
                            result0 = [];
                            while (result1 !== null) {
                                result0.push(result1);
                                if (/^[0-9]/.test(input.charAt(pos))) {
                                    result1 = input.charAt(pos);
                                    pos++;
                                } else {
                                    result1 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("[0-9]");
                                    }
                                }
                            }
                        } else {
                            result0 = null;
                        }
                        if (result0 !== null) {
                            result0 = (function (offset, digits) {
                                return parseInt(digits.join(''))
                            })(pos0, result0);
                        }
                        if (result0 === null) {
                            pos = pos0;
                        }
                        return result0;
                    }

                    function parse_sep() {
                        var result0;

                        if (/^[' '\t\r\n]/.test(input.charAt(pos))) {
                            result0 = input.charAt(pos);
                            pos++;
                        } else {
                            result0 = null;
                            if (reportFailures === 0) {
                                matchFailed("[' '\\t\\r\\n]");
                            }
                        }
                        return result0;
                    }


                    function cleanupExpected(expected) {
                        expected.sort();

                        var lastExpected = null;
                        var cleanExpected = [];
                        for (var i = 0; i < expected.length; i++) {
                            if (expected[i] !== lastExpected) {
                                cleanExpected.push(expected[i]);
                                lastExpected = expected[i];
                            }
                        }
                        return cleanExpected;
                    }

                    function computeErrorPosition() {
                        /*
                         * The first idea was to use |String.split| to break the input up to the
                         * error position along newlines and derive the line and column from
                         * there. However IE's |split| implementation is so broken that it was
                         * enough to prevent it.
                         */

                        var line = 1;
                        var column = 1;
                        var seenCR = false;

                        for (var i = 0; i < Math.max(pos, rightmostFailuresPos) ; i++) {
                            var ch = input.charAt(i);
                            if (ch === "\n") {
                                if (!seenCR) { line++; }
                                column = 1;
                                seenCR = false;
                            } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                                line++;
                                column = 1;
                                seenCR = true;
                            } else {
                                column++;
                                seenCR = false;
                            }
                        }

                        return { line: line, column: column };
                    }


                    var variables = {};


                    var result = parseFunctions[startRule]();

                    /*
                     * The parser is now in one of the following three states:
                     *
                     * 1. The parser successfully parsed the whole input.
                     *
                     *    - |result !== null|
                     *    - |pos === input.length|
                     *    - |rightmostFailuresExpected| may or may not contain something
                     *
                     * 2. The parser successfully parsed only a part of the input.
                     *
                     *    - |result !== null|
                     *    - |pos < input.length|
                     *    - |rightmostFailuresExpected| may or may not contain something
                     *
                     * 3. The parser did not successfully parse any part of the input.
                     *
                     *   - |result === null|
                     *   - |pos === 0|
                     *   - |rightmostFailuresExpected| contains at least one failure
                     *
                     * All code following this comment (including called functions) must
                     * handle these states.
                     */
                    if (result === null || pos !== input.length) {
                        var offset = Math.max(pos, rightmostFailuresPos);
                        var found = offset < input.length ? input.charAt(offset) : null;
                        var errorPosition = computeErrorPosition();

                        throw new this.SyntaxError(
                          cleanupExpected(rightmostFailuresExpected),
                          found,
                          offset,
                          errorPosition.line,
                          errorPosition.column
                        );
                    }

                    return result;
                },

                /* Returns the parser source code. */
                toSource: function () { return this._source; }
            };

            /* Thrown when a parser encounters a syntax error. */

            result.SyntaxError = function (expected, found, offset, line, column) {
                function buildMessage(expected, found) {
                    var expectedHumanized, foundHumanized;

                    switch (expected.length) {
                        case 0:
                            expectedHumanized = "end of input";
                            break;
                        case 1:
                            expectedHumanized = expected[0];
                            break;
                        default:
                            expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
                              + " or "
                              + expected[expected.length - 1];
                    }

                    foundHumanized = found ? quote(found) : "end of input";

                    return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
                }

                this.name = "SyntaxError";
                this.expected = expected;
                this.found = found;
                this.message = buildMessage(expected, found);
                this.offset = offset;
                this.line = line;
                this.column = column;
            };

            result.SyntaxError.prototype = Error.prototype;

            return result;
        })();
        return {
            expressionParser: expressionParser
        };
    });