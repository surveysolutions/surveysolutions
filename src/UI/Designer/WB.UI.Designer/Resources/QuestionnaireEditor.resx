<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddNewSection" xml:space="preserve">
    <value>Add new section</value>
  </data>
  <data name="Backup" xml:space="preserve">
    <value>Backup</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="ChangePassword" xml:space="preserve">
    <value>Change password</value>
  </data>
  <data name="Compile" xml:space="preserve">
    <value>Compile</value>
  </data>
  <data name="Copy" xml:space="preserve">
    <value>Copy</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Download" xml:space="preserve">
    <value>Download</value>
  </data>
  <data name="ErrorsCounter" xml:space="preserve">
    <value>{{count}} error</value>
  </data>
  <data name="ErrorsCounter_plural" xml:space="preserve">
    <value>{{count}} errors</value>
  </data>
  <data name="HellowMessageBtn" xml:space="preserve">
    <value>Hi, {{currentUserName}}</value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="History" xml:space="preserve">
    <value>History</value>
  </data>
  <data name="LogOut" xml:space="preserve">
    <value>Log out</value>
  </data>
  <data name="Ok" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="Open" xml:space="preserve">
    <value>Open</value>
  </data>
  <data name="PasteAfter" xml:space="preserve">
    <value>Paste after</value>
  </data>
  <data name="QuestionnaireSummary" xml:space="preserve">
    <value>({{questionsCount}}Q, {{groupsCount}}S, {{rostersCount}}R)</value>
    <comment>Q, S, R are the first letters of the Question, Section and Roster. Keep values that are in {{}} without changes</comment>
  </data>
  <data name="ReadOnly" xml:space="preserve">
    <value>Read Only</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="SavedAtTimestamp" xml:space="preserve">
    <value>saved at {{dateTime, H:mm}}</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="SideBarAddMacro" xml:space="preserve">
    <value>add new Macro</value>
  </data>
  <data name="SideBarLookupEmptyLine1" xml:space="preserve">
    <value>Use this tab to define lookup tables.</value>
  </data>
  <data name="SideBarLookupEmptyLine2" xml:space="preserve">
    <value>A lookup table provides reference information that may be queried by a key and used in enabling conditions and validation expressions.</value>
  </data>
  <data name="SideBarLookupEmptyLine3" xml:space="preserve">
    <value>A lookup table consists of a name and the lookup file, which may contain multiple tab-delimited columns of numeric values.</value>
  </data>
  <data name="SideBarLookupTableAdd" xml:space="preserve">
    <value>ADD NEW Lookup table</value>
  </data>
  <data name="SideBarLookupTableDropFile" xml:space="preserve">
    <value>Drop File here</value>
  </data>
  <data name="SideBarLookupTableFileName" xml:space="preserve">
    <value>file name</value>
  </data>
  <data name="SideBarLookupTableName" xml:space="preserve">
    <value>table name</value>
  </data>
  <data name="SideBarLookupTablesCounter" xml:space="preserve">
    <value>{{count}} Lookup Table:</value>
  </data>
  <data name="SideBarLookupTablesCounter_plural" xml:space="preserve">
    <value>{{count}} Lookup Tables:</value>
  </data>
  <data name="SideBarLookupTableSelectFile" xml:space="preserve">
    <value>Select file</value>
  </data>
  <data name="SideBarLookupTableUpdateFile" xml:space="preserve">
    <value>Update file</value>
  </data>
  <data name="SideBarMacroContent" xml:space="preserve">
    <value>content</value>
  </data>
  <data name="SideBarMacroCounter" xml:space="preserve">
    <value>{{count}} Macro:</value>
  </data>
  <data name="SideBarMacroCounter_plural" xml:space="preserve">
    <value>{{count}} Macros:</value>
  </data>
  <data name="SideBarMacroDescription" xml:space="preserve">
    <value>description</value>
  </data>
  <data name="SideBarMacroEmptyLine1" xml:space="preserve">
    <value>Use this tab to define macro substitutions.</value>
  </data>
  <data name="SideBarMacroEmptyLine2" xml:space="preserve">
    <value>A macro is a named expression that can be used in enabling conditions and validation expressions. A macro consists of name and content.</value>
  </data>
  <data name="SideBarMacroEmptyLine3" xml:space="preserve">
    <value>To use a macro in an expression, refer to it by its {{- substitution}}</value>
  </data>
  <data name="SideBarMacroHideDescription" xml:space="preserve">
    <value>hide description</value>
  </data>
  <data name="SideBarMacroName" xml:space="preserve">
    <value>macro name</value>
  </data>
  <data name="SideBarMacroShowDescription" xml:space="preserve">
    <value>add description</value>
  </data>
  <data name="SideBarSectionsCounter" xml:space="preserve">
    <value>{{count}} Section:</value>
  </data>
  <data name="SideBarSectionsCounter_plural" xml:space="preserve">
    <value>{{count}} Sections:</value>
  </data>
  <data name="ToggleDropdown" xml:space="preserve">
    <value>Toggle Dropdown</value>
  </data>
  <data name="WarningsCounter" xml:space="preserve">
    <value>{{count}} warning</value>
  </data>
  <data name="WarningsCounter_plural" xml:space="preserve">
    <value>{{count}} warnings</value>
  </data>
</root>