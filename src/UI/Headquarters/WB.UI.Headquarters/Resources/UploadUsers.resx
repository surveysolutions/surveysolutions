<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AssignedTo" xml:space="preserve">
    <value>Assigned to</value>
  </data>
  <data name="AssignedToDescription" xml:space="preserve">
    <value>required for interviewers, contains username of supervisor to whom this person wil be assigned</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Create set of users by uploading file with all necessary information. Set can contain both supervisors and interviewers, alternatively, you can create</value>
  </data>
  <data name="Profile" xml:space="preserve">
    <value>profile manually</value>
  </data>
  <data name="DownloadTemplateLink" xml:space="preserve">
    <value>Download .tab template for user upload</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="FullName" xml:space="preserve">
    <value>Full name</value>
  </data>
  <data name="ManualSupervisorCreateLink" xml:space="preserve">
    <value>supervisor</value>
  </data>
  <data name="ManualInterviewerCreateLink" xml:space="preserve">
    <value>interviewer</value>
  </data>
  <data name="OptionalInformation" xml:space="preserve">
    <value>Optional personal information</value>
  </data>
  <data name="Or" xml:space="preserve">
    <value>or</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="PasswordDescription" xml:space="preserve">
    <value>password must contain at least one number, one upper case character and one lower case character</value>
  </data>
  <data name="Phone" xml:space="preserve">
    <value>Contact phone</value>
  </data>
  <data name="RequiredData" xml:space="preserve">
    <value>Data required for creating interviewers and supervisors</value>
  </data>
  <data name="Role" xml:space="preserve">
    <value>Role</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Creating multiple users by batch upload</value>
  </data>
  <data name="UploadBtn" xml:space="preserve">
    <value>Upload .tab file</value>
  </data>
  <data name="UserName" xml:space="preserve">
    <value>User name</value>
  </data>
  <data name="UserNameDescription" xml:space="preserve">
    <value>used as login, should be between 3 and 15 characters and contain only letters , digits and underscore symbol</value>
  </data>
  <data name="VerificationFailed" xml:space="preserve">
    <value>Verification failed</value>
  </data>
  <data name="NoCreatedUsers" xml:space="preserve">
    <value>No user accounts was created</value>
  </data>
  <data name="ImportingUserInfo" xml:space="preserve">
    <value>Importing user information from</value>
  </data>
  <data name="ReUploadTabFile" xml:space="preserve">
    <value>Reupload .tab file</value>
  </data>
  <data name="BackToImport" xml:space="preserve">
    <value>Back to user import</value>
  </data>
  <data name="Uploading" xml:space="preserve">
    <value>Importing {{importedUsersCount}} of {{totalUsersToImportCount}}</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Column" xml:space="preserve">
    <value>column</value>
  </data>
  <data name="Line" xml:space="preserve">
    <value>line</value>
  </data>
  <data name="AllAccountsCreated" xml:space="preserve">
    <value>All {{total}} accounts was successfully created:</value>
  </data>
  <data name="InterviewersAndSupervisorsCount" xml:space="preserve">
    <value>{{supervisorsCount}} supervisors and {{interviewersCount}} interviewers</value>
  </data>
  <data name="CompleteDescription" xml:space="preserve">
    <value>You can assign interviews for these teams from 'interviews' section, interviews can also be created and assigned in batch mode</value>
  </data>
  <data name="Interviews" xml:space="preserve">
    <value>Interviews</value>
  </data>
  <data name="Supervisors" xml:space="preserve">
    <value>Supervisors</value>
  </data>
  <data name="UploadInProgress" xml:space="preserve">
    <value>Warning: Another Batch Upload by "{{userName}}" is in progress.</value>
  </data>
  <data name="UploadInProgressDescription" xml:space="preserve">
    <value>You will be available to start yours when current one is completed.</value>
  </data>
  <data name="EstimatedTime" xml:space="preserve">
    <value>Approx {{estimatedTime}} left</value>
  </data>
  <data name="TimeDetermination" xml:space="preserve">
    <value>time determination</value>
  </data>
</root>