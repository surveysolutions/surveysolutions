<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ApproveConfirmMessage" xml:space="preserve">
    <value>&lt;h3&gt;&lt;b&gt;{0}&lt;/b&gt; interview(s) will be approved.&lt;/h3&gt;
&lt;b&gt;Note!&lt;/b&gt; You can approve interviews with the following statuses only: &lt;i&gt;{1}&lt;/i&gt; and &lt;i&gt;{2}&lt;/i&gt;.</value>
  </data>
  <data name="ApproveConfirmMessageHQ" xml:space="preserve">
    <value>&lt;h3&gt;&lt;b&gt;{0}&lt;/b&gt; interview(s) will be approved.&lt;/h3&gt;
&lt;b&gt;Note!&lt;/b&gt; You can approve interviews with the following status only: &lt;i&gt;{1}&lt;/i&gt; and &lt;i&gt;{2}&lt;/i&gt;.</value>
  </data>
  <data name="AssignConfirmMessage" xml:space="preserve">
    <value>&lt;h3&gt;&lt;b&gt;{0}&lt;/b&gt; interview(s) selected for reassign.&lt;/h3&gt;
&lt;b&gt;Note!&lt;/b&gt; You can assign interviews with the following statuses only: &lt;i&gt;{1}&lt;/i&gt;, &lt;i&gt;{2} (only on another interviewer)&lt;/i&gt; and &lt;i&gt;{3}&lt;/i&gt;.</value>
  </data>
  <data name="AssignReceivedConfirm" xml:space="preserve">
    <value>Apply on {0} interview(s) which Interviewer already received</value>
  </data>
  <data name="AssignToOtherTeamConfirmMessage" xml:space="preserve">
    <value>&lt;h3&gt;&lt;b&gt;{0}&lt;/b&gt; interview(s) will be assigned.&lt;/h3&gt;
&lt;b&gt;Note!&lt;/b&gt; Only interviews that are not in status &lt;i&gt;{1}&lt;/i&gt; and &lt;i&gt;{2}&lt;/i&gt; could be reassigned.</value>
  </data>
  <data name="ChooseResponsibleInterviewer" xml:space="preserve">
    <value>No responsible chosen for some interview(s). Please choose a responsible interviewer.</value>
  </data>
  <data name="ChooseResponsibleSupervisor" xml:space="preserve">
    <value>No responsible chosen for some interview(s). Please choose a responsible supervisor.</value>
  </data>
  <data name="ChooseResponsible" xml:space="preserve">
    <value>No responsible chosen for some interview(s). Please choose a responsible supervisor or interviewer.</value>
  </data>
  <data name="ContinueConfirmMessage" xml:space="preserve">
    <value>Do you want to continue?</value>
  </data>
  <data name="ContinueConfirmMessageHQ" xml:space="preserve">
    <value>Do you want to continue?</value>
  </data>
  <data name="DeleteConfirmMessageHQ" xml:space="preserve">
    <value>&lt;h3&gt;&lt;b&gt;{0}&lt;/b&gt; interview(s) will be deleted.&lt;/h3&gt;
&lt;b&gt;Note!&lt;/b&gt; You can delete interviews with the following statuses only: &lt;i&gt;{1}&lt;/i&gt; and &lt;i&gt;{2}&lt;/i&gt;.</value>
  </data>
  <data name="RejectConfirmMessage" xml:space="preserve">
    <value>&lt;h3&gt;&lt;b&gt;{0}&lt;/b&gt; interview(s) will be rejected.&lt;/h3&gt;
&lt;b&gt;Note!&lt;/b&gt; You can reject interviews with the following statuses only: &lt;i&gt;{1}&lt;/i&gt; and &lt;i&gt;{2}&lt;/i&gt;.</value>
  </data>
  <data name="RejectConfirmMessageHQ" xml:space="preserve">
    <value>&lt;h3&gt;&lt;b&gt;{0}&lt;/b&gt; interview(s) will be rejected.&lt;/h3&gt;
&lt;b&gt;Note!&lt;/b&gt; You can reject interviews with the following status only: &lt;i&gt;{1}&lt;/i&gt; and &lt;i&gt;{2}&lt;/i&gt;.</value>
  </data>
  <data name="UnapproveConfirmMessageHQ" xml:space="preserve">
    <value>&lt;h3&gt;&lt;b&gt;{0}&lt;/b&gt; interview(s) will be unapproved.&lt;/h3&gt;
&lt;b&gt;Note!&lt;/b&gt; You can unapprove interviews with the following status only: &lt;i&gt;{1}&lt;/i&gt;.</value>
  </data>
  <data name="Assignment" xml:space="preserve">
    <value>Assignment</value>
  </data>
  <data name="ClientKeyTitle" xml:space="preserve">
    <value>Key that was generated on device, but was changed due to the collision with existing interview on server</value>
  </data>
  <data name="Tooltip_Filter_Assignment" xml:space="preserve">
    <value>Assignment ID. Click in the field to type the full ID number.</value>
  </data>
  <data name="Tooltip_Filter_Questionnaire" xml:space="preserve">
    <value>Version of questionnaire. Select a questionnaire version to see its associated interviews in the report to the right. Select “All questionnaires” to see interviews associated with any questionnaire.</value>
  </data>
  <data name="Tooltip_Filter_Responsible" xml:space="preserve">
    <value>User responsible. Click in the field to choose a user name either by selecting it directly or typing to filter the list of user names further.</value>
  </data>
  <data name="Tooltip_Filter_Status" xml:space="preserve">
    <value>Status of interview. Select a status to see all interviews with that status. Select “All statuses” to see interviews with any status.</value>
  </data>
  <data name="Tooltip_Table_Assignment" xml:space="preserve">
    <value>Identifier for the assignment to which this interview belongs. Click on the sort icon to sort by assignment number.</value>
  </data>
  <data name="Tooltip_Table_HideShowIdentifying" xml:space="preserve">
    <value>Click here to hide or show the identifying questions. Hiding identifying questions may provide more space for other information. Showing identifying questions may provide details for differentiating between interviews.</value>
  </data>
  <data name="Tooltip_Table_IdentifyingQuestions" xml:space="preserve">
    <value>Information that identifies each assignment. These are the answers to questions marked as identifying in Designer.</value>
  </data>
  <data name="Tooltip_Table_InterviewKey" xml:space="preserve">
    <value>Short case identifier that appears throughout the system--in Headquarters, Supervisor, and Interviewer. Consider using this ID  when communicating with field team, rather than a large set of identifying question.</value>
  </data>
  <data name="Tooltip_Table_LastUpdate" xml:space="preserve">
    <value>When changes to the interview were last posted to the server. Click on the sort icon to sort by time.</value>
  </data>
  <data name="Tooltip_Table_ReceivedByInterviewer" xml:space="preserve">
    <value>Indicator for whether the interview has been downloaded onto the interviewer’s tablet. Click on the sort icon to sort by receipt by the interviewer.</value>
  </data>
  <data name="Tooltip_Table_Responsible" xml:space="preserve">
    <value>User currently responsible for the assignment. Click sort icon to sort user name.</value>
  </data>
  <data name="Tooltip_Table_Status" xml:space="preserve">
    <value>Status of the interview in the survey workflow. Click on the sort icon to sort by status.</value>
  </data>
  <data name="Tooltip_Table_ErrorsCount" xml:space="preserve">
    <value>Shows total number of invalid questions and static texts in the interview. Multiple failed validation conditions on same entity are counted as 1.</value>
  </data>
  <data name="Errors" xml:space="preserve">
    <value>Errors</value>
  </data>
</root>
