@model WB.UI.Headquarters.Models.Troubleshooting.CensusInterviewsModel
@{
    ViewBag.Title = Troubleshooting.MissingCensusInterviews_PageHeader;
    Layout = "~/Views/Shared/_MainLayout.cshtml";
}
@section scripts
{
    @Scripts.Render("~/js/common")
    @Scripts.Render("~/js/troubleshooting")
    <script type="text/javascript">
        var tableOptions = {
            rowId: 'key',
            order: [[2, 'desc']],
            deferLoading: 0,
            columns: [
                {
                    data: "key",
                    name: "Key", // case-sensitive!
                    "class": "interview-id title-row",
                    render: function(data, type, row) {
                        return (row.wasCreatedOnClient === true ? "<span class='census-icon'></span>" : "") + '<a href="@Url.Action("Details", "Interview")/' + row.interviewId + '">' + data + '</a>';
                    },
                    title: "@Troubleshooting.TableTitle_InterviewId"
                },
                {
                    data: "responsibleName",
                    name: "ResponsibleName", // case-sensitive! should be DB name here from Designer DB questionnairelistviewitems? to sort column
                    "class": "enumerator",
                    render: function(data, type, row) {
                        return '<span class="interviewer">' + data + '</span>';
                    },
                    title: "@Troubleshooting.TableTitle_Enumerator"
                },
                {
                    data: "updateDate",
                    name: "UpdateDate", // case-sensitive! should be DB name here from Designer DB questionnairelistviewitems? to sort column
                    "class": "date",
                    title: "@Troubleshooting.TableTitle_LastUpdate"
                },
                {
                    data: "status",
                    name: "Status", // case-sensitive! should be DB name here from Designer DB questionnairelistviewitems? to sort column
                    title: "@Troubleshooting.TableTitle_Status"
                }
            ],
            ajax: {
                url: "@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "TroubleshootingApi", action = "CensusInterviews"})",
                type: "POST"
            }
        };

        var app = new Vue({
            data: {
                interviewerId: null,
                questionnaireId: null,
                changedFrom: null,
                changedTo: null,
                dateRangePickerOptions: {
                    mode: "range",
                    maxDate: "today",
                    minDate: new Date().fp_incr(-30)
                },
                questionnaireParams: { censusOnly: true },
                wasInitialized: false,
                message: "",
                foundInterviewsMessage: "",
                isLoading: false,
                tableOptions: tableOptions
            },
            methods: {
                addParamsToRequest: function(requestData) {
                    requestData.interviewerId = (this.interviewerId || {}).key;
                    requestData.questionnaireId = (this.questionnaireId || {}).key;
                    requestData.changedFrom = moment(this.changedFrom).format();
                    requestData.changedTo = moment(this.changedTo).format();
                },
                responseProcessor: function(response) {
                    this.isLoading = false;
                    this.message = response.message;
                    this.foundInterviewsMessage = response.foundInterviewsMessage;
                },
                userSelected: function(newValue) {
                    this.interviewerId = newValue;
                },
                questionnaireSelected: function(newValue) {
                    this.questionnaireId = newValue;
                },
                rangeSelected: function(textValue, from, to) {
                    this.changedFrom = from;
                    this.changedTo = to;
                },
                findInterviews: function() {
                    var self = this;
                    this.$validator.validateAll().then(function(result) {
                        if (result) {
                            self.reloadTable();
                            self.startWatchers(['interviewerId', 'questionnaireId', 'changedFrom', 'changedTo'], self.reloadTable.bind(self));
                            document.querySelector("main").classList.remove("search-wasnt-started");
                            self.wasInitialized = true;
                        }
                    });
                },
                startWatchers: function(props, watcher) {
                    var iterator = function(prop) {
                        this.$watch(prop, watcher);
                    };
                    props.forEach(iterator, this);
                },
                reloadTable: function() {
                    var self = this;
                    this.$validator.validateAll().then(function(result) {
                        if (result && (self.changedFrom !== null && self.changedTo !== null) || (self.changedFrom == null && self.changedTo == null)) {
                            self.isLoading = true;
                            self.$refs.table.reload(self.reloadTable);
                        }
                    });
                }
            },
            mounted: function() {
                document.querySelector("main").classList.remove("hold-transition");
                document.querySelector("footer").classList.add("footer-adaptive");
            }
        });

        window.onload = function() {
            Vue.http.headers.common['Authorization'] = input.settings.acsrf.token;

            app.$mount('#app');
        }
    </script>
}
<main class="hold-transition search-wasnt-started"  id="app">
    <div class="container-fluid">
        <div class="row before-search">
            <div class="page-header">
                <ol class="breadcrumb">
                    <li><a href="@Url.Action("Index", "Troubleshooting")">@Troubleshooting.Title</a></li>
                </ol>
                <h1>
                    @Troubleshooting.MissingCensusInterviews_PageHeader
                </h1>
            </div>
        </div>
        <div class="row before-search">
            <div class="col-sm-7">
                <p>@Html.Raw(Troubleshooting.MissingCensusInterviews_Instructions)</p>
            </div>
        </div>
        <div class="row">
            <aside class="filters">
                <div class="foldback-button" id="hide-filters">
                    <span class="arrow"></span>
                    <span class="arrow"></span>
                    <span class="glyphicon glyphicon-tasks" aria-hidden="true"></span>
                </div>
                <div class="filters-container">
                    <h4>@Troubleshooting.MissingCensusInterviews_FiltersTitle</h4>
                    <div class="block-filter" v-bind:class="{'has-error': errors.has('questionnaireId')}">
                        <h5>@Troubleshooting.MissingCensusInterviews_Filters_Questionnaire</h5>
                        <typeahead
                            data-vv-name="questionnaireId"
                            data-vv-as="questionnaire"
                            v-validate="'required'"
                            :has-error="errors.has('questionnaireId')"
                            placeholder="@Troubleshooting.MissingCensusInterviews_Filters_QuestionnairePlaceholder"
                            control-id="questionnaireId"
                            :ajax-params="questionnaireParams"
                            :value="questionnaireId"
                            v-on:selected="questionnaireSelected"
                            fetch-url="@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "QuestionnairesApi", action = "QuestionnairesCombobox"})"></typeahead>
                        <span v-show="errors.has('questionnaireId')" class="help-block">{{ errors.first('questionnaireId') }}</span>
                    </div>
                    <div class="block-filter">
                        <h5>@Troubleshooting.MissingCensusInterviews_Filters_Interviewer</h5>
                        <typeahead
                            placeholder="@Troubleshooting.MissingCensusInterviews_Filters_InterviewerPlaceholder"
                            control-id="interviewerId"
                            :value="interviewerId"
                            :ajax-params="{ }"
                            v-on:selected="userSelected" 
                            fetch-url="@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "Teams", action = "InterviewersCombobox"})"></typeahead>
                    </div>
                    <div class="block-filter">
                        <h5>@Troubleshooting.MissingCensusInterviews_Filters_Dates</h5>
                        <Flatpickr placeholder="@Troubleshooting.MissingCensusInterviews_Filters_DatesPlaceholder" input-class="form-control" v-on:input="rangeSelected" :options="dateRangePickerOptions"></Flatpickr>
                    </div>
                    <div class="block-filter">
                        <button type="button" v-if="wasInitialized === false" v-on:click="findInterviews" 
                                class="btn btn-primary btn-lg" id="find-interview">@Troubleshooting.MissingCensusInterviews_Filters_Search</button>
                    </div>
                </div>
            </aside>
            <div class="main-information">
                <div class="page-header clearfix">
                    <ol class="breadcrumb">
                        <li><a href="@Url.Action("Index", "Troubleshooting")">@Troubleshooting.Title</a></li>
                    </ol>
                    <h1>
                        @Troubleshooting.MissingCensusInterviews_PageHeader
                    </h1>
                </div>
                <div class="clearfix">
                    <div class="col-sm-7 ">
                        <p v-if="isLoading == false" v-html="message"></p>
                        <p v-if="isLoading == false" v-html="foundInterviewsMessage"></p>
                    </div>
                </div>
                <div class="interviews-info">
                    <div class="table-wrapper">
                        <interview-table ref="table"
                                         :add-params-to-request="addParamsToRequest"
                                         :response-processor="responseProcessor"
                                         :table-options="tableOptions"></interview-table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>
