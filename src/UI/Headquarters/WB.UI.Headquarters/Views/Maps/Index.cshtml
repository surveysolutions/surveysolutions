@using WB.Core.BoundedContexts.Headquarters.Services
@using WB.Core.GenericSubdomains.Portable.ServiceLocation
@model WB.UI.Headquarters.Controllers.MapFileUploadModel

@{
    Layout = "~/Views/Shared/_MainLayout.cshtml";
    ViewBag.Title = Dashboard.Maps;

    var authorizedUser = ServiceLocator.Current.GetInstance<IAuthorizedUser>();
    var isObserver = authorizedUser.IsObserver;
    var isAdmin = authorizedUser.IsAdministrator;
}

@section scripts
{
    @Scripts.Render("~/js/main-no-libs")
    @Scripts.Render("~/js/common")
    @Scripts.Render("~/js/list")
    @Scripts.Render("~/js/maps")
    
    <script type="text/javascript">
        var mapsListUrl =
            '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "MapsApi", action = "Maps"})';

        var $deleteMapUrl = '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "MapsApi", action = "DeleteMap"})';
        var $detailsUrl = '@Url.Action("Details", "Maps")';

        var notifier = new Notifier();
        var ajax = new Ajax(notifier);

        $(function() {
            var model = new Supervisor.VM.Maps(mapsListUrl, notifier, ajax, $deleteMapUrl);

            model.getDataTableColumns = function() {
                return [
                    {
                        data: "fileName",
                        name: "FileName", // case-sensitive!
                        "class": "title"
                    },
                    {
                        data: "size",
                        name: "Size",// case-sensitive! should be DB name here from Designer DB questionnairelistviewitems? to sort column
                        "class": "parameters"
                    },
                    {
                        data: "importDate",
                        name: "ImportDate",// case-sensitive! should be DB name here from Designer DB questionnairelistviewitems? to sort column
                        "class": "date"
                    }
                ];
            };

            model.onTableInitCompleteExtra = function () {

                var buildMenuItem = function(selectedRow) {
                    var items = {}


                    @if (!isObserver)
                    {
                        <text>
                            items["open"] = {
                                name: "@Common.Open",
                                callback: function(t, e) {
                                    var detailsUrl = $detailsUrl + '?mapname=' + selectedRow.fileName;
                                    window.location = detailsUrl;
                                }
                            };
                            items["delete"] =
                            {
                                name: "@Dashboard.DeleteMap",
                                callback: model.deleteMap
                            };
                        </text>
                    }
                    return items;
                }

                var contextMenuOptions = {
                    selector: "table#data_holder .with-context-menu",
                    autoHide: false,
                    build: function ($trigger, e) {
                        var selectedRow = model.selectRowAndGetData($trigger);
                        var items = buildMenuItem(selectedRow);
                        return { items: items };
                    },
                    trigger: 'left'
                };

                $.contextMenu(contextMenuOptions);
            };

            ko.applyBindings(model);
            model.load();
        });
</script>

}

<main>
    <div class="container-fluid">
        <div class="row">
            @Html.Partial("_alerts")
            <div class="page-header clearfix">
                <div class="neighbor-block-to-search">
                    <div class="topic-with-button">
                        <h1>@MainMenu.Maps</h1>

                        @if (!isObserver)
                        {
                            using (Html.BeginForm("UploadMaps", "Maps", method: FormMethod.Post, htmlAttributes: new {enctype = "multipart/form-data", id = "MapsUploadForm"}))
                            {
                                @Html.AntiForgeryToken()

                                @Html.Partial("ClientTimezoneOffset")
                                <label class="btn btn-success btn-file">
                                    @BatchUpload.UploadZipFile
                                    @Html.TextBoxFor(m => m.File, new {type = "file", accept = ".zip", onchange = "this.form.submit()"})
                                </label>
                            }
                        }
                        
                    </div>
                    <ol class="list-unstyled">
                        <li>Upload zip archive containing maps. </li>
                        <li>Files with same name will be overridden.</li>
                    </ol>
                    <p><a href="@Url.Action("UserMapsLink", "Maps")">Update user to maps linking</a></p>
                </div>

            </div>
        </div>
        <div class="row">
            <div id="list">
                <table id="data_holder" class="table table-striped table-bordered table-hover table-ordered"
                       data-order="[[ 0, &quot;asc&quot; ]]" data-searching="true">
                    <thead>
                    <tr>
                        <th>@Maps.Name</th>
                        <th>@Maps.Size</th>
                        <th>@Maps.UpdateDate</th>
                    </tr>
                    </thead>
                </table>
            </div>
        </div>

    </div>

</main>
