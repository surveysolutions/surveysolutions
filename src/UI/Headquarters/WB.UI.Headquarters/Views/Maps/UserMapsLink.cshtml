@using WB.Core.BoundedContexts.Headquarters.Services
@using WB.Core.GenericSubdomains.Portable.ServiceLocation
@model WB.UI.Headquarters.Controllers.MapFileUploadModel

@{
    Layout = "~/Views/Shared/_MainLayout.cshtml";
    ViewBag.Title = Dashboard.Maps;

    var authorizedUser = ServiceLocator.Current.GetInstance<IAuthorizedUser>();
    var isObserver = authorizedUser.IsObserver;
    var isAdmin = authorizedUser.IsAdministrator;
}

@section scripts
{
    @Scripts.Render("~/js/main-no-libs")
    @Scripts.Render("~/js/common")
    @Scripts.Render("~/js/list")
    @Scripts.Render("~/js/maps")
    
    <script type="text/javascript">
        var mapsListUrl =
            '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "MapsApi", action = "Maps"})';

        var $deleteMapUrl = '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "MapsApi", action = "DeleteMap"})';
        var $detailsUrl = '@Url.Action("Details", "Maps")';

        var notifier = new Notifier();
        var ajax = new Ajax(notifier);

        $(function() {
            var model = new Supervisor.VM.Maps(mapsListUrl, notifier, ajax, $deleteMapUrl);

            model.getDataTableColumns = function() {
                return [
                    {
                        data: "fileName",
                        name: "FileName", // case-sensitive!
                        "class": "title"
                    },
                    {
                        data: "size",
                        name: "Size",// case-sensitive! should be DB name here from Designer DB questionnairelistviewitems? to sort column
                        "class": "parameters"
                    },
                    {
                        data: "importDate",
                        name: "ImportDate",// case-sensitive! should be DB name here from Designer DB questionnairelistviewitems? to sort column
                        "class": "date"
                    }
                ];
            };

            model.onTableInitCompleteExtra = function () {

                var buildMenuItem = function(selectedRow) {
                    var items = {}


                    @if (!isObserver)
                    {
                        <text>
                            items["open"] = {
                                name: "@Common.Open",
                                callback: function(t, e) {
                                    var detailsUrl = $detailsUrl + '?mapname=' + selectedRow.fileName;
                                    window.location = detailsUrl;
                                }
                            };
                            items["delete"] =
                            {
                                name: "@Dashboard.DeleteMap",
                                callback: model.deleteMap
                            };
                        </text>
                    }
                    return items;
                }

                var contextMenuOptions = {
                    selector: "table#data_holder .with-context-menu",
                    autoHide: false,
                    build: function ($trigger, e) {
                        var selectedRow = model.selectRowAndGetData($trigger);
                        var items = buildMenuItem(selectedRow);
                        return { items: items };
                    },
                    trigger: 'left'
                };

                $.contextMenu(contextMenuOptions);
            };

            ko.applyBindings(model);
            model.load();
        });
</script>

}

<main>
    <div class="container">
        <div class="row">
            <div class="page-header">
                <ol class="breadcrumb">
                    <li>
                        @Html.ActionLink(MainMenu.Maps, "Index", "Maps")
                    </li>
                </ol>
                <h1>Manage user map links</h1>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6 col-xs-10 prefilled-data-info info-block">
                <p>Upload file containing correspondence between maps and users</p>
                
            </div>
        </div>

        <div class="row flex-row">

            <div >
                <div class="selection-box">
                    <div class="block">
                        <h3>Upload users mappings</h3>
                        <p>This will allow you to create map to user correspondence.</p>
                    </div>
                    <div>
                        <a href="@Url.HttpRouteUrl("DefaultApiWithAction",
                                     new {controller = "MapsApi", action = "MappingDownload"})">
                            @string.Format(WebInterviewSetup.DownloadTitle, "all")
                        </a>

                        @if (!isObserver)
                        {
                            using (Html.BeginForm("UploadMappings", "Maps", method: FormMethod.Post, htmlAttributes: new { enctype = "multipart/form-data", id = "MappingsUploadForm" }))
                            {
                                @Html.AntiForgeryToken()

                                @Html.Partial("ClientTimezoneOffset")
                                <label class="btn btn-success btn-file">
                                    @BatchUpload.UploadTabFile
                                    @Html.TextBoxFor(m => m.File, new { type = "file", accept = ".tsv", onchange = "this.form.submit()" })
                                </label>
                                @Html.ValidationMessageFor(x => x.File, null, new { @class = "help-block" })
                            }

                            <div>
                                <p>Upload .tsv file with file mappings.</p>
                                <p>Invalid names and user names will be ignored.</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

</main>
