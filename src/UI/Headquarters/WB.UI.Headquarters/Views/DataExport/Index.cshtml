@using System
@using System.Web.Optimization
@using WB.Core.BoundedContexts.Headquarters.DataExport.Dtos
@using WB.Core.BoundedContexts.Headquarters.Resources
@using WB.Core.SharedKernels.SurveyManagement.Web.Utils
@model WB.UI.Headquarters.Models.ExportModel

@{
    Layout = "~/Views/Shared/_MainLayout.cshtml";
    ViewBag.Title = DataExport.DataExport_Title;
}

@section scripts
{
    @Scripts.Render("~/js/main-no-libs")
    @Scripts.Render("~/js/list")
    @Scripts.Render("~/js/exportdata")

    <script type="text/javascript">

        var $AllDataUrl = '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "DataExportApi", action = "AllData"})';
        var $HistoryUrl = '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "DataExportApi", action = "Paradata"})';
        var $UpdateHistoryUrl = '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "DataExportApi", action = "RequestUpdateOfParadata"})';
        var $UpdateTabularDataUrl = '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "DataExportApi", action = "RequestUpdate"})';

        var $DDIUrl = '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "DataExportApi", action = "DDIMetadata"})';
        var $ExportedDataReferencesForQuestionnaireUrl = '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "DataExportApi", action = "ExportedDataReferencesForQuestionnaire"})';
        var $DeleteDataExportProcessUrl = '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "DataExportApi", action = "DeleteDataExportProcess"})';
        $(function() {
            var templates = [
                @foreach (var item in Model.Questionnaires)
                {
                    <text>{ id: '@item.TemplateId', version: '@item.TemplateVersion', title: '(ver. @item.TemplateVersion) @Html.Raw(item.TemplateName)' },</text>
                }
            ];
            var exportFromats = [];
            @foreach (DataExportFormat formatValue in Enum.GetValues(typeof (DataExportFormat)))
            {
                <text>exportFromats[@((int) formatValue)] = '@formatValue.ToString()'</text>
            }

            var statuses = [
                { status: null, title: 'Any' },
                @foreach (var item in Model.ExportStatuses)
                {
                    <text>{ status: @((int)item), title: '@item.ToUiString()' },</text>
                }
            ];

            var model = new Supervisor.VM.ExportData(templates,
                statuses,
                $ExportedDataReferencesForQuestionnaireUrl,
                $UpdateHistoryUrl,
                exportFromats,
                $DeleteDataExportProcessUrl,
                $UpdateTabularDataUrl);
            ko.applyBindings(model);
        });

        $('#umbrella').hide();
    </script>
    
    <script>
        $(document).ready(function ()
        {
            $("footer").addClass("footer-adaptive");

            $("#hide-filters").click(function () {
                $(".filters").toggleClass("hidden-filters");
                $(this).parents('.row').toggleClass("fullscreen");
                $("footer").toggleClass("footer-adaptive");
            });
            $("main").removeClass("hold-transition");
        });
    </script>
}

<main class="export hold-transition">
    <div class="container-fluid">
        <div class="row">
            <aside class="filters">
                <div class="foldback-button" id="hide-filters">
                    <span class="arrow"></span>
                    <span class="arrow"></span>
                    <span class="glyphicon glyphicon-tasks" aria-hidden="true"></span>
                </div>
                <div class="filters-container">
                    <h4>@DataExport.ExportRange</h4>
                    <div class="block-filter">
                        <h5>@DataExport.SurveyTemplateTitle</h5>
                        <div class="btn-group btn-input clearfix">
                            <select id="templateSelector" data-bind="options: Templates, value: selectedTemplate, optionsText: 'title'" class="selectpicker"></select>
                        </div>
                    </div>
                    <div class="block-filter checkbox-block">
                        <h5>@DataExport.StatusOfExportTitle</h5>
                        <select class="selectpicker" id="ddlStatus" data-bind="options: Statuses, value: selectedStatus, optionsText: 'title'"></select>
                    </div>
                </div>
            </aside>
            <div class="export-types">
                <h2 data-bind="text: selectedTemplate().title"></h2>
                <!-- ko if:selectedTemplateTitle() != null -->
                <div class="main  data">
                    <h3>@DataExport.MainSurveyDataTitle</h3>
                    <p>@DataExport.ZipArchiveDescription</p>
                    <div class="container-data">
                        <div class="table-data-header">
                            <div class="cell-data size">@DataExport.FileSizeTitle</div>
                            <div class="cell-data last-generated">@DataExport.LastGeneratedTitle</div>
                        </div>

                        @ExportTemplate(type: DataExportType.Data, format: DataExportFormat.STATA, styleName: "stata", dataUrl: "$AllDataUrl", addFromat: true)

                        @ExportTemplate(type: DataExportType.Data, format: DataExportFormat.SPSS, styleName: "spss", dataUrl: "$AllDataUrl", addFromat: true)

                        @ExportTemplate(type: DataExportType.Data, format: DataExportFormat.Tabular, styleName: "separated-data", dataUrl: "$AllDataUrl", addFromat: true)

                    </div>
                </div>
                <div class="binary data">
                    <h3>@DataExport.BinaryData</h3>
                    <p>@DataExport.BinaryDescription</p>
                    <div class="container-data">
                        <div class="table-data-header">
                            <div class="cell-data size">@DataExport.FileSizeTitle</div>
                            <div class="cell-data last-generated">@DataExport.LastGeneratedTitle</div>
                        </div>
                        @ExportTemplate(type: DataExportType.Data, format: DataExportFormat.Binary, dataUrl: "$AllDataUrl", styleName: "zip", addFromat: true)
                    </div>
                </div>
                <div class="metadata data">
                    <h3>@DataExport.DDI</h3>
                    <p>
                        <span>@DataExport.DDIDescription</span>
                    </p>
                    <div class="container-data">
                        <div class="table-data-header"></div>
                        <div class="table-data generated-data">
                            <div class="cell-data format-data">@DataExport.XMLFileDescription</div>
                            <div class="cell-data  download-block">
                                <a type="button" class="btn btn-primary btn-lg download" data-bind="attr: { href: $DDIUrl + '/' + selectedTemplateId() + '?version=' + selectedTemplateVersion() }">@DataExport.Download</a>
                            </div>
                        </div>
                    </div>
                </div>
                @if (this.ViewBag.EnableInterviewHistory)
                {
                    <div class="paradata data">
                        <h3>@DataExport.ParaData</h3>
                        <p>
                            <span>@DataExport.ParadataDescription</span>
                        </p>
                        <div class="container-data">
                            <div class="table-data-header">
                                <div class="cell-data size">@DataExport.FileSizeTitle</div>
                                <div class="cell-data last-generated">@DataExport.LastGeneratedTitle</div>
                            </div>
                            @ExportTemplate(type: DataExportType.ParaData, format: DataExportFormat.Tabular, dataUrl: "$HistoryUrl", styleName: "separated-data")
                        </div>
                    </div>
                }
                <!-- /ko  -->
            </div>
        </div>
    </div>
</main>

@helper ExportTemplate(DataExportType type, DataExportFormat format, string styleName, string dataUrl, bool addFromat = false)
{
var exportParameters = "'" + (int)type + "','" + (int)format + "'";

    <div data-bind="css: {'table-data': true, 'generated-data': (showRefreshButton(@exportParameters) && showDownloadButton(@exportParameters)), 'generation-in-progress' : (!showRefreshButton(@exportParameters)), 'not-generated-data': (showRefreshButton(@exportParameters) && !showDownloadButton(@exportParameters))}">
        <div class="cell-data format-data @styleName">@format @DataExport.FormatTitle</div>
        <div class="cell-data  download-block">
            <button type="button" class="btn btn-success btn-lg generate" data-bind="click: request@(type)Update(@((int) format)), visible: showRefreshButton(@exportParameters)">@DataExport.Generate</button>
            <a type="button" class="btn btn-primary btn-lg download" data-bind="visible: showDownloadButton(@exportParameters), attr: { href: @dataUrl + '/' + selectedTemplateId() + '?version=' + selectedTemplateVersion() @(addFromat ? "+ '&format=" + format + "'" : "") + '&status=' + selectedStatus().status }">@DataExport.Download</a>
            <div class="not-generated ">@DataExport.DataWasNotGenerated</div>
        </div>
        <div class="cell-data last-generated " data-bind="visible: showDownloadButton(@exportParameters)">
            <i data-bind="text:lastUpdateDate(@exportParameters)"></i>
        </div>
        <div class="cell-data size " data-bind="visible: showDownloadButton(@exportParameters)"><i data-bind="text:fileSize(@exportParameters) + ' @DataExport.Bytes'"></i></div>
        <div class="cell-data min-view " data-bind="visible: showDownloadButton(@exportParameters)">
            <div>@DataExport.LastGeneratedTitle: <span data-bind="text:lastUpdateDate(@exportParameters)"></span></div>
            <div>@DataExport.FileSizeTitle: <span><i data-bind="text:fileSize(@exportParameters) + ' @DataExport.Bytes'"></i></span></div>
        </div>

        <div class="cell-data progress-block">
            <div class="cancelable-progress queued" data-bind="visible: hasAnyDataToBePrepared(@exportParameters) && (getProgressInPercents(@exportParameters) < 1)">
                <div class="wrapper-progress">
                    <span>@DataExport.QueuedTitle</span>
                    <div class="progress">
                        <div class="progress-bar progress-bar-info" role="progressbar" aria-valuenow="10" aria-valuemin="0" aria-valuemax="10" style="width: 100%">
                            <span class="sr-only">@DataExport.QueuedTitle</span>
                        </div>
                    </div>
                </div>
                <button type="button" class="btn btn-link" data-bind="click : requestStopExportProcess(@exportParameters)"><span class="cancel"></span></button>
            </div>

            <div class="cancelable-progress" data-bind="visible: hasAnyDataToBePrepared(@exportParameters) && (getProgressInPercents(@exportParameters) > 0)">
                <div class="wrapper-progress">
                    <span data-bind="text:'@DataExport.Generating - ' + getProgressInPercents(@exportParameters) + '%'"></span>
                    <div class="progress">
                        <div class="progress-bar progress-bar-success" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" data-bind="style:{ width: getProgressInPercents(@exportParameters) + '%' } ">
                            <span class="sr-only" data-bind="text: getProgressInPercents(@exportParameters) + '% @DataExport.Completed'"></span>
                        </div>
                    </div>
                </div>
                <button type="button" class="close" data-bind="click : requestStopExportProcess(@exportParameters)"></button>
            </div>
        </div>

        <div class="not-generated cell-data" data-bind="visible: !hasAnyDataToBePrepared(@exportParameters)">@DataExport.NoDataAvailable</div>

    </div>
}

<script type="text/html" id="confirm-stop-export">
    <h3>
        @DataExport.ConfirmStop @DataExport.export ?
    </h3>
</script>