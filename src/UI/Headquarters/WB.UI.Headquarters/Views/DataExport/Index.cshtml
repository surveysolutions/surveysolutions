@using System.Web.Optimization
@using WB.Core.BoundedContexts.Headquarters.DataExport.Dtos
@model IEnumerable<WB.Core.SharedKernels.SurveyManagement.Views.Reposts.Views.TemplateViewItem>

@{
    ViewBag.Title = "Data Export";
    Layout = "~/Views/Shared/_LayoutWithSidebar.cshtml";
}

@section scripts
{

    @Scripts.Render("~/Scripts/viewmodels/pages/interviews.base.js",
                    "~/Scripts/viewmodels/pages/exportdata.js")

    <script type="text/javascript">

        var $AllDataUrl = '@Url.RouteUrl("DefaultApiWithAction", new { httproute = "", controller = "DataExportApi", action = "AllData" })';
        var $ApprovedDataUrl = '@Url.RouteUrl("DefaultApiWithAction", new { httproute = "", controller = "DataExportApi", action = "ApprovedData" })';
        var $FilesUrl = '@Url.Action("GetFiles", "ImportExport")';
        var $HistoryUrl = '@Url.RouteUrl("DefaultApiWithAction", new { httproute = "", controller = "DataExportApi", action = "Paradata" })';
        var $UpdateHistoryUrl = '@Url.RouteUrl("DefaultApiWithAction", new { httproute = "", controller = "DataExportApi", action = "RequestUpdateOfParadata" })';
        var $UpdateTabularDataUrl = '@Url.RouteUrl("DefaultApiWithAction", new { httproute = "", controller = "DataExportApi", action = "RequestUpdate" })';

        var $UpdateApprovedTabularDataUrl = '@Url.RouteUrl("DefaultApiWithAction", new { httproute = "", controller = "DataExportApi", action = "RequestUpdateOfApproved" })';
        var $DDIUrl = '@Url.RouteUrl("DefaultApiWithAction", new { httproute = "", controller = "DataExportApi", action = "DDIMetadata" })';
        var $ExportedDataReferencesForQuestionnaireUrl = '@Url.RouteUrl("DefaultApiWithAction", new { httproute = "", controller = "DataExportApi", action = "ExportedDataReferencesForQuestionnaire" })';
        var $DeleteDataExportProcessUrl = '@Url.RouteUrl("DefaultApiWithAction", new { httproute = "", controller = "DataExportApi", action = "DeleteDataExportProcess" })';
        $(function () {
            var templates = [
                @foreach (var item in Model)
                {
                    <text>{ id: '@item.TemplateId', version: '@item.TemplateVersion', title: '(ver. @item.TemplateVersion) @item.TemplateName' },</text>
                }
            ];
            var exportFromats = [];
            @foreach (DataExportFormat formatValue in Enum.GetValues(typeof (DataExportFormat)))
            {
              <text>exportFromats[@((int)formatValue)]='@formatValue.ToString()'</text>
            }
            var model = new Supervisor.VM.ExportData(templates, $ExportedDataReferencesForQuestionnaireUrl, $UpdateHistoryUrl, exportFromats, $DeleteDataExportProcessUrl, $UpdateTabularDataUrl,$UpdateApprovedTabularDataUrl);
            ko.applyBindings(model);
        });

        $('#umbrella').hide();
    </script>
}


@section header
{
    <h3>Select type and format of data to export</h3>
}

@section actionbar
{
    <h4 class="sinle-line-header text-italic" data-bind="text: selectedTemplate().title"></h4>
}

@section filters
{
    <ul class="list-group">
        <li class="list-group-item">
            <h4 class="list-group-item-heading">Template</h4>
            <p class="list-group-item-text">
                <select id="templateSelector" data-bind="options: Templates, value: selectedTemplate, optionsText: 'title'" class="form-control"></select>
            </p>
        </li>
    </ul>
}

<table class="table table-bordered table-condensed">
    <thead>
        <tr>
            <th>All Data</th>
            <th>Approved Data</th>
            <th>Binary Data</th>
            <th>DDI</th>
            @if (this.ViewBag.EnableInterviewHistory)
            {
                <th>Para Data</th>
            }
        </tr>
    </thead>
    <tbody>
        <!-- ko if:selectedTemplateTitle() != null -->
        <tr>
            <td>
                @DataExportTemplate(type: DataExportType.Data, format: DataExportFormat.Tabular, dataUrl: "$AllDataUrl", iconUrl: "~/Content/icons/tabs.png", addFromat: true)
            </td>
            <td>
                @DataExportTemplate(type: DataExportType.ApprovedData, format: DataExportFormat.Tabular, dataUrl: "$ApprovedDataUrl", iconUrl: "~/Content/icons/tabs.png", addFromat: true)
            </td>
            <td>
                @DataExportTemplate(type: DataExportType.Data, format: DataExportFormat.Binary, dataUrl: "$AllDataUrl", iconUrl: "~/Content/icons/binary.png", addFromat: true)
            </td>
            <td>

                <table class="table table-condensed">
                    <thead>
                        <tr>
                            <td><img src="@Url.Content("~/Content/icons/ddi.ico")" alt="ddi" /></td>
                            <td> Metadata</td>
                            <td>

                                <a class="btn btn-default" data-bind="attr: { href: $DDIUrl + '/' + selectedTemplateId() + '?version=' + selectedTemplateVersion() }">
                                    <i class="glyphicon glyphicon-download">
                                    </i>
                                </a>
                            </td>
                        </tr>
                    </thead>
                </table>
            </td>
            @if (this.ViewBag.EnableInterviewHistory)
            {
                <td>
                    @DataExportTemplate(type: DataExportType.ParaData, format: DataExportFormat.Tabular, dataUrl: "$HistoryUrl")
                </td>
            }
        </tr>
        <tr>
            <td>@DataExportTemplate(type: DataExportType.Data, format: DataExportFormat.STATA, dataUrl: "$AllDataUrl", iconUrl: "~/Content/icons/stata.gif", addFromat: true)</td>
            <td>@DataExportTemplate(type: DataExportType.ApprovedData, format: DataExportFormat.STATA, dataUrl: "$ApprovedDataUrl", iconUrl: "~/Content/icons/stata.gif", addFromat: true)</td>
            <td></td>
            <td></td>
            @if (this.ViewBag.EnableInterviewHistory)
            {
                <td></td>
            }
        </tr>
        <tr>
            <td>@DataExportTemplate(type: DataExportType.Data, format: DataExportFormat.SPPS, dataUrl: "$AllDataUrl", iconUrl: "~/Content/icons/spss.png", addFromat: true)</td>
            <td>@DataExportTemplate(type: DataExportType.ApprovedData, format: DataExportFormat.SPPS, dataUrl: "$ApprovedDataUrl", iconUrl: "~/Content/icons/spss.png", addFromat: true)</td>
            <td></td>
            <td></td>
            @if (this.ViewBag.EnableInterviewHistory)
            {
                <td></td>
            }
        </tr>
        <!-- /ko  -->
    </tbody>
</table>

<div>

    <!-- ko if:RunningProcesses().length>0 -->
    <table class="table table-striped table-bordered table-condensed table-hover">
        <thead>
            <tr>
                <th>Name</th>
                <th>Format</th>
                <th>Start date</th>
                <th>Last update data</th>
                <th>Progress</th>
                <th> </th>
            </tr>
        </thead>
        <tbody>
            <!-- ko foreach:RunningProcesses -->
            <tr>
                <td><span data-bind="text: DataExportProcessName"></span></td>
                <td><span data-bind="text: $root.exportFormatName($data)"></span></td>
                <td><span data-bind="text: $root.formatDate($data.BeginDate())"></span></td>
                <td><span data-bind="text: $root.formatDate($data.LastUpdateDate())"></span></td>
                <td><span data-bind="text: Progress"></span>%</td>
                <td>
                    @if (User.IsInRole("Administrator"))
                    {
                        <div class="btn-group pull-right">
                            <a class="btn btn-danger" data-bind="click : $root.stopExportProcess">
                                <i class="glyphicon glyphicon-remove"></i>
                            </a>
                        </div>
                    }
                </td>
            </tr> <!-- /ko -->
        </tbody>
    </table>
    <!-- /ko -->
</div>


@helper DataExportTemplate(DataExportType type, DataExportFormat format, string dataUrl, string iconUrl = null, bool addFromat = false)
{
var exportParameters = "'" + type + "','" + format + "'";
    <table class="table table-condensed">
        <thead>
            <tr>
                @if (!string.IsNullOrEmpty(iconUrl))
                {
                    <td><img src="@Url.Content(iconUrl)" /></td>
                }
                <td> Last updated on <i data-bind="text:lastUpdateDate(@exportParameters)"></i></td>
                <td>
                    <a class="btn btn-default" data-bind="click: request@(type)Update(@((int) format)), visible: showRefreshButton(@exportParameters)">
                        <i class="glyphicon glyphicon-refresh">
                        </i>
                    </a>
                </td>
                <td>

                    <a class="btn btn-default" data-bind="visible: showDownloadButton(@exportParameters), attr: { href: @dataUrl + '/' + selectedTemplateId() + '?version=' + selectedTemplateVersion() @(addFromat ? "+ '&format=" + format + "'" : "") }">
                        <i class="glyphicon glyphicon-download">
                        </i>
                    </a>
                </td>
            </tr>
        </thead>
    </table>
}
