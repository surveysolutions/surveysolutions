@using WB.Core.BoundedContexts.Headquarters
@using WB.UI.Shared.Web.Filters

@functions{
    public string TokenHeaderValue()
    {
        AntiForgery.GetTokens(null, out var cookieToken, out var formToken);
        return cookieToken + @":" + formToken;
    }
}

<script type="text/javascript">
    var input = window.input || (function () {
        'use strict';

        @{ var model = new
           {
               settings = new
               {
                   messages = new
                   {
                       forbiddenMessage = Pages.GlobalSettings_ForbiddenMessage,
                       unhandledExceptionMessage = Pages.GlobalSettings_UnhandledExceptionMessage,
                       notifyDialogTitle = Pages.GlobalSettings_NotifyDialogTitle,
                       notifyDialogText = Pages.GlobalSettings_NotifyDialogText,
                       notifyNoMarkersTitle = Pages.GlobalSettings_NotifyNoMarkersDialogTitle,
                       notifyNoMarkersText = Pages.GlobalSettings_NotifyNoMarkersDialogText,
                       deleteQuestionnaireConfirmationMessage = Pages.GlobalSettings_DeleteQuestionnareConfirmation,
                       notifyMarkersLimitReachedTitle = Pages.GlobalSettings_NotifyMarkersLimitReachedTitle,
                       notifyNoMarkersLimitReachedText = Pages.GlobalSettings_NotifyMarkersLimitReachedText,
                       deleteMapConfirmationMessage = Pages.GlobalSettings_DeleteMapConfirmation,
                       confirmationNeededTitle = Pages.ConfirmationNeededTitle,
                       enablingAuditConfirmationMessage = Pages.GlobalSettings_TurningAudioAuditOn
                   },
                   acsrf = new
                   {
                       tokenName = TokenValidationAuthorizationFilter.Apikey,
                       token = TokenHeaderValue()
                   },
                   clientDateTimeFormat = Extensions.ClientDateTimeFormat,
                   config = new {
                    syncQueue = new {
                        enabled = DependencyResolver.Current.GetService<SyncSettings>().UseBackgroundJobForProcessingPackages,
                        lengthUrl = Url.RouteUrl("DefaultApiWithAction", new
                        {
                            httproute = "", controller = "ControlPanelApi", action = "GetIncomingPackagesQueueLength"
                        })
                    },
                    basePath = Url.Content("~/"),
                    dataTableTranslationsUrl = Url.RouteUrl("DefaultApi", new
                    {
                        httproute = "", controller = "DataTableTranslations"
                    })
                },
               }
           };
        }

        return @(model.AsJsonValue());
    }(document));
    window.input = input;

    window.CONFIG = @( new {
        verboseMode = false,
        googleApiKey = WB.Core.SharedKernels.SurveyManagement.Web.Code.AppSettings.Instance.GoogleMapApiKey,
        googleMapsApiBaseUrl = WB.Core.SharedKernels.SurveyManagement.Web.Code.AppSettings.Instance.GoogleMapApiBaseUrl,
        googleMapsBaseUrl = WB.Core.SharedKernels.SurveyManagement.Web.Code.AppSettings.Instance.GoogleMapBaseUrl,
        basePath = Url.Content(@"~/"),
        imageGetBase = Url.Content("~/api/WebInterviewResources"),
        audioGet = Url.Content("~/Resource/AudioRecord"),
        appVersion = DependencyResolver.Current.GetService<WB.Core.Infrastructure.Versions.IProductVersion>().ToString(),
        dateFormat = Extensions.ClientDateTimeFormat,
        signalrPath = Url.Content("~/signalr/hubs"),
        supportedTransports = new [] { "webSockets", "longPolling"}
    }.AsJsonValue());

    if (typeof moment !== 'undefined') {
        moment.locale('@UICulture');
    }
</script>
