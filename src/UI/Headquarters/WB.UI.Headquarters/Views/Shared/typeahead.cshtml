<script type="text/x-template" id="typeahead-template">
    <div class="combo-box">
        <div class="btn-group btn-input clearfix">
            <button type="button" class="btn dropdown-toggle" data-toggle="dropdown">
                <span data-bind="label" v-if="value === null" class="gray-text">{{placeholderText}}</span>
                <span data-bind="label" v-else>
                    <span v-if="value.role" :class="itemClass(value.role)">{{value.value}}</span>
                    <span v-else>
                        {{value.value}}
                    </span>
                </span>
            </button>
            <ul ref="dropdownMenu" class="dropdown-menu" role="menu">
                <li>
                    <input type="text" ref="searchBox" :id="inputId" placeholder="Search" @@input="updateOptionsList" v-on:keyup.down="onSearchBoxDownKey" v-model="searchTerm" />
                </li>
                <li v-for="option in options" :key="option.key">
                    <a href="javascript:void(0);" v-on:click="selectOption(option)" v-html="display(option, searchTerm)" v-on:keydown.up="onOptionUpKey"></a>
                </li>
                <li v-if="isLoading">
                    <a>Loading...</a>
                </li>
                <li v-if="!isLoading && options.length === 0">
                    <a>No results found</a>
                </li>
            </ul>
        </div>
        <button v-if="value !== null" class="btn btn-link btn-clear" @@click="clear">
            <span></span>
        </button>
    </div>
</script>

<script type="text/javascript">
    Vue.component('typeahead', {
        template: '#typeahead-template',
        props: ['fetchUrl', 'controlId', 'value', 'placeholder', 'ajaxParams'],
        data: function () {
            return {
                options: [],
                isLoading: false,
                searchTerm: ''
            };
        },
        computed: {
            inputId: function () {
                return 'sb_' + this.controlId;
            },
            placeholderText: function () {
                return this.placeholder || "Select";
            }
        },
        mounted: function () {
            var self = this;
            var jqEl = $(this.$el);
            var focusTo = jqEl.find('#' + this.inputId);
            jqEl.on('shown.bs.dropdown',
                function() {
                    focusTo.focus();
                    self.fetchOptions(self.searchTerm);
                });

            jqEl.on('hidden.bs.dropdown',
                function() {
                    self.searchTerm = "";
                });
        },
        methods: {
            onSearchBoxDownKey: function(event) {
                var $firstOptionAnchor = $(this.$refs.dropdownMenu).find('a').first();
                $firstOptionAnchor.focus();
            },
            onOptionUpKey: function(event) {
                var isFirstOption = $(event.target).parent().index() === 1;

                if (isFirstOption) {
                    this.$refs.searchBox.focus();
                    event.stopPropagation();
                }
            },
            itemClass: function (role) {
                if (role) {
                    return role.toLowerCase();
                }
            },
            fetchOptions: function (filter) {
                this.isLoading = true;
                var requestParams = $.extend({ query: filter || "", cache: false }, this.ajaxParams);
                this.$http.get(this.fetchUrl, { params: requestParams })
                    .then(function(response) {
                            this.options = response.body.options || [];
                            this.isLoading = false;
                        },
                        function(response) {

                            this.isLoading = false;
                        });
            },
            clear: function () {
                this.$emit('selected', null, this.controlId);
                this.searchTerm = "";
            },
            selectOption: function (value) {
                this.$emit('selected', value, this.controlId);
            },
            updateOptionsList: function(e) {
                this.fetchOptions(e.target.value);
            },
            display: function (option, searchTerm) {
                var encodedTitle = _.escape(option.value);
                if (searchTerm) {
                    var safeSearchTerm = _.escape(_.escapeRegExp(searchTerm));

                    var iQuery = new RegExp(safeSearchTerm, "ig");
                    var result = encodedTitle.replace(iQuery, function (matchedTxt) {
                        return '<strong>' + matchedTxt + '</strong>';
                    });
                    if (option.role) {
                        result = "<span class='"+ option.role.toLowerCase() + "'>" + result + "</span>";
                    }
                    return result;
                }

                if (option.role) {
                    encodedTitle = "<span class='" + option.role.toLowerCase() + "'>" + encodedTitle + "</span>";
                }
                return encodedTitle;
            }
        }
    });
</script>