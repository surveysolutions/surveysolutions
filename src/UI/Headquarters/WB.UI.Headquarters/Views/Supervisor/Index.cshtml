@using Microsoft.Practices.ServiceLocation
@using WB.Core.BoundedContexts.Headquarters.Services
@{
    Layout = "~/Views/Shared/_MainLayout.cshtml";

    ViewBag.Title = Users.Supervisors;
    var authorizedUser = ServiceLocator.Current.GetInstance<IAuthorizedUser>();
    var isAdmin = authorizedUser.IsAdministrator;
}

@section scripts
{
    @Scripts.Render("~/js/main-no-libs")
    @Scripts.Render("~/js/common")
    @Scripts.Render("~/js/list")
    @Scripts.Render("~/js/editableusers")

    <script type="text/javascript">

        var supervisorsListUrl = '@Url.RouteUrl("DefaultApiWithAction", new { httproute = "", controller = "UsersApi", action = "AllSupervisors" })';
        var $impersonateUrl = '@Url.Action("ObservePerson", "Account", new { area = string.Empty })';
        var $archiveUsersUrl = '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "UsersApi", action = "ArchiveUsers"})';

        var notifier = new Notifier();
        var ajax = new Ajax(notifier);

        $(function () {
            var model = new Supervisor.VM.EditableUsers(supervisorsListUrl, $archiveUsersUrl, ajax);
            model.getDataTableColumns = function () {
                return [
                        @if (isAdmin)
                        {
                            <text>
                                {
                                    "orderable": false,
                                    render: function (data, type, row) {
                                        return "<input class=\"checkbox-filter\" id=\"cbx_" + row.userId + "\" value=\"" + row.userId +
                                            "\" type=\"checkbox\"> <label for=\"cbx_" + row.userId + "\"><span class=\"tick\"></span></label> ";
                                    },
                                    "class": "checkbox-cell"
                                },
                            </text>
                        }
                        {
                            data: "userName",
                            name: "UserName", // case-sensitive!
                            render: function (data, type, row) {
                                return !row.isArchived
                                    ? "<a href='@Url.Action("Edit", "Supervisor")/" + row.userId + "'>" + data + "</a>"
                                    : data;
                            }
                        },
                        {
                            data: "creationDate",
                            name: "CreationDate", // case-sensitive! should be DB name here from Designer DB questionnairelistviewitems? to sort column
                            "class": "date"
                        },
                        {
                            data: "email",
                            name: "Email", // case-sensitive! should be DB name here from Designer DB questionnairelistviewitems? to sort column
                            render: function (data, type, row) {
                                return data ? "<a href='mailto:" + data + "'>" + data + "</a>" : "";
                            },
                            "class": "date"
                        },
                        {
                            data: "isArchived",
                            name: "IsArchived", // case-sensitive!
                            render: function (data, type, row) {
                                return data ? "@Common.Yes" : "@Common.No";
                            }
                        }
                ];
            };

            model.unarchiveSupervisors = function () {
                model.getConfirmAndSendRequest(notifier,
                    "@Pages.ConfirmationNeededTitle",
                    "@Archived.UnarchiveSupervisorWarning \r\n @Pages.Supervisors_UnarchiveSupervisorsConfirm",
                    "@Pages.OperationFailedTitle",
                    false);
            };

            model.archiveSupervisors = function () {
                model.getConfirmAndSendRequest(notifier,
                    "@Pages.ConfirmationNeededTitle",
                    "@Pages.Supervisors_ArchiveSupervisorsConfirmMessage",
                    "@Pages.OperationFailedTitle",
                    true);
            }

            @if (authorizedUser.IsObserver)
            {
            <text>
            model.onTableInitCompleteExtra = function () {

                var selectRowAndGetData = function (selectedItem) {
                    var rowIndex = selectedItem.parent().children().index(selectedItem);
                    model.Datatable.row(rowIndex).select();
                    var selectedRows = model.Datatable.rows({ selected: true }).data()[0];
                    return selectedRows;
                }

                var impersonateAsUser = function (key, opt) {
                    var selectedRow = selectRowAndGetData(opt.$trigger);
                    window.location.href = $impersonateUrl + '?personName=' + selectedRow.userName;
                };

                var buildMenuItem = function (selectedRow) {
                    var items = {}

                    items["impersonate"] =
                    {
                        name: "@Users.ImpersonateAsUser",
                        callback: impersonateAsUser
                    };
                    return items;
                };

                var contextMenuOptions = {
                    selector: "table#data_holder .with-context-menu",
                    autoHide: false,
                    build: function ($trigger, e) {
                        var selectedRow = selectRowAndGetData($trigger);
                        var items = buildMenuItem(selectedRow);
                        return { items: items };
                    },
                    trigger: 'left'
                };

                $.contextMenu(contextMenuOptions);
            };
            </text>
            }

            ko.applyBindings(model);
            model.load();
        });
    </script>
}

<main class="hold-transition">
    <div class="container-fluid">

        <div class="row">
            @Html.Partial("_alerts")
            <div class="row">
                <div class="page-header clearfix">
                    <div>
                        <h1>@Html.Raw(string.Format(Users.SupervisorsCountDescription, @"<span data-bind='text: UsersCount'></span>"))</h1>
                        @if ((authorizedUser.IsAdministrator || authorizedUser.IsHeadquarter) && !authorizedUser.IsObserving)
                        {
                            <a class="btn btn-success" href="@Url.Action("Create", "Supervisor", new {area = string.Empty})">@Users.AddSupervisor</a>
                        }
                    </div>
                </div>
                <div class="col-sm-6 col-xs-10 prefilled-data-info info-block">
                    <ol class="list-unstyled">
                        @if (!authorizedUser.IsObserving && !authorizedUser.IsObserver)
                        {
                            <li>@Pages.Users_Supervisors_Instruction1</li>
                            <li>@Pages.Users_Supervisors_Instruction2</li>
                        }
                    </ol>
                </div>
            </div>
            <table id="data_holder" class="table table-striped table-ordered table-bordered table-hover table-with-checkboxes"
                   data-order="[[ 1, &quot;asc&quot; ]]" data-searching="true">
                <thead>
                    <tr>
                        @if (isAdmin)
                        {
                            <th class="sorting_disabled checkbox-cell">
                                <input class="double-checkbox" id="check-all" type="checkbox">
                                <label for="check-all">
                                    <span class="tick"></span>
                                </label>
                            </th>
                        }
                        <th>@Users.UserName</th>
                        <th class="for-tablets" title="@Users.AccountCreationDateTooltip">@Users.CreationDate</th>
                        <th class="for-mobile-devices">@Users.SupervisorEmail</th>
                        <th title="@Users.ArchivingStatusTitle">@Users.ArchivingStatusTitle</th>
                    </tr>
                </thead>
            </table>

            @if (isAdmin)
            {
                <div class="panel panel-table" data-bind="visible: SelectedItems().length > 0">
                    <div class="panel-body">
                        <input class="double-checkbox-white" id="q1az" type="checkbox" checked disabled="disabled">
                        <label for="q1az">
                            <span class="tick"></span>  <span data-bind="text: SelectedItems().length + ' @Pages.Supervisors_Selected'"></span>
                        </label>
                        <button type="button" class="btn btn-default btn-danger" data-bind="disable: IsNothingSelected, click: $root.archiveSupervisors">@Pages.Supervisors_Archive</button>
                        <button type="button" class="btn btn-default btn-success" data-bind="disable: IsNothingSelected, click: $root.unarchiveSupervisors">@Pages.Supervisors_Unarchive</button>
                    </div>
                </div>
            }
        </div>
    </div>
</main>