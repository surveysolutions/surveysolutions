@using System.Web.Optimization
@model WB.Core.BoundedContexts.Headquarters.Views.PreloadedData.PreloadedDataVerificationErrorsView
@{
    Layout = "~/Views/Shared/_LayoutWithoutSidebar.cshtml";
    ViewBag.Title = BatchUpload.VerifySampleData;
}

@section scripts
{
    @Scripts.Render("~/js/import-interviews")
    <script type="text/javascript">
        var $invalidInterviewsByLastImportUrl = '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "InterviewsApi", action = "GetInvalidInterviewsByLastImport"})';
        $(function () {
            var $importInterviewsStatusUrl = '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "InterviewsApi", action = "GetImportInterviewsStatus"})';
            var $importInterviewsUrl = '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "InterviewsApi", action = "ImportInterviews"})';
            var $responsiblesUrl = '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "Teams", action = "Supervisors"})';

            var $processUrl = '@Url.RouteUrl("Default", new {httproute = "", controller = "HQ", action = "VerifySample" , id=""})';
            var model = new Supervisor.VM.ImportInterviews('@Model.Id', '@Model.QuestionnaireId', @Model.Version, '@Model.PreloadedContentType', $importInterviewsStatusUrl, $importInterviewsUrl, $responsiblesUrl, $processUrl);

            model.load();
            ko.applyBindings(model);
        });
    </script>
    <script type="text/html" id="required-prefilled-questions-template">
        @Html.Raw(string.Format(BatchUpload.PrefilledQuestionsRequired,
            "<span class='text-normal' data-bind='text: $data.join(\", \")'></span>"))
    </script>
}

<div class="row-fluid">
    <h3>@string.Format("{0}: (ver. {1}) {2}", BatchUpload.BatchUpload_Title, Model.Version, Model.QuestionnaireTitle)</h3>
    <br />
    @if (Model.Errors.Length > 0)
    {
        <div style="height: 500px; overflow-y: scroll;">
            <table class="table table-striped table-bordered table-condensed table-break-words">
                <thead>
                    <tr>
                        <th>@BatchUpload.Code</th>
                        <th>@BatchUpload.Message</th>
                        <th>@BatchUpload.Details</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.Errors)
                {
                        <tr>
                            <th>@item.Code</th>
                            <th>@item.Message</th>
                            <th>
                                @foreach (var reference in item.References)
                                {
                                    if (!string.IsNullOrEmpty(@reference.Content))
                                    {
                                        <span>@reference.Type : @reference.Content</span>
                                        <br />
                                    }
                                    if (reference.PositionX.HasValue)
                                    {
                                        <span>@BatchUpload.Column: @reference.PositionX</span>
                                        <br />
                                    }

                                    if (reference.PositionY.HasValue)
                                    {
                                        <span>@BatchUpload.Row: @reference.PositionY</span>
                                        <br />
                                    }

                                    <span>@BatchUpload.FileName: @reference.DataFile </span>

                                }
                                <br />
                            </th>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <a href="@Url.Action("BatchUpload", "HQ", new {id = Model.QuestionnaireId, version = Model.Version})" class="btn btn-primary"><i class="icon-white"></i>Upload new data</a>
    }
    else
    {
        <div class="well form-center">
            <div class="form-horizontal">
                <div>
                    <fieldset>
                        <legend data-bind="visible: canImportInterviews">
                            @BatchUpload.DataIsValid
                        </legend>
                        <legend data-bind="visible: isRunningProcessExists">
                            @BatchUpload.ImportInProgress
                            <br/>
                            <a data-bind="attr: { href: getOtherProcessUrl }">@BatchUpload.RunningInterviewImportProcess</a>
                        </legend>
                    </fieldset>
                    <div class="form-group" data-bind="visible: canImportInterviews">
                        <div class="form-group">
                            <label class="control-label col-sm-4">@Common.Responsible</label>
                            <div class="col-sm-8">
                                @if (!Model.WasSupervsorProvided)
                                {
                                    <div class="input-group">
                                        <input class="form-control" data-bind="typeahead: selectedResponsible, typeaheadOptions: {source: responsibles, displayText: function(item){return item.UserName}}, valueupdate:'afterkeydown'" type="text" />
                                        <span data-bind="spinner: isResponsiblesLoading, spinnerOptions: { 'left': 1, 'right': '50px' }"></span>
                                        <div class="input-group-btn" data-bind="click: function(){ selectedResponsible(undefined); }">
                                            <div class="btn btn-default"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></div>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <h4 class="list-group-item-heading">@BatchUpload.ResponsibleSupervisorWillBeAssigned</h4>
                                }
                            </div>
                        </div>
                        <div class="col-sm-offset-4 col-sm-8">
                            <button class="btn btn-large btn-primary" type="submit" data-bind="click: importInterviews, @if (!Model.WasSupervsorProvided){<text>enable: IsSupervisorSelected</text>}">
                                @Common.Create
                            </button>
                        </div>
                    </div>
                </div>
                <fieldset data-bind="visible: importCompleted">
                    <legend>
                        @BatchUpload.SampleSuccess
                    </legend>
                </fieldset>
                <fieldset data-bind="visible: importCompletedWithError">
                    <legend style="color: red;">
                        @BatchUpload.SampleImportWithErrors
                    </legend>
                </fieldset>
                <ul class="list-group" data-bind="if: isNeedShowStatusPanel()">
                    <li class="list-group-item disabled">
                        <b>@BatchUpload.ImportStatus</b>
                    </li>
                    <li class="list-group-item">
                        <span class="badge"><span data-bind="text: status.createdInterviewsCount"></span> of <span data-bind="text: status.totalInterviewsCount"></span></span>
                        @BatchUpload.NumberInterviewCreated
                    </li>
                    <li class="list-group-item">
                        <span class="badge" data-bind="text: status.estimatedTime"></span>
                        @BatchUpload.EstimatedTime
                    </li>
                    <li class="list-group-item"  data-bind="visible: status.hasErrors">
                        <a data-bind="if: status.hasErrors, attr: { href: $invalidInterviewsByLastImportUrl }">
                            <i class="glyphicon glyphicon-download-alt"></i> @BatchUpload.DownloadInvalidInterviews
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    }
</div>