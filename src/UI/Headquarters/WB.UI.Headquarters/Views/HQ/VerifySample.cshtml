@using System.Web.Optimization
@using WB.Core.SharedKernels.SurveyManagement.Views.PreloadedData
@model WB.Core.SharedKernels.SurveyManagement.Views.PreloadedData.PreloadedDataVerificationErrorsView
@{
    Layout = "~/Views/Shared/_LayoutWithoutSidebar.cshtml";
    ViewBag.Title = "Index";
}

@section scripts
{
    @Scripts.Render("~/Scripts/bootstrap3-typeahead.js", "~/Scripts/knockout/ko.typeahead.js", "~/Scripts/components/typeahead-extended.js", "~/Scripts/pages/batchupload.js")
    <script type="text/javascript">
    $(function () {
        var $importDataUrl = '@Url.RouteUrl("DefaultApiWithAction", new { httproute = "", controller = "InterviewsApi", action = Model.PreloadedContentType == PreloadedContentType.Sample ? "ImportSampleData" : "ImportPanelData" })';
        var $successUploadUrl = "@Url.Action("SampleCreationResult", "HQ", new { id = Model.Id })";
        var responsiblesUrl = '@Url.RouteUrl("DefaultApiWithAction", new { httproute = "", controller = "Teams", action = "Supervisors" })';
        var model = new Supervisor.VM.BatchUpload('@Model.Id', '@Model.QuestionnaireId', '@Model.Version', responsiblesUrl, $importDataUrl, $successUploadUrl);
        ko.applyBindings(model);
        model.load();
    });
    </script>
}

<div class="row-fluid">
    @if (Model.Errors.Length > 0)
    {
        <div style="height: 500px; overflow-y: scroll;">
            <table class="table table-striped table-bordered table-condensed table-break-words">
                <thead>
                    <tr>
                        <th>Code</th>
                        <th>Message</th>
                        <th>Details</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.Errors)
                    {
                        <tr>
                            <th>@item.Code</th>
                            <th>@item.Message</th>
                            <th>
                                @foreach (var reference in item.References)
                                {
                                    if (!string.IsNullOrEmpty(@reference.Content))
                                    {
                                        <span>@reference.Type : @reference.Content</span>
                                        <br />
                                    }
                                    if (reference.PositionX.HasValue)
                                    {
                                        <span>Column: @reference.PositionX</span>
                                        <br />
                                    }

                                    if (reference.PositionY.HasValue)
                                    {
                                        <span>Row: @reference.PositionY</span>
                                        <br />
                                    }

                                    <span>File name: @reference.DataFile </span>

                                }
                                <br />
                            </th>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <a href="@Url.Action("BatchUpload", "HQ", new { id = Model.QuestionnaireId, version = Model.Version })" class="btn btn-primary"><i class="icon-white"></i>Upload new data</a>
    }
    else
    {
        <div class="well form-center">
            <div class="form-horizontal">
                <fieldset>
                    <legend>
                        Data is valid
                    </legend>
                    <div class="form-group">
                        <label class="control-label col-sm-4">Responsible</label>
                        <div class="col-sm-8">
                            @if (!Model.WasSupervsorProvided)
                            {
                                <div class="input-group">
                                    <input class="form-control" data-bind="typeahead: SelectedResponsible, typeaheadOptions: {source: Responsibles, displayText: function(item){return item.UserName}}, valueupdate:'afterkeydown'" type="text" />
                                    <div class="input-group-btn" data-bind="click: function(){ SelectedResponsible(undefined); }">
                                        <div class="btn btn-default"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <h4 class="list-group-item-heading">Responsible supervisor will be assigned automatically.</h4>
                            }
                        </div>
                    </div>
                </fieldset>
                <div class="form-group">
                    <div class="col-sm-offset-4 col-sm-8">
                        <button class="btn btn-large btn-primary" type="submit" data-bind="click: uploadSample, @if (!Model.WasSupervsorProvided){<text>enable: IsSupervisorSelected</text>}">Create sample from this data</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>