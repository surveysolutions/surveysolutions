@using System.Web.Optimization
@using WB.Core.SharedKernels.SurveyManagement.ValueObjects.Export
@using WB.Core.SharedKernels.SurveyManagement.Web.Models
@model WB.Core.SharedKernels.SurveyManagement.Web.Models.BatchUploadModel
@{
    Layout = "~/Views/Shared/_LayoutWithoutSidebar.cshtml";
    ViewBag.Title = "Index";
}

@section scripts
{
    @Scripts.Render("~/js/import-interviews")
    <script type="text/javascript">
        var $invalidInterviewsByLastImportUrl = '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "InterviewsApi", action = "GetInvalidInterviewsByLastImport"})';
        $(function () {
            var $importInterviewsStatusUrl = '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "InterviewsApi", action = "GetImportInterviewsStatus"})';
            var $importInterviewsUrl = '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "InterviewsApi", action = "ImportInterviews"})';
            var $responsiblesUrl = '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "Teams", action = "Supervisors"})';
            var model = new Supervisor.VM.ImportInterviews('@Model.QuestionnaireId', @Model.QuestionnaireVersion, $importInterviewsStatusUrl, $importInterviewsUrl, $responsiblesUrl);

            model.load();
            ko.applyBindings(model);
        });
    </script>
    <script type="text/html" id="required-prefilled-questions-template">
        @Html.Raw(string.Format(BatchUpload.PrefilledQuestionsRequired,
            "<span class='text-normal' data-bind='text: $data.join(\", \")'></span>"))
    </script>
}

<div id="dialogSelectSupervisor" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" data-bind="click: cancelSupervisorSelection">&times;</button>
                @BatchUpload.ImportInterviews_SelectSupervisor
            </div>
            <div class="modal-body">

                <div id="select-supervisor-dialog" data-bind="css: { 'has-error': selectedResponsible.hasError }">
                    <div class="input-group">
                        <input class="form-control" placeholder="Any" data-bind="typeahead: selectedResponsible, typeaheadOptions: {source: responsibles, displayText: function(item){return item.UserName}}, valueupdate:'afterkeydown'" type="text" />
                        <span data-bind="spinner: isResponsiblesLoading, spinnerOptions: { 'left': 1, 'right': '50px' }"></span>
                        <div class="input-group-btn" data-bind="click: function(){ selectedResponsible(undefined); }">
                            <div class="btn btn-default"><span class=" glyphicon glyphicon-remove" aria-hidden="true"></span></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" data-bind="enable: !selectedResponsible.hasError(), click: selectSupervisor">@BatchUpload.ImportInterviews_SelectButtonText</button>
            </div>
        </div>
    </div>
</div>
<div class="row-fluid">
    <div data-bind="visible: canImportInterviews" style="display: none;">
        <div class="row">
            <div data-bind="css: { 'col-md-9': isNeedShowStatusPanel() == true, 'col-md-12': isNeedShowStatusPanel  () == false }">
                <h3>@string.Format("{0}: (ver. {1}) {2}", BatchUpload.UploadSample, Model.QuestionnaireVersion, Model.QuestionnaireTitle)</h3>
                <div>
                    @BatchUpload.UploadSampleDescription
                </div>
                <br />
                @if (Model != null && Model.FeaturedQuestions != null)
                {
                    <div style="overflow-x: scroll">
                        <table class="table table-striped table-bordered table-condensed table-break-words">
                            <thead>
                                <tr>
                                    @foreach (var item in Model.FeaturedQuestions)
                                    {
                                        <th>@Html.DisplayFor(modelItem => item.Caption)</th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @for (int i = 0; i < 5; i++)
                                {

                                    <tr>
                                        @foreach (var item in Model.FeaturedQuestions)
                                        {
                                            <th>_</th>
                                        }
                                    </tr>

                                }
                            </tbody>
                        </table>
                    </div>
                }
                <div>
                    <form id="importByPrefilledQuestionsForm">
                        <br />
                        <div class="form-inline" data-bind="css: { 'has-error': fileWithInterviews.hasError }">
                            <input class="form-control" type="file" id="fileByPrefilledQuestions" accept=".tab, .txt, .zip" data-bind="value: fileWithInterviews" />
                            &nbsp;<span class="help-inline" data-bind="visible: fileWithInterviews.hasError">@BatchUpload.ImportInterviews_ChooseFile</span>
                        </div>
                        <br />
                        <input type="submit" class="btn btn-primary" value="@BatchUpload.Upload" data-bind="click: importInterviews" />
                    </form>
                </div>
            </div>
            <div data-bind="css: { 'col-md-3': isNeedShowStatusPanel() }">
                <ul class="list-group" data-bind="if: isNeedShowStatusPanel()" style="padding-top: 30px">
                    <li class="list-group-item disabled">
                        <b>Last import status</b>
                    </li>
                    <li class="list-group-item">
                        <span class="badge"><span data-bind="text: status.createdInterviewsCount"></span> of <span data-bind="text: status.totalInterviewsCount"></span></span>
                        Interview(s) imported
                    </li>
                    <li class="list-group-item">
                        <span class="badge" data-bind="text: status.estimatedTime"></span>
                        Time spent
                    </li>
                    <li class="list-group-item">
                        <a data-bind="if: status.hasErrors, attr: { href: $invalidInterviewsByLastImportUrl }">
                            <i class="glyphicon glyphicon-download-alt"></i> Download invalid interviews
                        </a>
                    </li>
                </ul>
            </div>
        </div>

        <h3>@BatchUpload.AdvancedMode</h3>
        <div>
            @BatchUpload.AdvancedModeDescription
        </div>
        <br/>
        <a href="@Url.Action("TemplateDownload", "HQ", new {id = Model.QuestionnaireId, version = Model.QuestionnaireVersion})" class="btn">@BatchUpload.DownloadTemplateArchive</a>

        <div>
            @using (Html.BeginForm("PanelBatchUpload", "HQ", routeValues: new {id = Model.QuestionnaireId, version = Model.QuestionnaireVersion}, method: FormMethod.Post, htmlAttributes: new {enctype = "multipart/form-data"}))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(x => x.QuestionnaireId)
                @Html.HiddenFor(x => x.QuestionnaireVersion)
                <br/>
                <div class="control-group">
                    <div class="controls">
                        @Html.TextBoxFor(m => m.File, new {type = "file", accept = ".zip"})
                        @Html.ValidationMessageFor(x => x.File)
                    </div>
                </div>
                <input type="submit" class="btn btn-primary" name="Submit" value="@BatchUpload.Upload"/>
            }
        </div>
    </div>

    <div class="container" data-bind="visible: !canImportInterviews()" style="display: none;">
        <div class="jumbotron">
            <h2 data-bind="text: status.questionnaireTitle"></h2>
            <p>Import interviews is in progress, please wait until current operation is finished</p>
            <p data-bind="visible: status.totalInterviewsCount() > 0">
                <b><span data-bind="text: status.createdInterviewsCount"></span></b> of <b><span data-bind="text: status.totalInterviewsCount"></span></b> interviews created
            </p>
            <p data-bind="visible: status.createdInterviewsCount() > 0">
                <b><span data-bind="text: status.elapsedTime"></span></b> of <b><span data-bind="text: status.estimatedTime"></span></b> time spent
            </p>
            <p>
                <a data-bind="if: status.hasErrors, attr: { href: $invalidInterviewsByLastImportUrl }">
                    <i class="glyphicon glyphicon-download-alt"></i> Download invalid interviews
                </a>
            </p>
        </div>
    </div>
</div>
