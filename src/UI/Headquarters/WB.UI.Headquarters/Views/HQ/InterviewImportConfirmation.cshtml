@using NHibernate.Loader.Collection
@model WB.Core.BoundedContexts.Headquarters.Views.PreloadedData.PreloadedDataConfirmationModel
@{
    Layout = "~/Views/Shared/_MainLayout.cshtml";
    ViewBag.Title = BatchUpload.VerifySampleData;
    var modelState = ViewContext.ViewData.ModelState;
}

@section scripts
{
    @Scripts.Render("~/js/batch-upload-start-interview-creation")
    <script type="text/javascript">
        var StartInterviewCreationModel = function (ajax) {
            var $responsiblesUrl = '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "Teams", action = "Supervisors"})';

            var self = this;

            self.isResponsiblesLoading = ko.observable(false);
            self.responsibles = function (query, sync, pageSize) {
                self.isResponsiblesLoading(true);
                ajax.sendRequest($responsiblesUrl, "get", { query: query, pageSize: pageSize }, true,
                    // onSuccess
                    function (response) {
                        sync(response.Users, response.TotalCountByQuery);
                    },
                    // onDone
                    function () {
                        self.isResponsiblesLoading(false);
                    });
            };

            self.selectedResponsible = ko.observable(undefined).extend({ required: { shouldValidateOnStart: false } });

            self.selectedSupervisorId = ko.computed(function () {
                return _.isUndefined(self.selectedResponsible()) ? "" : self.selectedResponsible().UserId;
            });

            self.isSupervisorSelected = ko.computed(function () {
                return !_.isUndefined(self.selectedResponsible());
            });
        };

        $(function () {
            var model = new StartInterviewCreationModel(new Ajax(new Notifier()));
            ko.applyBindings(model);
        });
    </script>
}
<main>
    <div class="container">
        <div class="row">
            <div class="col-md-8 col-sm-8 page-header">
                <ol class="breadcrumb">
                    <li>@Html.ActionLink(MainMenu.Questionnaires, "Index", "HQ")</li>
                    <li>@Html.ActionLink(BatchUpload.BreadCrumbs_CreatingMultipleInterviews, "BatchUpload", "HQ", new { id = Model.QuestionnaireId, version = Model.Version }, new { })</li>
                </ol>
                <div class="page-title">
                    @BatchUpload.CreatingMultipleInterviews
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-7">
                <h3>
                    @string.Format(BatchUpload.ImportFrom, Model.FileName, Html.QuestionnaireName(Model.QuestionnaireTitle, Model.Version))
                </h3>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-7 col-xs-12 action-block">
                <div class="import-progress">
                    <p class="success-text">@BatchUpload.VerificationCompleted</p>
                    <p>
                        @(Model.InterviewsCount == 1 ? BatchUpload.DataForSingleInterviewFound : string.Format(BatchUpload.DataForMultipleInterviewsFound, Model.InterviewsCount))
                    </p>
                    @if (Model.WasSupervsorProvided)
                    {
                        <p>
                            @(Model.SupervisorsCount == 1 ? BatchUpload.AssignedToSingleSupervisor : string.Format(BatchUpload.AssignedToMultipleSupervisors, Model.SupervisorsCount))
                        </p>
                        <p>
                            @(Model.EnumeratorsCount == 1 ? BatchUpload.AssignedToSingleEnumerator : string.Format(BatchUpload.AssignedToMultipleEnumerators, Model.EnumeratorsCount))
                        </p>
                    }
                </div>
                @using (Html.BeginForm("InterviewImportConfirmation", "HQ", new { Id = Model.Id, questionnaireId = Model.QuestionnaireId, version = Model.Version }, FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(x => x.InterviewsCount)
                    @Html.HiddenFor(x => x.EnumeratorsCount)
                    @Html.HiddenFor(x => x.SupervisorsCount)
                    @Html.HiddenFor(x => x.FileName)
                    @Html.HiddenFor(x => x.WasSupervsorProvided)
                    @Html.HiddenFor(x => x.PreloadedContentType)

                    <input id="supervisorId" name="supervisorId" type="hidden" data-bind="value: selectedSupervisorId">
                    @Html.ValidationSummary(true)
                    if (!Model.WasSupervsorProvided)
                    {
                        <div class="form-group @(modelState.Keys.Contains("SupervisorId") ? "has-error" : "")">
                            <label class="control-label">@BatchUpload.SelectSupervisorToAssign</label>
                            <div class="input-group">
                                <input placeholder="@BatchUpload.ImportInterviews_SelectSupervisor" class="form-control" data-bind="typeahead: selectedResponsible, typeaheadOptions: {source: responsibles, displayText: function(item){return item.UserName}}, valueupdate:'afterkeydown'" type="text" />
                                <span data-bind="spinner: isResponsiblesLoading, spinnerOptions: { 'left': 1, 'right': '50px' }"></span>
                                <div class="input-group-btn" data-bind="click: function(){ selectedResponsible(undefined); }">
                                    <div class="btn btn-default"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></div>
                                </div>
                            </div>
                            @Html.ValidationMessageFor(x => x.SupervisorId, null, new { @class = "help-block" })
                        </div>
                    }
                    <div class="action-buttons">
                        <button type="submit" class="btn btn-success" data-bind="@if (!Model.WasSupervsorProvided)
                                                                                 {<text>enable: isSupervisorSelected</text>}">
                            @BatchUpload.CreateInterviews
                                                                            </button>
                                                                            <a href="@Url.Action("BatchUpload", "HQ", new {id = Model.QuestionnaireId, version = Model.Version})" class="back-link">
                                                                                @BatchUpload.BackToImport
                                                                            </a>
                                                                        </div>
                }
            </div>
        </div>
    </div>
</main>