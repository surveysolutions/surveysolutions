@using WB.Core.BoundedContexts.Headquarters.Services
@using WB.Core.GenericSubdomains.Portable.ServiceLocation
@{
    Layout = "~/Views/Shared/_MainLayout.cshtml";
    ViewBag.Title = Users.Headquarters;
    var authorizedUser = ServiceLocator.Current.GetInstance<IAuthorizedUser>();
}

@section scripts
{
    @Scripts.Render("~/js/main-no-libs")
    @Scripts.Render("~/js/common")
    @Scripts.Render("~/js/list")
    @Scripts.Render("~/js/users")

    <script type="text/javascript">

        var headquartersListUrl = '@Url.RouteUrl("DefaultApiWithAction", new { httproute = "", controller = "UsersApi", action = "AllHeadquarters" })';
        var $impersonateUrl = '@Url.Action("ObservePerson", "Account", new { area = string.Empty })';

        $(function () {
            var model = new Supervisor.VM.Users(headquartersListUrl);
            model.getDataTableColumns = function () {
                return [
                        {
                            data: "userName",
                            name: "UserName", // case-sensitive!
                            render: function (data, type, row) {
                                return "<a href='@Url.Action("Edit", "Headquarters")/" + row.userId + "'>" + data + "</a>";
                            }
                        },
                        {
                            data: "creationDate",
                            name: "CreationDate", // case-sensitive! should be DB name here from Designer DB questionnairelistviewitems? to sort column
                            "class": "date"
                        },
                        {
                            data: "email",
                            name: "Email", // case-sensitive! should be DB name here from Designer DB questionnairelistviewitems? to sort column
                            render: function (data, type, row) {
                                return data ? "<a href='mailto:" + data + "'>" + data + "</a>" : "";
                            },
                            "class": "date"
                        }
                ];
            };

            @if (authorizedUser.IsObserver)
            {
            <text>

              model.onTableInitCompleteExtra = function () {
                var selectRowAndGetData = function (selectedItem) {
                    var rowIndex = selectedItem.parent().children().index(selectedItem);
                    model.Datatable.row(rowIndex).select();
                    var selectedRows = model.Datatable.rows({ selected: true }).data()[0];
                    return selectedRows;
                }

                var impersonateAsUser = function (key, opt) {
                    var selectedRow = selectRowAndGetData(opt.$trigger);
                    window.location.href = $impersonateUrl + '?personName=' + selectedRow.userName;
                };

                var buildMenuItem = function (selectedRow) {
                    var items = {}

                    items["impersonate"] =
                    {
                        name: "@Users.ImpersonateAsUser",
                            callback: impersonateAsUser
                        };
                        return items;
                    };

                    var contextMenuOptions = {
                        selector: "table#data_holder .with-context-menu",
                        autoHide: false,
                        build: function ($trigger, e) {
                            var selectedRow = selectRowAndGetData($trigger);
                            var items = buildMenuItem(selectedRow);
                            return { items: items };
                        },
                        trigger: 'left'
                    };

                    $.contextMenu(contextMenuOptions);

                };
            </text>
            }

            ko.applyBindings(model);
            model.load();
        });
    </script>
}

<main>
    <div class="container-fluid">
        @Html.Partial("_alerts")
        <div class="row">
            <div class="page-header clearfix">
                <div class="neighbor-block-to-search">
                    <div class="topic-with-button">
                        <h1>@Html.Raw(string.Format(Users.HeadquartersCountDescription, @"<span data-bind='text: UsersCount'></span>"))</h1>
                        @if (authorizedUser.IsAdministrator)
                        {
                            <a class="btn btn-success" href="@Url.Action("Create", "Headquarters", new {area = string.Empty})">@Users.AddHeadquarters</a>
                        }
                    </div>
                    <ol class="list-unstyled">
                        @if (!authorizedUser.IsObserving && !authorizedUser.IsObserver)
                        {
                            <li>@Pages.Users_Headquarters_Instruction1</li>
                            <li>@Pages.Users_Headquarters_Instruction2</li>
                        }
                    </ol>
                </div>
            </div>
            <table id="data_holder" class="table table-striped table-ordered table-bordered table-hover"
                   data-order="[[ 0, &quot;asc&quot; ]]" data-searching="true">
                <thead>
                    <tr>
                        <th>@Users.UserName</th>
                        <th title="@Users.AccountCreationDateTooltip">@Users.CreationDate</th>
                        <th>@Users.HeadquartersEmail</th>
                    </tr>
                </thead>
            </table>
        </div>
    </div>
</main>