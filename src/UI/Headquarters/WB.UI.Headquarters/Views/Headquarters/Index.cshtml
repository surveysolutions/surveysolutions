@using Main.Core.Entities.SubEntities
@using Microsoft.Practices.ServiceLocation
@using WB.Core.BoundedContexts.Headquarters.Services
@{
    Layout = "~/Views/Shared/_MainLayout.cshtml";
    ViewBag.Title = Users.Headquarters;
    var authorizedUser = ServiceLocator.Current.GetInstance<IAuthorizedUser>();
}

@section scripts
{
    @Scripts.Render("~/js/common")
    <script type="text/javascript">
        'use strict';

        var HeadquartersModel = function (ajax, notifier) {
            var self = this;

            self.table = null;

            var headquartersListUrl = '@Url.RouteUrl("DefaultApiWithAction", new { httproute = "", controller = "UsersApi", action = "AllHeadquarters" })';
            var $impersonateUrl = '@Url.Action("ObservePerson", "Account", new { area = string.Empty })';

            var requestHeaders = {};
            requestHeaders[input.settings.acsrf.tokenName] = input.settings.acsrf.token;

            $.fn.dataTable.ext.errMode = 'none';

            var selectRowAndGetData = function (selectedItem) {
                var rowIndex = selectedItem.parent().children().index(selectedItem);
                self.table.row(rowIndex).select();
                var selectedRows = self.table.rows({ selected: true }).data()[0];
                return selectedRows;
            }
            @if (authorizedUser.IsObserver)
            {
                <text>
                var impersonateAsUser = function (key, opt) {
                    var selectedRow = selectRowAndGetData(opt.$trigger);
                    window.location.href = $impersonateUrl + '?personName=' + selectedRow.userName;
                };

                var buildMenuItem = function(selectedRow) {
                    var items = {}

                    items["impersonate"] =
                        {
                            name: "@Users.ImpersonateAsUser",
                        callback: impersonateAsUser
                    };
                    return items;
                }

                self.contextMenuOptions = {
                    selector: "table#headquarters .with-context-menu",
                    autoHide: false,
                    build: function ($trigger, e) {
                        var selectedRow = selectRowAndGetData($trigger);
                        var items = buildMenuItem(selectedRow);
                        return { items: items };
                    },
                    trigger: 'left'
                };
            </text>
            }
            var onTableInitComplete = function () {
                $('.dataTables_filter label').on('click', function (e) {
                    if (e.target !== this)
                        return;
                    if ($(this).hasClass("active")) {
                        $(this).removeClass("active");
                    } else {
                        $(this).addClass("active");
                        $(this).children("input[type='search']").delay(200).queue(function () { $(this).focus(); $(this).dequeue(); });
                    }
                });
                @if (authorizedUser.IsObserver)
                {
                    <text>
                    $.contextMenu(self.contextMenuOptions);
                    </text>
                }
            };

            self.table = $('table#headquarters')
                .on('init.dt', onTableInitComplete)
                .on('xhr.dt', function (e, settings, json, xhr) {
                    if (xhr.status === 401)
                        location.reload();
                })
                .DataTable({
                    processing: true,
                    language:
                    {
                        "url": window.input.settings.config.dataTableTranslationsUrl,
                        searchPlaceholder: "@Pages.Search"
                    },
                    serverSide: true,
                    ajax: {
                        url: headquartersListUrl,
                        type: "POST",
                        headers: requestHeaders
                    },
                    "createdRow": function (row, data, dataIndex) {
                        $(row).addClass('with-context-menu');
                    },
                    columns: [
                        {
                            data: "userName",
                            name: "UserName", // case-sensitive!
                            render: function (data, type, row) {
                                return "<a href='@Url.Action("Edit", "Headquarters")/"+ row.userId +"'>" + data + "</a>";
                            }
                        },
                        {
                            data: "creationDate",
                            name: "CreationDate", // case-sensitive! should be DB name here from Designer DB questionnairelistviewitems? to sort column
                            "class": "date"
                        },
                        {
                            data: "email",
                            name: "Email", // case-sensitive! should be DB name here from Designer DB questionnairelistviewitems? to sort column
                            render: function (data, type, row) {
                                return data ? "<a href='mailto:" + data + "'>" + data + "</a>" : "";
                            },
                            "class": "date"
                        }
                    ],
                    select: {
                        style: 'single'
                    },
                    searchHighlight: true,
                    rowId: 'userId',
                    pagingType: "full_numbers",
                    lengthChange: false, // do not show page size selector
                    pageLength: 50, // page size
                    "order": [[1, 'desc']],
                    dom: "frtp",
                    conditionalPaging: true
                });

            return self;
        };

        $(function () {
            var notifier = new Notifier();
            var model = new HeadquartersModel(new Ajax(notifier), notifier);
        });
    </script>
}
<main>
    <div class="container-fluid">
        @Html.Partial("_alerts")
        <div class="row">
            <div class="page-header clearfix">
                <div>
                    <h1>@Users.Headquarters</h1>
                    @if (authorizedUser.IsAdministrator)
                    {
                        <a class="btn btn-success" href="@Url.Action("Create", "Headquarters", new {area = string.Empty})">@Users.AddHeadquarters</a>
                    }
                </div>
            </div>
            <div class="col-sm-6 col-xs-10 prefilled-data-info info-block">
            </div>
        </div>
        <table id="headquarters" class="table table-striped table-ordered table-bordered table-hover">
            <thead>
            <tr>
                <th>@Users.UserName</th>
                <th title="@Users.AccountCreationDateTooltip">@Users.CreationDate</th>
                <th>@Users.HeadquartersEmail</th>
            </tr>
            </thead>
        </table>
    </div>
</main>