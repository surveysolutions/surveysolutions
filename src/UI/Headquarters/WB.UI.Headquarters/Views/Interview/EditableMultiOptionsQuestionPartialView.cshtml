@using WB.Core.BoundedContexts.Headquarters.Views.Interview
@model InterviewQuestionView

@{
    var answers = (decimal[])Model.Answer;
    var selectedOptions = answers == null ? "" : string.Join(",", answers);
    var multiQuestionSettings = Model.Settings as MultiQuestionSettings;

    var jsMaxAllowedAnswersValueAsString = "null";
    if (multiQuestionSettings.MaxAllowedAnswers.HasValue)
    {

        jsMaxAllowedAnswersValueAsString = multiQuestionSettings.MaxAllowedAnswers.Value.ToString();
    }

}

@foreach (var option in Model.Options)
{
    var optionValue = option.Value.ToString();
    var isChecked = answers != null && answers.Contains(Convert.ToDecimal(option.Value));

    <label class="checkbox" for="@Html.InterviewItemIdWithPostfix(Model.Id.Id, Model.Id.RosterVector, string.Format("option{0}", optionValue))">
        <input type="checkbox" name="@Model.Id" id="@Html.InterviewItemIdWithPostfix(Model.Id.Id, Model.Id.RosterVector, string.Format("option{0}", optionValue))" value="@optionValue" @(isChecked ? "checked" : "")
               data-bind="click: saveCategoricalMultiAnswer.bind($data, '@Model.Id.Id', '@Model.Id.RosterVector', @(multiQuestionSettings.AreAnswersOrdered.ToString().ToLower()), @jsMaxAllowedAnswersValueAsString, '@selectedOptions' )">

        <span>@option.Label</span>
        @if (multiQuestionSettings.AreAnswersOrdered && isChecked)
        {
            <span class="badge">@(answers.Select((item, index) => new {index, item}).First(_ => _.item ==  Convert.ToDecimal(option.Value)).index + 1)</span>
        }
    </label>
}