@using WB.Core.SharedKernels.Questionnaire.Documents
@using WB.UI.Shared.Web.Extensions
@model WB.Core.SharedKernels.SurveyManagement.Web.Controllers.GeographyPreview

@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Area</title>
    @this.GenerateFavicon(Url.Content("~/Dependencies/img/identity/favicon-hq"))

    <style>
        html, body, #viewDiv {
            padding: 0;
            margin: 0;
            height: 100%;
            width: 100%;
        }
    </style>
    @if (Model != null)
    {
    <link rel="stylesheet" href="https://js.arcgis.com/4.3/esri/css/main.css">
    <script src="https://js.arcgis.com/4.7/"></script>
    <script>
        require([
            "esri/Map",
            "esri/views/MapView",
            "esri/Graphic",
            "esri/geometry/Polygon",
            "esri/geometry/Point",
            "esri/geometry/Polyline",
            "esri/symbols/SimpleLineSymbol",
            "esri/symbols/SimpleFillSymbol",
            "dojo/domReady!"
        ],
            function (Map, MapView, Graphic, Polygon, Point, Polyline, SimpleLineSymbol, SimpleFillSymbol) {
                var map = new Map({
                    basemap: "hybrid"
                });

                var geometryJson = @Html.Raw(Model.AreaAnswer.Geometry);


                @switch (Model.Geometry)
                {
                    case GeometryType.Multipoint:
                        @Html.Raw("var polyline = Polyline.fromJSON(geometryJson); " +
                                  "var polyGeometry = [];" +
                                  "for (var i = 1; i < polyline.paths[0].length; i++) {" +
                                  "polyGeometry.push(polyline.getPoint(0, i))" +
                                  "};"+
                                  "var markerType = 'simple-marker';");
                        break;
                    case GeometryType.Polyline:
                        @Html.Raw("var polyGeometry = [Polyline.fromJSON(geometryJson)]; var markerType = 'simple-line';");
                        break;
                    case GeometryType.Point:
                        @Html.Raw("var polyGeometry = [Point.fromJSON(geometryJson)]; var markerType = 'simple-marker';");
                        break;
                    default:
                        @Html.Raw("var polyGeometry = [Polygon.fromJSON(geometryJson)]; var markerType = 'simple-line';");

                        break;
                }

                var fillSymbol = {
                    type: markerType,
                    color: [255, 255, 255],
                    cap: "round",
                    width: 1
                };

                var polyGraphic = [];
                for (let i = 0; i < polyGeometry.length; i++) {
                    polyGraphic.push(new Graphic({
                        geometry: polyGeometry[i],
                        symbol: fillSymbol
                    }));
                };

                var view = new MapView({
                    container: "viewDiv",
                    map: map,
                    spatialReference: polyGeometry[0].spatialReference
                });

                view.graphics.addMany(polyGraphic);

                var taxLotExtent = view.graphics.items[0].geometry;

                if (taxLotExtent.extent === null)
                    view.center = taxLotExtent;
                else
                    view.extent = taxLotExtent.extent;

            });
    </script>
    }
</head>
<body>
    <div id="viewDiv"></div>
</body>
</html>
