@using Main.Core.Entities.SubEntities
@using WB.Core.SharedKernels.DataCollection.ValueObjects.Interview
@using WB.Core.SharedKernels.SurveyManagement.Views.Interview
@using WB.Core.SharedKernels.SurveyManagement.Web.Utils.Membership
@model InterviewDetailsView
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div data-bind="visible: IsPageLoaded">
    <div id="menu" class="col-sm-4 col-md-3 sidebar" data-bind="css: filter">
        <div class="panel panel-default">
            <div class="panel-heading with-btn">
                Groups
                <div class="btn-group btn-group-sm pull-right">
                    <button data-bind="click: ToggleFilter" class="btn btn-default"><span class="glyphicon glyphicon-arrow-left"></span> Hide groups</button>
                </div>
            </div>
            <ul id="groups-menu" class="list-group">
                @foreach (var group in Model.Groups)
                {
                    <li class="list-group-item @("level" + group.Depth)">
                        <a href="#div-@(group.Id)">@group.Title</a>
                    </li>
                }
            </ul>
        </div>
    </div>
    <div id="content" class="col-sm-8 col-sm-offset-4 col-md-9 col-md-offset-3 main">
        <div class="panel panel-default">
            <div class="panel-body">
                <span data-bind="visible: !IsFilterOpen()"><button data-bind="click: ToggleFilter" class="btn btn-default  btn-xs"><span class="glyphicon glyphicon-arrow-right"></span> Show groups</button></span>
                @if (((Model.Status == InterviewStatus.Completed || Model.Status == InterviewStatus.RejectedByHeadquarters) && GlobalInfo.IsSupervisor) || (Model.Status == InterviewStatus.ApprovedBySupervisor && GlobalInfo.IsHeadquarter))
                {
                    <button class="btn btn-success " data-bind="click: showApproveModal">Approve</button>
                    <button class="btn btn-danger" data-bind="click: showRejectModal">Reject</button>
                }
                <a href="#/all" class="btn btn-default btn-xs" data-bind="css: { 'btn-primary': filter() == 'all' }">all</a>
                <a href="#/flaged" class="btn btn-default  btn-xs" data-bind="css: { 'btn-primary': filter() == 'flaged' }">
                    <i class="glyphicon glyphicon-flag" data-bind="    css: {'icon-white': filter() == 'flaged' }"></i> flagged (<span data-bind="    text: flagedCount"></span>)
                </a>
                <a href="#/commented" class="btn btn-default btn-xs" data-bind="css: { 'btn-primary': filter() == 'commented' }">
                    <i class="glyphicon glyphicon-comment" data-bind="    css: {'icon-white': filter() == 'commented' }"></i> commented (<span data-bind="    text: commentedCount"></span>)
                </a>
                <a href="#/answered"
                   class="btn btn-default btn-xs" data-bind="css: { 'btn-primary': filter() == 'answered' }">
                    <i class="glyphicon glyphicon-ok"
                       data-bind="    css: { 'icon-white': filter() == 'answered' }"></i> answered
                    (<span data-bind="    text: answeredCount"></span>)
                </a>
                <a href="#/invalid" class="btn btn-default btn-xs"
                   data-bind="css: { 'btn-primary': filter() == 'invalid' }">
                    <i class="glyphicon glyphicon-warning-sign"
                       data-bind="    css: { 'icon-white': filter() == 'invalid' }"></i>invalid (<span data-bind="    text: invalidCount"></span>)
                </a>
                <a href="#/supervisor" class="btn btn-default btn-xs"
                   data-bind="css: { 'btn-primary': filter() == 'supervisor' }">
                    <i class="glyphicon glyphicon-pencil"
                       data-bind="    css: { 'icon-white': filter() == 'supervisor' }"></i>supervisor's
                    (<span data-bind="    text: editableCount"></span>)
                </a>
                <a href="#/enabled" class="btn btn-default btn-xs" data-bind="css: { 'btn-primary': filter() == 'enabled' }">
                    <i class="glyphicon glyphicon-pencil" data-bind="    css: { 'icon-white': filter() == 'enabled' }"></i>enabled (<span data-bind="    text: enabledCount"></span>)
                </a>
            </div>
        </div>
        <div class="row-fluid" data-bind="with: questionnaire">
            <h3 class="span10 text-overflow-ellipsis">
                <span>@Model.Title</span>
                <span class="small">Status:</span><a class="btn-link" data-toggle="modal" data-target="#statusHistoryModal">@Model.Status</a>
                <span class="small">Responsible:</span><span>@Model.Responsible.Name</span>
            </h3>
        </div>
        <div id="list">
            @foreach (var group in Model.Groups.Skip(1))
            {
                <div id="group-@group.Id">
                    <h2 class="heading">@group.Title</h2>
                    <div class="questions">
                        <table class="table table-bordered table-hover">
                            <tbody data-bind="foreach: entities">
                                @foreach (var entity in group.Entities)
                                {
                                    if (entity is InterviewStaticTextView)
                                    {
                                        @DrawStaticTextRow(entity as InterviewStaticTextView)
                                    }
                                    if (entity is InterviewQuestionView)
                                    {
                                        @DrawQuestionRow(entity as InterviewQuestionView)
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        </div>
    </div>
</div>
@helper DrawStaticTextRow(InterviewStaticTextView entity)
{
    <tr>
        <td colspan="3" class="static-text">
            <div class="cell-content">
                <span data-bind="html: staticText">@entity.Text</span>
            </div>
        </td>
    </tr>
}
@helper DrawQuestionRow(InterviewQuestionView entity)
{
    <tr class="@css("danger", !entity.IsValid && entity.IsEnabled) @css("mandatory", entity.IsMandatory) @css("text-muted", !entity.IsEnabled)">
        <td style="width: 60%" class="question-text">
            <div class="cell-content @css("featured", entity.IsFeatured)">
                <span class="icon-star"></span>
                <span>@entity.Title</span>
            </div>
        </td>
        <td class="question-answer">
            <div class="cell-content" data-bind="visible: isEnabled || isAnswered">
                <div class="question-clickable">
                    <span data-bind="css: markerStyle()" class="question-marker"></span>
                    <span>@entity.AnswerString</span>

                    @if (!entity.IsValid)
                    {
                        <small class="text-error">@entity.ValidationExpression</small>
                        <small class="text-error">@entity.ValidationMessage</small>
                    }
                </div>
            </div>
        </td>
        <td class="col-sm-3">
            <div class="actions pull-right">
                @if ((entity.Comments != null && entity.Comments.Count == 0) || entity.IsFlagged == false || entity.IsReadOnly == false)
                {
                    <div class="btn-group btn-group-xs">
                        <a class="btn btn-default dropdown-toggle" data-toggle="dropdown" href="#"><i class="icon-cog"></i><span class="caret"></span></a>
                        <ul class="dropdown-menu pull-right">
                            @if (!entity.IsReadOnly && entity.IsEnabled)
                            {
                                <li><a href="#">Answer</a></li>
                            }
                            <li><a href="#"><i class="glyphicon glyphicon-comment"></i>&nbsp;Comment</a></li>
                            @if (!entity.IsFlagged)
                            {
                                <li><a href="#"><i class="glyphicon glyphicon-flag"></i>&nbsp;Flag</a></li>
                            }
                        </ul>
                    </div>
                }
                @if (entity.Comments != null && entity.Comments.Count > 0)
                {
                    <a class="btn  btn-xs btn-success">
                        <span>@entity.Comments.Count</span><i class="glyphicon glyphicon-comment"></i>
                    </a>
                }
                @if (entity.IsFlagged)
                {
                    <a class="btn btn-xs btn-info">
                        <i class="glyphicon glyphicon-flag"></i>
                    </a>
                }
                @if (!entity.IsReadOnly && entity.IsEnabled)
                {
                    <a class="btn btn-xs btn-primary" href="#">answer</a>
                }
            </div>
        </td>
    </tr>
}

@helper css(string style, bool shouldBeAdded = true)
{
    @(shouldBeAdded ? style : string.Empty)
}