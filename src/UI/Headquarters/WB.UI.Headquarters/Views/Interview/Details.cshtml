@using System.Globalization
@using System.Web.Optimization
@using Main.Core.Entities.SubEntities
@using WB.Core.SharedKernels.DataCollection.ValueObjects.Interview
@using WB.Core.SharedKernels.SurveyManagement.Views.Interview
@using WB.Core.SharedKernels.SurveyManagement.Web.Code
@using WB.Core.SharedKernels.SurveyManagement.Web.Models
@using WB.Core.SharedKernels.SurveyManagement.Web.Utils.Membership
@model WB.Core.SharedKernels.SurveyManagement.Web.Models.DetailsViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section styles
{
    @Styles.Render("~/css/list")
    @Styles.Render("~/css/interview")
    @Styles.Render("~/Content/interview.css")
}

@section scripts
{
    @Scripts.Render("~/js/interview-general", "~/js/details")
    <script type="text/javascript">
        var urlReferrer = null;
        @if (Request.UrlReferrer != null && Request.UrlReferrer.OriginalString.Contains("Interviews") && Request.UrlReferrer.OriginalString.Contains("Survey"))
        {
            <text>urlReferrer = '@Html.Raw(Request.UrlReferrer)';</text>
        }

        var settings = new Supervisor.VM.InterviewDetailsSettings();
        settings.UserName = '@User.Identity.Name';
        settings.UrlReferrer = urlReferrer;

        settings.Interview.InterviewId = '@Model.FilteredInterviewDetails.PublicKey';
        @*settings.Interview.CurrentGroupId = '@Model.CurrentGroupId';
        settings.Interview.CurrentPropagationKeyId = '@Model.CurrentPropagationKeyId';*@

        settings.Urls.CommandExecution = '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "CommandApi", action = "Execute"})';
        settings.Urls.InterviewDetails = '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "InterviewApi", action = "InterviewDetails"})';
        settings.Urls.Interviews = '@(GlobalInfo.IsSupervisor ? Url.Action("Interviews", "Survey") : Url.Action("Interviews", "HQ", new {area = ""}))';
        settings.Urls.ChangeStateHistory = '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "InterviewApi", action = "ChangeStateHistory"})';

        settings.Urls.InterviewFile = '@Url.RouteUrl("Default", new {httproute = "", controller = "Resource", action = "InterviewFile"})';

        $(function() {
            window.model = new Supervisor.VM.Details(settings);
            ko.applyBindings(model);
            model.load();
        });
    </script>
}

    <div>
        <div id="menu" class="col-sm-3 col-md-2 sidebar">
            <div class="panel panel-default">
                <div class="panel-heading with-btn">
                    Groups
                    <div class="btn-group btn-group-sm pull-right">
                        <button data-bind="click: ToggleFilter" class="btn btn-default"><span class="glyphicon glyphicon-arrow-left"></span> Hide groups</button>
                    </div>
                </div>
                <ul id="groups-menu" class="list-group">
                    @foreach (var group in Model.Groups)
                    {
                        <li class="list-group-item @SetGroupLevelClass(group.Depth)">
                            <a href="@Url.Action("Details", "Interview", new {id = Model.FilteredInterviewDetails.PublicKey, filter = InterviewDetailsFilter.All, currentGroupId = group.Id})">@group.Title</a>
                        </li>
                    }
                </ul>
            </div>

        </div>
        <div id="content" class="col-sm-6 col-sm-offset-3 col-md-8 col-md-offset-2 main">
            <div class="row-fluid" data-bind="with: questionnaire">
                <h3 class="span10 text-overflow-ellipsis">
                    <span>@Model.FilteredInterviewDetails.Title</span>
                    <span class="small">Status:</span><a class="btn-link" data-toggle="modal" data-target="#statusHistoryModal">@Model.FilteredInterviewDetails.Status.ToLocalizeString()</a>
                    <span class="small">Responsible:</span><span>@Model.FilteredInterviewDetails.Responsible.Name</span>
                </h3>
            </div>
            <div class="panel panel-default">
                <div class="panel-body">
                    <span data-bind="visible: !IsFilterOpen()"><button data-bind="click: ToggleFilter" class="btn btn-default  btn-xs"><span class="glyphicon glyphicon-arrow-right"></span> Show groups</button></span>
                    @if (((Model.FilteredInterviewDetails.Status == InterviewStatus.Completed || Model.FilteredInterviewDetails.Status == InterviewStatus.RejectedByHeadquarters) && GlobalInfo.IsSupervisor)
                         || (Model.FilteredInterviewDetails.Status == InterviewStatus.ApprovedBySupervisor && GlobalInfo.IsHeadquarter))
                    {
                        <button class="btn btn-success " data-bind="click: showApproveModal">Approve</button>
                        <button class="btn btn-danger" data-bind="click: showRejectModal">Reject</button>
                    }
                    <a href="@Url.Action("Details", "Interview", new {id = Model.FilteredInterviewDetails.PublicKey, filter = InterviewDetailsFilter.All})" class="btn btn-default btn-xs @SetFilterActiveClass(InterviewDetailsFilter.All)">all</a>
                    <a href="@Url.Action("Details", "Interview", new {id = Model.FilteredInterviewDetails.PublicKey, filter = InterviewDetailsFilter.Flagged})" class="btn btn-default  btn-xs @SetFilterActiveClass(InterviewDetailsFilter.Flagged)"><i class="glyphicon glyphicon-flag @SetFilterIconActiveClass(InterviewDetailsFilter.Flagged)"></i> flagged (<span>@Model.Statistic.FlaggedCount</span>)</a>
                    <a href="@Url.Action("Details", "Interview", new {id = Model.FilteredInterviewDetails.PublicKey, filter = InterviewDetailsFilter.Commented})" class="btn btn-default  btn-xs @SetFilterActiveClass(InterviewDetailsFilter.Commented)"><i class="glyphicon glyphicon-comment @SetFilterIconActiveClass(InterviewDetailsFilter.Commented)"></i> commented (<span>@Model.Statistic.CommentedCount</span>)</a>
                    <a href="@Url.Action("Details", "Interview", new {id = Model.FilteredInterviewDetails.PublicKey, filter = InterviewDetailsFilter.Answered})" class="btn btn-default  btn-xs @SetFilterActiveClass(InterviewDetailsFilter.Answered)"><i class="glyphicon glyphicon-ok @SetFilterIconActiveClass(InterviewDetailsFilter.Answered)"></i> answered (<span>@Model.Statistic.AnsweredCount</span>)</a>
                    <a href="@Url.Action("Details", "Interview", new {id = Model.FilteredInterviewDetails.PublicKey, filter = InterviewDetailsFilter.Invalid})" class="btn btn-default  btn-xs @SetFilterActiveClass(InterviewDetailsFilter.Invalid)"><i class="glyphicon glyphicon-warning-sign @SetFilterIconActiveClass(InterviewDetailsFilter.Invalid)"></i> invalid (<span>@Model.Statistic.InvalidCount</span>)</a>
                    <a href="@Url.Action("Details", "Interview", new {id = Model.FilteredInterviewDetails.PublicKey, filter = InterviewDetailsFilter.Supervisors})" class="btn btn-default  btn-xs @SetFilterActiveClass(InterviewDetailsFilter.Supervisors)"><i class="glyphicon glyphicon-pencil @SetFilterIconActiveClass(InterviewDetailsFilter.Supervisors)"></i> supervisor's (<span>@Model.Statistic.SupervisorsCount</span>)</a>
                    <a href="@Url.Action("Details", "Interview", new {id = Model.FilteredInterviewDetails.PublicKey, filter = InterviewDetailsFilter.Enabled})" class="btn btn-default  btn-xs @SetFilterActiveClass(InterviewDetailsFilter.Enabled)"><i class="glyphicon glyphicon-pencil @SetFilterIconActiveClass(InterviewDetailsFilter.Enabled)"></i> enabled (<span>@Model.Statistic.EnabledCount</span>)</a>
                </div>
            </div>
            <div id="list">
                @foreach (var group in Model.FilteredInterviewDetails.Groups)
                {
                    <div id="group-@group.Id" class="group-item-content">
                        <h2 class="heading">@group.Title</h2>
                        <div class="questions">
                            <table class="table table-bordered table-hover">
                                <tbody data-bind="foreach: entities">
                                    @foreach (var entity in group.Entities)
                                    {
                                        if (entity is InterviewStaticTextView)
                                        {
                                            @DrawStaticTextRow(entity as InterviewStaticTextView)
                                        }
                                        if (entity is InterviewQuestionView)
                                        {
                                            @DrawQuestionRow(entity as InterviewQuestionView)
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="modal fade" id="statusHistoryModal" tabindex="-1" role="dialog" aria-labelledby="statusHistoryModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title" id="statusHistoryModalLabel">Interview change status history</h4>
                </div>
                <div class="modal-body">
                    <table class="table table-bordered table-striped">
                        <thead>
                            <tr>
                                <th style="width: 125px">State</th>
                                <th>with comment</th>
                                <th style="width: 90px">on</th>
                                <th>by</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var historyItem in Model.History.StatusHistory)
                            {
                                <tr>
                                    <td>@historyItem.Status.ToLocalizeString()</td>
                                    <td>@historyItem.Comment</td>
                                    <td>@historyItem.Date.ToShortDateString()</td>
                                    <td>@historyItem.Responsible</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    @if (((Model.FilteredInterviewDetails.Status == InterviewStatus.Completed || Model.FilteredInterviewDetails.Status == InterviewStatus.RejectedByHeadquarters) && GlobalInfo.IsSupervisor)
         || (Model.FilteredInterviewDetails.Status == InterviewStatus.ApprovedBySupervisor && GlobalInfo.IsHeadquarter))
    {
        <div class="modal fade" id="approveModal" tabindex="-1" role="dialog" aria-labelledby="approveModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                        <h4 class="modal-title" id="approveModalLabel">Approve interview</h4>
                    </div>
                    <div class="modal-body">
                        <label>Comment:</label>
                        <textarea data-bind="value: changeStateComment" class="form-control" rows="10"></textarea>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        <button class="btn btn-success" data-bind="click: @(GlobalInfo.IsSupervisor ? "approveInterview" : "hQApproveInterview")">Approve</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="rejectModal" tabindex="-1" role="dialog" aria-labelledby="rejectModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                        <h4 class="modal-title" id="rejectModalLabel">Reject interview</h4>
                    </div>
                    <div class="modal-body">
                        <label>Comment:</label>
                        <textarea data-bind="value: changeStateComment" class="form-control" rows="10"></textarea>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        <button class="btn btn-danger" data-bind="click: @(GlobalInfo.IsSupervisor ? "rejectInterview" : "hQRejectInterview")">Reject</button>
                    </div>
                </div>
            </div>
        </div>
    }
    
    @helper SetGroupLevelClass(int level)
    {
        <text>level</text>@level

    }

    @helper SetFilterActiveClass(InterviewDetailsFilter filter)
    {
        if (filter == Model.Filter)
        {
            <text>btn-primary</text>
        }
    }

    @helper SetFilterIconActiveClass(InterviewDetailsFilter filter)
    {
        if (filter == Model.Filter)
        {
            <text>icon-white</text>
        }
    }

    @helper DrawStaticTextRow(InterviewStaticTextView entity)
    {
        <tr>
            <td colspan="3" class="static-text">
                <div class="cell-content">
                    <span data-bind="html: staticText">@entity.Text</span>
                </div>
            </td>
        </tr>
    }
    @helper DrawQuestionRow(InterviewQuestionView entity)
    {
        <tr class="@css("danger", !entity.IsValid && entity.IsEnabled) @css("mandatory", entity.IsMandatory) @css("text-muted", !entity.IsEnabled)">
            <td style="width: 50%" class="question-text">
                <div class="cell-content @css("featured", entity.IsFeatured)">
                    <span class="icon-star"></span>
                    <span>@entity.Title</span>
                </div>
            </td>
            <td class="question-answer">
                <div class="cell-content" >
                    <div class="question-clickable">
                        @switch (entity.QuestionType)
                        {
                            case QuestionType.SingleOption:
                                var singleOptinSetting = entity.Settings as SingleQuestionSettings;
                                if (singleOptinSetting.IsCascade || singleOptinSetting.IsFilteredCombobox)
                                {
                                    <input class="form-control" type="text" value="@entity.Answer" readonly="readonly" />
                                }
                                else if (singleOptinSetting.IsLinked)
                                {
                                    <div class="form-group">
                                        <div class="controls">
                                            @foreach (var option in entity.Options)
                                            {
                                                var radioName = string.Format("option-{0}-{1}", entity.Id, Stringify(entity.RosterVector));
                                                <label class="radio">
                                                    @Html.RadioButton(radioName, Stringify((decimal[]) option.Value), ((decimal[]) entity.Answer).SequenceEqual((decimal[]) option.Value), new {@disabled = "disabled"})
                                                    <span>@option.Label</span>
                                                </label>
                                            }
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="form-group">
                                        <div class="controls">
                                            @foreach (var option in entity.Options)
                                            {
                                                var radioName = string.Format("option-{0}-{1}", entity.Id, Stringify(entity.RosterVector));
                                                <label class="radio">
                                                    @Html.RadioButton(radioName, Convert.ToDecimal(option.Value), Convert.ToDecimal(entity.Answer) == Convert.ToDecimal(option.Value), new {@disabled = "disabled"})
                                                    <span>@option.Label</span>
                                                </label>
                                            }
                                        </div>
                                    </div>
                                }
                                break;
                            case QuestionType.MultyOption:
                                var multiQuestionSettings = entity.Settings as MultiQuestionSettings;
                                if (multiQuestionSettings.IsLinked)
                                {
                                    <div class="form-group">
                                        <div class="controls">
                                            @foreach (var option in entity.Options)
                                            {
                                                var radioName = string.Format("option-{0}-{1}", entity.Id, Stringify(entity.RosterVector));
                                                <label class="radio">
                                                    @Html.RadioButton(radioName, Stringify((decimal[]) option.Value), ((decimal[]) entity.Answer).SequenceEqual((decimal[]) option.Value), new {@disabled = "disabled"})
                                                    <span>@option.Label</span>
                                                </label>
                                            }
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="form-group">
                                        <div class="controls">
                                            @foreach (var option in entity.Options)
                                            {
                                                var radioName = string.Format("option-{0}-{1}", entity.Id, Stringify(entity.RosterVector));
                                                <label class="radio">
                                                    @Html.RadioButton(radioName, Convert.ToDecimal(option.Value), Convert.ToDecimal(entity.Answer) == Convert.ToDecimal(option.Value), new {@disabled = "disabled"})
                                                    <span>@option.Label</span>
                                                </label>
                                            }
                                        </div>
                                    </div>
                                }
                                break;
                            case QuestionType.Numeric:
                                <input class="form-control" type="number" value="@entity.Answer" readonly="readonly" />
                                break;
                            case QuestionType.DateTime:
                                break;
                            case QuestionType.GpsCoordinates:
                                break;
                            case QuestionType.Text:
                                <input class="form-control" type="text" value="@entity.Answer" readonly="readonly" />
                                break;
                            case QuestionType.TextList:
                                break;
                            case QuestionType.QRBarcode:
                                <input class="form-control" type="text" value="@entity.Answer" readonly="readonly" />
                                break;
                            case QuestionType.Multimedia:
                                <img src="@Url.RouteUrl("Default", new {httproute = "", controller = "Resource", action = "InterviewFile", interviewid = Model.FilteredInterviewDetails.PublicKey, filename = entity.Answer})" />
                                break;
                        }
                        @if (!entity.IsValid)
                        {
                            <small class="text-error">@entity.ValidationExpression</small>
                            <small class="text-error">@entity.ValidationMessage</small>
                        }
                    </div>
                </div>
            </td>
            <td class="col-sm-3">
                <div class="actions pull-right">
                    @if ((entity.Comments != null && entity.Comments.Count == 0) || entity.IsFlagged == false || entity.IsReadOnly == false)
                    {
                        <div class="btn-group btn-group-xs">
                            <a class="btn btn-default dropdown-toggle" data-toggle="dropdown" href="#"><i class="icon-cog"></i><span class="caret"></span></a>
                            <ul class="dropdown-menu pull-right">
                                @if (!entity.IsReadOnly && entity.IsEnabled)
                                {
                                    <li><a href="#">Answer</a></li>
                                }
                                <li><a href="#"><i class="glyphicon glyphicon-comment"></i>&nbsp;Comment</a></li>
                                @if (!entity.IsFlagged)
                                {
                                    <li><a href="#"><i class="glyphicon glyphicon-flag"></i>&nbsp;Flag</a></li>
                                }
                            </ul>
                        </div>
                    }
                    @if (entity.Comments != null && entity.Comments.Count > 0)
                    {
                        <a class="btn  btn-xs btn-success">
                            <span>@entity.Comments.Count</span>&nbsp;<i class="glyphicon glyphicon-comment"></i>
                        </a>
                    }
                    @if (entity.IsFlagged)
                    {
                        <a class="btn btn-xs btn-info">
                            <i class="glyphicon glyphicon-flag"></i>
                        </a>
                    }
                    @if (!entity.IsReadOnly && entity.IsEnabled)
                    {
                        <a class="btn btn-xs btn-primary" href="#">answer</a>
                    }
                </div>
            </td>
        </tr>
    }

    @helper css(string style, bool shouldBeAdded = true)
    {
        @(shouldBeAdded ? style : string.Empty)
    }
    @functions
    {

        public string Stringify(decimal[] array)
        {
            return string.Join("_", array.Select(x => x.ToString(CultureInfo.InvariantCulture)));
        }

    }