@using System.Globalization
@using System.Web.Optimization
@using Humanizer
@using Main.Core.Entities.SubEntities
@using WB.Core.SharedKernels.DataCollection.Utils
@using WB.Core.SharedKernels.DataCollection.ValueObjects.Interview
@using WB.Core.SharedKernels.SurveyManagement.Views.Interview
@using WB.Core.SharedKernels.SurveyManagement.Web.Code
@using WB.Core.SharedKernels.SurveyManagement.Web.Models
@using WB.Core.SharedKernels.SurveyManagement.Web.Utils.Membership
@model WB.Core.SharedKernels.SurveyManagement.Web.Models.DetailsViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section styles
{
    @Styles.Render("~/css/list")
    @Styles.Render("~/css/interview")
    @Styles.Render("~/Content/interview.css")
}

@section scripts
{
    @Scripts.Render("~/js/interview-general", "~/js/details")
    <script type="text/javascript">
        var urlReferrer = null;
        @if (Request.UrlReferrer != null && Request.UrlReferrer.OriginalString.Contains("Interviews") && Request.UrlReferrer.OriginalString.Contains("Survey"))
        {
            <text>urlReferrer = '@Html.Raw(Request.UrlReferrer)';</text>
        }

        var settings = new Supervisor.VM.InterviewDetailsSettings();
        settings.UserName = '@User.Identity.Name';
        settings.UrlReferrer = urlReferrer;

        settings.Interview.InterviewId = '@Model.InterviewDetails.PublicKey';
        settings.Urls.CommandExecution = '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "CommandApi", action = "Execute"})';

        var filter = { filteredBy: '@Model.Filter' };

        var filteredComboboxes = [@(Html.Raw( string.Join(",", Model.InterviewDetails.Groups.SelectMany(_ => _.Entities).OfType<InterviewQuestionView>().Where(IsFilteredCombobox).Select(_ => string.Format("{{id:'{0}', options:[{1}]}}", getInterviewItemIdWithPostfix(_.Id, _.RosterVector),string.Join(",", _.Options.Select(x=>string.Format("{{value:'{0}', label:'{1}'}}", x.Value, x.Label))))))))];

        $(function () {
            window.model = new Supervisor.VM.Details(settings, filter, filteredComboboxes);
            ko.applyBindings(model);
            model.load();
        });
    </script>
}

<div>
    <div id="menu" class="col-md-3 sidebar">
        <div class="panel panel-default">
            <div class="panel-heading with-btn">
                Groups
                <div class="btn-group btn-group-sm pull-right">
                    <button data-bind="click: ToggleFilter" class="btn btn-default"><span class="glyphicon glyphicon-arrow-left"></span> Hide groups</button>
                </div>
            </div>
            <ul id="groups-menu" class="list-group">
                @foreach (var group in Model.InterviewDetails.Groups)
                {
                    <li class="list-group-item @SetGroupLevelClass(group.Depth)">
                        <a href="@Url.Action("Details", "Interview", new {id = Model.InterviewDetails.PublicKey, filter = InterviewDetailsFilter.All, currentGroupId = group.Id})">@group.Title</a>
                    </li>
                }
            </ul>
        </div>

    </div>
    <div id="content" class="col-md-9 col-md-offset-3 main">
        <div class="row-fluid">
            <h3 class="span10 text-overflow-ellipsis">
                <span>@Model.InterviewDetails.Title</span>
                <span class="small">Status:</span><a class="btn-link" data-toggle="modal" data-target="#statusHistoryModal">@Model.InterviewDetails.Status.ToLocalizeString()</a>
                <span class="small">Responsible:</span><span>@Model.InterviewDetails.Responsible.Name</span>
            </h3>
        </div>
        <div class="panel panel-default">
            <div class="panel-body">
                <span><button data-bind="visible: !IsFilterOpen(), click: ToggleFilter" class="btn btn-default  btn-xs"><span class="glyphicon glyphicon-arrow-right"></span> Show groups</button></span>
                @if (((Model.InterviewDetails.Status == InterviewStatus.Completed || Model.InterviewDetails.Status == InterviewStatus.RejectedByHeadquarters) && GlobalInfo.IsSupervisor)
                         || (Model.InterviewDetails.Status == InterviewStatus.ApprovedBySupervisor && GlobalInfo.IsHeadquarter))
                {
                    <button class="btn btn-success " data-bind="click: showApproveModal">Approve</button>
                    <button class="btn btn-danger" data-bind="click: showRejectModal">Reject</button>
                }
                <a href="@Url.Action("Details", "Interview", new {id = Model.InterviewDetails.PublicKey, filter = InterviewDetailsFilter.All})" class="btn btn-default btn-xs @SetFilterActiveClass(InterviewDetailsFilter.All)">all</a>
                <a href="@Url.Action("Details", "Interview", new {id = Model.InterviewDetails.PublicKey, filter = InterviewDetailsFilter.Enabled})" class="btn btn-default  btn-xs @SetFilterActiveClass(InterviewDetailsFilter.Enabled)"><i class="glyphicon glyphicon-pencil @SetFilterIconActiveClass(InterviewDetailsFilter.Enabled)"></i> enabled (<span>@Model.Statistic.EnabledCount</span>)</a>
                <a href="@Url.Action("Details", "Interview", new {id = Model.InterviewDetails.PublicKey, filter = InterviewDetailsFilter.Answered})" class="btn btn-default  btn-xs @SetFilterActiveClass(InterviewDetailsFilter.Answered)"><i class="glyphicon glyphicon-ok @SetFilterIconActiveClass(InterviewDetailsFilter.Answered)"></i> answered (<span>@Model.Statistic.AnsweredCount</span>)</a>
                <a href="@Url.Action("Details", "Interview", new {id = Model.InterviewDetails.PublicKey, filter = InterviewDetailsFilter.Unanswered})" class="btn btn-default  btn-xs @SetFilterActiveClass(InterviewDetailsFilter.Unanswered)"><i class="glyphicon glyphicon-ok @SetFilterIconActiveClass(InterviewDetailsFilter.Unanswered)"></i> unanswered (<span>@Model.Statistic.UnansweredCount</span>)</a>
                <a href="@Url.Action("Details", "Interview", new {id = Model.InterviewDetails.PublicKey, filter = InterviewDetailsFilter.Invalid})" class="btn btn-default  btn-xs @SetFilterActiveClass(InterviewDetailsFilter.Invalid)"><i class="glyphicon glyphicon-warning-sign @SetFilterIconActiveClass(InterviewDetailsFilter.Invalid)"></i> invalid (<span>@Model.Statistic.InvalidCount</span>)</a>
                <a href="@Url.Action("Details", "Interview", new {id = Model.InterviewDetails.PublicKey, filter = InterviewDetailsFilter.Commented})" class="btn btn-default  btn-xs @SetFilterActiveClass(InterviewDetailsFilter.Commented)"><i class="glyphicon glyphicon-comment @SetFilterIconActiveClass(InterviewDetailsFilter.Commented)"></i> commented (<span id="commentsCounter">@Model.Statistic.CommentedCount</span>)</a>
                <a href="@Url.Action("Details", "Interview", new {id = Model.InterviewDetails.PublicKey, filter = InterviewDetailsFilter.Flagged})" class="btn btn-default  btn-xs @SetFilterActiveClass(InterviewDetailsFilter.Flagged)"><i class="glyphicon glyphicon-flag @SetFilterIconActiveClass(InterviewDetailsFilter.Flagged)"></i> flagged (<span id="flagsCounter">@Model.Statistic.FlaggedCount</span>)</a>
                <a href="@Url.Action("Details", "Interview", new {id = Model.InterviewDetails.PublicKey, filter = InterviewDetailsFilter.Supervisors})" class="btn btn-default  btn-xs @SetFilterActiveClass(InterviewDetailsFilter.Supervisors)"><i class="glyphicon glyphicon-pencil @SetFilterIconActiveClass(InterviewDetailsFilter.Supervisors)"></i> supervisor's (<span>@Model.Statistic.SupervisorsCount</span>)</a>

            </div>
        </div>
        <div id="list">
            @foreach (var group in Model.FilteredGroups)
            {
                <div id="group-@group.Id" class="group-item-content">
                    <h2 class="heading">@group.Title</h2>
                    <div class="questions">
                        <table class="table table-bordered table-hover">
                            <tbody>
                                @foreach (var entity in group.Entities)
                                {
                                    if (entity is InterviewStaticTextView)
                                    {
                                        @DrawStaticTextRow(entity as InterviewStaticTextView)
                                    }
                                    if (entity is InterviewQuestionView)
                                    {
                                        @DrawQuestionRow(entity as InterviewQuestionView)
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        </div>
    </div>
</div>
<div class="modal fade" id="statusHistoryModal" tabindex="-1" role="dialog" aria-labelledby="statusHistoryModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title" id="statusHistoryModalLabel">Interview change status history</h4>
            </div>
            <div class="modal-body">
                <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th style="width: 125px">State</th>
                            <th>with comment</th>
                            <th style="width: 90px">on</th>
                            <th>by</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var historyItem in Model.History.StatusHistory)
                        {
                            <tr>
                                <td>@historyItem.Status.ToLocalizeString()</td>
                                <td>@historyItem.Comment</td>
                                <td>@historyItem.Date.ToShortDateString()</td>
                                <td>@historyItem.Responsible</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
@if (((Model.InterviewDetails.Status == InterviewStatus.Completed || Model.InterviewDetails.Status == InterviewStatus.RejectedByHeadquarters) && GlobalInfo.IsSupervisor)
         || (Model.InterviewDetails.Status == InterviewStatus.ApprovedBySupervisor && GlobalInfo.IsHeadquarter))
{
    <div class="modal fade" id="approveModal" tabindex="-1" role="dialog" aria-labelledby="approveModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title" id="approveModalLabel">Approve interview</h4>
                </div>
                <div class="modal-body">
                    <label>Comment:</label>
                    <textarea data-bind="value: changeStateComment" class="form-control" rows="10"></textarea>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button class="btn btn-success" data-bind="click: @(GlobalInfo.IsSupervisor ? "approveInterview" : "hQApproveInterview")">Approve</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="rejectModal" tabindex="-1" role="dialog" aria-labelledby="rejectModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title" id="rejectModalLabel">Reject interview</h4>
                </div>
                <div class="modal-body">
                    <label>Comment:</label>
                    <textarea data-bind="value: changeStateComment" class="form-control" rows="10"></textarea>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button class="btn btn-danger" data-bind="click: @(GlobalInfo.IsSupervisor ? "rejectInterview" : "hQRejectInterview")">Reject</button>
                </div>
            </div>
        </div>
    </div>
}

@helper SetGroupLevelClass(int level)
{
    <text>level</text>@level

}

@helper SetFilterActiveClass(InterviewDetailsFilter filter)
{
    if (filter == Model.Filter)
    {
        <text>btn-primary</text>
    }
}

@helper SetFilterIconActiveClass(InterviewDetailsFilter filter)
{
    if (filter == Model.Filter)
    {
        <text>icon-white</text>
    }
}

@helper DrawStaticTextRow(InterviewStaticTextView entity)
{
    <tr>
        <td colspan="4" class="static-text">
            <div class="cell-content">
                <span data-bind="html: staticText">@entity.Text</span>
            </div>
        </td>
    </tr>
}
@helper DrawQuestionRow(InterviewQuestionView entity)
{
    <tr id="@getInterviewItemIdWithPostfix(entity.Id, entity.RosterVector, "answerRow")"  class="@css("danger", !entity.IsValid && entity.IsEnabled) @css("mandatory", entity.IsMandatory) @css("text-muted", !entity.IsEnabled)">
        <td class="answer-status">
            <div class="btn btn-xs @css("btn-info", entity.IsFlagged) @css("btn-default", !entity.IsFlagged)" data-bind="click: flagAnswer.bind($data, $element, '@entity.Id', '@Stringify(entity.RosterVector)')">
                <i class="glyphicon glyphicon-flag"></i>
            </div>
        </td>
        <td style="width: 50%">
            <div class="@css("featured", entity.IsFeatured)">
                <span class="icon-star"></span>
                <span>@entity.Title</span>
            </div>
        </td>
        <td class="question-answer">
            @if (!entity.IsReadOnly && entity.Scope == QuestionScope.Supervisor && GlobalInfo.IsSupervisor)
            {
                switch (entity.QuestionType)
                {
                    case QuestionType.Text:
                        var textQuestionSettings = entity.Settings as TextQuestionSettings;
                        <div class="input-group">
                            <input id="@getInterviewItemIdWithPostfix(entity.Id, entity.RosterVector)" class="form-control mask" type="text" value="@entity.Answer" mask="@(textQuestionSettings.Mask)" />
                            <span class="input-group-btn">
                                <button class="btn btn-success" type="button" data-bind="click: saveTextAnswer.bind($data, '@entity.Id', '@Stringify(entity.RosterVector)')">Save</button>
                            </span>
                        </div>
                        break;
                    case QuestionType.Numeric:
                        var numericQuestionSetting = entity.Settings as NumericQuestionSettings;
                        <div class="input-group">
                            <input id="@getInterviewItemIdWithPostfix(entity.Id, entity.RosterVector)" class="form-control numeric" type="text" value="@entity.Answer" />
                            <span class="input-group-btn">
                                @if (numericQuestionSetting.IsInteger)
                                {
                                    <button class="btn btn-success" type="button" data-bind="click: saveNumericIntegerAnswer.bind($data, '@entity.Id', '@Stringify(entity.RosterVector)')">Save</button>
                                }
                                else
                                {
                                    <button class="btn btn-success" type="button" data-bind="click: saveNumericRealAnswer.bind($data, '@entity.Id', '@Stringify(entity.RosterVector)', @(numericQuestionSetting.CountOfDecimalPlaces ?? 0))">Save</button>
                                }
                            </span>
                        </div>
                                break;
                    case QuestionType.SingleOption:
                                var singleOptionSettings = entity.Settings as SingleQuestionSettings;
                                if (singleOptionSettings.IsFilteredCombobox)
                                {
                                    <div class="input-group">
                                        <input id="@getInterviewItemIdWithPostfix(entity.Id, entity.RosterVector)" class="form-control" type="text" value="@entity.Answer" />
                                        <span class="input-group-btn">
                                            <button class="btn btn-success filtered-combobox-button" type="button" data-bind="click: saveFilteredComboboxAnswer.bind($data, '@entity.Id', '@Stringify(entity.RosterVector)')">Save</button>
                                        </span>
                                    </div>
                                }
                                else
                                {
                                    foreach (var option in entity.Options)
                                    {
                                        var optionValue = option.Value.ToString();
                                        var isChecked = entity.Answer != null && Convert.ToDecimal(entity.Answer) == Convert.ToDecimal(option.Value);

                                <label class="radio" for="@getInterviewItemIdWithPostfix(entity.Id, entity.RosterVector, string.Format("option{0}", optionValue))">
                                    <input type="radio" name="@getInterviewItemIdWithPostfix(entity.Id, entity.RosterVector)" id="@getInterviewItemIdWithPostfix(entity.Id, entity.RosterVector, string.Format("option{0}", optionValue))" value="@optionValue" @(isChecked ? "checked" : "")
                                           data-bind="click: saveCategoricalOneAnswer.bind($data, '@entity.Id', '@Stringify(entity.RosterVector)')">
                                    <span>@option.Label</span>
                                </label>
                            }
                        }
                        break;
                    case QuestionType.MultyOption:
                                var multiQuestionSettings = entity.Settings as MultiQuestionSettings;
                                var answers = (decimal[])entity.Answer;
                                var selectedOptions = answers == null ? "" : string.Join(",", answers);
                                foreach (var option in entity.Options)
                                {
                                    var optionValue = option.Value.ToString();
                                    var isChecked = answers != null && (answers).Contains(Convert.ToDecimal(option.Value));

                                    <label class="checkbox" for="@getInterviewItemIdWithPostfix(entity.Id, entity.RosterVector, string.Format("option{0}", optionValue))">
                                        <input type="checkbox" name="@getInterviewItemIdWithPostfix(entity.Id, entity.RosterVector)" id="@getInterviewItemIdWithPostfix(entity.Id, entity.RosterVector, string.Format("option{0}", optionValue))" value="@optionValue" @(isChecked ? "checked" : "")
                                               data-bind="click: saveCategoricalMultiAnswer.bind($data, '@entity.Id', '@Stringify(entity.RosterVector)', @(multiQuestionSettings.AreAnswersOrdered.ToString().ToLower()), @(multiQuestionSettings.MaxAllowedAnswers ?? 0), '@selectedOptions')">

                                        <span>@option.Label</span>
                                        @if (multiQuestionSettings.AreAnswersOrdered && isChecked)
                                        {
                                            <span class="badge">@(answers.Select((item, index) => new { index, item }).First(_ => _.item == (decimal)option.Value).index + 1)</span>
                                        }
                                    </label>
                                }
                                break;
                }
            }
            else
            {
                switch (entity.QuestionType)
                {
                    case QuestionType.SingleOption:
                        var singleOptionSetting = entity.Settings as SingleQuestionSettings;
                        if (singleOptionSetting.IsCascade || singleOptionSetting.IsFilteredCombobox)
                        {
                            @entity.Answer
                        }
                        else
                        {
                            foreach (var option in entity.Options)
                            {
                                string optionValue;
                                bool isChecked;
                                if (singleOptionSetting.IsLinked)
                                {
                                    optionValue = Stringify((decimal[])option.Value);
                                    isChecked = entity.Answer != null && ((decimal[])entity.Answer).SequenceEqual((decimal[])option.Value);
                                }
                                else
                                {
                                    optionValue = option.Value.ToString();
                                    isChecked = entity.Answer != null && Convert.ToDecimal(entity.Answer) == Convert.ToDecimal(option.Value);
                                }

                                <label class="radio" for="@getInterviewItemIdWithPostfix(entity.Id, entity.RosterVector, string.Format("option{0}", optionValue))">
                                    <input type="radio" name="@getInterviewItemIdWithPostfix(entity.Id, entity.RosterVector)" id="@getInterviewItemIdWithPostfix(entity.Id, entity.RosterVector, string.Format("option{0}", optionValue))" @(isChecked ? "checked" : "") disabled="disabled">
                                    <span>@option.Label</span>
                                </label>
                            }
                        }

                        break;
                    case QuestionType.MultyOption:
                        var multiQuestionSettings = entity.Settings as MultiQuestionSettings;
                        var answers = (decimal[])entity.Answer;
                        foreach (var option in entity.Options)
                        {
                            string optionValue;
                            bool isChecked;
                            if (multiQuestionSettings.IsLinked)
                            {
                                optionValue = Stringify((decimal[])option.Value);
                                isChecked = entity.Answer != null && ((decimal[][])entity.Answer).Contains((decimal[])option.Value);
                            }
                            else
                            {
                                optionValue = option.Value.ToString();
                                isChecked = entity.Answer != null && ((decimal[])entity.Answer).Contains(Convert.ToDecimal(option.Value));
                            }

                            <label class="checkbox" for="@getInterviewItemIdWithPostfix(entity.Id, entity.RosterVector, string.Format("option{0}", optionValue))">
                                <input type="checkbox" name="@getInterviewItemIdWithPostfix(entity.Id, entity.RosterVector)" id="@getInterviewItemIdWithPostfix(entity.Id, entity.RosterVector, string.Format("option{0}", optionValue))" @(isChecked ? "checked" : "") disabled="disabled">

                                <span>@option.Label</span>
                                @if (multiQuestionSettings.AreAnswersOrdered && isChecked)
                                {
                                    <span class="badge">@(answers.Select((item, index) => new { index, item }).First(_ => _.item == (decimal)option.Value).index + 1)</span>
                                }
                            </label>
                        }
                        break;
                    case QuestionType.Numeric:
                    case QuestionType.DateTime:
                    case QuestionType.Text:
                    case QuestionType.QRBarcode:
                    case QuestionType.TextList:
                    case QuestionType.GpsCoordinates:
                    @entity.AnswerString
                        break;
                    case QuestionType.Multimedia:
                    <img src="@Url.RouteUrl("Default", new {httproute = "", controller = "Resource", action = "InterviewFile", interviewid = Model.InterviewDetails.PublicKey, filename = entity.Answer})" />
                        break;
                }
            }


            @if (!entity.IsValid)
            {
                <small class="text-error">@entity.ValidationExpression</small>
                <small class="text-error">@entity.ValidationMessage</small>
            }
        </td>

        <td class="comments col-sm-3">
            <dl id="@getInterviewItemIdWithPostfix(entity.Id, entity.RosterVector, "commentList")" class="@css("hidden", entity.Comments == null || entity.Comments.Count == 0)">
                @if (entity.Comments != null && entity.Comments.Count > 0)
                {
                    foreach (var comment in entity.Comments)
                    {
                        <dt>@comment.CommenterName <span class="text-normal">@comment.Text</span></dt>
                        <dd>
                            <small class="comment-date" date="@comment.Date.ToLocalTime()"></small>
                        </dd>
                    }
                }
            </dl>

            <div class="form-horizontal">
                <div class="has-feedback">
                    <div>
                        <input type="text" class="form-control" placeholder="Write a comment..." data-bind="enterKey: addComment.bind($data, $element, '@entity.Id', '@Stringify(entity.RosterVector)')">
                        <span class="glyphicon glyphicon-comment form-control-feedback" aria-hidden="true"></span>
                    </div>
                </div>
            </div>
        </td>
    </tr>
}

@helper css(string style, bool shouldBeAdded = true)
{
    @(shouldBeAdded ? style : string.Empty)
}
@functions
    {

    public string getInterviewItemIdWithPostfix(Guid questionId, decimal[] rosterVector, string postfix = "")
    {
        return string.Format("{0}_{1}_{2}", questionId, Stringify(rosterVector), postfix);
    }

    public string Stringify(decimal[] array)
    {
        return string.Join("_", array.Select(x => x.ToString(CultureInfo.InvariantCulture).Replace('.', '-')));
    }

    private static bool IsFilteredCombobox(InterviewQuestionView entityView)
    {
        if (entityView.QuestionType == QuestionType.SingleOption)
        {
            var interviewQuestionViewSettings = entityView.Settings as SingleQuestionSettings;

            return interviewQuestionViewSettings != null && interviewQuestionViewSettings.IsFilteredCombobox;
        }
        return false;
    }

}