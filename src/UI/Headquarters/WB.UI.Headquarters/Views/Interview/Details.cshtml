@using System.Globalization
@using System.Web.Mvc.Html
@using System.Web.Optimization
@using Main.Core.Entities.SubEntities
@using WB.Core.SharedKernels.DataCollection.Utils
@using WB.Core.SharedKernels.DataCollection.ValueObjects.Interview
@using WB.Core.SharedKernels.SurveyManagement.Views.Interview
@using WB.Core.SharedKernels.SurveyManagement.Web.Code
@using WB.Core.SharedKernels.SurveyManagement.Web.Models
@using WB.Core.SharedKernels.SurveyManagement.Web.Utils.Membership
@model WB.Core.SharedKernels.SurveyManagement.Web.Models.DetailsViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section styles
{
    @Styles.Render("~/Content/popover-extra-placements.min.css", "~/Content/interview.css")
}

@section scripts{
@Scripts.Render("~/Scripts/popover-extra-placements.js")
    <script type="text/javascript">
        $(function() {
            $('[data-toggle="popover"]').popover();
            $('#historyOfStatusesHolder').popover({
                html: true,
                container: 'body',
                placement: 'bottomLeft',
                content: function () {
                    return $("#historyOfStatusesContent").html();
                }
            });
        })
    </script>
}
<div id="historyOfStatusesContent" style="display: none;">
    <table class=" table table-bordered table-striped col-md-3">
        <thead>
            <tr>
                <th style="width: 125px">State</th>
                <th>with comment</th>
                <th style="width: 90px">on</th>
                <th>by</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var historyItem in Model.History.StatusHistory)
            {
                <tr>
                    <td>@historyItem.Status.ToLocalizeString()</td>
                    <td>@historyItem.Comment</td>
                    <td>@historyItem.Date.ToShortDateString()</td>
                    <td>@historyItem.Responsible</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div id="sub-navbar" class="navbar navbar-fixed-top">
    <div class="navbar-default col-md-3 col-md-offset-1">
        <div>
            <div class="navbar-title">
                @Model.FilteredInterviewDetails.Title
            </div>
            <div class="navbar-subtitle">
                <a id="historyOfStatusesHolder" href="#">@Model.FilteredInterviewDetails.Status.ToLocalizeString()
                </a> by @Model.FilteredInterviewDetails.Responsible.Name
            </div>
        </div>
    </div>
    <nav class="navbar-default col-md-7">
        <ul class="nav navbar-nav">
            <li @IsSortByActive(InterviewDetailsSortBy.All)>
                <a href="@Url.Action("Details", "Interview", new { id = Model.FilteredInterviewDetails.PublicKey, sortby=InterviewDetailsSortBy.All,  filter = Model.Filter })">Full</a>
            </li>
            <li @IsSortByActive(InterviewDetailsSortBy.Answered)>
                <a href="@Url.Action("Details", "Interview", new { id = Model.FilteredInterviewDetails.PublicKey, sortby=InterviewDetailsSortBy.Answered,  filter = Model.Filter })">Answered</a>
            </li>
            <li @IsSortByActive(InterviewDetailsSortBy.Supervisors)>
                <a href="@Url.Action("Details", "Interview", new { id = Model.FilteredInterviewDetails.PublicKey, sortby = InterviewDetailsSortBy.Supervisors, filter = Model.Filter })">Supervisor's</a>
            </li>
            <li class="dropdown">
                <a href="#" class="dropdown-toggle" data-toggle="dropdown">Filtered by<b class="caret"></b></a>
                <ul class="dropdown-menu">
                    <li @IsFilterActive(InterviewDetailsFilter.None)><a href="@Url.Action("Details", "Interview", new { id = Model.FilteredInterviewDetails.PublicKey, sortby=Model.SortBy,  filter = InterviewDetailsFilter.None })">None</a></li>
                    <li @IsFilterActive(InterviewDetailsFilter.Commented)><a href="@Url.Action("Details", "Interview", new { id = Model.FilteredInterviewDetails.PublicKey, sortby=Model.SortBy,  filter = InterviewDetailsFilter.Commented })">With comments</a></li>
                    <li @IsFilterActive(InterviewDetailsFilter.Invalid)><a href="@Url.Action("Details", "Interview", new { id = Model.FilteredInterviewDetails.PublicKey, sortby=Model.SortBy,  filter = InterviewDetailsFilter.Invalid })">Invalid</a></li>
                    <li @IsFilterActive(InterviewDetailsFilter.Enabled)><a href="@Url.Action("Details", "Interview", new { id = Model.FilteredInterviewDetails.PublicKey, sortby=Model.SortBy,  filter = InterviewDetailsFilter.Enabled })">Enabled</a></li>
                    <li @IsFilterActive(InterviewDetailsFilter.Starred)><a href="@Url.Action("Details", "Interview", new { id = Model.FilteredInterviewDetails.PublicKey, sortby=Model.SortBy,  filter = InterviewDetailsFilter.Starred })">Star</a></li>
                </ul>
            </li>
        </ul>
        <ul class="nav navbar-nav pull-right">
            <li class="approve">
                <a href="#">Approve</a>
            </li>
            <li class="reject">
                <a href="#">Reject</a>
            </li>
        </ul>
    </nav>
</div>

<div id="menu" class="col-md-offset-1 col-md-3 sidebar" data-bind="css: filter">
    <ul id="groups-menu" class="list-group" data-spy="#list">
        @foreach (var group in Model.Groups.Skip(1))
        {
            <li class="group-item" style="margin-left: @(group.Depth*20)px">
                <a href="#group-@(group.Id)">@group.Title</a>
            </li>
        }
    </ul>
</div>

<div id="content" class="col-md-7 col-md-offset-4 sidebar">
    <div>
        <div id="list" data-spy="scroll" data-target="#groups-menu">
            @foreach (var group in Model.FilteredInterviewDetails.Groups.Skip(1))
            {
                <div id="group-@group.Id" class="group-item-content">
                    <div class="bubble me"><b>@group.Title</b></div>

                    <table class="table table-bordered table-hover">
                        <tbody>
                            @foreach (var entity in group.Entities)
                            {
                                if (entity is InterviewStaticTextView)
                                {
                                    @DrawStaticTextRow(entity as InterviewStaticTextView)
                                }
                                if (entity is InterviewQuestionView)
                                {
                                    @DrawQuestionRow(entity as InterviewQuestionView)
                                }
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>

</div>

@helper IsFilterActive(InterviewDetailsFilter selectedFilter)
{
    if (selectedFilter == Model.Filter)
    {
        <text>class="active"</text>
    }
}

@helper IsSortByActive(InterviewDetailsSortBy selectedSortBy)
{
    if (selectedSortBy == Model.SortBy)
    {
        <text>class="active"</text>
    }
}

@helper DrawStaticTextRow(InterviewStaticTextView entity)
{
    <div class="bubble me"><b>@entity.Text</b></div>
}
@helper DrawQuestionRow(InterviewQuestionView entity)
{
    <div class="bubble me">@entity.Title</div>
    <div class="bubble you @(entity.IsValid ? "" : "invalid") @(entity.IsEnabled ? "" : "disabled")">
        @{
            var answer = AnswerUtils.AnswerToString(entity.Answer);
            var answerToClient = string.IsNullOrEmpty(answer) ? "no answer" : answer;
        }

        @answerToClient
        @if (!entity.IsValid)
        {
            @:<i class="glyphicon glyphicon glyphicon-info-sign" data-toggle="popover" title="@entity.ValidationMessage" data-placement="top" data-container="body" data-content="@entity.ValidationExpression"></i>
        }
        @if (entity.IsFlagged)
        {
            @:&nbsp;<span class="glyphicon glyphicon-star star" aria-hidden="true"></span>
        }

    </div>

    if (entity.Comments != null && entity.Comments.Any())
    {
        <div class="bubble you">
            @for (int commentIndex = 0; commentIndex < entity.Comments.Count; commentIndex++)
            {
                var comment = entity.Comments[commentIndex];
                if (commentIndex % 2 == 0)
                {
                    <div class="bubble me">@comment.Text</div>
                }
                else
                {
                    <div class="bubble you"><font class="comment-container">@comment.Text</font></div>
                }
            }

        </div>
    }


    @*<tr class=" @css("danger", !entity.isvalid && entity.isenabled) @css("mandatory", entity.ismandatory) @css("text-muted", !entity.isenabled)">
        <td style="width: 60%" class="question-text">
            <div class="cell-content @css(" featured", entity.isfeatured)">
                <span class="icon-star"></span>
                <span>@entity.Title</span>
            </div>
        </td>
        <td class="question-answer">
            <div class="cell-content" data-bind="visible: isEnabled || isAnswered">
                <div class="question-clickable">
                    <span data-bind="css: markerStyle()" class="question-marker"></span>
                    <span>@entity.AnswerString</span>
                    @switch (entity.QuestionType)
                    {
                    case QuestionType.SingleOption:
                    var singleOptinSetting = entity.Settings as SingleQuestionSettings;
                    if (singleOptinSetting.IsCascade || singleOptinSetting.IsFilteredCombobox)
                    {
                    <input class="form-control" type="text" value="@entity.Answer" />
                    }
                    else if (singleOptinSetting.IsLinked)
                    {
                    <div class="form-group">
                        <div class="controls">
                            @foreach (var option in entity.Options)
                            {
                            var radioName = string.Format("option-{0}-{1}", entity.Id, Stringify(entity.RosterVector));
                            <label class="radio">
                                @Html.RadioButton(radioName, Stringify((decimal[])option.Value), ((decimal[])entity.Answer).SequenceEqual((decimal[])option.Value))
                                <span>@option.Label</span>
                            </label>
                            }
                        </div>
                    </div>
                    }
                    else
                    {
                    <div class="form-group">
                        <div class="controls">
                            @foreach (var option in entity.Options)
                            {
                            var radioName = string.Format("option-{0}-{1}", entity.Id, Stringify(entity.RosterVector));
                            <label class="radio">
                                @Html.RadioButton(radioName, Convert.ToDecimal(option.Value), Convert.ToDecimal(entity.Answer) == Convert.ToDecimal(option.Value))
                                <span>@option.Label</span>
                            </label>
                            }
                        </div>
                    </div>
                    }
                    break;
                    case QuestionType.MultyOption:
                    var multiQuestionSettings = entity.Settings as MultiQuestionSettings;
                    if (multiQuestionSettings.IsLinked)
                    {
                    <div class="form-group">
                        <div class="controls">
                            @foreach (var option in entity.Options)
                            {
                            var radioName = string.Format("option-{0}-{1}", entity.Id, Stringify(entity.RosterVector));
                            <label class="radio">
                                @Html.RadioButton(radioName, Stringify((decimal[])option.Value), ((decimal[])entity.Answer).SequenceEqual((decimal[])option.Value))
                                <span>@option.Label</span>
                            </label>
                            }
                        </div>
                    </div>
                    }
                    else
                    {
                    <div class="form-group">
                        <div class="controls">
                            @foreach (var option in entity.Options)
                            {
                            var radioName = string.Format("option-{0}-{1}", entity.Id, Stringify(entity.RosterVector));
                            <label class="radio">
                                @Html.RadioButton(radioName, Convert.ToDecimal(option.Value), Convert.ToDecimal(entity.Answer) == Convert.ToDecimal(option.Value))
                                <span>@option.Label</span>
                            </label>
                            }
                        </div>
                    </div>
                    }
                    break;
                    case QuestionType.Numeric:
                    <input class="form-control" type="number" value="@entity.Answer" />
                    break;
                    case QuestionType.DateTime:
                    break;
                    case QuestionType.GpsCoordinates:
                    break;
                    case QuestionType.Text:
                    <input class="form-control" type="text" value="@entity.Answer" />
                    break;
                    case QuestionType.TextList:
                    break;
                    case QuestionType.QRBarcode:
                    <input class="form-control" type="text" value="@entity.Answer" />
                    break;
                    case QuestionType.Multimedia:
                    <img src="@Url.RouteUrl(" default", new { httproute="" , controller="Resource" , action="InterviewFile" , interviewid=Model.PublicKey, filename=entity.Answer})" />
                    break;
                    }
                    @if (!entity.IsValid)
                    {
                    <small class="text-error">@entity.ValidationExpression</small>
                    <small class="text-error">@entity.ValidationMessage</small>
                    }
                </div>
            </div>
        </td>
        <td class="col-sm-3">
            <div class="actions pull-right">
                @if ((entity.Comments != null && entity.Comments.Count == 0) || entity.IsFlagged == false || entity.IsReadOnly == false)
                {
                <div class="btn-group btn-group-xs">
                    <a class="btn btn-default dropdown-toggle" data-toggle="dropdown" href="#"><i class="icon-cog"></i><span class="caret"></span></a>
                    <ul class="dropdown-menu pull-right">
                        @if (!entity.IsReadOnly && entity.IsEnabled)
                        {
                        <li><a href="#">Answer</a></li>
                        }
                        <li><a href="#"><i class="glyphicon glyphicon-comment"></i>&nbsp;Comment</a></li>
                        @if (!entity.IsFlagged)
                        {
                        <li><a href="#"><i class="glyphicon glyphicon-flag"></i>&nbsp;Flag</a></li>
                        }
                    </ul>
                </div>
                }
                @if (entity.Comments != null && entity.Comments.Count > 0)
                {
                <a class="btn  btn-xs btn-success">
                    <span>@entity.Comments.Count</span><i class="glyphicon glyphicon-comment"></i>
                </a>
                }
                @if (entity.IsFlagged)
                {
                <a class="btn btn-xs btn-info">
                    <i class="glyphicon glyphicon-flag"></i>
                </a>
                }
                @if (!entity.IsReadOnly && entity.IsEnabled)
                {
                <a class="btn btn-xs btn-primary" href="#">answer</a>
                }
            </div>
        </td>
        </tr>*@
        }
        @functions
        {
    public string Stringify(decimal[] array)
    {
        return string.Join("_", array.Select(x => x.ToString(CultureInfo.InvariantCulture)));
    }
        }
        @helper css(string style, bool shouldBeAdded = true)
{
        @(shouldBeAdded ? style : string.Empty)
}
