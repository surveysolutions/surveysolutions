@using Main.Core.Entities.SubEntities
@using Microsoft.Security.Application
@using Newtonsoft.Json
@using WB.Core.BoundedContexts.Headquarters
@using WB.Core.BoundedContexts.Headquarters.Services
@using WB.Core.BoundedContexts.Headquarters.Views
@using WB.Core.BoundedContexts.Headquarters.Views.Interview
@using WB.Core.GenericSubdomains.Portable.ServiceLocation
@using WB.Core.SharedKernels.DataCollection.ValueObjects.Interview
@using WB.Core.SharedKernels.SurveyManagement.Web.Code
@using WB.UI.Headquarters.Code
@using WB.UI.Shared.Web.Extensions
@model WB.Core.BoundedContexts.Headquarters.Views.DetailsViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";

    var interviewQuestions = Model.FilteredEntities.OfType<InterviewQuestionView>();
    var authorizedUser = ServiceLocator.Current.GetInstance<IAuthorizedUser>();
    ViewBag.Title = Model.InterviewKey;
}
@section styles
{
    @Styles.Render("~/css/list")
    @Styles.Render("~/css/interview")
    @Styles.Render("~/Content/interview.css")
}

@section scripts
{
    @Scripts.Render("~/js/interview-general", "~/js/details")

    <script type="text/javascript">
        var urlReferrer = null;
        @if (Request.UrlReferrer != null && Request.UrlReferrer.OriginalString.Contains("Interviews"))
        {
            <text>urlReferrer = '@Html.Raw(Request.UrlReferrer)';</text>
        }

        var settings = new Supervisor.VM.InterviewDetailsSettings();
        settings.UserName = '@User.Identity.Name';
        settings.UrlReferrer = urlReferrer;

        settings.Interview.InterviewId = '@Model.InterviewDetails.PublicKey';
        settings.Urls.CommandExecution = '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "CommandApi", action = "Execute"})';
        settings.Urls.Interviews = '@(authorizedUser.IsSupervisor ? Url.Action("Interviews", "Survey") : Url.Action("Interviews", "HQ", new {area=""}))';
        settings.Urls.InterviewersToAssign = '@Url.RouteUrl("DefaultApiWithAction", new { httproute = "", controller = "Teams", action = "Interviewers" })';

        var filter = { filteredBy: '@Model.QuestionsTypes' };
        var filteredComboboxes = [
            @Html.Raw( string.Join(",", interviewQuestions.Where(IsFilteredCombobox).Select(_ => string.Format("{{id:'{0}', options:[{1}]}}", _.Id,string.Join(",", _.Options.Select(x=>string.Format("{{value:'{0}', label: {1}}}", x.Value, Encoder.JavaScriptEncode(x.Label))))))))
        ];
        var answeredYesNoQuestionsBySupervisor = [
            @Html.Raw( string.Join(",", interviewQuestions.Where(IsAnsweredYesNoMultiOptionsQuestionsBySupervisor).Select(_ => string.Format("{{questionId:'{0}', answers:{1}}}", _.Id, JsonConvert.SerializeObject(_.Answer)))))];
        var currentTranslation = '@(Model.InterviewDetails.CurrentTranslation ?? "")';
        var isAssignedToInterviewer = @Model.InterviewDetails.IsAssignedToInterviewer.ToString().ToLower();

        $(function () {
            window.model = new Supervisor.VM.Details(settings, filter, filteredComboboxes, currentTranslation, isAssignedToInterviewer);
            ko.applyBindings(model);
            model.load();
        });
    </script>
}

<div>
    <div id="menu" class="col-md-3 sidebar">
        <div class="panel panel-default">
            <div class="panel-heading with-btn">
                @(Model.InterviewKey + " " + Pages.InterviewDetails_GroupsLabel)
                <div class="btn-group btn-group-sm pull-right">
                    <button data-bind="click: ToggleFilter" class="btn btn-default"><span class="glyphicon glyphicon-arrow-left"></span> @Pages.InterviewDetails_HideGroupsLAbel</button>
                </div>
            </div>
            <ul id="groups-menu" class="list-group">
                @foreach (var group in Model.InterviewDetails.Groups)
                {
                    <li class="list-group-item @SetGroupLevelClass(group.Depth) @css("active", group.Id == Model.SelectedGroupId)">
                        <a href="@Url.Action("Details", "Interview", new {id = Model.InterviewDetails.PublicKey, questionsTypes = InterviewDetailsFilter.All, currentGroupId = group.Id})">@group.Title</a>
                    </li>
                }
            </ul>
        </div>

    </div>
    <div id="content" class="col-md-9 col-md-offset-3 main">
        <div class="row">
            <div class="col-md-9">
                <h3 class="span10 text-overflow-ellipsis">
                    <span>@Html.QuestionnaireName(Model.QuestionnaireName, Model.QuestionnaireVersion)</span>
                    <span class="small">@Pages.InterviewDetails_StatusLabel :</span><a href="javascript:void(0);" class="btn-link" data-toggle="modal" data-target="#statusHistoryModal">@Model.InterviewDetails.Status.ToLocalizeString()</a>
                    <span class="small">@Pages.InterviewDetails_ResponsibleLabel :</span><span>@Model.InterviewDetails.Responsible.Name</span>
                    @if (Model.HasUnprocessedSyncPackages)
                    {
                        <span class="badge badge-orange"><i class="glyphicon glyphicon-refresh"></i> @Pages.InterviewDetails_PendingPackageLabel</span>
                    }
                </h3>
            </div>
            <div class="col-md-3">
                <div class="form-inline pull-right">
                    <span class="small">@Pages.InterviewDetails_TranslationLabel :</span>
                    @if (Model.InterviewDetails.ReceivedByInterviewer)
                    {
                        <span>@(string.IsNullOrEmpty(Model.InterviewDetails.CurrentTranslation) ? Pages.InterviewDetails_DefaultTranslation : Model.InterviewDetails.CurrentTranslation)</span>
                    }
                    else
                    {
                        <div class="input-group">
                            <select id="translationSelector" class="form-control" data-bind="value: currentTranslation">
                                <option value=''>@Pages.InterviewDetails_DefaultTranslation</option>
                                @foreach (var item in Model.Translations)
                                {
                                    <option value='@item.Name'>@item.Name.Ellipsis(25)</option>
                                }
                            </select>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="panel panel-default">
            <div class="panel-body">
                <span><button data-bind="visible: !IsFilterOpen(), click: ToggleFilter" class="btn btn-default  btn-xs"><span class="glyphicon glyphicon-arrow-right"></span> @Pages.InterviewDetails_ShowGroupsLabel</button></span>
                @{
                    bool isSupervisorApproveSupport = ((Model.InterviewDetails.Status == InterviewStatus.Completed || Model.InterviewDetails.Status == InterviewStatus.RejectedByHeadquarters) && authorizedUser.IsSupervisor);
                    bool isHeadquarteerOrAdminApproveSupport = ((Model.InterviewDetails.Status == InterviewStatus.Completed || Model.InterviewDetails.Status == InterviewStatus.ApprovedBySupervisor) && (authorizedUser.IsHeadquarter || authorizedUser.IsAdministrator));

                    bool isSupervisorRedjectSupport = ((Model.InterviewDetails.Status == InterviewStatus.Completed || Model.InterviewDetails.Status == InterviewStatus.RejectedByHeadquarters) && authorizedUser.IsSupervisor);
                    bool isHeadquarteerOrAdminRedjectSupport = (Model.InterviewDetails.Status == InterviewStatus.ApprovedBySupervisor && (authorizedUser.IsHeadquarter || authorizedUser.IsAdministrator));

                    bool isHeadquarteerOrAdminUnapproveSupport = Model.InterviewDetails.Status == InterviewStatus.ApprovedByHeadquarters && (authorizedUser.IsHeadquarter || authorizedUser.IsAdministrator);
                }

                @if (isSupervisorApproveSupport || isHeadquarteerOrAdminApproveSupport)
                {
                    <button class="btn btn-success " data-bind="click: showApproveModal">@Pages.ApproveRejectPartialView_ApproveAction</button>
                }
                @if (isSupervisorRedjectSupport || isHeadquarteerOrAdminRedjectSupport)
                {
                    <button class="btn btn-danger" data-bind="click: showRejectModal">@Pages.ApproveRejectPartialView_RejectAction</button>
                }
                @if (isHeadquarteerOrAdminUnapproveSupport)
                {
                    <button class="btn" data-bind="click: showUnapproveByHeadquarterModal">@Pages.ApproveRejectPartialView_UnapproveAction</button>
                }
                <a href="@Url.Action("Details", "Interview", new {id = Model.InterviewDetails.PublicKey, questionsTypes = InterviewDetailsFilter.All})" class="btn btn-default btn-xs @SetFilterActiveClass(InterviewDetailsFilter.All)">@Pages.InterviewDetails_AllButtonLabel</a>
                <a href="@Url.Action("Details", "Interview", new {id = Model.InterviewDetails.PublicKey, questionsTypes = InterviewDetailsFilter.Enabled})" class="btn btn-default  btn-xs @SetFilterActiveClass(InterviewDetailsFilter.Enabled)"><i class="glyphicon glyphicon-pencil @SetFilterIconActiveClass(InterviewDetailsFilter.Enabled)"></i> @Pages.InterviewDetails_EnabledButtonLabel (<span>@Model.Statistic.EnabledCount</span>)</a>
                <a href="@Url.Action("Details", "Interview", new {id = Model.InterviewDetails.PublicKey, questionsTypes = InterviewDetailsFilter.Answered})" class="btn btn-default  btn-xs @SetFilterActiveClass(InterviewDetailsFilter.Answered)"><i class="glyphicon glyphicon-ok @SetFilterIconActiveClass(InterviewDetailsFilter.Answered)"></i> @Pages.InterviewDetails_AnsweredButtonLabel (<span>@Model.Statistic.AnsweredCount</span>)</a>
                <a href="@Url.Action("Details", "Interview", new {id = Model.InterviewDetails.PublicKey, questionsTypes = InterviewDetailsFilter.Unanswered})" class="btn btn-default  btn-xs @SetFilterActiveClass(InterviewDetailsFilter.Unanswered)"><i class="glyphicon glyphicon-ok @SetFilterIconActiveClass(InterviewDetailsFilter.Unanswered)"></i> @Pages.InterviewDetails_UnansweredButtonLabel (<span>@Model.Statistic.UnansweredCount</span>)</a>
                <a href="@Url.Action("Details", "Interview", new {id = Model.InterviewDetails.PublicKey, questionsTypes = InterviewDetailsFilter.Invalid})" class="btn btn-default  btn-xs @SetFilterActiveClass(InterviewDetailsFilter.Invalid)"><i class="glyphicon glyphicon-warning-sign @SetFilterIconActiveClass(InterviewDetailsFilter.Invalid)"></i> @Pages.InterviewDetails_InvalidButtonLabel (<span>@Model.Statistic.InvalidCount</span>)</a>
                <a href="@Url.Action("Details", "Interview", new {id = Model.InterviewDetails.PublicKey, questionsTypes = InterviewDetailsFilter.Commented})" class="btn btn-default  btn-xs @SetFilterActiveClass(InterviewDetailsFilter.Commented)"><i class="glyphicon glyphicon-comment @SetFilterIconActiveClass(InterviewDetailsFilter.Commented)"></i> @Pages.InterviewDetails_CommentedButtonLabel (<span id="commentsCounter">@Model.Statistic.CommentedCount</span>)</a>
                <a href="@Url.Action("Details", "Interview", new {id = Model.InterviewDetails.PublicKey, questionsTypes = InterviewDetailsFilter.Flagged})" class="btn btn-default  btn-xs @SetFilterActiveClass(InterviewDetailsFilter.Flagged)"><i class="glyphicon glyphicon-flag @SetFilterIconActiveClass(InterviewDetailsFilter.Flagged)"></i> @Pages.InterviewDetails_FlaggedButtonLabel (<span id="flagsCounter">@Model.Statistic.FlaggedCount</span>)</a>
                <a href="@Url.Action("Details", "Interview", new {id = Model.InterviewDetails.PublicKey, questionsTypes = InterviewDetailsFilter.Supervisors})" class="btn btn-default  btn-xs @SetFilterActiveClass(InterviewDetailsFilter.Supervisors)"><i class="glyphicon glyphicon-pencil @SetFilterIconActiveClass(InterviewDetailsFilter.Supervisors)"></i> @Pages.InterviewDetails_SupervisorsButtonLabel (<span>@Model.Statistic.SupervisorsCount</span>)</a>
                <a href="@Url.Action("Details", "Interview", new {id = Model.InterviewDetails.PublicKey, questionsTypes = InterviewDetailsFilter.Hidden})" class="btn btn-default  btn-xs @SetFilterActiveClass(InterviewDetailsFilter.Hidden)"><i class="glyphicon glyphicon-eye-close @SetFilterIconActiveClass(InterviewDetailsFilter.Hidden)"></i> @Pages.InterviewDetails_HiddenButtonLabel (<span>@Model.Statistic.HiddenCount</span>)</a>

            </div>
        </div>
        <div id="list">
            <div class="questions">

                @if (!Model.FilteredEntities.Any())
                {
                    <p>@Pages.InterviewDetails_NoItems</p>
                }

                <table class="table table-bordered table-hover">
                    <tbody>
                    @foreach (var entity in Model.FilteredEntities)
                    {
                        InterviewGroupView group = entity as InterviewGroupView;
                        if (group != null)
                        {
                            <tr>
                                <td colspan="4">
                                    <div id="group-@group.Id" class="group-item-content">
                                        <h2 class="heading">@group.Title</h2>
                                    </div>
                                </td>
                            </tr>
                        }

                        InterviewStaticTextView entityAsStaticText = entity as InterviewStaticTextView;
                        if (entityAsStaticText != null)
                        {
                            @Html.Partial("StaticTextPartialView", entityAsStaticText)
                        }

                        InterviewQuestionView entityAsInterviewQuestionView = entity as InterviewQuestionView;
                        if (entityAsInterviewQuestionView != null)
                        {
                            if (Model.InterviewDetails.ReceivedByInterviewer)
                            {
                                @Html.Partial("DetailsReadOnlyQuestionPartialView", entityAsInterviewQuestionView)
                            }
                            else
                            {
                                @Html.Partial("DetailsQuestionPartialView", entityAsInterviewQuestionView, new ViewDataDictionary {{"InterviewId", Model.InterviewDetails.PublicKey}})
                            }
                        }
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    @Html.Partial("CommentTemplatePartialView")
    @Html.Partial("HistoryOfStatusesPartialView", Model.History)
    @Html.Partial("ApproveRejectPartialView", Model.InterviewDetails)

    @helper SetGroupLevelClass(int level)
    {
        <text>level</text>@level
    }

    @helper SetFilterActiveClass(InterviewDetailsFilter filter)
    {
if (filter == Model.QuestionsTypes)
{
        <text>btn-primary</text>
}
}

    @helper SetFilterIconActiveClass(InterviewDetailsFilter filter)
    {
if (filter == Model.QuestionsTypes)
{
        <text>icon-white</text>
}
}
    @helper css(string style, bool shouldBeAdded = true)
    {
    @(shouldBeAdded ? style : string.Empty)
}

    @functions
    {

        private static bool IsFilteredCombobox(InterviewQuestionView entityView)
        {
            if (entityView.QuestionType == QuestionType.SingleOption)
            {
                var interviewQuestionViewSettings = entityView.Settings as SingleQuestionSettings;

                return interviewQuestionViewSettings != null && interviewQuestionViewSettings.IsFilteredCombobox;
            }
            return false;
        }

        private static bool IsAnsweredYesNoMultiOptionsQuestionsBySupervisor(InterviewQuestionView entityView)
        {
            var authorizedUser = ServiceLocator.Current.GetInstance<IAuthorizedUser>();
            if (!entityView.IsReadOnly && entityView.Scope == QuestionScope.Supervisor && authorizedUser.IsSupervisor && entityView.IsEnabled &&
                entityView.QuestionType == QuestionType.MultyOption)
            {
                if (!entityView.IsReadOnly && entityView.Scope == QuestionScope.Supervisor && authorizedUser.IsSupervisor && entityView.IsEnabled &&
                    entityView.QuestionType == QuestionType.MultyOption)
                {
                    var interviewQuestionViewSettings = entityView.Settings as MultiQuestionSettings;

                    return interviewQuestionViewSettings != null && interviewQuestionViewSettings.YesNoQuestion;
                }

            }
            return false;
        }

    }
</div>