@using System.Web.Optimization
@using WB.Core.SharedKernels.SurveyManagement.Web.Models
@model WB.Core.SharedKernels.SurveyManagement.Web.Models.BatchUploadModel
@{
    Layout = "~/Views/Shared/_MainLayout.cshtml";
    ViewBag.Title = BatchUpload.BatchUpload_Title;
}
@section styles
{
    <style>
        .has-error .input-group-btn .btn {
            color: #a94442;
            background-color: #f2dede;
            border-color: #a94442;
        }
        .has-error .form-control {
            border-color: #a94442;
        }
    </style>
}
@section scripts
{
    @Scripts.Render("~/validate")
    @Scripts.Render("~/js/responsibles-selector", "~/Scripts/knockout.validation.min.js", "~/Scripts/viewmodels/pages/interview/custom.js")
    <script type="text/javascript">
        var StartInterviewCreationModel = function (ajax) {
            var $responsiblesUrl = '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "Teams", action = "Responsibles" })';

            var self = this;

            self.isResponsiblesLoading = ko.observable(false);
            self.responsibles = function (query, sync, pageSize) {
                self.isResponsiblesLoading(true);
                ajax.sendRequest($responsiblesUrl, "get", { query: query, pageSize: pageSize }, true,
                    // onSuccess
                    function (response) {
                        sync(response.Users, response.TotalCountByQuery);
                    },
                    // onDone
                    function () {
                        self.isResponsiblesLoading(false);
                    });
            };

            self.selectedResponsible = ko.observable(undefined).extend({
                validation: {
                    validator: function (val) {
                        return val != undefined;
                    },
                    message: '@BatchUpload.RequiredField'
                }
            });

            self.selectedResponsibleId = ko.computed(function () {
                return _.isUndefined(self.selectedResponsible()) ? "" : self.selectedResponsible().ResponsibleId;
            });

            self.isResponsibleSelected = ko.computed(function () {
                return !_.isUndefined(self.selectedResponsible());
            });

            self.errors = ko.validation.group(self);

            self.isViewModelValid = function() {
                if (self.errors().length === 0) {
                    return true;
                } else {
                    self.errors.showAllMessages();
                    return false;
                }
            };
        };

        $(function () {
            var model = new StartInterviewCreationModel(new Ajax(new Notifier()));
            ko.applyBindings(model);

            $('.file').bind('change', function () {
                Upload(this);
            });

            function Upload(inputFile) {
                if (!model.isViewModelValid()) {
                    $(inputFile).val('');
                    return;
                }

                var fileSize = inputFile.files[0].size / 1024 / 1024;
                if (fileSize > 300) {
                    bootbox.alert('@BatchUpload.FileSizeLimit');
                    $(inputFile).val('');
                    return;
                }

                inputFile.form.submit();
            }

            $('.toggle-prefilled-table').click(function () {
                $('.prefilled-table').toggle();
                return false;
            });
        });
    </script>
}

<main>
    <div class="container">
        <div class="row">
            <div class="page-header">
                <ol class="breadcrumb">
                    <li>
                        @Html.ActionLink(MainMenu.SurveySetup, "Index", "SurveySetup")
                    </li>
                </ol>
                <h1>@BatchUpload.CreatingMultipleAssignments</h1>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-8">
                <h2>
                    @Html.QuestionnaireName(Model.QuestionnaireTitle, Model.QuestionnaireVersion)
                </h2>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6 col-xs-10 prefilled-data-info info-block">
                <p>@BatchUpload.UploadDescription</p>
                <p>@BatchUpload.EmptySupervisorDescription</p>
            </div>
        </div>
@if (Model?.FeaturedQuestions != null || Model.HiddenQuestions.Count > 0 || Model.RosterSizeQuestions.Count > 0)
{
        <div class="row">
            <div class="col-sm-6 col-xs-10 prefilled-data-info info-block short-prefilled-data-info">
                <a href="javascript:void(0)" class="list-required-prefilled-data">@BatchUpload.ViewListPreloadedData</a>
            </div>
            <div class="col-sm-6 col-xs-10 prefilled-data-info info-block full-prefilled-data-info" style="display: none;">
                @if (Model?.FeaturedQuestions.Count > 0)
                {
                    <h3>@BatchUpload.PrefilledRequiredData</h3>

                    <ul class="list-unstyled prefilled-data">
                        @foreach (var item in Model.FeaturedQuestions)
                        {
                            <li>@Html.DisplayFor(modelItem => item.Caption)</li>
                        }
                    </ul>
                }
                @if (Model.HiddenQuestions.Count > 0)
                {
                    <h3>
                        @BatchUpload.HiddenQuestions
                    </h3>
                    <ul class="list-unstyled prefilled-data">
                        @foreach (var item in Model.HiddenQuestions)
                        {
                            <li>@item</li>
                        }
                    </ul>
                }
                @if (Model.RosterSizeQuestions.Count > 0)
                {
                    <h3>
                        @BatchUpload.RosterSizeQuestions
                    </h3>
                    <ul class="list-unstyled prefilled-data">
                        @foreach (var item in Model.RosterSizeQuestions)
                        {
                            <li>@item</li>
                        }
                    </ul>
                }
                <p>
                    <a href="@Url.Action("SimpleTemplateDownload", "SurveySetup", new {id = Model.QuestionnaireId, version = Model.QuestionnaireVersion})">
                        @BatchUpload.DownloadTabTemplate
                    </a>
                </p>
            </div>
            <script type="text/javascript">
                    $(function() {
                        $(".list-required-prefilled-data")
                            .click(function () {
                                $(".short-prefilled-data-info").hide();
                                $(".full-prefilled-data-info").show();
                            });
                        $(".hide-list-of-required-prefilled-data")
                            .click(function () {
                                $(".full-prefilled-data-info").hide();
                                $(".short-prefilled-data-info").show();
                            });
                    });
                </script>
            </div>
            <div class="row">
                <div class="col-sm-6 col-xs-10 prefilled-data-info info-block full-prefilled-data-info">
                    <h3>@BatchUpload.Select_Responsible</h3>
                    <p>
                        @BatchUpload.Select_Responsible_Description
                    </p>
                    <div class="form-group" data-bind="validationElement: selectedResponsible">
                        <div class="input-group">
                            <input placeholder="@BatchUpload.ImportInterviews_SelectResponsible"
                                   class="form-control"
                                   data-bind="typeahead: selectedResponsible, typeaheadOptions: {source: responsibles, displayText: function(item){return item.UserName}}, valueupdate:'afterkeydown'"
                                   type="text" />
                            <span data-bind="spinner: isResponsiblesLoading, spinnerOptions: { 'left': 1, 'right': '50px' }"></span>
                            <div class="input-group-btn" data-bind="click: function(){ selectedResponsible(undefined); }">
                                <div class="btn btn-default"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></div>
                            </div>
                        </div>
                        <span class="help-block" data-bind="validationMessage: selectedResponsible"></span>
                    </div>
                </div>
            </div>
        }
        <div class="row flex-row">
            <div class="col-sm-6">
                <div class="flex-block selection-box">
                    <div class="block">
                        <h3>@BatchUpload.SimpleTitle</h3>
                        <p>@BatchUpload.SimpleDescription</p>
                    </div>
                    <div>
                        <a href="@Url.Action("SimpleTemplateDownload", "SurveySetup", new {id = Model.QuestionnaireId, version = Model.QuestionnaireVersion})">@BatchUpload.DownloadTabTemplate</a>
                        @using (Html.BeginForm("AssignmentsBatchUploadAndVerify", "SurveySetup", new { questionnaireId = Model.QuestionnaireId, version = Model.QuestionnaireVersion }, FormMethod.Post, new { enctype = "multipart/form-data" }))
                        {
                            @Html.AntiForgeryToken()
                            @Html.HiddenFor(x => x.QuestionnaireId)
                            @Html.HiddenFor(x => x.QuestionnaireVersion)
                            @Html.HiddenFor(x => x.ResponsibleId, new { data_bind= "value: selectedResponsibleId" })
                            
                            @Html.Partial("ClientTimezoneOffset")
                        <label class="btn btn-success btn-file">
                            @BatchUpload.UploadTabFile
                            @Html.TextBoxFor(m => m.File, new { type = "file", accept = ".tab, .txt, .zip", @class = "file" })
                        </label>
                            @Html.ValidationMessageFor(x => x.File, null, new { @class = "help-block" })
                        }
                    </div>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="flex-block selection-box">
                    <div class="block">
                        <h3>@BatchUpload.BatchTitle</h3>
                        <p>@BatchUpload.BatchDescription</p>
                    </div>
                    <div>
                        <a href="@Url.Action("TemplateDownload", "SurveySetup", new {id = Model.QuestionnaireId, version = Model.QuestionnaireVersion})">@BatchUpload.DownloadTemplateArchive</a>
                        @using (Html.BeginForm("PanelBatchUploadAndVerify", "SurveySetup", routeValues: new { id = Model.QuestionnaireId, version = Model.QuestionnaireVersion }, method: FormMethod.Post, htmlAttributes: new { enctype = "multipart/form-data" }))
                        {
                            @Html.AntiForgeryToken()
                            @Html.HiddenFor(x => x.QuestionnaireId)
                            @Html.HiddenFor(x => x.QuestionnaireVersion)
                            @Html.HiddenFor(x => x.ResponsibleId, new { data_bind= "value: selectedResponsibleId" })

                            @Html.Partial("ClientTimezoneOffset")
                        <label class="btn btn-success btn-file">
                            @BatchUpload.UploadZipFile
                            @Html.TextBoxFor(m => m.File, new { type = "file", accept = ".zip", @class = "file" })
                        </label>
                            @Html.ValidationMessageFor(x => x.File, null, new { @class = "help-block" })
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4 col-sm-5 text-page">
                <p>
                    @{
                        string link = string.Format("<a href='{0}'>{1}</a>", Url.Action("TakeNew", "HQ", new { id = Model.QuestionnaireId, version = Model.QuestionnaireVersion }), BatchUpload.ManualModeLinkTitle);
                        string textWithLink = string.Format(BatchUpload.ManualModeDescription, link);
                    }
                    @Html.Raw(textWithLink)
                </p>
            </div>
        </div>
    </div>
</main>
