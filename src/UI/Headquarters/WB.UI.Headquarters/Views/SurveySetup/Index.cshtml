@using WB.Core.SharedKernels.SurveyManagement.Web.Code.Security
@using WB.UI.Headquarters.Code
@using WB.UI.Headquarters.Resources

@{
    Layout = "~/Views/Shared/_MainLayout.cshtml";
    ViewBag.Title = Dashboard.Questionnaires;
}

@section scripts
{
    @Scripts.Render("~/js/common")
    <script type="text/javascript">
        'use strict';

        var QuestionnairesListModel = function(ajax, notifier) {
            var self = this;

            self.table = null;

            var questionnaireListUrl = '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "QuestionnairesApi", action = "Questionnaires"})';
            var $newInterviewUrl = '@Url.Action("TakeNew", "HQ")';
            var $batchUploadUrl = '@Url.Action("BatchUpload", "SurveySetup")';
            var $cloneQuestionnaireUrl = '@Url.Action("CloneQuestionnaire", "HQ")';
            var $deleteQuestionnaireUrl = '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "QuestionnairesApi", action = "DeleteQuestionnaire"})';
            var $webInterviewUrl = '@Url.Action("Start", "WebInterviewSetup")';

            var requestHeaders = {};
            requestHeaders[input.settings.acsrf.tokenName] = input.settings.acsrf.token;

            $.fn.dataTable.ext.errMode = 'none';

            var selectRowAndGetData = function(selectedItem) {
                var rowIndex = selectedItem.parent().children().index(selectedItem);
                self.table.row(rowIndex).select();
                var selectedRows = self.table.rows({ selected: true }).data()[0];
                return selectedRows;
            }

            var sendDeleteQuestionnaireCommand = function(item) {
                ajax.sendRequest($deleteQuestionnaireUrl, "post", { questionnaireId: item.questionnaireId, version: item.version }, false,
                    // onSuccess
                    function() {
                        setTimeout(function() { self.table.ajax.reload(); }, 1000);
                    });
            }

            var addNewInterview = function(key, opt) {
                var selectedRow = selectRowAndGetData(opt.$trigger);
                window.location.href = $newInterviewUrl + '/' + selectedRow.questionnaireId + '?version=' + selectedRow.version;
                console.log(selectedRow);
            };

            var webInterviewSetup = function(key, opt) {
                var selectedRow = selectRowAndGetData(opt.$trigger);
                var questionnaireId = selectedRow.questionnaireId + '$' + selectedRow.version;
                window.location.href = $webInterviewUrl + '/' + encodeURI(questionnaireId);
                console.log(selectedRow);
            };

            var interviewsBatchUpload = function(key, opt) {
                var selectedRow = selectRowAndGetData(opt.$trigger);
                window.location.href = $batchUploadUrl + '/' + selectedRow.questionnaireId + '?version=' + selectedRow.version;
            };

            var cloneQuestionnaire = function(key, opt) {
                var selectedRow = selectRowAndGetData(opt.$trigger);
                window.location.href = $cloneQuestionnaireUrl + '/' + selectedRow.questionnaireId + '?version=' + selectedRow.version;
            };

            var deleteQuestionnaire = function(key, opt) {
                var selectedRow = selectRowAndGetData(opt.$trigger);

                notifier.confirm('Confirmation Needed', input.settings.messages.deleteQuestionnaireConfirmationMessage,
                    // confirm
                    function() {
                        sendDeleteQuestionnaireCommand(selectedRow);
                    },
                    // cancel
                    function() {});
            };

            var buildMenuItem = function(selectedRow) {
                var items = {}

                if (!(selectedRow.isDisabled || selectedRow.allowCensusMode)) {
                    @if (!Context.User.Identity.IsObserver())
                    {
                        <text>
                        items["addNew"] = {
                            name: "@Dashboard.NewInterview",
                            callback: addNewInterview
                        };
                        items["batchUpload"] = {
                            name: "@Dashboard.BatchUpload",
                            callback: interviewsBatchUpload
                        };
                        </text>
                    }


                    @if (User.IsInRole("Administrator"))
                    {
                        <text>
                        items["sep1"] = "---------";
                        </text>
                    }
                }
                @if (LegacyOptions.WebInterviewEnabled && !Context.User.Identity.IsObserver())
                {
                    <text>
                    if (!selectedRow.isDisabled && selectedRow.allowCensusMode) {
                        items["webSetup"] = {
                            name: "@Dashboard.WebInterviewSetup",
                            callback: webInterviewSetup
                        }
                    }
                    </text>
                }


                @if (User.IsInRole("Administrator"))
                {
                    <text>
                items["clone"] =
                {
                    name: "@Dashboard.CloneQuestionnaire",
                    callback: cloneQuestionnaire,
                    disabled: selectedRow.isDisabled
                };
                items["delete"] =
                {
                    name: "@Dashboard.DeleteQuestionnaire",
                    callback: deleteQuestionnaire
                    /*,disabled: selectedRow.isDisabled*/
                };
                </text>
                }
                return items;
            }

            self.contextMenuOptions = {
                selector: "table#questionnaires .with-context-menu",
                autoHide: false,
                build: function($trigger, e) {
                    var selectedRow = selectRowAndGetData($trigger);
                    var items = buildMenuItem(selectedRow);
                    return { items: items };
                },
                trigger: 'left'
            };

            var onTableInitComplete = function() {
                $('.dataTables_filter label').on('click', function(e) {
                    if (e.target !== this)
                        return;
                    if ($(this).hasClass("active")) {
                        $(this).removeClass("active");
                    } else {
                        $(this).addClass("active");
                        $(this).children("input[type='search']").delay(200).queue(function () { $(this).focus(); $(this).dequeue(); });
                    }
                    $(".column-questionnaire-title").toggleClass("padding-left-slide");
                });

                $.contextMenu(self.contextMenuOptions);
            };

            self.table = $('table#questionnaires')
                .on('init.dt', onTableInitComplete)
                .on('error.dt', function(e, settings, techNote, message) {
                    location.reload();
                })
                .DataTable({
                    processing: true,
                    language:
                    {
                        "url": window.input.settings.config.dataTableTranslationsUrl,
                        searchPlaceholder: "@Pages.Search"
                    },
                    serverSide: true,
                    ajax: {
                        url: questionnaireListUrl,
                        type: "POST",
                        headers: requestHeaders
                    },
                    "createdRow": function(row, data, dataIndex) {
                        $(row).addClass('with-context-menu');
                        if (data.isDisabled) {
                            $(row).addClass('disabled');
                        }
                    },
                    columns: [
                        {
                            data: "title",
                            name: "Title", // case-sensitive!
                            "class": "title",
                            render: function(data, type, row) {
                                return (row.allowCensusMode === true ? "<span class='census-icon'>c</span>" : "") + data;
                            }
                        },
                        {
                            data: "version",
                            name: "Version", // case-sensitive! should be DB name here from Designer DB questionnairelistviewitems? to sort column
                            "class": "parameters"
                        },
                        {
                            data: "importDate",
                            name: "ImportDate", // case-sensitive! should be DB name here from Designer DB questionnairelistviewitems? to sort column
                            "class": "date"
                        },
                        {
                            data: "creationDate",
                            name: "CreationDate", // case-sensitive! should be DB name here from Designer DB questionnairelistviewitems? to sort column
                            "class": "date"
                        },
                        {
                            data: "lastEntryDate",
                            name: "LastEntryDate", // case-sensitive! should be DB name here from Designer questionnairelistviewitems? to sort column
                            "class": "date"
                        }
                    ],
                    select: {
                        style: 'single'
                    },
                    searchHighlight: true,
                    rowId: 'id',
                    pagingType: "full_numbers",
                    lengthChange: false, // do not show page size selector
                    pageLength: 50, // page size
                    "order": [[2, 'desc']],
                    dom: "frtp",
                    conditionalPaging: true
                });

            return self;
        };

        $(function() {
            var notifier = new Notifier();
            var model = new QuestionnairesListModel(new Ajax(notifier), notifier);
        });
    </script>
}
<main>
    <div class="container-fluid">
        <div class="row">
            <div class="page-header clearfix">
                <div>
                    <h1>@MainMenu.Questionnaires</h1>
                    @if (!(User.Identity.IsObserver()))
                    {
                        <a class="btn btn-success" href="@Url.Action("Import", "Template")">@Dashboard.ImportTemplate</a>
                    }
                </div>
            </div>
            <div class="col-sm-6 col-xs-10 prefilled-data-info info-block">
                <ol  class="list-unstyled">
                    <li>@Dashboard.SurveySetupIntroMessage1</li>
                    <li>@Dashboard.SurveySetupIntroMessage2</li>
                </ol>
            </div>
        </div>
        <div id="list">
            <table id="questionnaires" class="table table-striped table-bordered table-hover table-ordered">
                <thead>
                <tr>
                    <th>@Dashboard.Questionnaire</th>
                    <th>@Dashboard.Version</th>
                    <th>@Dashboard.ImportDate</th>
                    <th>@Dashboard.CreationDate</th>
                    <th>@Dashboard.LastEntryDate</th>
                </tr>
                </thead>
            </table>
        </div>
    </div>
</main>

