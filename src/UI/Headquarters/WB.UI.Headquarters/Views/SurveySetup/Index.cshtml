@using Microsoft.Practices.ServiceLocation
@using WB.Core.BoundedContexts.Headquarters.Services
@using WB.UI.Headquarters.Code
@using WB.UI.Headquarters.Resources

@{
    Layout = "~/Views/Shared/_MainLayout.cshtml";
    ViewBag.Title = Dashboard.Questionnaires;

    var authorizedUser = ServiceLocator.Current.GetInstance<IAuthorizedUser>();
    var isObserver = authorizedUser.IsObserver;
    var isAdmin = authorizedUser.IsAdministrator;
}

@section scripts
{
    @Scripts.Render("~/js/main-no-libs")
    @Scripts.Render("~/js/common")
    @Scripts.Render("~/js/list")
    @Scripts.Render("~/js/questionnaires")

    <script type="text/javascript">

        var questionnaireListUrl =
            '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "QuestionnairesApi", action = "Questionnaires"})';

        var $newInterviewUrl = '@Url.Action("TakeNew", "HQ")';
        var $batchUploadUrl = '@Url.Action("BatchUpload", "SurveySetup")';
        var $cloneQuestionnaireUrl = '@Url.Action("CloneQuestionnaire", "HQ")';
        var $deleteQuestionnaireUrl = '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "QuestionnairesApi", action = "DeleteQuestionnaire"})';
        var $webInterviewUrl = '@Url.Action("Start", "WebInterviewSetup")';

        var notifier = new Notifier();
        var ajax = new Ajax(notifier);

        $(function() {
            var model = new Supervisor.VM.Questionnaires(questionnaireListUrl, notifier, ajax, $newInterviewUrl, $batchUploadUrl, $cloneQuestionnaireUrl,
                $deleteQuestionnaireUrl, $webInterviewUrl);

            model.getDataTableColumns = function() {
                return [
                    {
                        data: "title",
                        name: "Title", // case-sensitive!
                        "class": "title",
                        render: function(data, type, row) {
                            return (row.allowCensusMode === true ? "<span class='census-icon'></span>" : "") + data;
                        }
                    },
                    {
                        data: "version",
                        name: "Version",// case-sensitive! should be DB name here from Designer DB questionnairelistviewitems? to sort column
                        "class": "parameters"
                    },
                    {
                        data: "importDate",
                        name: "ImportDate",// case-sensitive! should be DB name here from Designer DB questionnairelistviewitems? to sort column
                        "class": "date"
                    },
                    {
                        data: "creationDate",
                        name: "CreationDate",// case-sensitive! should be DB name here from Designer DB questionnairelistviewitems? to sort column
                        "class": "date"
                    },
                    {
                        data: "lastEntryDate",
                        name: "LastEntryDate",// case-sensitive! should be DB name here from Designer questionnairelistviewitems? to sort column
                        "class": "date"
                    }
                ];
            };

            model.onTableInitCompleteExtra = function () {

                var buildMenuItem = function(selectedRow) {
                    var items = {}

                    if (!(selectedRow.isDisabled)) {
                        @if (!isObserver)
                        {
                            <text>
                                if (!selectedRow.allowCensusMode) {
                                    items["addNew"] = {
                                        name: "@Dashboard.NewInterview",
                                        callback: model.addNewInterview
                                    };
                                }
                                items["batchUpload"] = {
                                    name: "@Dashboard.UploadAssignments",
                                    callback: model.interviewsBatchUpload
                                };
                            </text>
                        }


                        @if (isAdmin)
                        {
                            <text>
                                items["sep1"] = "---------";
                            </text>
                        }
                    }
                    @if (ApplicationSettings.WebInterviewEnabled && !isObserver)
                    {
                        <text>
                        if (!selectedRow.isDisabled) {
                            items["webSetup"] = {
                                name: "@Dashboard.WebInterviewSetup",
                                callback: model.webInterviewSetup
                            }
                        }
                        </text>
                    }


                    @if (isAdmin)
                    {
                        <text>
                    items["clone"] =
                    {
                        name: "@Dashboard.CloneQuestionnaire",
                        callback: model.cloneQuestionnaire,
                        disabled: selectedRow.isDisabled
                    };
                        items["delete"] =
                        {
                            name: "@Dashboard.DeleteQuestionnaire",
                            callback: model.deleteQuestionnaire
                            /*,disabled: selectedRow.isDisabled*/
                        };
                        </text>
                    }
                    return items;
                }

                var contextMenuOptions = {
                    selector: "table#data_holder .with-context-menu",
                    autoHide: false,
                    build: function ($trigger, e) {
                        var selectedRow = model.selectRowAndGetData($trigger);
                        var items = buildMenuItem(selectedRow);
                        return { items: items };
                    },
                    trigger: 'left'
                };

                $.contextMenu(contextMenuOptions);
            };

            ko.applyBindings(model);
            model.load();
        });
    </script>
}

<main>
    <div class="container-fluid">
        <div class="row">
            @Html.Partial("_alerts")
            <div class="page-header clearfix">
                <div>
                    <h1>@MainMenu.Questionnaires</h1>
                    @if (!isObserver)
                    {
                        <a class="btn btn-success" href="@Url.Action("Import", "Template")">@Dashboard.ImportTemplate</a>
                    }
                </div>
            </div>
            <div class="col-sm-6 col-xs-10 prefilled-data-info info-block">
                <ol  class="list-unstyled">
                    <li>@Dashboard.SurveySetupIntroMessage1</li>
                    <li>@Dashboard.SurveySetupIntroMessage2</li>
                </ol>
            </div>
        </div>
        <div id="list">
            <table id="data_holder" class="table table-striped table-bordered table-hover table-ordered"
                   data-order="[[ 2, &quot;desc&quot; ]]" data-searching="true">
                <thead>
                <tr>
                    <th>@Dashboard.Questionnaire</th>
                    <th>@Dashboard.Version</th>
                    <th>@Dashboard.ImportDate</th>
                    <th>@Dashboard.CreationDate</th>
                    <th>@Dashboard.LastEntryDate</th>
                </tr>
                </thead>
            </table>
        </div>
    </div>
</main>

