@using Microsoft.Practices.ServiceLocation
@using WB.Core.BoundedContexts.Headquarters.Services
@{
    var authorizedUser = ServiceLocator.Current.GetInstance<IAuthorizedUser>();
}
<script type="text/x-template" id="assignments-table-template">
    <table class="table table-striped table-ordered table-bordered table-hover table-with-checkboxes table-with-prefilled-column table-interviews responsive">
        <thead>
        </thead>
        <tbody></tbody>
    </table>
</script>

<script type="text/javascript">
    Vue.component('assignments-table', {
        template: '#assignments-table-template',
        props: {
            addParamsToRequest: {
                type: Function,
                default: function(d) { return d; }
            },
            responseProcessor: {
                type: Function,
                default: function(r) { return r; }
            },
            tableOptions: {
                type: Object,
                default: function() { return {}; }
            }
        },
        data: function() {
            return {
                table: null
            };
        },
        methods: {
            reload: function (data) {
                this.table.ajax.data = data;
                this.table.rows().deselect();
                this.table.ajax.reload();
            },
            onTableInitComplete: function () {
                var self = this;
                $(this.$el).parents('.dataTables_wrapper').find('.dataTables_filter label').on('click', function (e) {
                    if (e.target !== this)
                        return;
                    if ($(this).hasClass("active")) {
                        $(this).removeClass("active");
                    }
                    else {
                        $(this).addClass("active");
                        $(this).children("input[type='search']").delay(200).queue(function () { $(this).focus(); $(this).dequeue(); });
                    }
                });
                @if (!authorizedUser.IsObserver && !authorizedUser.IsObserving)
                {
                    <text>
                        var firstHeader = this.table.column(0).header();
                        $(firstHeader).html('<input class="double-checkbox" id="check-all" type="checkbox">' +
                            '<label for="check-all">' +
                            '<span class="tick"></span>' +
                            '</label>');
                        $('#check-all').change(function() {
                            if (!this.checked) {
                                self.table.rows().deselect();
                                $(self.table.rows).find(".checkbox-filter").prop('checked', false);
                            } else {
                                self.table.rows().select();
                                $(self.table.rows).find(".checkbox-filter").prop('checked', true);
                            }
                        });
                    </text>
                }
                    }
        },
        mounted: function() {
            var self = this;
            var options = $.extend({
                processing: true,
                serverSide: true,
                language:
                {
                    "url": window.input.settings.config.dataTableTranslationsUrl,
                },
                searchHighlight: true,
                pagingType: "full_numbers",
                lengthChange: false, // do not show page size selector
                pageLength: 20, // page size
                dom: "frtp",
                conditionalPaging: true
            }, this.tableOptions);

            options.ajax.data = function (d) {
                self.addParamsToRequest(d);
            };

            options.ajax.complete = function (response) {
                self.responseProcessor(response.responseJSON);
            };

            this.table = $(this.$el).DataTable(options);
            this.table.on('init.dt', this.onTableInitComplete);
            this.table.on('select', function (e, dt, type, indexes) {
                self.$emit('select', e, dt, type, indexes);
            });
            this.table.on('deselect', function (e, dt, type, indexes) {
                self.$emit('deselect', e, dt, type, indexes);
            });
            this.table.on('click', 'tbody td', function () {
                var cell = self.table.cell(this);

                if (cell.index().column > 0) {
                    var rowId = self.table.row(this).id();
                    var columns = self.table.settings().init().columns;

                    self.$emit('cell-clicked', columns[this.cellIndex].name, rowId, cell.data());
                }
            });
            this.$emit('DataTableRef', this.table);
        }
    });
</script>
