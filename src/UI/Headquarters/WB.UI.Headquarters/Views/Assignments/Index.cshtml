@model WB.UI.Headquarters.Controllers.AssignmentsFilters

@{
    ViewBag.Title = Pages.Assignments_PageTitle;
    Layout = "~/Views/Shared/_MainLayout.cshtml";
}

@section scripts
{
    @Scripts.Render("~/js/common")
    @Scripts.Render("~/js/assignments")

    <script type="text/javascript">
        var tableOptions = {
            rowId: "id",
            deferLoading: 0,
            order: [[5, 'desc']],
            columns: [
                {
                    orderable: false,
                    className: 'checkbox-cell',
                    render: function(data, type, row) {
                        var checkboxId = 'check-' + row.id;
                        var compiled =
                            _.template('<input class="checkbox-filter" type="checkbox" value="<%= id %>" id="<%= checkboxId %>"><label for="<%= checkboxId %>"><span class="tick"></span></label>');

                        return compiled({ 'id': row.id, 'checkboxId': checkboxId });
                    }
                },
                {
                    data: "id",
                    name: "Id",
                    title: "Id"
                },
                {
                    data: "responsible",
                    name: "Responsible.Name",
                    title: "@Common.Responsible"
                },
                {
                    data: "capacity",
                    name: "Capacity",
                    "class": "type-numeric",
                    title: "@Assignments.Capacity",
                    orderable: true,
                    searchable: false,
                    render: function(data) {
                        if (data == null) {
                            return "<span>@Assignments.Unlimited</span>";
                        }
                        return data;
                    }
                },
                {
                    data: "identifyingQuestions",
                    title: "@Assignments.IdentifyingQuestions",
                    "class": "prefield-column first-identifying last-identifying sorting_disabled visible",
                    orderable: false,
                    searchable: false,
                    render: function(data) {
                        var strings = [];
                        for (var questionText in data) {
                            if (data.hasOwnProperty(questionText)) {
                                strings.push(questionText + ": " + data[questionText]);
                            }
                        }
                        return _.join(strings, ", ");
                    }
                },
                {
                    data: "updatedAtUtc",
                    name: "UpdatedAtUtc",
                    title: "@Assignments.UpdatedAt",
                    searchable: false,
                    render: function(data) {
                        var date = moment.utc(data);
                        return date.local().format('lll');
                    }
                },
                {
                    data: "createdAtUtc",
                    name: "CreatedAtUtc",
                    title: "@Assignments.CreatedAt",
                    searchable: false,
                    render: function(data) {
                        var date = moment.utc(data);
                        return date.local().format('lll');
                    }
                }
            ],
            ajax: {
                url:
                    "@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "AssignmetsApi", action = "Get"})",
                type: "GET",
                contentType: 'application/json'
            },
            select: {
                style: 'multi',
                selector: 'td>label'
            },
            fixedColumns: {
                leftColumns: 1
            }
        };

        var app = new Vue({
            data: {
                responsibleId: null,
                questionnaireId: null,
                wasInitialized: false,
                questionnaireParams: { censusOnly: false },
                isLoading: false,
                tableOptions: tableOptions,
                selectedRows: []
            },
            methods: {
                addParamsToRequest: function(requestData) {
                    requestData.responsibleId = (this.responsibleId || {}).key;
                    requestData.questionnaireId = (this.questionnaireId || {}).key;
                },
                responseProcessor: function(response) {
                    this.isLoading = false;
                },
                userSelected: function(newValue) {
                    this.responsibleId = newValue;
                },
                questionnaireSelected: function(newValue) {
                    this.questionnaireId = newValue;
                },
                startWatchers: function(props, watcher) {
                    var iterator = function(prop) {
                        this.$watch(prop, watcher);
                    };
                    props.forEach(iterator, this);
                },
                reloadTable: function() {
                    this.isLoading = true;
                    this.$refs.table.reload(self.reloadTable);
                },
                onSelect: function() {
                    console.info('bkah');
                }
            },
            mounted: function () {
                var self = this;
                document.querySelector("main").classList.remove("hold-transition");
                document.querySelector("footer").classList.add("footer-adaptive");

                this.startWatchers(['responsibleId', 'questionnaireId'], this.reloadTable.bind(self));
                this.reloadTable();
                this.$refs.table.$on('select',
                    function(e, dt) {
                        self.selectedRows.push(dt.id());
                    });
                this.$refs.table.$on('deselect',
                    function (e, dt) {
                        Vue.set(self, "selectedRows", _.without(self.selectedRows, dt.id()));
                    });
            }
        });

        window.onload = function() {
            Vue.http.headers.common['Authorization'] = input.settings.acsrf.token;

            app.$mount('#app');
        }
    </script>
}


<main class="hold-transition" id="app">
    <div class="container-fluid">
        <div class="row">
            <aside class="filters">
                <div class="foldback-button" id="hide-filters">
                    <span class="arrow"></span>
                    <span class="arrow"></span>
                    <span class="glyphicon glyphicon-tasks" aria-hidden="true"></span>
                </div>
                <div class="filters-container">
                    <h4>@Pages.FilterTitle</h4>
                    <div class="block-filter">
                        <h5>@Pages.Template</h5>
                        <typeahead data-vv-name="questionnaireId"
                                   data-vv-as="questionnaire"
                                   placeholder="@Common.Any"
                                   control-id="questionnaireId"
                                   :ajax-params="questionnaireParams"
                                   :value="questionnaireId"
                                   v-on:selected="questionnaireSelected"
                                   fetch-url="@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "QuestionnairesApi", action = "QuestionnairesCombobox"})"></typeahead>
                    </div>
                    <div class="block-filter">
                        <h5>@Common.Responsible</h5>
                        <typeahead placeholder="@Common.Any"
                                   control-id="responsibleId"
                                   :value="responsibleId"
                                   :ajax-params="{ }"
                                   v-on:selected="userSelected"
                                   fetch-url="@(Model.IsSupervisor ? 
                                                Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "Teams", action = "InterviewersCombobox"}) : 
                                                Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "Teams", action = "ResponsiblesCombobox"}))"></typeahead>
                    </div>
                </div>
            </aside>

            <div class="main-information">
                <div class="page-header clearfix">
                    <h1>
                        @Assignments.AssignmentsHeader
                    </h1>
                </div>
                <div class="interviews-info">
                    <div class="table-wrapper interviews-large-screen">
                        <assignments-table ref="table"
                                           :add-params-to-request="addParamsToRequest"
                                           :response-processor="responseProcessor"
                                           :table-options="tableOptions"></assignments-table>
                    </div>
                    
                    <div class="panel panel-table" v-if="selectedRows.length">
                        <div class="panel-body">
                            <input class="double-checkbox-white" type="checkbox" checked="" disabled>
                            <label>
                                <span class="tick"></span> 
                                @string.Format(Assignments.AssignmentsSelected, "{{selectedRows.length}}")
                            </label> 
                            <button class="btn btn-lg btn-primary">@Common.Assign</button>
                            <button class="btn btn-link">@Common.Delete</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>
