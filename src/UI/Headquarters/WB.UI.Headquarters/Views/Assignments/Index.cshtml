@using Main.Core.Entities.SubEntities
@using WB.Core.BoundedContexts.Headquarters
@using WB.Core.BoundedContexts.Headquarters.Services
@using WB.Core.GenericSubdomains.Portable.ServiceLocation
@model WB.UI.Headquarters.Controllers.AssignmentsFilters

@{
    ViewBag.Title = Pages.Assignments_PageTitle;
    Layout = "~/Views/Shared/_MainLayoutVue.cshtml";

    var authorizedUser = ServiceLocator.Current.GetInstance<IAuthorizedUser>();
}

@section scripts
{
    @Scripts.Render("~/js/assignments")
    @Html.Partial("typeahead")
    @Html.Partial("assignmentslist")

    <script type="text/javascript">

        var navigator = window.navigator;
        var locale = navigator.languages
            ? navigator.languages[0]
            : (navigator.language || navigator.userLanguage)
        moment.locale(locale);

        var assignmentsEndpoint = "@Url.Content("~/api/Assignments")";
        var $profileUrl = '@Url.Action("Profile", "Interviewer")';
        var $interviewsUrl = "@(Model.IsSupervisor ? Url.Action("Interviews", "Survey") : Url.Action("Interviews", "HQ"))";
        var compiled =
            _.template(
                '<input class="checkbox-filter" type="checkbox" value="<%= id %>"' +
                ' id="<%= checkboxId %>"><label for="<%= checkboxId %>">' +
                '<span class="tick"></span></label>');

        var tableOptions = {
            rowId: "id",
            deferLoading: 0,
            order: [[6, 'desc']],
            columns: [
                @if (!authorizedUser.IsObserver && !authorizedUser.IsObserving)
                {
                    <text>
                        {
                            orderable: false,
                            className: 'checkbox-cell',
                            render: function(data, type, row) {
                                var checkboxId = 'check-' + row.id;
                                return compiled({ 'id': row.id, 'checkboxId': checkboxId });
                            },
                            responsivePriority: 1
                        },
                    </text>
                }
                {
                    data: "id",
                    name: "Id",
                    title: "Id",
                    responsivePriority: 2
                },
                {
                    data: "responsible",
                    name: "Responsible.Name",
                    title: "@Common.Responsible",
                    responsivePriority: 3,
                    render: function (data, type, row) {
                        var resultString = '<span class="' + row.responsibleRole.toLowerCase() + '">';
                        if (row.responsibleRole === '@UserRoles.Interviewer.ToString()') {
                            resultString += '<a href="' + $profileUrl + "/" + row.responsibleId + '">' + data + "</a>";
                        } else {
                            resultString += data;
                        }
                        resultString += '</span>';
                        return resultString;
                    }
                },
                @if (Model.IsHeadquarter)
                {
                    <text>
                        {
                            data: "interviewsCount",
                            name: "InterviewsCount",
                            "class": "type-numeric",
                            searchHighlight: false,
                            searchable: false,
                            title: "@Assignments.InterviewsCount",
                            render: function(data, type, row) {
                                var result = "<a href='" + $interviewsUrl + "?assignmentId=" + row.id + "'>" + data + "</a>";
                                return result;
                            }
                        },
                        {
                            data: "quantity",
                            name: "Quantity",
                            "class": "type-numeric",
                            title: "@Assignments.Quantity",
                            orderable: true,
                            searchable: false,
                            "defaultContent": "<span>@Assignments.Unlimited</span>"
                        },
                    </text>
                }
                else
                {
                    <text>
                    {
                        data: "quantity",
                        name: "Quantity",
                        "class": "type-numeric",
                        title: "@Assignments.InterviewsNeeded",
                        orderable: false,
                        searchable: false,
                        render: function (data, type, row) {
                            return row.quantity - row.interviewsCount;
                        },
                        "defaultContent": "<span>@Assignments.Unlimited</span>"
                    },
                    </text>
                }
                {
                    data: "identifyingQuestions",
                    title: "@Assignments.IdentifyingQuestions",
                    "class": "prefield-column first-identifying last-identifying sorting_disabled visible",
                    orderable: false,
                    searchable: false,
                    render: function(data) {
                        var questionsWithTitles = _.map(data,
                            function(question) { return question.title + ": " + question.answer });
                        return _.join(questionsWithTitles, ", ");
                    },
                    responsivePriority: 4
                },
                {
                    data: "updatedAtUtc",
                    name: "UpdatedAtUtc",
                    title: "@Assignments.UpdatedAt",
                    searchable: false,
                    render: function(data) {
                        var date = moment.utc(data);
                        return date.local().format('@Extensions.ClientDateTimeFormat');
                    }
                },
                {
                    data: "createdAtUtc",
                    name: "CreatedAtUtc",
                    title: "@Assignments.CreatedAt",
                    searchable: false,
                    render: function(data) {
                        var date = moment.utc(data);
                        return date.local().format('@Extensions.ClientDateTimeFormat');
                    }
                }
            ],
            ajax: {
                url: assignmentsEndpoint,
                type: "GET",
                contentType: 'application/json'
            },
            select: {
                style: 'multi',
                selector: 'td>.checkbox-filter'
            },
            sDom: 'f<"table-with-scroll"t>ip'
        };

        var assignmentsComponent = {
            template: '#assigmnents-list-template',
            data: function () {
                return {
                    responsibleId: null,
                    questionnaireId: null,
                    wasInitialized: false,
                    questionnaireParams: { censusOnly: false },
                    isLoading: false,
                    tableOptions: tableOptions,
                    selectedRows: [],
                    totalRows: 0,
                    showArchive: false,
                    newResponsibleId: null,
                    editedRowId: null,
                    editedQuantity: null,
                    questionnaireApiUrl: "@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "QuestionnairesApi", action = "QuestionnairesCombobox"})",
                    questionnaireByIdApiUrl: "@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "QuestionnairesApi", action = "QuestionnairesComboboxById" })",
                    responsibleApiUrl: "@(Model.IsSupervisor ? Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "Teams", action = "InterviewersCombobox"}) :
                                                               Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "Teams", action = "ResponsiblesCombobox"}))"
                }
            },
            methods: {
                addParamsToRequest: function(requestData) {
                    requestData.responsibleId = (this.responsibleId || {}).key;
                    requestData.questionnaireId = (this.questionnaireId || {}).key;
                    requestData.showArchive = this.showArchive;
                    requestData.dateStart = this.dateStart;
                    requestData.dateEnd = this.dateEnd;
                    requestData.userRole = this.userRole;
                },
                responseProcessor: function(response) {
                    this.isLoading = false;
                    this.totalRows = response.recordsTotal;
                },
                userSelected: function(newValue) {
                    this.responsibleId = newValue;
                },
                questionnaireSelected: function(newValue) {
                    this.questionnaireId = newValue;
                },
                newResponsibleSelected: function(newValue) {
                    this.newResponsibleId = newValue;
                },
                startWatchers: function(props, watcher) {
                    var iterator = function(prop) {
                        this.$watch(prop, watcher);
                    };
                    props.forEach(iterator, this);
                },
                reloadTable: function() {
                    var self = this;
                    this.isLoading = true;
                    this.selectedRows.splice(0, this.selectedRows.length);
                    this.$refs.table.reload(self.reloadTable);

                    this.addParamsToQueryString();
                },
                addParamsToQueryString: function() {
                    var queryString = { showArchive: this.showArchive };

                    if (this.questionnaireId != null) {
                        queryString.questionnaire =
                            this.questionnaireId.value.substring(this.questionnaireId.value.indexOf(")")+2,
                                this.questionnaireId.value.length);
                        queryString.version = this.questionnaireId.key.split("$")[1];
                    }

                    if (this.responsibleId)
                        queryString.responsible = this.responsibleId.value;
                    if (this.dateStart)
                        queryString.dateStart = this.dateStart;
                    if (this.dateEnd)
                        queryString.dateEnd = this.dateEnd;
                    if (this.userRole)
                        queryString.userRole = this.userRole;

                    this.$router.push({ query: queryString });
                },
                archiveSelected: function() {
                    this.$http.delete(assignmentsEndpoint,
                            {
                                body: this.selectedRows
                            })
                        .then(function() {
                            this.reloadTable();
                        });
                },
                unarchiveSelected: function() {
                    this.$http.post(assignmentsEndpoint + "/Unarchive",
                            this.selectedRows
                        )
                        .then(function() {
                            this.reloadTable();
                        });
                },
                assignSelected: function() {
                    $('#assignModal').modal({
                        keyboard: false
                    });
                },
                assign: function() {
                    this.$http.post(assignmentsEndpoint + "/Assign",
                        {
                            responsibleId: this.newResponsibleId.key,
                            ids: this.selectedRows
                        }).then(function() {
                        $('#assignModal').modal('hide');
                        this.newResponsibleId = null;
                        this.reloadTable();
                    });
                },
                rowsSelected: function(e, dt, type, ar) {
                    for (var i = 0; i < ar.length; i++) {
                        var rowId = parseInt(dt.row(ar[i]).id());
                        if (!_.includes(this.selectedRows, rowId)) {
                            this.selectedRows.push(rowId);
                        }
                    }
                },
                rowsDeselected: function(e, dt, type, ar) {
                    for (var i = 0; i < ar.length; i++) {
                        var rowId = dt.row(ar[i]).id();
                        Vue.set(this, "selectedRows", _.without(this.selectedRows, parseInt(rowId)));
                    }
                },
                cellClicked: function(columnName, rowId, cellData) {
                    var isHq = @Model.IsHeadquarter.ToString().ToLower();
                    if (columnName === 'Quantity' && isHq && !this.showArchive) {
                        this.editedRowId = rowId;
                        this.editedQuantity = cellData;
                        $('#editQuantityModal').modal('show');
                    }
                },
                updateQuantity: function() {
                    var self = this;
                    this.$validator.validateAll().then(function() {
                        var patchQuantityUrl = assignmentsEndpoint + "/" + self.editedRowId + "/SetQuantity";
                        var targetQuantity = null;
                        if (self.editedQuantity == null || self.editedQuantity === "") {
                            targetQuantity = 1;
                        } else if (self.editedQuantity == -1) {
                            targetQuantity = null;
                        } else {
                            targetQuantity = self.editedQuantity;
                        }

                        self.$http.patch(patchQuantityUrl, {
                                quantity: targetQuantity
                            })
                            .then(function() {
                                $('#editQuantityModal').modal('hide');
                                self.editedQuantity = self.editedRowId = null;
                                self.reloadTable();
                            });
                    });
                    return false;
                },
                loadResponsibleIdByName: function(onDone) {
                    if (this.$route.query.responsible != undefined) {
                        var requestParams = $.extend({ query: this.$route.query.responsible, pageSize: 1, cache: false },
                            this.ajaxParams);
                        this.$http.get(this.responsibleApiUrl, { params: requestParams })
                            .then(function(response) {
                                onDone(response.body.options.length > 0 ? response.body.options[0].key : undefined);
                            });
                    } else onDone();
                },
                loadQuestionnaireId: function (onDone) {

                    if (this.$route.query.questionnaire != undefined) {
                        var requestParams = $.extend({ query: this.$route.query.questionnaire, pageSize: 1, cache: false }, this.ajaxParams);
                        this.$http.get(this.questionnaireApiUrl, { params: requestParams })
                            .then(function(response) {
                                if (response.body.options.length > 0) {
                                    onDone(response.body.options[0].key, response.body.options[0].value);
                                }
                            });
                    } else if (this.$route.query.questionnaireId != undefined) {
                        var requestParams = $.extend({ questionnaireIdentity: this.$route.query.questionnaireId, cache: false }, this.ajaxParams);
                        this.$http.get(this.questionnaireByIdApiUrl, { params: requestParams })
                            .then(function (response) {
                                if (response.body.options.length > 0) {
                                    onDone(response.body.options[0].key, response.body.options[0].value);
                                }
                            });                        
                    } else onDone();
                }
            },
            mounted: function() {
                var self = this;
                $("main").removeClass("hold-transition");
                $("footer").addClass("footer-adaptive");

                this.showArchive = this.$route.query.showArchive != undefined &&
                    this.$route.query.showArchive === "true";

                this.dateStart = this.$route.query.dateStart;
                this.dateEnd = this.$route.query.dateEnd;
                this.userRole = this.$route.query.userRole;

                self.loadQuestionnaireId(function (questionnaireId, questionnaireTitle) {

                    if (questionnaireId != undefined) {
                        self.questionnaireId = {
                            key: questionnaireId,
                            value: questionnaireTitle
                        };
                    }

                    self.loadResponsibleIdByName(function (responsibleId) {
                        if (responsibleId != undefined)
                            self.responsibleId = { key: responsibleId, value: self.$route.query.responsible };

                        self.reloadTable();
                        self.startWatchers(['responsibleId', 'questionnaireId', 'showArchive'], self.reloadTable.bind(self));

                        $('.ddl').selectpicker('val', self.showArchive.toString());
                    });

                });
            }
        };
    </script>
}


<main class="hold-transition" id="app">
    <router-view></router-view>
</main>

<script type="text/x-template" id="assigmnents-list-template">
    <div>
        <div class="container-fluid">
            <div class="row">
                <aside class="filters">
                    <div class="foldback-button" id="hide-filters">
                        <span class="arrow"></span>
                        <span class="arrow"></span>
                        <span class="glyphicon glyphicon-tasks" aria-hidden="true"></span>
                    </div>
                    <div class="filters-container">
                        <h4>@Pages.FilterTitle</h4>
                        <div class="block-filter">
                            <h5>@Common.Questionnaire</h5>
                            <typeahead data-vv-name="questionnaireId"
                                       data-vv-as="questionnaire"
                                       placeholder="@Common.AllQuestionnaires"
                                       control-id="questionnaireId"
                                       :ajax-params="questionnaireParams"
                                       :value="questionnaireId"
                                       v-on:selected="questionnaireSelected"
                                       :fetch-url="questionnaireApiUrl"></typeahead>
                        </div>
                        <div class="block-filter">
                            <h5>@Common.Responsible</h5>
                            <typeahead placeholder="@Common.AllResponsible"
                                       control-id="responsibleId"
                                       :value="responsibleId"
                                       :ajax-params="{ }"
                                       v-on:selected="userSelected"
                                       :fetch-url="responsibleApiUrl"></typeahead>
                        </div>
                        <div class="block-filter">
                            <h5>@Assignments.ShowArchived</h5>
                            <select class="ddl" v-model="showArchive">
                                <option v-bind:value="false">@Assignments.Active</option>
                                <option v-bind:value="true">@Assignments.Archived</option>
                            </select>
                        </div>
                    </div>
                </aside>

                <div class="main-information">
                    <div class="page-header clearfix">
                        <h1>
                            @Assignments.AssignmentsHeader ({{totalRows}})
                        </h1>
                    </div>
                    <div class="interviews-info">
                        <div class="table-wrapper">
                            <assignments-table ref="table"
                                               :add-params-to-request="addParamsToRequest"
                                               :response-processor="responseProcessor"
                                               :table-options="tableOptions"
                                               v-on:select="rowsSelected"
                                               v-on:deselect="rowsDeselected"
                                               v-on:cell-clicked="cellClicked"></assignments-table>
                        </div>

                        <div class="panel panel-table" v-if="selectedRows.length">
                            <div class="panel-body">
                                <input class="double-checkbox-white" type="checkbox" checked="" disabled>
                                <label>
                                    <span class="tick"></span>
                                    @string.Format(Assignments.AssignmentsSelected, "{{selectedRows.length}}")
                                </label>
                                @if (Model.IsHeadquarter)
                                {
                                    <button class="btn btn-lg btn-primary" v-if="showArchive" v-on:click="unarchiveSelected">@Assignments.Unarchive</button>
                                }

                                <button class="btn btn-lg btn-primary" v-if="!showArchive" v-on:click="assignSelected">@Common.Assign</button>

                                @if (Model.IsHeadquarter)
                                {
                                    <button class="btn btn-lg btn-danger" v-if="!showArchive" v-on:click="archiveSelected">@Assignments.Archive</button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="assignModal" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true"></span></button>
                        <h3>@Pages.ConfirmationNeededTitle</h3>
                    </div>
                    <div class="modal-body">
                        <p>@string.Format(Assignments.NumberOfAssignmentsAffected, "{{selectedRows.length}}")</p>
                        <form onsubmit="return false;">
                            <div class="form-group">
                                <label class="control-label" for="newResponsibleId">@Assignments.SelectResponsible</label>
                                <typeahead placeholder="@Common.Responsible"
                                           control-id="newResponsibleId"
                                           :value="newResponsibleId"
                                           :ajax-params="{ }"
                                           v-on:selected="newResponsibleSelected"
                                           :fetch-url="responsibleApiUrl">
                                </typeahead>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" v-on:click="assign" :disabled="!newResponsibleId">@Common.Assign</button>
                        <button type="button" class="btn btn-link" data-dismiss="modal">@Common.Cancel</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="editQuantityModal" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true"></span></button>
                        <h3>@string.Format(Assignments.ChangeQuantityModalTitle, "{{editedRowId}}")</h3>
                    </div>
                    <div class="modal-body">
                        <p>
                            @Assignments.QuantityExplanation
                        </p>
                        <form onsubmit="return false;">
                            <div class="form-group" v-bind:class="{'has-error': errors.has('editedQuantity')}">
                                <label class="control-label" for="newQuantity">@Assignments.Quantity</label>
                                <input type="text" class="form-control"
                                       v-model.trim="editedQuantity"
                                       name="editedQuantity"
                                       number
                                       v-validate="'regex:^-?([0-9]+)$|min_value:-1'"
                                       maxlength="9"
                                       autocomplete="off"
                                       v-on:keyup.enter="updateQuantity"
                                       id="newQuantity"
                                       placeholder="1">
                            </div>
                        </form>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-primary" v-on:click="updateQuantity">@Common.Save</button>
                            <button type="button" class="btn btn-link" data-dismiss="modal">@Common.Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</script>

<script>

    Vue.http.headers.common['Authorization'] = input.settings.acsrf.token;
    Vue.use(VeeValidate);

    var router = new VueRouter({
        mode: 'history',
        base: '@Url.Action("Index", "Assignments")',
        routes: [{ path: '/', component: assignmentsComponent }]
    });

    var app = new Vue({ router: router }).$mount('#app');

    window.onload = function() {
        $('#editQuantityModal').on('shown.bs.modal',
            function() {
                $('#newQuantity').focus();
            });
    }
</script>
