@using Main.Core.Entities.SubEntities
@using Microsoft.Practices.ServiceLocation
@using WB.Core.BoundedContexts.Headquarters.Services
@using WB.UI.Headquarters.Resources
@using WB.UI.Shared.Web.Extensions

@model WB.Core.SharedKernels.SurveyManagement.Web.Models.InterviewersModel
    
@{
    Layout = "~/Views/Shared/_MainLayout.cshtml";
    ViewBag.Title = Pages.Interviewers_Title;
    var identityManager = ServiceLocator.Current.GetInstance<IIdentityManager>();
}

@{ bool isVisibleSupervisorColumn = identityManager.IsCurrentUserHeadquarter || identityManager.IsCurrentUserAdministrator; }
@{ bool isAdmin = identityManager.IsCurrentUserAdministrator; }


@section scripts
{
    @Scripts.Render("~/js/main-no-libs")
    @Scripts.Render("~/js/list")
    @Scripts.Render("~/js/interviewers")

    @Scripts.Render("~/js/common")

    <script type="text/javascript">
        $(document)
            .ready(function() {
                $("footer").addClass("footer-adaptive");

                $("#hide-filters")
                    .click(function() {
                        $(".filters").toggleClass("hidden-filters");
                        $(this).parents('.row').toggleClass("fullscreen-hidden-filters");
                        $("footer").toggleClass("footer-adaptive");
                    });
                $("main").removeClass("hold-transition");
            });
    </script>

    <script type="text/javascript">
        'use strict';

        Supervisor.VM.InterviewersNew = function(listViewUrl,
            commandExecutionUrl,
            interviewersPageUrl,
            supervisorsUrl,
            ajax,
            notifier) {
            Supervisor.VM.InterviewersNew.superclass.constructor.apply(this, [commandExecutionUrl]);

            var $commandsUrl = '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "CommandApi", action = "ExecuteCommands" })';

            var archiveUserCommad = "ArchiveUserCommad";
            var unArchiveUserCommad = "UnarchiveUserCommand";
            var self = this;



            self.Url = new Url();
            self.SupervisorUrl = supervisorsUrl;
            self.IsSupervisorsLoading = ko.observable(false);
            self.Supervisors = function(query, sync, pageSize) {
                self.IsSupervisorsLoading(true);
                self.SendRequest(self.SupervisorUrl,
                    { query: query, pageSize: pageSize, showLocked: true },
                    function(response) {
                        sync(response.Users, response.TotalCountByQuery);
                    },
                    true,
                    true,
                    function() {
                        self.IsSupervisorsLoading(false);
                    });
            }
            self.SelectedSupervisor = ko.observable();

            self.Archived = ko.observable(false);
            self.ConnectedToDevice = ko.observable('');

            self.SelectedItems = ko.observableArray([]);


            self.getConfirmAndSendCommand = function(confirmMessage, commandName) {
                notifier.confirm("@Pages.ConfirmationNeededTitle",
                    confirmMessage,
                    // confirm
                    function() {
                        var commands = ko.utils.arrayMap(self.SelectedItems(),
                            function(rawItem) {
                                return ko.toJSON({ userId: rawItem });
                            });

                        var command = {
                            type: commandName,
                            commands: commands
                        };

                        ajax.sendRequest($commandsUrl, "post", command, false,
                            // onSuccess
                            function (data) {
                                var failedCommands = ko.utils.arrayFilter(data.CommandStatuses, function (cmd) {
                                    return !cmd.IsSuccess;
                                });

                                if (failedCommands.length > 0) {
                                    var failedDomainExceptions = ko.utils.arrayMap(failedCommands, function (failedCommand) {
                                        if (!Supervisor.Framework.Objects.isUndefined(failedCommand.DomainException) && failedCommand.DomainException !== null)
                                            return failedCommand.DomainException;
                                        else {
                                            return input.settings.messages.unhandledExceptionMessage;
                                        }
                                    });
                                    $.each(failedDomainExceptions, function (index, message) {
                                        notifier.showError("Operation failed" ,  message );
                                    });
                                } 
                            });
                    },
                    // cancel
                    function() {});
            }


            self.unarchiveInterviewers = function() {
                self
                    .getConfirmAndSendCommand("@Archived.UnarchiveInterviewerWarning \r\n @Pages.Interviewers_ArchiveInterviewersConfirm", unArchiveUserCommad);
            };

            self.archiveInterviewers = function() {
                self.getConfirmAndSendCommand("@Pages.Interviewers_ArchiveInterviewersConfirmMessage",
                    archiveUserCommad);
            }

            self.updater = function() {};

            self.load = function(updater) {
                self.updater = updater;

                if (self.QueryString['supervisor'] != null) {
                    self.SelectedSupervisor({ UserName: self.QueryString['supervisor'] });
                }

                self.Archived(self.QueryString['archived']);
                self.ConnectedToDevice(self.QueryString['connectedToDevice']);

                self.Url.query['supervisor'] = self.QueryString['supervisor'] || "";
                self.Url.query['archived'] = self.QueryString['archived'] || "";
                self.Url.query['connectedToDevice'] = self.QueryString['connectedToDevice'] || "";

                self.SelectedSupervisor.subscribe(updater);
                self.Archived.subscribe(updater);
                self.ConnectedToDevice.subscribe(updater);
            };

            self.IsNothingSelected = ko.computed(function() {
                return $(self.SelectedItems()).length === 0;
            });
        };

        Supervisor.Framework.Classes.inherit(Supervisor.VM.InterviewersNew, Supervisor.VM.BasePage);

        var InterviewersListModel = function(ajax, notifier) {

            var allInterviewersApiUrl =
                '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "UsersApi", action = "AllInterviewers"})';
            var editUrl = '@Url.Action("Edit", "Interviewer", new {area = string.Empty})';


            var $interviewersPageUrl = '@Html.Raw(@Url.Action("Index", "Interviewers", new {}, Request.Url.Scheme))';
            var $interviewersApiUrl =
                '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "UsersApi", action = "Interviewers"})';
            var $supervisorsUrl =
                '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "Teams", action = "Supervisors"})';
            var $commandExecutionUrl =
                '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "CommandApi", action = "ExecuteCommands"})';

            var model = new Supervisor.VM.InterviewersNew($interviewersApiUrl,
                $commandExecutionUrl,
                $interviewersPageUrl,
                $supervisorsUrl,
                ajax,
                notifier);
            ko.applyBindings(model);

            var requestHeaders = {};
            requestHeaders[input.settings.acsrf.tokenName] = input.settings.acsrf.token;

            var onTableInitComplete = function() {
                $('.dataTables_filter label')
                    .on('click',
                        function(e) {
                            if (e.target !== this)
                                return;
                            $(this).toggleClass("active");
                            $(this).children("input[type='search']").delay(200).queue(function () { $(this).focus(); $(this).dequeue(); });

                            $(".column-questionnaire-title").toggleClass("padding-left-slide");
                        });
            };

            $.fn.dataTable.ext.errMode = 'none';

            var table = $('table#interviewers')
                .on('init.dt', onTableInitComplete)
                .on('error.dt',
                    function(e, settings, techNote, message) {
                        //location.reload();
                    })
                .DataTable({
                    processing: true,
                    language:
                    {
                        "url": window.input.settings.config.dataTableTranslationsUrl,
                        searchPlaceholder: "@Pages.Search"
                    },
                    serverSide: true,
                    ajax: {
                        url: allInterviewersApiUrl,
                        type: "POST",
                        headers: requestHeaders,
                        "data": function(d) {
                            model.SelectedItems.removeAll(); // move to before filter event

                            d.SupervisorName = _.isUndefined(model.SelectedSupervisor())
                                ? null
                                : model.SelectedSupervisor().UserName;
                            d.Archived = model.Archived();
                            d.ConnectedToDevice = model.ConnectedToDevice();
                        }
                    },
                    columns: [
                        @if (isAdmin)
                        {
                            <text>
                            {
                                "orderable": false,
                                render: function(data, type, row) {
                                    return "<input class=\"checkbox-filter\" id=\"cbx_" +
                                        row.userId +
                                        "\" value=\"" +
                                        row.userId +
                                        "\" type=\"checkbox\"> <label for=\"cbx_" +
                                        row.userId +
                                        "\"><span class=\"tick\"></span></label> ";
                                },
                                "class": "checkbox-cell"
                            },
                            </text>
                        }
                        {
                            data: "userName",
                            name: "UserName", // case-sensitive!
                            render: function(data, type, row) {
                                return "<a href=" + editUrl + "/" + row.userId + ">" + data + "</a>";
                            }
                        },
                        {
                            data: "creationDate",
                            name: "CreationDate", // case-sensitive!
                            "class": "changed-recently"
                        },
                        {
                            data: "email",
                            name: "Email", // case-sensitive!
                            render: function(data, type, row) {
                                return data ? "<a href='mailto:" + data + "'>" + data + "</a>" : "";
                            },
                            "class": "changed-recently"
                        },
                        @if (isVisibleSupervisorColumn)
                        {
                            <text>
                            {
                                "orderable":
                                false,
                                data:
                                "supervisorName",
                                name:
                                "SupervisorName", // case-sensitive!
                                "class":
                                "changed-recently"
                            }
                        ,</text>
                        }
                        {
                            "orderable": false,
                            data: "deviceId",
                            name: "DeviceId", // case-sensitive!
                            render: function(data, type, row) {
                                return (row.deviceId === null ? "No" : "Yes");
                            },
                            "class": "changed-recently"
                        }
                    ],
                    searchHighlight: true,
                    rowId: 'userId',
                    pagingType: "full_numbers",
                    lengthChange: false, // do not show page size selector
                    pageLength: 50, // page size
                    "order": [[1, 'asc']],
                    conditionalPaging: true
                });

            var updater = function() {

                table.ajax.reload();
            }

            model.load(updater);

            // Handle click on "Select all" control
            $('#check-all')
                .on('click',
                    function() {
                        // Get all rows with search applied
                        var rows = table.rows({ 'search': 'applied' }).nodes();
                        // Check/uncheck checkboxes for all rows in the table

                        var checkboxes = $('input[type="checkbox"]', rows);

                        var newState = this.checked;

                        _.forEach(checkboxes,
                            function(checkbox) {
                                if (newState) {
                                    if (!checkbox.checked) {
                                        model.SelectedItems.push(checkbox.value);
                                    }
                                } else {
                                    if (checkbox.checked) {
                                        var indexOfInterviewer = model.SelectedItems.indexOf(checkbox.value);
                                        model.SelectedItems.splice(indexOfInterviewer, 1);
                                    }
                                }
                         });

                        checkboxes.prop('checked', newState);

                    });

            // Handle click on checkbox to set state of "Select all" control
            $('#interviewers tbody')
                .on('change',
                    'input[type="checkbox"]',
                    function() {
                        // If checkbox is not checked
                        if (!this.checked) {
                            var indexOfInterviewer = model.SelectedItems.indexOf(this.value);
                            model.SelectedItems.splice(indexOfInterviewer, 1);

                            var el = $('#check-all').get(0);
                            // If "Select all" control is checked and has 'indeterminate' property
                            if (el && el.checked && ('indeterminate' in el)) {
                                // Set visual state of "Select all" control
                                // as 'indeterminate'
                                el.indeterminate = true;
                            }
                        } else {
                            model.SelectedItems.push(this.value);
                        }
                    });

        };

        $(function() {
            var notifier = new Notifier();
            var interviewersModel = new InterviewersListModel(new Ajax(notifier), notifier);
        });

    </script>
}

<main class="hold-transition">
    <div class="container-fluid">
        <div class="row">
            <aside class="filters">
                <div class="foldback-button" id="hide-filters">
                    <span class="arrow"></span>
                    <span class="arrow"></span>
                    <span class="glyphicon glyphicon-tasks" aria-hidden="true"></span>
                </div>

                <div class="filters-container">
                    <h4>@Pages.FilterTitle:</h4> 
                    @if (isVisibleSupervisorColumn)
                    {
                        <div class="block-filter">
                            <h5 >@Pages.Interviewers_SupervisorTitle</h5>
                            <div class="input-group">
                                <input class="form-control" placeholder="@Pages.AnyOption" data-bind="typeahead: SelectedSupervisor, typeaheadOptions: {source: Supervisors, displayText: function(item){return item.UserName}}, valueupdate:'afterkeydown'" type="text" />
                                <span data-bind="spinner: IsSupervisorsLoading, spinnerOptions: { 'left': 1, 'right': '50px' }"></span>
                                <div class="input-group-btn" data-bind="click: function(){ SelectedSupervisor(undefined); }">
                                    <div class="btn btn-default"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></div>
                                </div>
                            </div>
                        </div>
                    }

                    <div class="block-filter">
                        <h5>@Pages.Interviewers_ConnectedToDeviceTitle</h5>
                        <select data-bind="value: ConnectedToDevice" class="selectpicker">
                            <option value="">@Pages.AnyOption</option>
                            <option value="true">@Pages.Interviewers_Connected</option>
                            <option value="false">@Pages.Interviewers_NotConnected</option>
                        </select>
                    </div>

                    <div class="list-group-item-text">
                        <h5 >@Pages.Interviewers_ArchiveStatusTitle</h5>
                        <select data-bind="value: Archived" class="selectpicker">
                            <option value="false">@Pages.Interviewers_ActiveUsers</option>
                            <option value="true">@Pages.Interviewers_ArchivedUsers</option>
                        </select>
                    </div>
                </div>
            </aside>
            
            <div class="main-information">
                @Html.Partial("_alerts")
                <div class="page-header clearfix">
                    <div>
                        <h1>@Pages.Interviewers_Header</h1>
                        @if (isVisibleSupervisorColumn)
                        {
                            <a class="btn btn-success" href="@Url.Action("Create", "Interviewer", new {area = string.Empty})">
                                @Pages.Create
                            </a>
                        }
                    </div>
                </div>
                <table id="interviewers" class="table table-striped table-ordered table-bordered table-hover table-with-checkboxes">
                    <thead>
                    <tr>
                        @if (isAdmin)
                        {
                            <th class="sorting_disabled checkbox-cell">
                                <input class="double-checkbox" id="check-all" type="checkbox">
                                <label for="check-all">
                                    <span class="tick"></span>
                                </label>
                            </th>
                        }
                        <th>@Pages.Interviewers_UserNameTitle</th>
                        <th class="for-tablets" title="@Pages.Interviewers_CreationDateTooltip">@Pages.Interviewers_CreationDateTitle</th>
                        <th class="for-mobile-devices">@Pages.Interviewers_EmailTitle</th>
                        @if (isVisibleSupervisorColumn)
                        {
                            <th title="@Pages.Interviewers_SupervisorTooltip">@Pages.Interviewers_SupervisorTitle</th>
                        }
                        <th title="@Pages.Interviewers_ConnectedToDeviceTooltip">@Pages.Interviewers_ConnectedToDeviceTitle</th>
                    </tr>
                    </thead>
                </table>

                @if (isAdmin)
                {
                    <div class="panel panel-table" data-bind="visible: SelectedItems().length > 0">
                        <div class="panel-body">
                            <input class="double-checkbox-white" id="q1az" type="checkbox" checked disabled="disabled">
                            <label for="q1az">
                                <span class="tick"></span>  <span data-bind="text: SelectedItems().length + ' @Pages.Interviewers_Selected'"></span> 
                            </label>
                            <button type="button" class="btn btn-default btn-danger" data-bind="visible: Archived() != 'true', disable: IsNothingSelected, click: $root.archiveInterviewers">@Pages.Interviewers_Archive</button>
                            <button type="button" class="btn btn-default btn-danger" data-bind="visible: Archived() == 'true', disable: IsNothingSelected, click: $root.unarchiveInterviewers">@Pages.Interviewers_Unarchive</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</main>