@using WB.Core.BoundedContexts.Headquarters.Services
@using WB.Core.BoundedContexts.Headquarters.Views.User

@{
    Layout = "~/Views/Shared/_MainLayout.cshtml";
    ViewBag.Title = Pages.Interviewers_Title;
    var authorizedUser = DependencyResolver.Current.GetService<IAuthorizedUser>();

    bool isAdminOrHQ = authorizedUser.IsHeadquarter || authorizedUser.IsAdministrator;
    bool isAdmin = authorizedUser.IsAdministrator;
}

@section scripts
{
    @Scripts.Render("~/js/main-no-libs")
    @Scripts.Render("~/js/common")
    @Scripts.Render("~/js/list")
    @Scripts.Render("~/js/interviewers")

    <script type="text/javascript">

        var allInterviewersApiUrl =
            '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "UsersApi", action = "AllInterviewers"})';
        var $impersonateUrl = '@Url.Action("ObservePerson", "Account", new {area = string.Empty})';
        var $archiveUsersUrl =
            '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "UsersApi", action = "ArchiveUsers"})';
        var $interviewersPageUrl = '@Html.Raw(@Url.Action("Index", "Interviewers", new {}, Request.Url.Scheme))';
        var $supervisorsUrl =
            '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "Teams", action = "Supervisors"})';
        var $moveUserToAnotherTeamUrl =
            '@Url.RouteUrl("DefaultApiWithAction", new {httproute = "", controller = "UsersApi", action = "MoveUserToAnotherTeam"})';

        var notifier = new Notifier();
        var ajax = new Ajax(notifier);

        $(function() {
            var model = new Supervisor.VM.Interviewers(allInterviewersApiUrl,
                $archiveUsersUrl,
                ajax,
                $interviewersPageUrl,
                $supervisorsUrl,
                $moveUserToAnotherTeamUrl);
            model.moveInterviewerPopupTitle = "@Pages.Interviewers_MoveInterviewerPopupTitle";
            model.namesFormatMoreThanLimit = "@Pages.Interviewers_NamesFormatMoreThanLimit";
            model.namesFormatLessThanLimit = "@Pages.Interviewers_NamesFormatLessThanLimit";
            model.movingIsInProgress = "@Pages.Interviewers_MovingIsInProgress";
            model.movingCompleted = "@Pages.Interviewers_MovingCompleted";
            model.getDataTableColumns = function() {
                return [
                    @if (isAdminOrHQ && !authorizedUser.IsObserving)
                    {
                        <text>
                            {
                                "orderable": false,
                                render: function(data, type, row) {
                                    return "<input class=\"checkbox-filter\" id=\"cbx_" +
                                        row.userId +
                                        "\" value=\"" +
                                        row.userId +
                                        "\" type=\"checkbox\"> <label for=\"cbx_" +
                                        row.userId +
                                        "\"><span class=\"tick\"></span></label> ";
                                },
                                "class": "checkbox-cell"
                            },
                        </text>
                    }
                    {
                        data: "userName",
                        name: "UserName", // case-sensitive!
                        render: function(data, type, row) {
                            return !row.isArchived ? "<a href='@Url.Action("Profile", "Interviewer")/" +
                                row.userId +
                                "'>" +
                                data +
                                "</a>"
                                : data;
                        }
                    },
                    {
                        data: "creationDate",
                        name: "CreationDate", // case-sensitive!
                        "class": "changed-recently",
                        render: function (data) {
                            var localDate = moment.utc(data).local();
                            return localDate.format(window.CONFIG.dateFormat);
                        }
                    },
                    {
                        data: "email",
                        name: "Email", // case-sensitive!
                        render: function(data, type, row) {
                            return data ? "<a href='mailto:" + data + "'>" + data + "</a>" : "";
                        },
                        "class": "changed-recently"
                    },
                    @if (isAdminOrHQ)
                    {
                        <text>
                            {
                                "orderable":
                                    false,
                                data:
                                    "supervisorName",
                                name:
                                    "SupervisorName", // case-sensitive!
                                "class":
                                    "changed-recently"
                            },</text>
                    }
                    {
                        orderable: true,
                        data: "enumeratorVersion",
                        name: "EnumeratorVersion", // case-sensitive!
                        createdCell: function(td, cellData, rowData, row, col) {
                            if (cellData) {
                                $(td).css('color', rowData.isUpToDate ? 'green' : 'red');
                            }
                        },
                        "defaultContent":
                            "@HttpUtility.JavaScriptStringEncode(Pages.Interviewers_InterviewerNeverConnected)",
                        "class": "changed-recently"
                    },
                    {
                        orderable: false,
                        data: "trafficUsed",
                        name: "TrafficUsed", // case-sensitive!
                        class: "type-numeric",
                        render: function (data, type, row) {
                            var formattedKB = data.toLocaleString();
                            return data > 0 ? formattedKB + " Kb" : "0";
                        }
                    }
                ];
            };

            model.unarchiveInterviewers = function() {
                model.getConfirmAndSendRequest(notifier,
                    "@Pages.ConfirmationNeededTitle",
                    "@Archived.UnarchiveInterviewerWarning \r\n @Pages.Interviewers_ArchiveInterviewersConfirm",
                    "@Pages.OperationFailedTitle",
                    false);
            };

            model.archiveInterviewers = function() {
                model.getConfirmAndSendRequest(notifier,
                    "@Pages.ConfirmationNeededTitle",
                    "@Pages.Interviewers_ArchiveInterviewersConfirmMessage",
                    "@Pages.OperationFailedTitle",
                    true);
            };

            @if (authorizedUser.IsObserver && !authorizedUser.IsObserving)
            {
                <text>
                    model.onTableInitCompleteExtra = function() {

                        var selectRowAndGetData = function(selectedItem) {
                            var rowIndex = selectedItem.parent().children().index(selectedItem);
                            model.Datatable.row(rowIndex).select();
                            var selectedRows = model.Datatable.rows({ selected: true }).data()[0];
                            return selectedRows;
                        }

                        var impersonateAsUser = function(key, opt) {
                            var selectedRow = selectRowAndGetData(opt.$trigger);
                            window.location.href = $impersonateUrl + '?personName=' + selectedRow.userName;
                        };

                        var buildMenuItem = function(selectedRow) {
                            var items = {}

                            items["impersonate"] =
                            {
                                name: "@Users.ImpersonateAsUser",
                                callback: impersonateAsUser
                            };
                            return items;
                        };

                        var contextMenuOptions = {
                            selector: "table#data_holder .with-context-menu",
                            autoHide: false,
                            build: function($trigger, e) {
                                var selectedRow = selectRowAndGetData($trigger);
                                var items = buildMenuItem(selectedRow);
                                return { items: items };
                            },
                            trigger: 'left',
                            zIndex:1050
                        };

                        $.contextMenu(contextMenuOptions);
                    };
                </text>
            }

            ko.applyBindings(model);
            model.load();
        });
    </script>
}

<main class="hold-transition">
    <div class="container-fluid">
        <div class="row">
            <aside class="filters">
                <div class="foldback-button" id="hide-filters">
                    <span class="arrow"></span>
                    <span class="arrow"></span>
                    <span class="glyphicon glyphicon-tasks" aria-hidden="true"></span>
                </div>

				<div class="filters-container">
					<h4>@Pages.FilterTitle</h4>
					@if (isAdminOrHQ)
					{
					<div class="block-filter">
						<h5>@Pages.Interviewers_SupervisorTitle</h5>
						<div class="input-group">
							<input class="form-control" placeholder="@Common.AllSupervisors" data-bind="typeahead: SelectedSupervisor, typeaheadOptions: {source: Supervisors, displayText: function(item){return item.UserName}}, valueupdate:'afterkeydown'" type="text" />
							<span data-bind="spinner: IsSupervisorsLoading, spinnerOptions: { 'left': 1, 'right': '50px' }"></span>
							<div class="input-group-btn" data-bind="click: function(){ SelectedSupervisor(undefined); }">
								<div class="btn btn-default"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></div>
							</div>
						</div>
					</div>
					}
					<div class="block-filter">
						<h5>@Users.InterviewerIssues</h5>
						<select data-bind="value: Facet" class="selectpicker facet">
							<option value="@InterviewerFacet.None">@EnumNames.InterviewerFacet_None</option>
							<option value="@InterviewerFacet.NeverSynchonized">@DevicesInterviewers.NeverSynchronized</option>
							<option value="@InterviewerFacet.NoAssignmentsReceived">@DevicesInterviewers.NoAssignments</option>
							<option value="@InterviewerFacet.NeverUploaded">@DevicesInterviewers.NeverUploaded</option>
							<option value="@InterviewerFacet.TabletReassigned">@DevicesInterviewers.TabletReassigned</option>
							<option value="@InterviewerFacet.OutdatedApp">@DevicesInterviewers.OldInterviewerVersion</option>
							<option value="@InterviewerFacet.OldAndroid">@DevicesInterviewers.OldAndroidVersion</option>
							<option value="@InterviewerFacet.LowStorage">@DevicesInterviewers.LowStorage</option>
						</select>
					</div>

					<div class="block-filter">
						<h5>@Pages.Interviewers_ArchiveStatusTitle</h5>
						<select data-bind="value: Archived" class="selectpicker">
							<option value="false">@Pages.Interviewers_ActiveUsers</option>
							<option value="true">@Pages.Interviewers_ArchivedUsers</option>
						</select>
					</div>
				</div>
            </aside>

			<div class="main-information">
				@Html.Partial("_alerts")
				<div class="page-header clearfix">
					<div class="neighbor-block-to-search">
						<div class="topic-with-button">
							<h1>@Html.Raw(string.Format(Users.InterviewersCountDescription, @"<span data-bind='text: formatNumber(UsersCount())'></span>"))</h1>
							@if (isAdminOrHQ && !authorizedUser.IsObserving)
							{
							<a class="btn btn-success" href="@Url.Action("Create", "Interviewer" , new {area=string.Empty})">
								@Users.AddInterviewer
							</a>
							}
						</div>
						<ol class="list-unstyled">
							@if (!authorizedUser.IsSupervisor && !authorizedUser.IsObserving)
							{
							<li>@Pages.Users_Interviewers_Instruction1</li>
							}
							<li>@Pages.Users_Interviewers_Instruction2</li>
						</ol>
					</div>
				</div>
				<div class="dataTables_wrapper no-footer">
					<table id="data_holder" class="table table-striped table-ordered table-bordered table-hover table-with-checkboxes"
						   data-order="[[ 1, &quot;asc&quot; ]]" data-searching="true">
						<thead>
                            <tr>
                                @if (isAdminOrHQ && !authorizedUser.IsObserving)
                                {
                                    <th class="sorting_disabled checkbox-cell">
                                        <input class="double-checkbox" id="check-all" type="checkbox">
                                        <label for="check-all">
                                            <span class="tick"></span>
                                        </label>
                                    </th>
                                }
                                <th>@Pages.Interviewers_UserNameTitle</th>
                                <th class="for-tablets" title="@Pages.Interviewers_CreationDateTooltip">@Pages.Interviewers_CreationDateTitle</th>
                                <th class="for-mobile-devices">@Pages.Interviewers_EmailTitle</th>
                                @if (isAdminOrHQ)
                                {
                                    <th title="@Pages.Interviewers_SupervisorTooltip">@Pages.Interviewers_SupervisorTitle</th>
                                }
                                <th title="@Pages.Interviewers_InterviewerVersionTooltip">@Pages.Interviewers_InterviewerVersion</th>
                                <th title="@Pages.InterviewerProfile_TotalTrafficUsedTooltip">@Pages.InterviewerProfile_TotalTrafficUsed</th>
                            </tr>
						</thead>
					</table>
				</div>
				@Html.Partial("_export-buttons")
				@if (isAdminOrHQ && !authorizedUser.IsObserving)
				{
				<div class="panel panel-table" data-bind="visible: SelectedItems().length > 0">
					<div class="panel-body">
						<input class="double-checkbox-white" id="q1az" type="checkbox" checked disabled="disabled">
						<label for="q1az">
							<span class="tick"></span>  <span data-bind="text: SelectedItems().length + ' @Pages.Interviewers_Selected'"></span>
						</label>
						@if (isAdmin)
						{
						<button type="button" class="btn btn-default btn-danger" data-bind="visible: Archived() != 'true', disable: IsNothingSelected, click: $root.archiveInterviewers">@Pages.Interviewers_Archive</button>
						<button type="button" class="btn btn-default btn-success" data-bind="visible: Archived() == 'true', disable: IsNothingSelected, click: $root.unarchiveInterviewers">@Pages.Interviewers_Unarchive</button>
						}
					    <button type="button" class="btn btn-default btn-warning last-btn" data-bind="disable: IsNothingSelected, click: $root.MoveToAnotherTeam">@Pages.Interviewers_MoveToAnotherTeam</button>
					</div>
				</div>
				}
			</div>
        </div>
    </div>

    <script type="text/html" id="move-interviewer-to-another-team-template">
        <div class="btn-group ">
            <div class="input-group">
                <input class="form-control with-clear-btn" id="txtNewSupervisorSearch" 
                       placeholder="@Common.Any" data-bind="typeahead: Users.AssignTo, typeaheadOptions: {source: Users.LoadUsers, displayText: function(item){return item.UserName}, afterSelect: UpdateCounter }, valueupdate:'afterkeydown'" type="text" />
                <span data-bind="spinner: Users.IsResponsiblesLoading, spinnerOptions: { 'left': 1, 'right': '50px' }"></span>
                <div class="input-group-btn" data-bind="click: ClearSelectedSupervisor" id="btnSupervisorSearchCancel">
                    <div class="btn btn-default"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></div>
                </div>
            </div>
        </div>
        <br />
        <br />
        <div data-bind="visible: InterviewersToStay().length > 0">
            <p>@Html.Raw(string.Format(Pages.Interviewers_InterviewersToStay, "<b data-bind='text: InterviewersToStayNamesOnly'></b>", "<b data-bind='text: SelectedSupervisor'></b>"))</p>
        </div>
        <div data-bind="visible: InterviewersToMove().length > 0">
            <p>@Html.Raw(string.Format(Pages.Interviewers_InterviewersToMove, "<b data-bind='text: InterviewersToMoveNamesOnly'></b>", "<b data-bind='text: SelectedSupervisor'></b>"))</p>
        </div>

        <div class="radio" data-bind="visible: InterviewersToMove().length > 0">
            <input id="reassignToOriginalSupervisor" data-bind="checked: WhatToDoWithAssignments" name="whatToDoWithAssignments" value="ReassignToOriginalSupervisor" type="radio" class="wb-radio">
            <label for="reassignToOriginalSupervisor">
                <span class="tick"></span>
                @Pages.Interviewers_ReassignToOriginalSupervisor
            </label>
        </div>
        <div class="radio" data-bind="visible: InterviewersToMove().length > 0">
            <input id="moveAllToNewTeam" type="radio" data-bind="checked: WhatToDoWithAssignments" name="whatToDoWithAssignments" value="MoveAllToNewTeam" class="wb-radio">
            <label for="moveAllToNewTeam">
                <span class="tick"></span>
                @Html.Raw(string.Format(@Pages.Interviewers_MoveAllToNewTeam, "<b data-bind='text: SelectedSupervisor'></b>"))
            </label>
        </div>
    </script>

    <script type="text/html" id="move-interviewer-progress-template">
        <div class="max-height-in-popup">
            <table class="table table-striped table-bordered table-hover">
                <thead>
                    <tr>
                        <th>@MainMenu.Interviewers</th>
                        <th>@MainMenu.Interviews</th>
                        <th>@MainMenu.Assignments</th>
                    </tr>
                </thead>
                <tbody data-bind="foreach: Interviewers">
                    <tr>
                        <td><span class="interviewer"><a target="_blank" data-bind="attr: { href: '@Url.Action("Profile", "Interviewer")/' + userId }, text: userName, css: { 'text-danger' : inProgress }"></a></span></td>
                        <td data-bind="text: interviewsProcessed"></td>
                        <td data-bind="text: assignmentsProcessed"></td>
                    </tr>
                    <tr data-bind="if: errors().length > 0">
                        <td colspan="5">
                            <p>@Pages.Interviewers_FinishedWithErrors</p>
                            <ul data-bind="foreach: errors">
                                <li data-bind="text: $data"></li>
                            </ul>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </script>
</main>
