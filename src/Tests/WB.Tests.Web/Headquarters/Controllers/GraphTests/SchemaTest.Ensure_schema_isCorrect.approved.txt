schema {
  query: HeadquartersQuery
  mutation: HeadquartersMutation
}

type Assignment {
  archived: Boolean!
  createdAtUtc: DateTime!
  email: String
  targetArea: String
  id: ID!
  interviewsNeeded: Int
  "Will return `null` when assignment is not received by tablet"
  receivedByTabletAtUtc: DateTime
  responsibleId: UUID!
  webMode: Boolean!
  "Active Calendar Event associated with assignment"
  calendarEvent: CalendarEvent @cost(weight: "10")
}

type CalendarEvent {
  assignmentId: Int!
  "Comment of calendar Event"
  comment: String
  creatorUserId: UUID!
  interviewId: UUID
  interviewKey: String
  isCompleted: Boolean!
  "Id of Calendar Event"
  publicKey: UUID!
  "Start Timezone of Event"
  startTimezone: String!
  "Start of calendar Event"
  startUtc: DateTime!
  updateDateUtc: DateTime!
}

type CategoricalOption {
  parentValue: Int
  title: String!
  value: Int!
}

type Entity {
  identifying: Boolean
  label: String
  options: [CategoricalOption!]! @cost(weight: "10")
  "Question text. May contain html tags."
  questionText: String
  scope: QuestionScope
  type: QuestionType
  variable: String
  variableType: VariableType
}

type Feature {
  "Type of the feature"
  type: GeoJSONObjectType!
  "Id of the feature"
  id: String
  "Geometry of the feature"
  geometry: Any
  "Properties of the feature"
  properties: Any
}

type FeatureCollection {
  "List of the features"
  features: [Feature]
  "Feature collection type"
  type: GeoJSONObjectType!
}

type GeoBounds {
  "North bound"
  north: Float!
  "South bound"
  south: Float!
  "East bound"
  east: Float!
  "West bound"
  west: Float!
}

type HeadquartersMutation {
  updateCalendarEvent("Workspace name" workspace: String! = "primary" "Comment" comment: String "Start of event" newStart: DateTime! "Calendar event publicKey" publicKey: UUID! "Start timezone" startTimezone: String!): CalendarEvent @authorize(roles: [ "ApiUser", "Interviewer" ])
  deleteCalendarEvent("Workspace name" workspace: String! = "primary" "Calendar event publicKey" publicKey: UUID!): CalendarEvent @authorize(roles: [ "ApiUser", "Interviewer" ])
  addAssignmentCalendarEvent("Workspace name" workspace: String! = "primary" "Assignment Id" assignmentId: Int! "Comment" comment: String "Start of event" newStart: DateTime! "Start timezone" startTimezone: String!): CalendarEvent @authorize(roles: [ "ApiUser", "Interviewer" ])
  addInterviewCalendarEvent("Workspace name" workspace: String! = "primary" "Comment" comment: String "Interview id" interviewId: UUID! "Start of event" newStart: DateTime! "Start timezone" startTimezone: String!): CalendarEvent @authorize(roles: [ "ApiUser", "Interviewer" ])
  deleteMap("Workspace name" workspace: String! = "primary" "Map file name" fileName: String!): Map @authorize(roles: [ "Administrator", "ApiUser", "Headquarter" ]) @cost(weight: "10")
  deleteUserFromMap("Workspace name" workspace: String! = "primary" "Map file name" fileName: String! userName: String!): Map @authorize(roles: [ "Administrator", "ApiUser", "Headquarter", "Supervisor" ])
  addUserToMap("Workspace name" workspace: String! = "primary" "Map file name" fileName: String! userName: String!): Map @authorize(roles: [ "Administrator", "ApiUser", "Headquarter", "Supervisor" ])
  uploadMap("Workspace name" workspace: String! = "primary" file: Upload!): [Map] @authorize(roles: [ "Administrator", "ApiUser", "Headquarter" ]) @cost(weight: "10")
}

type HeadquartersQuery {
  assignments("Workspace name" workspace: String! = "primary" skip: Int take: Int where: AssignmentsFilter @cost(weight: "10")): IPagedConnectionOfAssignment @authorize @cost(weight: "10")
  interviews("Workspace name" workspace: String! = "primary" skip: Int take: Int where: InterviewsFilter @cost(weight: "10") order: [InterviewSort!] @cost(weight: "10")): IPagedConnectionOfInterview @authorize @cost(weight: "10")
  maps("Workspace name" workspace: String! = "primary" skip: Int take: Int where: MapsFilter @cost(weight: "10") order: [MapsSort!] @cost(weight: "10")): IPagedConnectionOfMap @authorize @cost(weight: "10")
  "Gets questionnaire details"
  questionnaires("Workspace name" workspace: String! = "primary" skip: Int take: Int "Questionnaire id" id: UUID "Questionnaire version" version: Long): IPagedConnectionOfQuestionnaire @authorize @cost(weight: "10")
  questions("Workspace name" workspace: String! = "primary" "Questionnaire id" id: UUID! "Questionnaire version" version: Long! "Questionnaire language" language: String where: QuestionFilter @cost(weight: "10")): [Entity] @authorize @cost(weight: "10")
  questionnaireItems("Workspace name" workspace: String! = "primary" "Questionnaire id" id: UUID! "Questionnaire version" version: Long! "Questionnaire language" language: String where: QuestionnaireItemsFilter @cost(weight: "10")): [QuestionnaireItem] @authorize @cost(weight: "10")
  viewer: Viewer @authorize
  users(skip: Int take: Int order: [UsersSortInput!] @cost(weight: "10") where: UsersFilterInput @cost(weight: "10")): Users @authorize(roles: [ "Administrator" ]) @cost(weight: "10")
  mapReport("Workspace name" workspace: String! = "primary" "Questionnaire id" questionnaireId: UUID! "Questionnaire version" questionnaireVersion: Long "Variable name for question" variable: String "Zoom level" zoom: Int! "Visible area width" clientMapWidth: Int! "East coordinate" east: Float! "West coordinate" west: Float! "North coordinate" north: Float! "South coordinate" south: Float! where: MapReportFilter @cost(weight: "10")): MapReportHolder @authorize @cost(weight: "10")
}

type IPagedConnectionOfAssignment {
  "A flattened list of the nodes."
  nodes: [Assignment]! @cost(weight: "10")
  "Total count of nodes without filtering applied"
  totalCount: Int! @cost(weight: "10")
  "Filtered count of nodes without paging"
  filteredCount: Int! @cost(weight: "10")
}

type IPagedConnectionOfInterview {
  "A flattened list of the nodes."
  nodes: [Interview]! @cost(weight: "10")
  "Total count of nodes without filtering applied"
  totalCount: Int! @cost(weight: "10")
  "Filtered count of nodes without paging"
  filteredCount: Int! @cost(weight: "10")
}

type IPagedConnectionOfMap {
  "A flattened list of the nodes."
  nodes: [Map]! @cost(weight: "10")
  "Total count of nodes without filtering applied"
  totalCount: Int! @cost(weight: "10")
  "Filtered count of nodes without paging"
  filteredCount: Int! @cost(weight: "10")
}

type IPagedConnectionOfQuestionnaire {
  "A flattened list of the nodes."
  nodes: [Questionnaire]! @cost(weight: "10")
  "Total count of nodes without filtering applied"
  totalCount: Int! @cost(weight: "10")
  "Filtered count of nodes without paging"
  filteredCount: Int! @cost(weight: "10")
}

"Identifying variable or question"
type IdentifyingEntity {
  "Answer value for categorical questions"
  answerValue: Int
  entity: Entity! @cost(weight: "10")
  value: String
  "Bool answer value"
  valueBool: Boolean
  "Date answer value"
  valueDate: DateTime
  "Long answer value"
  valueLong: Long
  "Double answer value"
  valueDouble: Float
  isEnabled: Boolean
}

type Interview {
  "List of actions that can be applied to interview"
  actionFlags: [InterviewActionFlags!]!
  "Identifier for the assignment to which this interview belongs"
  assignmentId: Int
  id: ID!
  status: InterviewStatus!
  "Current mode of interview"
  interviewMode: InterviewMode!
  "Login of current responsible user"
  responsibleName: String!
  responsibleId: UUID!
  responsibleRole: UserRoles!
  "Supervisor login who is responsible for interview"
  supervisorName: String
  "Indicates if interview was ever completed by interviewer"
  wasCompleted: Boolean!
  "Date and Time (UTC) when interview was created"
  createdDate: DateTime!
  "Short case identifier that appears throughout the system - in Headquarters, Supervisor, and Interviewer"
  key: String!
  "Key that was generated on interviewer tablet when interview was created for the first time"
  clientKey: String!
  "Represents date (UTC) when interview was changed last time"
  updateDateUtc: DateTime!
  "Represents date (UTC) when the interview was received by the interviewer’s tablet"
  receivedByInterviewerAtUtc: DateTime
  "Shows total number of invalid questions and static texts in the interview. Multiple failed validation conditions on same entity are counted as 1"
  errorsCount: Int!
  questionnaireId: UUID!
  questionnaireVariable: String!
  questionnaireVersion: Long!
  "Information that identifies each assignment. These are the answers to questions marked as identifying in Designer"
  identifyingData: [IdentifyingEntity] @cost(weight: "10")
  "Number of questions without answer. Includes supervisor, identifying and interviewer questions. Can contain nulls for interviews that were completed prior to 20.09 release"
  notAnsweredCount: Int
  "Active Calendar Event associated with interview"
  calendarEvent: CalendarEvent @cost(weight: "10")
  "Link for interview in CAWI mode"
  cawiLink: String @cost(weight: "10")
}

type Map {
  "Map file name"
  fileName: String!
  "Size of map in bytes"
  size: Long!
  "Utc date when map was imported on HQ"
  importDateUtc: DateTime
  "User which uploaded map on HQ"
  uploadedBy: UUID
  "List of users assigned to map"
  users: [UserMap] @cost(weight: "10")
  xMaxVal: Float!
  yMaxVal: Float!
  xMinVal: Float!
  yMinVal: Float!
  wkid: Int!
  maxScale: Float!
  minScale: Float!
  shapeType: String
  shapesCount: Int
}

type MapReport {
  "Total number of points"
  totalPoint: Int!
  "Bounds of the area"
  initialBounds: GeoBounds
  "Collection of features"
  featureCollection: FeatureCollection
}

type MapReportHolder {
  "Map report"
  report: MapReport! @cost(weight: "10")
}

type Questionnaire {
  variable: String!
  questionnaireId: UUID!
  version: Long!
  id: ID
  title: String!
  defaultLanguageName: String @cost(weight: "10")
  translations: [Translation!]! @cost(weight: "10")
}

type QuestionnaireItem {
  entityType: EntityType
  "Question text or Variable label. May contain html tags."
  title: String
  variable: String
  scope: QuestionScope
  label: String
  type: QuestionType
  variableType: VariableType
  identifying: Boolean
  includedInReportingAtUtc: DateTime
  options: [CategoricalOption!]! @cost(weight: "10")
}

type Translation {
  id: UUID!
  name: String!
}

type User {
  id: ID!
  role: UserRoles! @cost(weight: "10")
  userName: String!
  fullName: String
  email: String
  phoneNumber: String
  creationDate: Date
  isLocked: Boolean
  isArchived: Boolean
  isRelinkAllowed: Boolean @cost(weight: "10")
  workspaces: [String!]! @cost(weight: "10")
}

type UserMap {
  "Name of the user assigned to map"
  userName: String
}

type Users {
  "A flattened list of the nodes."
  nodes: [User]! @cost(weight: "10")
  "Total count of nodes without filtering applied"
  totalCount: Int! @cost(weight: "10")
  "Filtered count of nodes without paging"
  filteredCount: Int! @cost(weight: "10")
}

type Viewer {
  id: ID!
  role: UserRoles! @cost(weight: "10")
  userName: String!
  workspaces: [String!]!
}

input AssignmentsFilter {
  and: [AssignmentsFilter!]
  or: [AssignmentsFilter!]
  id: IntOperationFilterInput
  questionnaireId: QuestionnaireIdentity
  archived: BooleanOperationFilterInput
  responsibleId: UuidOperationFilterInput
  webMode: BooleanOperationFilterInput
  receivedByTabletAtUtc: DateTimeOperationFilterInput
  targetArea: StringOperationFilterInput
}

input BooleanOperationFilterInput {
  eq: Boolean @cost(weight: "10")
  neq: Boolean @cost(weight: "10")
}

input DateTimeOperationFilterInput {
  eq: DateTime @cost(weight: "10")
  neq: DateTime @cost(weight: "10")
  in: [DateTime] @cost(weight: "10")
  nin: [DateTime] @cost(weight: "10")
  gt: DateTime @cost(weight: "10")
  ngt: DateTime @cost(weight: "10")
  gte: DateTime @cost(weight: "10")
  ngte: DateTime @cost(weight: "10")
  lt: DateTime @cost(weight: "10")
  nlt: DateTime @cost(weight: "10")
  lte: DateTime @cost(weight: "10")
  nlte: DateTime @cost(weight: "10")
}

input DecimalOperationFilterInput {
  eq: Decimal @cost(weight: "10")
  neq: Decimal @cost(weight: "10")
  in: [Decimal] @cost(weight: "10")
  nin: [Decimal] @cost(weight: "10")
  gt: Decimal @cost(weight: "10")
  ngt: Decimal @cost(weight: "10")
  gte: Decimal @cost(weight: "10")
  ngte: Decimal @cost(weight: "10")
  lt: Decimal @cost(weight: "10")
  nlt: Decimal @cost(weight: "10")
  lte: Decimal @cost(weight: "10")
  nlte: Decimal @cost(weight: "10")
}

input FloatOperationFilterInput {
  eq: Float @cost(weight: "10")
  neq: Float @cost(weight: "10")
  in: [Float] @cost(weight: "10")
  nin: [Float] @cost(weight: "10")
  gt: Float @cost(weight: "10")
  ngt: Float @cost(weight: "10")
  gte: Float @cost(weight: "10")
  ngte: Float @cost(weight: "10")
  lt: Float @cost(weight: "10")
  nlt: Float @cost(weight: "10")
  lte: Float @cost(weight: "10")
  nlte: Float @cost(weight: "10")
}

input IdentifyEntityValueFilter {
  and: [IdentifyEntityValueFilter!]
  or: [IdentifyEntityValueFilter!]
  "Code of answer for categorical question"
  answerCode: DecimalOperationFilterInput
  "Answer value, supports case sensitive operations"
  value: StringOperationFilterInput
  "Answer value in lower case, supports case insensitive operations"
  valueLowerCase: StringOperationFilterInput
  "Question or variable entity"
  entity: QuestionnaireItemsFilter
  "Boolean answer value"
  valueBool: BooleanOperationFilterInput
  "Date answer value"
  valueDate: DateTimeOperationFilterInput
  "Double answer value"
  valueDouble: FloatOperationFilterInput
  "Long answer value"
  valueLong: LongOperationFilterInput
  "Shows if this value enabled"
  isEnabled: BooleanOperationFilterInput
}

input IntOperationFilterInput {
  eq: Int @cost(weight: "10")
  neq: Int @cost(weight: "10")
  in: [Int] @cost(weight: "10")
  nin: [Int] @cost(weight: "10")
  gt: Int @cost(weight: "10")
  ngt: Int @cost(weight: "10")
  gte: Int @cost(weight: "10")
  ngte: Int @cost(weight: "10")
  lt: Int @cost(weight: "10")
  nlt: Int @cost(weight: "10")
  lte: Int @cost(weight: "10")
  nlte: Int @cost(weight: "10")
}

input InterviewModeOperationFilterInput {
  eq: InterviewMode @cost(weight: "10")
  neq: InterviewMode @cost(weight: "10")
  in: [InterviewMode!] @cost(weight: "10")
  nin: [InterviewMode!] @cost(weight: "10")
}

input InterviewSort {
  key: SortEnumType @cost(weight: "10")
  createdDate: SortEnumType @cost(weight: "10")
  updateDateUtc: SortEnumType @cost(weight: "10")
  responsibleName: SortEnumType @cost(weight: "10")
  responsibleRole: SortEnumType @cost(weight: "10")
  assignmentId: SortEnumType @cost(weight: "10")
  errorsCount: SortEnumType @cost(weight: "10")
  status: SortEnumType @cost(weight: "10")
  receivedByInterviewerAtUtc: SortEnumType @cost(weight: "10")
  questionnaireId: SortEnumType @cost(weight: "10")
  questionnaireVersion: SortEnumType @cost(weight: "10")
  id: SortEnumType @cost(weight: "10")
  notAnsweredCount: SortEnumType @cost(weight: "10")
}

input InterviewStatusOperationFilterInput {
  eq: InterviewStatus @cost(weight: "10")
  neq: InterviewStatus @cost(weight: "10")
  in: [InterviewStatus!] @cost(weight: "10")
  nin: [InterviewStatus!] @cost(weight: "10")
}

input InterviewsFilter {
  and: [InterviewsFilter!]
  or: [InterviewsFilter!]
  status: InterviewStatusOperationFilterInput
  interviewMode: InterviewModeOperationFilterInput
  questionnaireId: UuidOperationFilterInput
  questionnaireVariable: StringOperationFilterInput
  questionnaireVersion: LongOperationFilterInput
  key: StringOperationFilterInput
  notAnsweredCount: IntOperationFilterInput
  clientKey: StringOperationFilterInput
  assignmentId: IntOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  responsibleName: StringOperationFilterInput
  responsibleNameLowerCase: StringOperationFilterInput
  supervisorName: StringOperationFilterInput
  supervisorNameLowerCase: StringOperationFilterInput
  responsibleRole: UserRolesOperationFilterInput
  updateDateUtc: DateTimeOperationFilterInput
  receivedByInterviewerAtUtc: DateTimeOperationFilterInput
  errorsCount: IntOperationFilterInput
  identifyingData: ListFilterInputTypeOfIdentifyEntityValueFilterInput
}

input ListFilterInputTypeOfIdentifyEntityValueFilterInput {
  all: IdentifyEntityValueFilter @cost(weight: "10")
  none: IdentifyEntityValueFilter @cost(weight: "10")
  some: IdentifyEntityValueFilter @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfUserMapFilterInput {
  all: UserMapFilterInput @cost(weight: "10")
  none: UserMapFilterInput @cost(weight: "10")
  some: UserMapFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input LongOperationFilterInput {
  eq: Long @cost(weight: "10")
  neq: Long @cost(weight: "10")
  in: [Long] @cost(weight: "10")
  nin: [Long] @cost(weight: "10")
  gt: Long @cost(weight: "10")
  ngt: Long @cost(weight: "10")
  gte: Long @cost(weight: "10")
  ngte: Long @cost(weight: "10")
  lt: Long @cost(weight: "10")
  nlt: Long @cost(weight: "10")
  lte: Long @cost(weight: "10")
  nlte: Long @cost(weight: "10")
}

input MapReportFilter {
  and: [MapReportFilter!]
  or: [MapReportFilter!]
  interviewFilter: InterviewsFilter
}

input MapsFilter {
  and: [MapsFilter!]
  or: [MapsFilter!]
  fileName: StringOperationFilterInput
  importDateUtc: DateTimeOperationFilterInput
  size: LongOperationFilterInput
  users: ListFilterInputTypeOfUserMapFilterInput
}

input MapsSort {
  fileName: SortEnumType @cost(weight: "10")
  importDateUtc: SortEnumType @cost(weight: "10")
  size: SortEnumType @cost(weight: "10")
}

input NullableOfQuestionScopeOperationFilterInput {
  eq: QuestionScope @cost(weight: "10")
  neq: QuestionScope @cost(weight: "10")
  in: [QuestionScope] @cost(weight: "10")
  nin: [QuestionScope] @cost(weight: "10")
}

input QuestionFilter {
  and: [QuestionFilter!]
  or: [QuestionFilter!]
  variable: StringOperationFilterInput
  scope: NullableOfQuestionScopeOperationFilterInput
  "Find only identifying questions"
  identifying: BooleanOperationFilterInput
}

input QuestionnaireIdentity {
  and: [QuestionnaireIdentity!]
  or: [QuestionnaireIdentity!]
  id: UuidOperationFilterInput
  version: LongOperationFilterInput
}

input QuestionnaireItemsFilter {
  and: [QuestionnaireItemsFilter!]
  or: [QuestionnaireItemsFilter!]
  title: StringOperationFilterInput
  variable: StringOperationFilterInput
  scope: NullableOfQuestionScopeOperationFilterInput
  "Find only identifying entities"
  identifying: BooleanOperationFilterInput
  "When item was included in reporting"
  includedInReportingAtUtc: DateTimeOperationFilterInput
}

input RoleFilterInput {
  and: [RoleFilterInput!]
  or: [RoleFilterInput!]
  eq: UserRoles @cost(weight: "10")
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String @cost(weight: "10")
  neq: String @cost(weight: "10")
  contains: String @cost(weight: "20")
  ncontains: String @cost(weight: "20")
  in: [String] @cost(weight: "10")
  nin: [String] @cost(weight: "10")
  startsWith: String @cost(weight: "20")
  nstartsWith: String @cost(weight: "20")
  endsWith: String @cost(weight: "20")
  nendsWith: String @cost(weight: "20")
}

input StringOperationFilterInputType {
  and: [StringOperationFilterInputType!]
  or: [StringOperationFilterInputType!]
  eq: String @cost(weight: "10")
  neq: String @cost(weight: "10")
  contains: String @cost(weight: "10")
  ncontains: String @cost(weight: "10")
  in: [String] @cost(weight: "10")
  nin: [String] @cost(weight: "10")
  startsWith: String @cost(weight: "10")
  nstartsWith: String @cost(weight: "10")
}

input UserMapFilterInput {
  and: [UserMapFilterInput!]
  or: [UserMapFilterInput!]
  id: IntOperationFilterInput
  userName: StringOperationFilterInput
  map: MapsFilter
}

input UserRolesOperationFilterInput {
  eq: UserRoles @cost(weight: "10")
  neq: UserRoles @cost(weight: "10")
  in: [UserRoles!] @cost(weight: "10")
  nin: [UserRoles!] @cost(weight: "10")
}

input UsersFilterInput {
  and: [UsersFilterInput!]
  or: [UsersFilterInput!]
  userName: StringOperationFilterInput
  fullName: StringOperationFilterInput
  isArchived: BooleanOperationFilterInput
  isLocked: BooleanOperationFilterInput
  creationDate: DateTimeOperationFilterInput
  email: StringOperationFilterInput
  phoneNumber: StringOperationFilterInput
  id: UuidOperationFilterInput
  role: RoleFilterInput
}

input UsersSortInput {
  userName: SortEnumType @cost(weight: "10")
  creationDate: SortEnumType @cost(weight: "10")
  fullName: SortEnumType @cost(weight: "10")
  email: SortEnumType @cost(weight: "10")
  phoneNumber: SortEnumType @cost(weight: "10")
  isLocked: SortEnumType @cost(weight: "10")
  isArchived: SortEnumType @cost(weight: "10")
}

input UuidOperationFilterInput {
  eq: UUID @cost(weight: "10")
  neq: UUID @cost(weight: "10")
  in: [UUID] @cost(weight: "10")
  nin: [UUID] @cost(weight: "10")
  gt: UUID @cost(weight: "10")
  ngt: UUID @cost(weight: "10")
  gte: UUID @cost(weight: "10")
  ngte: UUID @cost(weight: "10")
  lt: UUID @cost(weight: "10")
  nlt: UUID @cost(weight: "10")
  lte: UUID @cost(weight: "10")
  nlte: UUID @cost(weight: "10")
}

"Defines when a policy shall be executed."
enum ApplyPolicy {
  "Before the resolver was executed."
  BEFORE_RESOLVER
  "After the resolver was executed."
  AFTER_RESOLVER
  "The policy is applied in the validation step before the execution."
  VALIDATION
}

enum EntityType {
  SECTION
  QUESTION
  STATICTEXT
  VARIABLE
  ROSTER
}

enum GeoJSONObjectType {
  Point
  MultiPoint
  LineString
  MultiLineString
  Polygon
  MultiPolygon
  GeometryCollection
  Feature
  FeatureCollection
}

enum InterviewActionFlags {
  CANBEREASSIGNED
  CANBEDELETED
  CANBEAPPROVED
  CANBEUNAPPROVEDBYHQ
  CANBEREJECTED
  CANBERESTARTED
  CANBEOPENED
  CANCHANGETOCAPI
  CANCHANGETOCAWI
}

enum InterviewMode {
  UNKNOWN
  CAPI
  CAWI
}

enum InterviewStatus {
  RESTORED
  CREATED
  SUPERVISORASSIGNED
  INTERVIEWERASSIGNED
  REJECTEDBYSUPERVISOR
  READYFORINTERVIEW
  SENTTOCAPI
  RESTARTED
  COMPLETED
  APPROVEDBYSUPERVISOR
  REJECTEDBYHEADQUARTERS
  APPROVEDBYHEADQUARTERS
  DELETED
}

enum QuestionScope {
  INTERVIEWER
  SUPERVISOR
  HEADQUARTER
  HIDDEN
}

enum QuestionType {
  SINGLEOPTION
  MULTYOPTION
  NUMERIC
  DATETIME
  GPSCOORDINATES
  TEXT
  TEXTLIST
  QRBARCODE
  MULTIMEDIA
  AREA
  AUDIO
}

enum SortEnumType {
  ASC
  DESC
}

enum UserRoles {
  ADMINISTRATOR
  SUPERVISOR
  INTERVIEWER
  HEADQUARTER
  OBSERVER
  APIUSER
}

enum VariableType {
  LONGINTEGER
  DOUBLE
  BOOLEAN
  DATETIME
  STRING
}

"The authorize directive."
directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the authorize directive shall be applied.By default the authorize directives are applied during the validation phase." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on OBJECT | FIELD_DEFINITION

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

scalar Any

"The `Date` scalar represents an ISO-8601 compliant date type."
scalar Date

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

"The `Decimal` scalar type represents a decimal floating-point number."
scalar Decimal

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")

"The `Upload` scalar type represents a file upload."
scalar Upload
