using System;
using Main.Core.Entities.SubEntities;
using WB.Core.BoundedContexts.Designer.Aggregates;

namespace WB.Core.BoundedContexts.Designer.Tests
{
    public static class QuestionnaireExtensions
    {
        public static void AddTextQuestion(
            this Questionnaire questionnaire,
            Guid questionId,
            Guid parentGroupId,
            string title,
            string variableName,
            string variableLabel,
            bool isMandatory,
            bool isPreFilled,
            QuestionScope scope,
            string enablementCondition,
            string validationExpression,
            string validationMessage,
            string instructions,
            string mask,
            Guid responsibleId)
        {
            AddQuestion(questionnaire,
                questionId,
                parentGroupId,
                title,
                QuestionType.Text,
                variableName,
                variableLabel,
                mask,
                isMandatory,
                isPreFilled,
                scope,
                enablementCondition,
                validationExpression,
                validationMessage,
                instructions,
                null,
                responsibleId);
        }

        public static void AddGpsCoordinatesQuestion(
            this Questionnaire questionnaire,
            Guid questionId,
            Guid parentGroupId,
            string title,
            string variableName,
            string variableLabel,
            bool isMandatory,
            QuestionScope scope,
            string enablementCondition,
            string instructions,
            Guid responsibleId)
        {
            AddQuestion(questionnaire,
                questionId,
                parentGroupId,
                title,
                QuestionType.GpsCoordinates,
                variableName,
                variableLabel,
                "",
                isMandatory,
                false,
                scope,
                enablementCondition,
                "",
                "",
                instructions,
                null,
                responsibleId);
        }

        public static void AddDateTimeQuestion(
            this Questionnaire questionnaire,
            Guid questionId,
            Guid parentGroupId,
            string title,
            string variableName, string variableLabel,
            bool isMandatory,
            bool isPreFilled,
            QuestionScope scope,
            string enablementCondition,
            string validationExpression,
            string validationMessage,
            string instructions,
            Guid responsibleId)
        {
            AddQuestion(questionnaire,
                questionId,
                parentGroupId,
                title,
                QuestionType.DateTime,
                variableName,
                variableLabel,
                "",
                isMandatory,
                isPreFilled,
                scope,
                enablementCondition,
                validationExpression,
                validationMessage,
                instructions,
                null,
                responsibleId);
        }

        public static void AddMultiOptionQuestion(
            this Questionnaire questionnaire,
            Guid questionId,
            Guid parentGroupId,
            string title,
            string variableName, string variableLabel,
            bool isMandatory,
            QuestionScope scope,
            string enablementCondition,
            string validationExpression,
            string validationMessage,
            string instructions,
            Guid responsibleId,
            Option[] options,
            Guid? linkedToQuestionId,
            bool areAnswersOrdered,
            int? maxAllowedAnswers)
        {
            AddQuestion(questionnaire,
                questionId,
                parentGroupId,
                title,
                QuestionType.MultyOption,
                variableName,
                variableLabel,
                "",
                isMandatory,
                false,
                scope,
                enablementCondition,
                validationExpression,
                validationMessage,
                instructions,
                options,
                responsibleId,
                linkedToQuestionId,
                false,
                maxAllowedAnswers);
        }

        public static void AddSingleOptionQuestion(
            this Questionnaire questionnaire,
            Guid questionId,
            Guid parentGroupId,
            string title,
            string variableName, string variableLabel,
            bool isMandatory,
            bool isPreFilled,
            QuestionScope scope,
            string enablementCondition,
            string validationExpression,
            string validationMessage,
            string instructions,
            Option[] options,
            Guid? linkedToQuestionId,
            Guid responsibleId,
            bool isFilteredCombobox,
            Guid? cascadeFromQuestionId)
        {
            AddQuestion(questionnaire,
                questionId,
                parentGroupId,
                title,
                QuestionType.SingleOption,
                variableName,
                variableLabel,
                "",
                isMandatory,
                isPreFilled,
                scope,
                enablementCondition,
                validationExpression,
                validationMessage,
                instructions,
                options,
                responsibleId,
                linkedToQuestionId,
                false,
                null,
                isFilteredCombobox,
                cascadeFromQuestionId
                );
        }

        public static void AddNumericQuestion(
            this Questionnaire questionnaire,
            Guid questionId,
            Guid parentGroupId,
            string title,
            string variableName, string variableLabel,
            bool isMandatory,
            bool isPreFilled,
            QuestionScope scope,
            string enablementCondition,
            string validationExpression,
            string validationMessage,
            string instructions,
            int? maxValue,
            Guid responsibleId,
            bool isInteger,
            int? countOfDecimalPlaces)
        {
            AddQuestion(questionnaire,
                questionId,
                parentGroupId,
                title,
                QuestionType.Numeric,
                variableName,
                variableLabel,
                "",
                isMandatory,
                isPreFilled,
                scope,
                enablementCondition,
                validationExpression,
                validationMessage,
                instructions,
                null,
                responsibleId,
                null,
                false,
                maxValue
                );
        }

        public static void AddTextListQuestion(
            this Questionnaire questionnaire,
            Guid questionId,
            Guid parentGroupId,
            string title,
            string variableName,
            string variableLabel,
            bool isMandatory,
            string enablementCondition,
            string instructions,
            Guid responsibleId,
            int? maxAnswerCount)
        {
            AddQuestion(questionnaire,
                questionId,
                parentGroupId,
                title,
                QuestionType.Text,
                variableName,
                variableLabel,
                "",
                isMandatory,
                false,
                QuestionScope.Interviewer,
                enablementCondition,
                "",
                "",
                instructions,
                null,
                responsibleId,
                null,
                false,
                maxAnswerCount);
        }

        public static void AddQRBarcodeQuestion(
            this Questionnaire questionnaire,
            Guid questionId,
            Guid parentGroupId,
            string title,
            string variableName,
            string variableLabel,
            bool isMandatory,
            string enablementCondition,
            string instructions,
            Guid responsibleId)
        {
            AddQuestion(questionnaire,
                questionId,
                parentGroupId,
                title,
                QuestionType.Text,
                variableName,
                variableLabel,
                "",
                isMandatory,
                false,
                QuestionScope.Interviewer,
                enablementCondition,
                "",
                "",
                instructions,
                null,
                responsibleId);
        }

        private static void AddQuestion(
            this Questionnaire questionnaire,
            Guid questionId,
            Guid parentGroupId,
            string title,
            QuestionType type,
            string variableName,
            string variableLabel,
            string mask,
            bool isMandatory,
            bool isPreFilled,
            QuestionScope scope,
            string enablementCondition,
            string validationExpression,
            string validationMessage,
            string instructions,
            Option[] options,
            Guid responsibleId,
            Guid? linkedToQuestionId = null,
            bool areAnswersOrdered = false,
            int? maxAllowedAnswers = null,
            bool? isFilteredCombobox = null,
            Guid? cascadeFromQuestionId = null)
        {
            questionnaire.NewAddQuestion(
                questionId,
                parentGroupId,
                title,
                type,
                variableName,
                variableLabel,
                mask,
                isMandatory,
                isPreFilled,
                scope,
                enablementCondition,
                validationExpression,
                validationMessage,
                instructions,
                options,
                responsibleId,
                linkedToQuestionId,
                areAnswersOrdered,
                maxAllowedAnswers,
                isFilteredCombobox,
                cascadeFromQuestionId);
        }
    }
}