<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

public class <#=RosterTemplateModel.VariableName#>_type : AbstractRosterLevel<<#=RosterTemplateModel.VariableName#>_type>, IValidatable
        {
            public <#=RosterTemplateModel.VariableName#>_type(decimal[] rosterVector, Identity[] rosterKey, QuestionnaireLevel parent, Func<Identity[], IEnumerable<IValidatable>> getInstances, Dictionary<Guid, Guid[]> conditionalDependencies)
                : this(rosterVector, rosterKey, getInstances, conditionalDependencies)
            {
                this.@__parent = parent;
            }

            public <#=RosterTemplateModel.VariableName#>_type(decimal[] rosterVector, Identity[] rosterKey, Func<Identity[], IEnumerable<IValidatable>> getInstances, Dictionary<Guid, Guid[]> conditionalDependencies)
                : base(rosterVector, rosterKey, getInstances, conditionalDependencies)
            {
                
                <#foreach (var q in RosterTemplateModel.Questions) 
                    {#>

                    //EnablementStates.Add(age_state.ItemId, age_state);
                    EnablementStates.Add(<#=q.VariableName#>.ItemId, <#=q.VariableName#>_state);        

                    <#if(!string.IsNullOrWhiteSpace(q.Validations))
                    {#>        
                        //generate mandatory
                        //validationExpressions.Add(new Identity(IdOf.name, this.RosterVector), new Func<bool>[] { name_IsMandatory });
                    
                        validationExpressions.Add(new Identity(<#=q.Id#>, this.RosterVector), new Func<bool>[] { <#=q.VariableName#>_IsEnabledIf });              
        
                    <# }#>

                <# }#>
            }

            //TODO: dynamicly generate reference to the parent and it's questions
            private QuestionnaireLevel @__parent;

            public IValidatable CopyMembers()
            {
                var level = new <#=RosterTemplateModel.VariableName#>_type(this.RosterVector, this.RosterKey, this.GetInstances, ConditionalDependencies)
                {
                    ValidAnsweredQuestions = new HashSet<Guid>(this.ValidAnsweredQuestions),
                    InvalidAnsweredQuestions = new HashSet<Guid>(this.InvalidAnsweredQuestions),

                <#foreach (var q in RosterTemplateModel.Questions) 
                    {#>
        
                        <#=q.VariableName#> = this.@__<#=q.VariableName#>,
        
                <#}#>
        
                };

                ConditionalDependencies = new Dictionary<Guid, Guid[]>(this.ConditionalDependencies);

                foreach (var state in level.EnablementStates)
                {
                    var originalState = this.EnablementStates[state.Key];
                    state.Value.PreviousState = originalState.PreviousState;
                    state.Value.State = originalState.State;
                }

                return level;
            }

        <#foreach (var question in RosterTemplateModel.Questions) 
        {#>

            //generate according question type
            private long? @__<#=question.VariableName#>;

            public long? <#=question.VariableName#>
                {
                    get { return <#=question.VariableName#>_state.State == State.Enabled ? this.@__<#=question.VariableName#> : null; }
                    set { this.@__<#=question.VariableName#> = value; }
                }

            private ConditionalState <#= question.VariableName#>_state = new ConditionalState(<#=question.Id#>);

            <#if(!string.IsNullOrWhiteSpace(question.Conditions))
            {#>        
                private bool <#=question.VariableName#>_IsEnabledIf()
                {
                    return <#=question.Conditions#>;
                }       
        
            <# }#>

            <#if(!string.IsNullOrWhiteSpace(question.Validations))
            {#>        
                private bool <#=question.VariableName#>_IsValidIf()
                {
                    return <#=question.Validations#>;
                }       
        
            <# }#>


        <# }#>

                
        //reference to self roster
        public <#=RosterTemplateModel.VariableName#>_type[] <#=RosterTemplateModel.VariableName#>
        {
            get
                {
                    var rosters = this.GetInstances(this.RosterKey);
                    return rosters == null ? new <#=RosterTemplateModel.VariableName#>_type[0] : rosters.Select(x => x as <#=RosterTemplateModel.VariableName#>_type).ToArray();
                }
            }


            protected override IEnumerable<Action> ConditionExpressions
            {
                get
                {
                    return new[]
                {

                        <#foreach (var q in RosterTemplateModel.Questions) 
                    {#>

                    <#if(!string.IsNullOrWhiteSpace(q.Conditions))
                    {#>        
                        Verifier(<#= q.VariableName#>_IsEnabledIf, <#= q.VariableName#>_state.ItemId, <#= q.VariableName#>_state),
                        
                    <# }#>

                <# }#>
                    //Verifier(age_IsEnabledIf, age_state.ItemId, age_state),
                    
                };
                }
            }
}