<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>


public class HhMember_type : AbstractRosterLevel<HhMember_type>, IValidatable
        {
            public HhMember_type(decimal[] rosterVector, Identity[] rosterKey, QuestionnaireLevel parent, Func<Identity[], IEnumerable<IValidatable>> getInstances, Dictionary<Guid, Guid[]> conditionalDependencies)
                : this(rosterVector, rosterKey, getInstances, conditionalDependencies)
            {
                this.@__parent = parent;
            }

            public HhMember_type(decimal[] rosterVector, Identity[] rosterKey, Func<Identity[], IEnumerable<IValidatable>> getInstances, Dictionary<Guid, Guid[]> conditionalDependencies)
                : base(rosterVector, rosterKey, getInstances, conditionalDependencies)
            {
                validationExpressions.Add(new Identity(IdOf.name, this.RosterVector), new Func<bool>[] { name_IsMandatory });
                validationExpressions.Add(new Identity(IdOf.age, this.RosterVector), new Func<bool>[] { age_IsValid });
                validationExpressions.Add(new Identity(IdOf.food, this.RosterVector), new Func<bool>[] { food_IsValid });
                validationExpressions.Add(new Identity(IdOf.role, this.RosterVector), new Func<bool>[] { role_IsValid, role2_IsValid });
                validationExpressions.Add(new Identity(IdOf.married_with, this.RosterVector), new Func<bool>[] { married_with_IsValid });

                EnablementStates.Add(age_state.ItemId, age_state);
                EnablementStates.Add(married_with_state.ItemId, married_with_state);
                EnablementStates.Add(has_job_state.ItemId, has_job_state);
                EnablementStates.Add(job_title_state.ItemId, job_title_state);
                EnablementStates.Add(best_job_owner_state.ItemId, best_job_owner_state);
                EnablementStates.Add(food_state.ItemId, food_state);
                EnablementStates.Add(person_id_state.ItemId, person_id_state);
                EnablementStates.Add(marital_status_state.ItemId, marital_status_state);
                EnablementStates.Add(group_state.ItemId, group_state);
            }

            private QuestionnaireLevel @__parent;

            public HhMember_type[] hhMembers
            {
                get
                {
                    var rosters = this.GetInstances(this.RosterKey);
                    return rosters == null ? new HhMember_type[0] : rosters.Select(x => x as HhMember_type).ToArray();
                }
            }

            public FoodConsumption_type[] foods
            {
                get
                {
                    var rosters = this.GetInstances(this.RosterKey);
                    return rosters == null ? new FoodConsumption_type[0] : rosters.Select(x => x as FoodConsumption_type).ToArray();
                }
            }

            public string id { get { return this.@__parent.id; } }

            public long? persons_count { get { return this.@__parent.persons_count; } }

            public decimal? edu_visit { get { return this.@__parent.edu_visit; } }


            public string name { get; set; }

            public DateTime? date { get; set; }

            public decimal? sex { get; set; }

            public decimal? role { get; set; }

            public string person_id
            {
                get { return person_id_state.State == State.Enabled ? this.@__personId : null; }
                set { this.@__personId = value; }
            }

            public decimal? marital_status
            {
                get { return marital_status_state.State == State.Enabled ? this.@__maritalStatus : null; }
                set { this.@__maritalStatus = value; }
            }

            public decimal[][] married_with
            {
                get { return married_with_state.State == State.Enabled ? this.@__marriedWith : null; }
                set { this.@__marriedWith = value; }
            }

            public long? age
            {
                get { return age_state.State == State.Enabled ? this.@__age : null; }
                set { this.@__age = value; }
            }

            public decimal[] food
            {
                get { return food_state.State == State.Enabled ? this.@__food : null; }
                set { this.@__food = value; }
            }

            public decimal? has_job
            {
                get { return has_job_state.State == State.Enabled ? this.@__hasJob : null; }
                set { this.@__hasJob = value; }
            }

            public string job_title
            {
                get { return job_title_state.State == State.Enabled ? this.@__jobTitle : null; }
                set { this.@__jobTitle = value; }
            }

            public decimal[] best_job_owner
            {
                get { return best_job_owner_state.State == State.Enabled ? this.@__bestJobOwner : null; }
                set { this.@__bestJobOwner = value; }
            }

            private ConditionalState age_state = new ConditionalState(IdOf.age);
            private ConditionalState married_with_state = new ConditionalState(IdOf.married_with);
            private ConditionalState has_job_state = new ConditionalState(IdOf.has_job);
            private ConditionalState job_title_state = new ConditionalState(IdOf.job_title);
            private ConditionalState best_job_owner_state = new ConditionalState(IdOf.best_job_owner);
            private ConditionalState food_state = new ConditionalState(IdOf.food);
            private ConditionalState group_state = new ConditionalState(IdOf.groupId, ItemType.Group);
            private ConditionalState person_id_state = new ConditionalState(IdOf.person_id);
            private ConditionalState marital_status_state = new ConditionalState(IdOf.marital_status);

            private long? @__age;
            private decimal[][] @__marriedWith;
            private decimal? @__hasJob;
            private string @__jobTitle;
            private decimal[] @__bestJobOwner;
            private decimal[] @__food;
            private string @__personId;
            private decimal? @__maritalStatus;

            protected override IEnumerable<Action> ConditionExpressions
            {
                get
                {
                    return new[]
                {
                    Verifier(age_IsEnabledIf, age_state.ItemId, age_state),
                    Verifier(group_IsEnabledIf, group_state.ItemId, group_state),
                    Verifier(IsEnabledIfParentIs, person_id_state.ItemId, person_id_state),
                    Verifier(IsEnabledIfParentIs, marital_status_state.ItemId, marital_status_state),
                    Verifier(married_with_IsEnabledIf, married_with_state.ItemId, married_with_state),
                    Verifier(food_IsEnabledIf, food_state.ItemId, food_state),
                    Verifier(has_job_IsEnabledIf, has_job_state.ItemId, has_job_state),
                    Verifier(job_title_IsEnabledIf, job_title_state.ItemId, job_title_state),
                    Verifier(best_job_owner_IsEnabledIf, best_job_owner_state.ItemId, best_job_owner_state)
                };
                }
            }

            private bool age_IsEnabledIf()
            {
                return name.ToLower().StartsWith("a");
            }

            private bool group_IsEnabledIf()
            {
                return (age > 16);
            }

            private bool married_with_IsEnabledIf()
            {
                return marital_status == 2 && persons_count > 1;
            }

            private bool food_IsEnabledIf()
            {
                return role == 2 && sex == 2;
            }

            private bool has_job_IsEnabledIf()
            {
                return age > 16;
            }

            private bool job_title_IsEnabledIf()
            {
                return has_job == 1;
            }

            private bool best_job_owner_IsEnabledIf()
            {
                return has_job == 2;
            }

            private bool age_IsValid()
            {
                return age >= 0 && age < 100;
            }

            private bool married_with_IsValid()
            {
                return !married_with.Any(x => x.SequenceEqual(me));
            }

            private bool name_IsMandatory()
            {
                return !IsEmptyAnswer(name);
            }

            private bool food_IsValid()
            {
                return food == null || !(food.Contains(38) && role == 3 && age >= 21);
            }

            private bool role_IsValid()
            {
                // children should not drink alcohol
                return (role == 1 && hhMembers.Count(x => x.role == 1) == 1) || role != 1;
            }

            private bool role2_IsValid()
            {
                // children should not drink alcohol
                return (role == 3 && hhMembers.Where(x => x.role < 3).Any(x => x.age < age + 10)) || role != 3;
            }

            public IValidatable CopyMembers()
            {
                var level = new HhMember_type(this.RosterVector, this.RosterKey, this.GetInstances, ConditionalDependencies)
                {
                    ValidAnsweredQuestions = new HashSet<Guid>(this.ValidAnsweredQuestions),
                    InvalidAnsweredQuestions = new HashSet<Guid>(this.InvalidAnsweredQuestions),

                    name = this.name,
                    date = this.date,
                    sex = this.sex,
                    role = this.role,
                    // should be taken from fileds, not properties
                    age = this.@__age,
                    food = this.@__food,
                    has_job = this.@__hasJob,
                    job_title = this.@__jobTitle,
                    best_job_owner = this.@__bestJobOwner,
                    person_id = this.@__personId,
                    marital_status = this.@__maritalStatus,
                    married_with = this.@__marriedWith
                };
                foreach (var state in level.EnablementStates)
                {
                    var originalState = this.EnablementStates[state.Key];
                    state.Value.PreviousState = originalState.PreviousState;
                    state.Value.State = originalState.State;
                }

                return level;
            }