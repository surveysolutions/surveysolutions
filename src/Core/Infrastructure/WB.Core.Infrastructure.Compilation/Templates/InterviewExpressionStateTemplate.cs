// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace WB.Core.Infrastructure.Compilation.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Work\WB\Dev\src\Core\Infrastructure\WB.Core.Infrastructure.Compilation\Templates\InterviewExpressionStateTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class InterviewExpressionStateTemplate : InterviewExpressionStateTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\n// Re" +
                    "Sharper disable InconsistentNaming\r\n\r\nnamespace WB.Core.SharedKernels.Expression" +
                    "Processing\r\n{\r\n    public class InterviewExpressionState : AbstractInterviewExpr" +
                    "essionState \r\n    {\r\n        public StronglyTypedInterviewEvaluator()\r\n        {" +
                    "\r\n            var questionnaireLevelScope = new[] { IdOf.questionnaire };\r\n     " +
                    "       var questionnaireIdentityKey = Util.GetRosterKey(questionnaireLevelScope," +
                    " Util.EmptyRosterVector);\r\n            var questionnaireLevel = new Questionnair" +
                    "eLevel(Util.EmptyRosterVector, questionnaireIdentityKey, this.GetRosterInstances" +
                    ");\r\n            this.InterviewScopes.Add(Util.GetRosterStringKey(questionnaireId" +
                    "entityKey), questionnaireLevel);\r\n        }\r\n\r\n        public StronglyTypedInter" +
                    "viewEvaluator(Dictionary<string, IValidatable> interviewScopes, Dictionary<strin" +
                    "g, List<string>> siblingRosters)\r\n        {\r\n            InterviewScopes = inter" +
                    "viewScopes;\r\n            SiblingRosters = siblingRosters;\r\n        }\r\n\r\n        " +
                    "public override void AddRoster(Guid rosterId, decimal[] outerRosterVector, decim" +
                    "al rosterInstanceId, int? sortIndex)\r\n        {\r\n            if (!IdOf.rostersId" +
                    "ToScopeMap.ContainsKey(rosterId))\r\n            {\r\n                return;\r\n     " +
                    "       }\r\n\r\n            decimal[] rosterVector = Util.GetRosterVector(outerRoste" +
                    "rVector, rosterInstanceId);\r\n            Guid[] rosterScopeIds = IdOf.rostersIdT" +
                    "oScopeMap[rosterId];\r\n            var rosterIdentityKey = Util.GetRosterKey(rost" +
                    "erScopeIds, rosterVector);\r\n            string rosterStringKey = Util.GetRosterS" +
                    "tringKey(rosterIdentityKey);\r\n\r\n            if (this.InterviewScopes.ContainsKey" +
                    "(rosterStringKey))\r\n            {\r\n                return;\r\n            }\r\n\r\n   " +
                    "         decimal[] parentRosterVector = outerRosterVector;\r\n\r\n            var ro" +
                    "sterParentIdentityKey = parentRosterVector.Length == 0\r\n                ? Util.G" +
                    "etRosterKey(new[] { IdOf.questionnaire }, new decimal[0])\r\n                : Uti" +
                    "l.GetRosterKey(rosterScopeIds.Shrink(), parentRosterVector);\r\n\r\n            var " +
                    "parent = this.InterviewScopes[Util.GetRosterStringKey(rosterParentIdentityKey)];" +
                    "\r\n\r\n            if (rosterId == IdOf.hhMember || rosterId == IdOf.jobActivity)\r\n" +
                    "            {\r\n                var parentHolder = parent as QuestionnaireLevel;\r" +
                    "\n                var rosterLevel = new HhMember_type(rosterVector, rosterIdentit" +
                    "yKey, parentHolder, this.GetRosterInstances);\r\n                this.InterviewSco" +
                    "pes.Add(rosterStringKey, rosterLevel);\r\n                this.SetSiblings(rosterS" +
                    "copeIds, rosterStringKey);\r\n            }\r\n\r\n            if (rosterId == IdOf.fo" +
                    "odConsumption)\r\n            {\r\n                var parentHolder = parent as HhMe" +
                    "mber_type;\r\n                var rosterLevel = new FoodConsumption_type(rosterVec" +
                    "tor, rosterIdentityKey, parentHolder, this.GetRosterInstances);\r\n               " +
                    " this.InterviewScopes.Add(rosterStringKey, rosterLevel);\r\n                this.S" +
                    "etSiblings(rosterScopeIds, rosterStringKey);\r\n            }\r\n        }\r\n\r\n      " +
                    "  public override void RemoveRoster(Guid rosterId, decimal[] outerRosterVector, " +
                    "decimal rosterInstanceId)\r\n        {\r\n            if (!IdOf.rostersIdToScopeMap." +
                    "ContainsKey(rosterId))\r\n            {\r\n                return;\r\n            }\r\n\r" +
                    "\n            decimal[] rosterVector = Util.GetRosterVector(outerRosterVector, ro" +
                    "sterInstanceId);\r\n            var rosterIdentityKey = Util.GetRosterKey(IdOf.ros" +
                    "tersIdToScopeMap[rosterId], rosterVector);\r\n            \r\n            var depend" +
                    "entRosters = this.InterviewScopes.Keys.Where(x => x.StartsWith(Util.GetRosterStr" +
                    "ingKey((rosterIdentityKey)))).ToArray();\r\n            \r\n            foreach (var" +
                    " rosterKey in dependentRosters)\r\n            {\r\n                this.InterviewSc" +
                    "opes.Remove(rosterKey);\r\n                foreach (var siblings in this.SiblingRo" +
                    "sters.Values)\r\n                {\r\n                    siblings.Remove(rosterKey)" +
                    ";\r\n                }\r\n            }\r\n        }\r\n\r\n        public override void U" +
                    "pdateIntAnswer(Guid questionId, decimal[] rosterVector, long answer)\r\n        {\r" +
                    "\n            var targetLevel = this.GetRosterByIdAndVector(questionId, rosterVec" +
                    "tor);\r\n            if (targetLevel == null) return;\r\n\r\n            if (questionI" +
                    "d == IdOf.persons_count)\r\n            {\r\n                (targetLevel as Questio" +
                    "nnaireLevel).persons_count = answer;\r\n            }\r\n\r\n            if (questionI" +
                    "d == IdOf.age)\r\n            {\r\n                (targetLevel as HhMember_type).ag" +
                    "e = answer;\r\n            }\r\n\r\n            if (questionId == IdOf.times_per_week)" +
                    "\r\n            {\r\n                (targetLevel as FoodConsumption_type).times_per" +
                    "_week = answer;\r\n            }\r\n        }\r\n\r\n        public override void Update" +
                    "DecimalAnswer(Guid questionId, decimal[] rosterVector, decimal answer)\r\n        " +
                    "{\r\n            var targetLevel = this.GetRosterByIdAndVector(questionId, rosterV" +
                    "ector);\r\n            if (targetLevel == null) return;\r\n\r\n            if (questio" +
                    "nId == IdOf.price_for_food)\r\n            {\r\n                (targetLevel as Food" +
                    "Consumption_type).price_for_food = answer;\r\n            }\r\n        }\r\n\r\n        " +
                    "public override void UpdateDateAnswer(Guid questionId, decimal[] rosterVector, D" +
                    "ateTime answer)\r\n        {\r\n            var targetLevel = this.GetRosterByIdAndV" +
                    "ector(questionId, rosterVector);\r\n            if (targetLevel == null) return;\r\n" +
                    "\r\n            if (questionId == IdOf.date)\r\n            {\r\n                (targ" +
                    "etLevel as HhMember_type).date = answer;\r\n            }\r\n        }\r\n\r\n        pu" +
                    "blic override void UpdateTextAnswer(Guid questionId, decimal[] rosterVector, str" +
                    "ing answer)\r\n        {\r\n            var targetLevel = this.GetRosterByIdAndVecto" +
                    "r(questionId, rosterVector);\r\n            if (targetLevel == null) return;\r\n\r\n  " +
                    "          if (questionId == IdOf.id)\r\n            {\r\n                (targetLeve" +
                    "l as QuestionnaireLevel).id = answer;\r\n            }\r\n\r\n            if (question" +
                    "Id == IdOf.name)\r\n            {\r\n                (targetLevel as HhMember_type)." +
                    "name = answer;\r\n            }\r\n\r\n            if (questionId == IdOf.job_title)\r\n" +
                    "            {\r\n                (targetLevel as HhMember_type).job_title = answer" +
                    ";\r\n            }\r\n\r\n            if (questionId == IdOf.person_id)\r\n            {" +
                    "\r\n                (targetLevel as HhMember_type).person_id = answer;\r\n          " +
                    "  }\r\n        }\r\n        \r\n        public override void UpdateQrBarcodeAnswer(Gui" +
                    "d questionId, decimal[] rosterVector, string answer)\r\n        {\r\n            var" +
                    " targetLevel = this.GetRosterByIdAndVector(questionId, rosterVector);\r\n         " +
                    "   if (targetLevel == null) return;\r\n        }\r\n\r\n        public override void U" +
                    "pdateSingleOptionAnswer(Guid questionId, decimal[] rosterVector, decimal answer)" +
                    "\r\n        {\r\n            var targetLevel = this.GetRosterByIdAndVector(questionI" +
                    "d, rosterVector);\r\n            if (targetLevel == null) return;\r\n\r\n            i" +
                    "f (questionId == IdOf.sex)\r\n            {\r\n                (targetLevel as HhMem" +
                    "ber_type).sex = answer;\r\n            }\r\n\r\n            if (questionId == IdOf.rol" +
                    "e)\r\n            {\r\n                (targetLevel as HhMember_type).role = answer;" +
                    "\r\n            }\r\n\r\n            if (questionId == IdOf.has_job)\r\n            {\r\n " +
                    "               (targetLevel as HhMember_type).has_job = answer;\r\n            }\r\n" +
                    "\r\n            if (questionId == IdOf.marital_status)\r\n            {\r\n           " +
                    "     (targetLevel as HhMember_type).marital_status = answer;\r\n            }\r\n   " +
                    "     }\r\n\r\n        public override void UpdateMultiOptionAnswer(Guid questionId, " +
                    "decimal[] rosterVector, decimal[] answer)\r\n        {\r\n            var targetLeve" +
                    "l = this.GetRosterByIdAndVector(questionId, rosterVector);\r\n            if (targ" +
                    "etLevel == null) return;\r\n\r\n            if (questionId == IdOf.food)\r\n          " +
                    "  {\r\n                (targetLevel as HhMember_type).food = answer;\r\n            " +
                    "}\r\n        }\r\n\r\n        public override void UpdateGeoLocationAnswer(Guid questi" +
                    "onId, decimal[] rosterVector, double latitude, double longitude)\r\n        {\r\n   " +
                    "         var targetLevel = this.GetRosterByIdAndVector(questionId, rosterVector)" +
                    ";\r\n            if (targetLevel == null) return;\r\n        }\r\n\r\n        public ove" +
                    "rride void UpdateTextListAnswer(Guid questionId, decimal[] rosterVector, Tuple<d" +
                    "ecimal, string>[] answers)\r\n        {\r\n            var targetLevel = this.GetRos" +
                    "terByIdAndVector(questionId, rosterVector);\r\n            if (targetLevel == null" +
                    ") return;\r\n        }\r\n\r\n        public override void UpdateLinkedSingleOptionAns" +
                    "wer(Guid questionId, decimal[] rosterVector, decimal[] selectedPropagationVector" +
                    ")\r\n        {\r\n            var targetLevel = this.GetRosterByIdAndVector(question" +
                    "Id, rosterVector);\r\n            if (targetLevel == null) return;\r\n\r\n            " +
                    "if (questionId == IdOf.best_job_owner)\r\n            {\r\n                (targetLe" +
                    "vel as HhMember_type).best_job_owner = selectedPropagationVector;\r\n            }" +
                    "\r\n        }\r\n\r\n        public override void UpdateLinkedMultiOptionAnswer(Guid q" +
                    "uestionId, decimal[] rosterVector, decimal[][] answer)\r\n        {\r\n            v" +
                    "ar targetLevel = this.GetRosterByIdAndVector(questionId, rosterVector);\r\n       " +
                    "     if (targetLevel == null) return;\r\n\r\n            if (questionId == IdOf.marr" +
                    "ied_with)\r\n            {\r\n                (targetLevel as HhMember_type).married" +
                    "_with = answer;\r\n            }\r\n        }\r\n\r\n        public override IInterviewE" +
                    "xpressionState Clone()\r\n        {\r\n            var newScopes = this.InterviewSco" +
                    "pes.ToDictionary(interviewScope => interviewScope.Key, interviewScope => intervi" +
                    "ewScope.Value.CopyMembers());\r\n            var newSiblingRosters = this.SiblingR" +
                    "osters\r\n                .ToDictionary(\r\n                    interviewScope => in" +
                    "terviewScope.Key,\r\n                    interviewScope => new List<string>(interv" +
                    "iewScope.Value));\r\n\r\n            //set parents\r\n            foreach (var intervi" +
                    "ewScope in this.InterviewScopes)\r\n            {\r\n                var parent = in" +
                    "terviewScope.Value.GetParent();\r\n                if (parent != null)\r\n          " +
                    "          newScopes[interviewScope.Key].SetParent(newScopes[Util.GetRosterString" +
                    "Key(parent.GetRosterKey())]);\r\n            }\r\n\r\n            return new StronglyT" +
                    "ypedInterviewEvaluator(newScopes, newSiblingRosters);\r\n        }\r\n    }\r\n}\r\n\r\n//" +
                    " ReSharper restore InconsistentNaming\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class InterviewExpressionStateTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
