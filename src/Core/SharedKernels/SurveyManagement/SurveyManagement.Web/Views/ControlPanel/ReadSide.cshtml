@{
    this.Layout = "~/Views/Shared/_ControlPanelLayout.cshtml";
    this.ViewBag.Title = "Control Panel: Read Side";
}
@model IEnumerable<WB.Core.Infrastructure.EventHandlerDescription>
<div class="page-header">
    <h3>Read Side Control Panel</h3>
</div>

<div class="well">
    @using (Html.BeginForm("RebuildReadSide", "ControlPanel", FormMethod.Get))
    {
        <label for="skipEvents">Skip events:</label>
        @Html.TextBox("skipEvents", "0");
        <input type="submit" value="Rebuild All" class="btn btn-primary" onclick="return confirmAction()" />
        @Html.ActionLink("Stop", "StopReadSideRebuilding", new { }, new { @class = "btn btn-default" })
        <div class="help-block">
            If any of events are skipped, then views will not be deleted.
        </div>
    }

</div>
<pre id="statusArea" style="height: 500px; overflow-y: scroll;">
Requesting status...
</pre>
<h3 style="color: red">We have an issue with synchronization packages. If your denormalizer builds  SynchronizationDelta view you need to rebuild all</h3>
@using (Html.BeginForm("RebuildReadSidePartially", "ControlPanel", FormMethod.Post))
{
    <div class="well">
        <label for="skipEvents">Skip events:</label>
        <br />
        @Html.TextBox("skipEvents", "0");
        <br />
        <br />
        <button class="btn btn-primary" type="submit" onclick="return confirmAction()">Rebuild for selected handlers</button>
    </div>
    <br />
    <div class="well">

        <label for="eventSourceids">Rebuild for event sources:</label>
        <br />
        @Html.TextArea("eventSourceids", "",10,40,new {});
        <br />
        <button class="btn btn-primary" type="submit" onclick="return confirmAction()">Rebuild selected handlers for event sources</button>

    </div>
    <br />
    <table class="table table-striped table-bordered table-condensed table-hover">
        <thead>
            <tr>
                <th></th>
                <th></th>
                <th>Name</th>
                <th>Builds</th>
                <th>Uses</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var handler in Model)
            {
                <tr>
                    <td><input type='checkbox' value="@handler.Name" name="handlers" checked="@IsHandlerChecked(handler.Name)" /></td>
                    <td>
                        @if (handler.SupportsPartialRebuild)
                        {
                            <span class="glyphicon glyphicon-ok pull-right margin-right-5"></span>
                        }
                    </td>
                    <td><b>@handler.Name</b></td>
                    <td>
                        @string.Join(",", handler.BuildsViews)
                    </td>
                    <td>
                        @string.Join(",", handler.UsesViews)
                    </td>
                </tr>
            }
        </tbody>
    </table>

}



@functions{
    public bool IsHandlerChecked(string handlerName)
    {
        if (!TempData.ContainsKey("CheckedHandlers"))
            return false;
        var checkedHandlers = TempData["CheckedHandlers"] as string[];
        if (checkedHandlers == null)
            return false;
        return checkedHandlers.Contains(handlerName);
    }
}
@section scripts
{


    <script type="text/javascript">
        function confirmAction() {
            var confirmed = confirm("Are you sure you want to rebuild read layer at " + window.location.host + " ?");
            return confirmed;
        }
        function updateReadSideStatus() {
            return $.ajax({
                url: '@Url.Action("GetReadSideStatus")',
                data: { timestamp: new Date().getMilliseconds() }
            }).done(function (result) {
                $('#statusArea').text('Updated from server: ' + new Date().toTimeString() + '\r\n\r\n' + result);
            }).fail(function (xhr, status, error) {
                $('#statusArea').text(error + '\r\n' + xhr.responseText + '\r\n\r\nUpdated from server: ' + new Date().toTimeString());
            });
        }

        function updateReadSideStatusNeverending() {
            $.when(updateReadSideStatus()).always(function () {
                setTimeout(updateReadSideStatusNeverending, 3000);
            });
        }

        $(function () {
            updateReadSideStatusNeverending();
        });

    </script>
}
