@using System.Globalization
@using WB.Core.SharedKernels.SurveyManagement.Views.Interview
@model WB.Core.SharedKernels.SurveyManagement.Views.Interview.InterviewQuestionView

@{
    var answers = (decimal[])Model.Answer;
    var selectedOptions = answers == null ? "" : string.Join(",", answers);
    var multiQuestionSettings = Model.Settings as MultiQuestionSettings;

    var jsMaxAllowedAnswersValueAsString = "null";
    if (multiQuestionSettings.MaxAllowedAnswers.HasValue)
    {

        jsMaxAllowedAnswersValueAsString = multiQuestionSettings.MaxAllowedAnswers.Value.ToString();
    }

}

@foreach (var option in Model.Options)
{
    var optionValue = option.Value.ToString();
    var isChecked = answers != null && answers.Contains(Convert.ToDecimal(option.Value));

    <label class="checkbox" for="@getInterviewItemIdWithPostfix(Model.Id, Model.RosterVector, string.Format("option{0}", optionValue))">
        <input type="checkbox" name="@getInterviewItemIdWithPostfix(Model.Id, Model.RosterVector)" id="@getInterviewItemIdWithPostfix(Model.Id, Model.RosterVector, string.Format("option{0}", optionValue))" value="@optionValue" @(isChecked ? "checked" : "")
               data-bind="click: saveCategoricalMultiAnswer.bind($data, '@Model.Id', '@Stringify(Model.RosterVector)', @(multiQuestionSettings.AreAnswersOrdered.ToString().ToLower()), @jsMaxAllowedAnswersValueAsString, '@selectedOptions' )">

        <span>@option.Label</span>
        @if (multiQuestionSettings.AreAnswersOrdered && isChecked)
        {
            <span class="badge">@(answers.Select((item, index) => new {index, item}).First(_ => _.item == (decimal) option.Value).index + 1)</span>
        }
    </label>
}

@functions
{

    public string getInterviewItemIdWithPostfix(Guid questionId, decimal[] rosterVector, string postfix = "")
    {
        return string.Format("{0}_{1}_{2}", questionId, Stringify(rosterVector), postfix);
    }

    public string Stringify(decimal[] array)
    {
        return string.Join("_", array.Select(x => x.ToString(CultureInfo.InvariantCulture)));
    }

}
