<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Main.Core.Entities.SubEntities" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="WB.Core.BoundedContexts.Designer.Implementation.Services.CodeGeneration.Helpers" #>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using WB.Core.SharedKernels.DataCollection.V11;

namespace WB.Core.SharedKernels.DataCollection.Generated
{
	public class <#=Model.ClassName#> : IInterviewExpressionProcessorV11
	{
		public <#=Model.ClassName#>(IInterviewState state) 
		{
			this.state = state;
		}

		internal IInterviewState state;

		public Dictionary<string, IInterviewLevelV11> Levels = new Dictionary<string, IInterviewLevelV11>();
        public Dictionary<string, List<string>> SiblingLevels = new Dictionary<string, List<string>>();

		public void RemoveRoster(Identity rosterId)
        {
        }

        public void RemoveAnswer(Identity questionIdentity)
        {
        }

		public T[] GetLevels<T>(Identity rosterIdentity)
        {
            return new T[0];
        }

		private IInterviewLevelV11 CreateLevel(Identity rosterIdentity)
		{
<#
		foreach (var level in Model.AllLevels) 
		{
#>
			if (rosterIdentity.Id == IdOf.<#= level.Variable #>)
			{
				return new <#= level.ClassName#>(rosterIdentity.RosterVector, this);
			}
<#
		}
#>			
			return null;
		}
	}

<#
	foreach (var level in Model.AllLevels) 
	{
		LevelTemplateV11 template = CreateLevelTemplate(level, Model);
		this.Write(template.TransformText());
	}
#>

	public static class IdOf
	{
		public static readonly Guid <#=CodeGeneratorV2.QuestionnaireIdName#> = <#= Model.Id.AsBytesString() #>;
<#
		foreach (var question in Model.AllQuestions)
		{
#>
		public static readonly Guid <#=question.Variable#> = <#= question.Id.AsBytesString() #>;
<#
		}
#>
<#
		foreach (var roster in Model.AllRosters) 
		{
#>
		public static readonly Guid <#=roster.Variable#> = <#= roster.Level.Id.AsBytesString() #>;
<#
		}
#>
	}
}