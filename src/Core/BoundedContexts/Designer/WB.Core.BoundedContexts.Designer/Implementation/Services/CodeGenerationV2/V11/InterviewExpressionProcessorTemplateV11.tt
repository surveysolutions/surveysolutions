<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Main.Core.Entities.SubEntities" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="WB.Core.BoundedContexts.Designer.Implementation.Services.CodeGeneration.Helpers" #>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using WB.Core.SharedKernels.DataCollection.V11;

namespace WB.Core.SharedKernels.DataCollection.Generated
{
	public class <#=Model.ClassName#> : IInterviewExpressionProcessorV11
	{
		List<Guid> expressionsOrder = new List<Guid>();
		public <#=Model.ClassName#>()
		{
<#
		foreach (Guid id in Model.ConditionsPlayOrder) 
		{
			if (Model.IdMap.ContainsKey(id))
            {
#>
			expressionsOrder.Add(IdOf.<#=Model.IdMap[id]#> );
<#
            }
			else{
#>
			expressionsOrder.Add(<#= id.AsBytesString() #>);
<#
            }
		}
#>	
		}
		public void Initialize(IInterviewState state, IInterviewProperties properties) 
		{
			this.state = state;
		}

		internal IInterviewState state;

		// multiple roster Identities to level key 
		public Dictionary<Identity, string> LevelKeyMap = new Dictionary<Identity, string>();

		public Dictionary<string, IInterviewLevelV11> Levels = new Dictionary<string, IInterviewLevelV11>();
		
		public List<Guid> GetExpressionsOrder()
		{
			return this.expressionsOrder;
		}

		public IInterviewLevelV11 GetLevel(Identity parentIdentity)
		{
			return CreateLevel(parentIdentity);
		}
		
		public T[] GetLevels<T>(Identity rosterIdentity)
        {
            return new T[0];
        }

		private IInterviewLevelV11 CreateLevel(Identity rosterIdentity)
		{
<#
		foreach (var level in Model.AllLevels) 
		{
#>
			if (rosterIdentity.Id == IdOf.<#= level.Variable #>)
			{
				return new <#= level.ClassName#>(rosterIdentity.RosterVector, this);
			}
<#
		}
#>			
			return null;
		}
	}

<#
	foreach (var level in Model.AllLevels) 
	{
		LevelTemplateV11 template = CreateLevelTemplate(level, Model);
		this.Write(template.TransformText());
	}
#>

	public static class IdOf
	{
<#
		foreach (var pair in Model.IdMap)
		{
#>
		public static readonly Guid <#=pair.Value#> = <#= pair.Key.AsBytesString() #>;
<#
		}
#>
	}
}