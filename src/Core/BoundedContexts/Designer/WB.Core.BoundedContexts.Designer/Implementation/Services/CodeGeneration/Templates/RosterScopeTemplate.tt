<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #> 
    internal partial class <#=Model.GeneratedTypeName#> : AbstractConditionalLevel<<#=this.Model.GeneratedTypeName#>>
	<# if(Model.IsIRosterLevelInherited){#>
	, IRosterLevel<<#=this.Model.GeneratedTypeName#>> 
	<#}#>
	, IExpressionExecutable
    {    
        public <#=Model.GeneratedTypeName#>(decimal[] rosterVector, Identity[] rosterKey, <#=this.Model.ParentTypeName#> parent, Func<Identity[], Guid, IEnumerable<IExpressionExecutable>> getInstances, 
            Dictionary<Guid, Guid[]> conditionalDependencies, Dictionary<Guid, Guid[]> structureDependencies)
            : this(rosterVector, rosterKey, getInstances, conditionalDependencies, structureDependencies)
        {
            this.@_parent = parent; 
        }

        private <#=Model.GeneratedTypeName#>(decimal[] rosterVector, Identity[] rosterKey, Func<Identity[], Guid, IEnumerable<IExpressionExecutable>> getInstances, 
            Dictionary<Guid, Guid[]> conditionalDependencies, Dictionary<Guid, Guid[]> structureDependencies)
            : base(rosterVector, rosterKey, getInstances, conditionalDependencies, structureDependencies)
        {           
        <#foreach (var @group in Model.Groups) 
        {#>
            EnablementStates.Add(<#=@group.GeneratedStateName#>.ItemId, <#= @group.GeneratedStateName#>);
        <# }#>

        <#foreach (var @roster in Model.RostersInScope) 
        {#>
            EnablementStates.Add(<#=@roster.GeneratedStateName#>.ItemId, <#= @roster.GeneratedStateName#>);
        <# }#>

        <#foreach (var question in Model.Questions) 
        {#>            
            EnablementStates.Add(<#=question.GeneratedStateName#>.ItemId, <#=question.GeneratedStateName#>);
            <#
            bool hasAnyValidation = !string.IsNullOrWhiteSpace(question.Validations) || question.IsMandatory;                       

            if(hasAnyValidation)
            {#>    
            ValidationExpressions.Add(new Identity(IdOf.<#= question.GeneratedIdName#>, rosterVector), new Func<bool>[] {                             
                <#if(question.IsMandatory) {#>  
                <#= question.GeneratedMandatoryMethodName #> ,                                               
                <# }#>
                <#if(!string.IsNullOrWhiteSpace(question.Validations)) {#>  
                    () => this.IsAnswerEmpty(<#=question.VariableName#>) || <#=question.GeneratedValidationsMethodName#>() , 
                <# }#>
            });             
            <# }#>
            AddUpdaterToMap(IdOf.<#=question.GeneratedIdName#>, (<#=question.GeneratedTypeName#> val) => {<#=question.GeneratedMemberName#>  = val; });
        <# }#>
        <#foreach (var @roster in Model.Rosters) 
        {#>    
            RosterGenerators.Add(IdOf.<#=@roster.GeneratedIdName#>, (decimals, identities) => new <#=@roster.GeneratedTypeName#>(decimals, identities, this, this.GetInstances, this.ConditionalDependencies, this.StructuralDependencies));
        <# }#> 

        <#foreach (var tuple in Model.ExecutorModel.GetOrderedListByConditionDependency(Model.Questions, Model.Groups, Model.RostersInScope)) 
        {#> 
            _conditionExpressions.Add(Verifier(<#= tuple.Item1#>, <#=tuple.Item2#>.ItemId, <#= tuple.Item2#>));                        
        <#}#>
        }
    
        private <#= Model.ParentTypeName#> @_parent;		

        <#foreach (var parentQuestion in Model.AllParentsQuestionsToTop) 
        {#>
        public <#=parentQuestion.GeneratedTypeName#> <#=parentQuestion.VariableName#> { get { return this.@_parent.<#=parentQuestion.VariableName#>; } }                                        
        <#}#>

      
        <# if(Model.AreRowSpecificVariablesPresent){#>
		public decimal @rowcode { get { return RosterVector.Last(); } }

        public int @rowindex { get { return @_parent.<#=this.Model.RostersInScope[0].VariableName#>.Select((s, i) => new { Index = i, Value = s }).Where(t => t.Value.@rowcode == this.@rowcode).Select(t => t.Index).First(); } }    

        public string @rowname { get; private set; }

		void IRosterLevel.SetRowName(string rosterRowName)
        {
			this.@rowname = rosterRowName;
        }

		public RosterRowList<<#=this.Model.GeneratedTypeName#>> @roster
        {
			get { return @_parent.<#=this.Model.RostersInScope[0].VariableName#>; }
        }
		<# }#>

		<#foreach (var parentRoster in Model.AllParentsRostersToTop) 
		{#>
			public <#=Model.RosterType#><<#=parentRoster.GeneratedTypeName#>> <#=parentRoster.VariableName#> { get { return this.@_parent.<#=parentRoster.VariableName#>; } }                                        
		<#}#>
		public IExpressionExecutable CopyMembers(Func<Identity[], Guid, IEnumerable<IExpressionExecutable>> getInstances)
        {
            var level = new <#=Model.GeneratedTypeName#>(this.RosterVector, this.RosterKey, getInstances, ConditionalDependencies, StructuralDependencies)
            {
                ValidAnsweredQuestions = new HashSet<Guid>(this.ValidAnsweredQuestions),
                InvalidAnsweredQuestions = new HashSet<Guid>(this.InvalidAnsweredQuestions),

             <#foreach (var q in Model.Questions) 
             {#>        
                <#=q.GeneratedMemberName#> = this.<#=q.GeneratedMemberName#>,        
             <#}#>
            };

			<# if(Model.AreRowSpecificVariablesPresent){#>
			((IRosterLevel)level).SetRowName(this.@rowname);
			<# } #>

            ConditionalDependencies = new Dictionary<Guid, Guid[]>(this.ConditionalDependencies);
            StructuralDependencies = new Dictionary<Guid, Guid[]>(this.StructuralDependencies);

            foreach (var state in level.EnablementStates)
            {
                var originalState = this.EnablementStates[state.Key];
                state.Value.PreviousState = originalState.PreviousState;
                state.Value.State = originalState.State;
            }
         
            return level;
        }

        
        <#foreach (var question in Model.Questions) 
        {#>            
        private <#=question.GeneratedTypeName#> <#=question.GeneratedMemberName#> = null;
        private ConditionalState <#= question.GeneratedStateName#> = new ConditionalState(IdOf.<#=question.GeneratedIdName#>);
        public <#=question.GeneratedTypeName#> <#=question.VariableName#>
        {
            get { return <#=question.GeneratedStateName#>.State != State.Disabled ? this.<#=question.GeneratedMemberName#> : null; }
            
        }
        <#if(!string.IsNullOrWhiteSpace(question.Conditions) && Model.ExecutorModel.GenerateEmbeddedExpressionMethods)
        {#>      
        private bool <#=question.GeneratedConditionsMethodName#>()
        {
            return <#=question.Conditions#>;
        }      
        <# }#>

        <#if(!string.IsNullOrWhiteSpace(question.Validations) && Model.ExecutorModel.GenerateEmbeddedExpressionMethods)
        {#>        
        private bool <#=question.GeneratedValidationsMethodName#>()
        {
            return <#=question.Validations#>;
        }  
        <# }#>
        <#if(question.IsMandatory)
        {#>        
        private bool <#=question.GeneratedMandatoryMethodName#>()
        {
            return !this.IsAnswerEmpty(<#=question.VariableName#>);
        }
        <# }#>
        <# }#>
        //groups
        <#foreach (var @group in Model.Groups) 
        {#>
        private ConditionalState <#= @group.GeneratedStateName#> = new ConditionalState(IdOf.<#=@group.GeneratedIdName#>, ItemType.Group);
        <#if(!string.IsNullOrWhiteSpace(@group.Conditions) && Model.ExecutorModel.GenerateEmbeddedExpressionMethods)
        {#>      
        private bool <#=@group.GeneratedConditionsMethodName#>()
        {
            return <#=@group.Conditions#>;
        }      
        <# }#>
        <# }#>
        //rosters
        <#foreach (var @roster in Model.Rosters) 
        {#>
        public <#=Model.RosterType#><<#=@roster.GeneratedTypeName#>> <#=@roster.VariableName#>
        {
            get
            {
                var rosters = this.GetInstances(this.RosterKey, IdOf.<#=@roster.GeneratedRosterScopeName#>.Last());
				<#if(Model.RosterType=="IEnumerable"){#>
					return  rosters == null ? new List<<#=@roster.GeneratedTypeName#>>() : rosters.Select(x => x as <#=@roster.GeneratedTypeName#>).ToList();
				<#}else{#>
				return  new RosterRowList<<#=@roster.GeneratedTypeName#>>(rosters);
				<#}#>
            }
        }
		<#}#>

        <#foreach (var @roster in Model.RostersInScope) 
        {#>        

        private ConditionalState <#= @roster.GeneratedStateName#> = new ConditionalState(IdOf.<#=@roster.GeneratedIdName#>, ItemType.Group);

        <#if(!string.IsNullOrWhiteSpace(@roster.Conditions) && Model.ExecutorModel.GenerateEmbeddedExpressionMethods)
        {#>      
        private bool <#=@roster.GeneratedConditionsMethodName#>()
        {
            return <#=@roster.Conditions#>;
        }      
        <# }#>

        <# }#>
        

        private readonly List<Action> _conditionExpressions = new List<Action>();
        
        protected override IEnumerable<Action> ConditionExpressions
        {
            get
            {
                return _conditionExpressions;
            }
        }

        public void CalculateValidationChanges(out List<Identity> questionsToBeValid, out List<Identity> questionsToBeInvalid)
        {
            this.Validate(out questionsToBeValid, out questionsToBeInvalid);
        }
             
        public void SetParent(IExpressionExecutable parentLevel)            
        {
            this.@_parent = parentLevel as <#= Model.ParentTypeName#>;
        }

        public IExpressionExecutable GetParent()
        {
            return this.@_parent;
        }
    }
