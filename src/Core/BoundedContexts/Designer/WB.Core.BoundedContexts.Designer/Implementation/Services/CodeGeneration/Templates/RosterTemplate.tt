<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
    private class <#=Model.GeneratedTypeName#> : AbstractRosterLevel<<#=this.Model.GeneratedTypeName#>>, IValidatable
    {
    
        public <#=Model.GeneratedTypeName#>(decimal[] rosterVector, Identity[] rosterKey, <#=this.Model.GetParentScope().GetTypeName()#> parent, Func<Identity[], IEnumerable<IValidatable>> getInstances, Dictionary<Guid, Guid[]> conditionalDependencies)
            : this(rosterVector, rosterKey, getInstances, conditionalDependencies)
        {
            this.@__parent = parent; 
        }

        private <#=Model.GeneratedTypeName#>(decimal[] rosterVector, Identity[] rosterKey, Func<Identity[], IEnumerable<IValidatable>> getInstances, Dictionary<Guid, Guid[]> conditionalDependencies)
            : base(rosterVector, rosterKey, getInstances, conditionalDependencies)
        {
        //TODO: generate mandatory                
        <#foreach (var @group in Model.Groups) 
            {#>
            EnablementStates.Add(<#=@group.GeneratedStateName#>.ItemId, <#= @group.GeneratedStateName#>);
        <# }#>
        <#foreach (var q in Model.Questions) 
                        {#>            
            EnablementStates.Add(<#=q.GeneratedStateName#>.ItemId, <#=q.GeneratedStateName#>);        
        <#if(!string.IsNullOrWhiteSpace(q.Validations))
            {#>                 
            ValidationExpressions.Add(new Identity(IdOf.<#= q.GeneratedIdName#>, this.RosterVector), new Func<bool>[] { <#=q.GeneratedValidationsMethodName#> });                      
        <# }#>
            AddUpdaterToMap(IdOf.<#= q.GeneratedIdName#>, (<#=q.GeneratedTypeName#> val) => {<#=q.GeneratedMemberName#>  = val; });
        <# }#>
        <#foreach (var @roster in Model.Rosters) 
        {#>    
            RosterGenerators.Add(IdOf.<#=@roster.GeneratedIdName#>, (decimals, identities) => new <#=@roster.GeneratedTypeName#>(rosterVector, identities, this, this.GetInstances, this.ConditionalDependencies));
        <# }#>    
        }
    
        private <#= Model.GetParentScope().GetTypeName()#> @__parent;

        <#foreach (var parentQuestion in Model.GetParentScope().GetQuestions()) 
        {#>
        public <#=parentQuestion.GeneratedTypeName#> <#=parentQuestion.VariableName#> { get { return this.@__parent.<#=parentQuestion.VariableName#>; } }                                        
        <#}#>

        <#foreach (var parentRoster in Model.GetParentScope().GetRosters()) 
        {#>
        public <#=parentRoster.GeneratedTypeName#>[] <#=parentRoster.VariableName#> { get { return this.@__parent.<#=parentRoster.VariableName#>; } }                                        
        <#}#>
                
        public IValidatable CopyMembers()
        {
            var level = new <#=Model.GeneratedTypeName#>(this.RosterVector, this.RosterKey, this.GetInstances, ConditionalDependencies)
            {
                ValidAnsweredQuestions = new HashSet<Guid>(this.ValidAnsweredQuestions),
                InvalidAnsweredQuestions = new HashSet<Guid>(this.InvalidAnsweredQuestions),

                <#foreach (var q in Model.Questions) 
                        {#>        
                <#=q.VariableName#> = this.<#=q.GeneratedMemberName#>,        
                <#}#>        
            };

            ConditionalDependencies = new Dictionary<Guid, Guid[]>(this.ConditionalDependencies);

            foreach (var state in level.EnablementStates)
            {
                var originalState = this.EnablementStates[state.Key];
                state.Value.PreviousState = originalState.PreviousState;
                state.Value.State = originalState.State;
            }
         
            return level;
        }
        
        <#foreach (var question in Model.Questions) 
        {#>            
        private <#=question.GeneratedTypeName#> <#=question.GeneratedMemberName#>;
        private ConditionalState <#= question.GeneratedStateName#> = new ConditionalState(IdOf.<#=question.GeneratedIdName#>);
        public <#=question.GeneratedTypeName#> <#=question.VariableName#>
        {
            get { return <#=question.GeneratedStateName#>.State == State.Enabled ? this.<#=question.GeneratedMemberName#> : null; }
            private set { this.<#=question.GeneratedMemberName#> = value; }
        }
        <#if(!string.IsNullOrWhiteSpace(question.Conditions))
        {#>      
        private bool <#=question.GeneratedConditionsMethodName#>()
        {
            return <#=question.Conditions#>;
        }      
        <# }#>

        <#if(!string.IsNullOrWhiteSpace(question.Validations))
        {#>        
        private bool <#=question.GeneratedValidationsMethodName#>()
        {
            return <#=question.Validations#>;
        }  
        <# }#>

        <# }#>
        //groups
        <#foreach (var @group in Model.Groups) 
        {#>
        private ConditionalState <#= @group.GeneratedStateName#> = new ConditionalState(IdOf.<#=@group.GeneratedIdName#>, ItemType.Group);
        <#if(!string.IsNullOrWhiteSpace(@group.Conditions))
        {#>      
        private bool <#=@group.GeneratedConditionsMethodName#>()
        {
            return <#=@group.Conditions#>;
        }      
        <# }#>
        <# }#>
        //rosters
        <#foreach (var @roster in Model.Rosters) 
        {#>
        public <#=@roster.GeneratedTypeName#>[] <#=@roster.VariableName#>
        {
            get 
            {
                var rosters = this.GetInstances(this.RosterKey);
                return rosters == null ? new <#=@roster.GeneratedTypeName#>[0] : rosters.Select(x => x as <#=@roster.GeneratedTypeName#>).ToArray();
            }
        }
        <# }#>
        protected override IEnumerable<Action> ConditionExpressions
        {
            get
            {
                return new List<Action>
                {
                <#foreach (var q in Model.Questions) 
                {#>
                <#if(!string.IsNullOrWhiteSpace(q.Conditions))
                    {#>
                    Verifier(<#= q.GeneratedConditionsMethodName#>, <#= q.GeneratedStateName#>.ItemId, <#= q.GeneratedStateName#>),                        
                <# }#>
                <#}#>

                <#foreach (var g in Model.Groups) 
                {#>
                <#if(!string.IsNullOrWhiteSpace(g.Conditions))
                {#>
                    Verifier(<#= g.GeneratedConditionsMethodName#>, <#= g.GeneratedStateName#>.ItemId, <#= g.GeneratedStateName#>),                        
                <# }#>
                <#}#>
                };
            }
        }

        public void CalculateValidationChanges(List<Identity> questionsToBeValid, List<Identity> questionsToBeInvalid)
        {
            this.Validate(questionsToBeValid, questionsToBeInvalid);
        }
             
        public void SetParent(IValidatable parentLevel)            
        {
        <#if(Model.GetParentScope() != null)
        {#>
            this.@__parent = parentLevel as <#= Model.GetParentScope().GetTypeName()#>;
        <# }#>
        }

        public IValidatable GetParent()
        {
            return this.@__parent;
        }
}