<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>


        public class <#=Model.RosterGeneratedTypeName#> : AbstractRosterLevel<<#=this.Model.RosterGeneratedTypeName#>>, IValidatable
        {
            public <#=Model.RosterGeneratedTypeName#>(decimal[] rosterVector, Identity[] rosterKey, <#=this.Model.GetParent().GetTypeName()#> parent, Func<Identity[], IEnumerable<IValidatable>> getInstances, Dictionary<Guid, Guid[]> conditionalDependencies)
                : this(rosterVector, rosterKey, getInstances, conditionalDependencies)
            {
                this.@__parent = parent; 
            }

            public <#=Model.RosterGeneratedTypeName#>(decimal[] rosterVector, Identity[] rosterKey, Func<Identity[], IEnumerable<IValidatable>> getInstances, Dictionary<Guid, Guid[]> conditionalDependencies)
                : base(rosterVector, rosterKey, getInstances, conditionalDependencies)
            {
                
                <#foreach (var @group in Model.Groups) 
                {#>

                    EnablementStates.Add(<#=@group.GeneratedGroupStateName#>.ItemId, <#= @group.GeneratedGroupStateName#>);
                <# }#>

                <#foreach (var q in Model.Questions) 
                    {#>

                    //EnablementStates.Add(age_state.ItemId, age_state);
                    EnablementStates.Add(<#=q.GeneratedQuestionStateName#>.ItemId, <#=q.GeneratedQuestionStateName#>);        

                    <#if(!string.IsNullOrWhiteSpace(q.Validations))
                    {#>        
                        //TODO: generate mandatory
                        //validationExpressions.Add(new Identity(IdOf.name, this.RosterVector), new Func<bool>[] { name_IsMandatory });
                    
                        validationExpressions.Add(new Identity(<#=q.Id#>, this.RosterVector), new Func<bool>[] { <#=q.VariableName#>_IsEnabledIf });              
        
                    <# }#>

                <# }#>
            }

            //TODO: dynamicly generate reference to the parent and it's questions
            private <#= Model.GetParent().GetTypeName()#> @__parent;

            <#foreach (var parentQuestion in Model.GetParent().GetQuestions()) 
            {#>
                public <#=parentQuestion.GeneratedQuestionTypeName#> <#=parentQuestion.VariableName#> { get { return this.@__parent.<#=parentQuestion.VariableName#>; } }                                        
            <#}#>

            <#foreach (var q in Model.Questions) 
              {#>
        
                        <#=q.VariableName#> = this.<#=q.GeneratedQuestionMemberName#>,
        
            <#}#>

            public IValidatable CopyMembers()
            {
                var level = new <#=Model.RosterGeneratedTypeName#>(this.RosterVector, this.RosterKey, this.GetInstances, ConditionalDependencies)
                {
                    ValidAnsweredQuestions = new HashSet<Guid>(this.ValidAnsweredQuestions),
                    InvalidAnsweredQuestions = new HashSet<Guid>(this.InvalidAnsweredQuestions),

                <#foreach (var q in Model.Questions) 
                  {#>        
                        <#=q.VariableName#> = this.<#=q.GeneratedQuestionMemberName#>,
        
                <#}#>        
                };

                ConditionalDependencies = new Dictionary<Guid, Guid[]>(this.ConditionalDependencies);

                foreach (var state in level.EnablementStates)
                {
                    var originalState = this.EnablementStates[state.Key];
                    state.Value.PreviousState = originalState.PreviousState;
                    state.Value.State = originalState.State;
                }

                return level;
            }

        <#foreach (var question in Model.Questions) 
        {#>            
            private <#=question.GeneratedQuestionTypeName#> <#=question.GeneratedQuestionMemberName#>;

            public <#=question.GeneratedQuestionTypeName#> <#=question.VariableName#>
                {
                    get { return <#=question.GeneratedQuestionStateName#>.State == State.Enabled ? this.<#=question.GeneratedQuestionMemberName#> : null; }
                    set { this.<#=question.GeneratedQuestionMemberName#> = value; }
                }

            private ConditionalState <#= question.GeneratedQuestionStateName#> = new ConditionalState(<#=question.Id#>);

            <#if(!string.IsNullOrWhiteSpace(question.Conditions))
              {#>        
                private bool <#=question.VariableName#>_IsEnabledIf()
                {
                    return <#=question.Conditions#>;
                }       
        
            <# }#>

            <#if(!string.IsNullOrWhiteSpace(question.Validations))
            {#>        
                private bool <#=question.VariableName#>_IsValidIf()
                {
                    return <#=question.Validations#>;
                }       
        
            <# }#>
       <# }#>
           
        <#foreach (var @group in Model.Groups) 
        {#>
            private ConditionalState <#= @group.GeneratedGroupStateName#> = new ConditionalState(<#=@group.Id#>, ItemType.Group);
        <# }#>
     
        //reference to self roster
        public <#=Model.RosterGeneratedTypeName#>[] <#=Model.VariableName#>
        {
            get
                {
                    var rosters = this.GetInstances(this.RosterKey);
                    return rosters == null ? new <#=Model.RosterGeneratedTypeName#>[0] : rosters.Select(x => x as <#=Model.RosterGeneratedTypeName#>).ToArray();
                }
            }

            protected override IEnumerable<Action> ConditionExpressions
            {
                get
                {
                    return new[]
                {
                    <#foreach (var q in Model.Questions) 
                      {#>

                        <#if(!string.IsNullOrWhiteSpace(q.Conditions))
                        {#>        
                            Verifier(<#= q.VariableName#>_IsEnabledIf, <#= q.GeneratedQuestionStateName#>.ItemId, <#= q.GeneratedQuestionStateName#>),                        
                        <# }#>
                    <#}#>
                };
            }

            public void CalculateValidationChanges(List<Identity> questionsToBeValid, List<Identity> questionsToBeInvalid)
            {
                this.Validate(questionsToBeValid, questionsToBeInvalid);
            }

            //TODO: fix for questionnaire level
            public void SetParent(IValidatable parentLevel)            
            {
            <#if(Model.GetParent() != null)
            {#>
                    this.@__parent = parentLevel as <#= Model.GetParent().GetTypeName()#>;
            <# }#>
            }

            public IValidatable GetParent()
            {
                return this.@__parent;
            }
      }
}