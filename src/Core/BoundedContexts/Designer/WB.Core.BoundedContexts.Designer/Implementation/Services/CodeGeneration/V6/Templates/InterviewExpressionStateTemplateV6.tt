<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Main.Core.Entities.SubEntities" #>
<#@ import namespace="System.Text.RegularExpressions" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
<#
foreach (var namespaceToInclude in QuestionnaireStructure.Namespaces)
{
#>
using <#=namespaceToInclude#>;
<#
}
#>

namespace WB.Core.SharedKernels.DataCollection.Generated
{
	public class <#=QuestionnaireStructure.ClassName#> : AbstractInterviewExpressionStateV6
	{
		public <#=QuestionnaireStructure.ClassName#>() : base()
		{
			var questionnaireLevelScope = new[] { IdOf.@__questionnaire };
			var questionnaireIdentityKey = Util.GetRosterKey(questionnaireLevelScope, Util.EmptyRosterVector);
			var questionnaireLevel = new <#=QuestionnaireStructure.QuestionnaireLevelModel.TypeName#>(
				Util.EmptyRosterVector, 
				questionnaireIdentityKey, 
				this.GetRosterInstances, 
				IdOf.conditionalDependencies, 
				IdOf.structuralDependencies, 
				this.InterviewProperties);
			this.InterviewScopes.Add(Util.GetRosterStringKey(questionnaireIdentityKey), questionnaireLevel);				
		}

		public <#=QuestionnaireStructure.ClassName#>(
			Dictionary<string, IExpressionExecutableV6> interviewScopes, 
			Dictionary<string, List<string>> siblingRosters, 
			IInterviewProperties interviewProperties)
		 :base(interviewScopes, siblingRosters, interviewProperties){}

		protected override bool HasParentScropeRosterId(Guid rosterId){
			return IdOf.parentScopeMap.ContainsKey(rosterId);
		}

		protected override Guid GetQuestionnaireId()
		{
			return IdOf.@__questionnaire;
		}

		protected override Guid[] GetParentRosterScopeIds(Guid rosterId)
		{
			return IdOf.parentScopeMap[rosterId];
		}

		public override IInterviewExpressionState Clone()
		{
			return new <#=QuestionnaireStructure.ClassName#>(this.InterviewScopes, this.SiblingRosters, this.InterviewProperties);
		}
		

		public override Dictionary<Guid, Guid[]> GetParentsMap() 
		{
			return IdOf.parentScopeMap;
		}
	}
		//generate QuestionnaireLevel
<#	
			QuestionnaireLevelTemplateV6 questionnairetemplate = CreateQuestionnaireLevelTemplate();
			this.Write(questionnairetemplate.TransformText());						   
#>

		//generating rosters
<#
		foreach (var rosterGroup in QuestionnaireStructure.RostersGroupedByScope) 
		{
			RosterScopeTemplateV6 template = CreateRosterScopeTemplate(rosterGroup.Value);
			this.Write(template.TransformText());
		}
#>

	public static class IdOf
	{
		public static readonly Guid @__questionnaire = Guid.Parse("<#= QuestionnaireStructure.Id #>"); 
		//questions
<#
		foreach (var q in QuestionnaireStructure.AllQuestions) 
		{
#>
		public static readonly Guid <#= q.IdName#> = Guid.Parse("<#= q.Id #>");
<# 
		}
#>
		//groups
<#
		foreach (var g in QuestionnaireStructure.AllGroups) 
		{
#>
		public static readonly Guid <#= g.IdName#> = Guid.Parse("<#= g.Id #>");
<# 
		}
#>
		//rosters
<#
		foreach (var r in QuestionnaireStructure.AllRosters) 
		{
#>
		public static readonly Guid <#= r.IdName#> = Guid.Parse("<#= r.Id #>");
<# 
		}
#>
		public static readonly Guid[] <#=QuestionnaireStructure.QuestionnaireLevelModel.RosterScopeName#> = new[] {@__questionnaire};

<#
		foreach (var r in QuestionnaireStructure.AllRosters)
		{
#>
		public static readonly Guid[] <#= r.RosterScopeName#> = new[] {<#=String.Join(" ,", r.RosterScope.Select(g => string.Format("Guid.Parse(\"{0}\")", g)).ToArray()) #>};
<# 
		}
#>
			
		public static Dictionary<Guid, Guid[]> conditionalDependencies = new Dictionary<Guid, Guid[]>()
		{			
<#
			foreach (var dependency in QuestionnaireStructure.ConditionalDependencies)
			{
#>
			{Guid.Parse("<#= dependency.Key #>"), new Guid[]{
<#
			foreach (var dependencyValue in dependency.Value)
			{
#>
				Guid.Parse("<#= dependencyValue #>"),
<# 
			}
#>
			}},
<# 
			}
#>
		};

		public static Dictionary<Guid, Guid[]> structuralDependencies = new Dictionary<Guid, Guid[]>()
		{
<#
			foreach (var dependency in QuestionnaireStructure.StructuralDependencies) 
			{
#>
			{ Guid.Parse("<#= dependency.Key #>"), new Guid[]{
<#
			foreach (var d in dependency.Value)
			{
#>
				Guid.Parse("<#= d #>"),
<# 
			}
#>
			}},
<#
			}
#>
		};

		public static Dictionary<Guid, Guid[]> parentScopeMap = new Dictionary<Guid, Guid[]>
		{
<#			//questions
			foreach (var q in QuestionnaireStructure.AllQuestions) 
			{
#>
			{<#= q.IdName#>, <#= q.RosterScopeName#>},
<# 
			}
#>
			//groups
<#
			foreach (var g in QuestionnaireStructure.AllGroups) 
			{
#>
			{<#= g.IdName#>, <#= g.RosterScopeName#>},
<# 
			}
#>
			//rosters
<#
			foreach (var r in QuestionnaireStructure.AllRosters)
			{
#>
			{<#= r.IdName#>, <#= r.RosterScopeName#>},
<# 
			}
#>
		};
	}
}