<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #> 
    internal partial class <#=Model.TypeName#> : AbstractConditionalLevelInstanceV4<<#=this.Model.TypeName#>>
		, IRosterLevel<<#=this.Model.TypeName#>> 
		, IExpressionExecutableV2
    {    
        public <#=Model.TypeName#>(decimal[] rosterVector, Identity[] rosterKey, <#=this.Model.ParentTypeName#> parent, Func<Identity[], Guid, IEnumerable<IExpressionExecutableV2>> getInstances, 
            Dictionary<Guid, Guid[]> conditionalDependencies, Dictionary<Guid, Guid[]> structureDependencies, IInterviewProperties interviewProperties)
            : this(rosterVector, rosterKey, getInstances, conditionalDependencies, structureDependencies, interviewProperties)
        {
            this.@_parent = parent; 
        }

        private <#=Model.TypeName#>(decimal[] rosterVector, Identity[] rosterKey, Func<Identity[], Guid, IEnumerable<IExpressionExecutableV2>> getInstances, 
            Dictionary<Guid, Guid[]> conditionalDependencies, Dictionary<Guid, Guid[]> structureDependencies, IInterviewProperties interviewProperties)
            : base(rosterVector, rosterKey, getInstances, conditionalDependencies, structureDependencies, interviewProperties)
        {           
        <#foreach (var @group in Model.Groups) 
        {#>
            EnablementStates.Add(<#=@group.StateName#>.ItemId, <#= @group.StateName#>);
        <# }#>

        <#foreach (var @roster in Model.RostersInScope) 
        {#>
            EnablementStates.Add(<#=@roster.StateName#>.ItemId, <#= @roster.StateName#>);
        <# }#>

        <#foreach (var question in Model.Questions) 
        {#>            
            EnablementStates.Add(<#=question.StateName#>.ItemId, <#=question.StateName#>);
            <#
                                
            if(question.HasAnyValidation())
            {#>    
            ValidationExpressions.Add(new Identity(IdOf.<#= question.IdName#>, rosterVector), new Func<bool>[] {                             
                () => this.IsAnswerEmpty(<#=question.VariableName#>) || <#=question.ValidationExpressions.FirstOrDefault(x=> !string.IsNullOrWhiteSpace(x.ValidationExpression)).ValidationMethodName#>()                
            });             
            <# }#>
            AddUpdaterToMap(IdOf.<#=question.IdName#>, (<#=question.TypeName#> val) => {<#=question.MemberName#>  = val; });
        <# }#>
        <#foreach (var @roster in Model.Rosters) 
        {#>    
            RosterGenerators.Add(IdOf.<#=@roster.IdName#>, (decimals, identities) => new <#=@roster.TypeName#>(decimals, identities, this, this.GetInstances, this.ConditionalDependencies, this.StructuralDependencies, this.Quest));
        <# }#> 


<#
	foreach (var method in Model.ConditionMethodsSortedByExecutionOrder) 
    {
#>
		_conditionExpressions.Add(Verifier(<#= method.ConditionMethodName#>, <#=method.StateName#>.ItemId, <#= method.StateName#>));                        
<#
	}
#>
    
        private <#= Model.ParentTypeName#> @_parent;		

        <#foreach (var parentQuestion in Model.AllParentsQuestionsToTop) 
        {#>
        public <#=parentQuestion.TypeName#> <#=parentQuestion.VariableName#> { get { return this.@_parent.<#=parentQuestion.VariableName#>; } }                                        
        <#}#>

		public decimal @rowcode { get { return this.RosterVector.Last(); } }

        public int @rowindex { get { return @_parent.<#=this.Model.RostersInScope[0].VariableName#>.Select((s, i) => new { Index = i, Value = s }).Where(t => t.Value.@rowcode == this.@rowcode).Select(t => t.Index).First(); } }    

        public string @rowname { get; private set; }

		void IRosterLevel.SetRowName(string rosterRowName)
        {
			this.@rowname = rosterRowName;
        }

		public RosterRowList<<#=this.Model.TypeName#>> @roster
        {
			get { return @_parent.<#=this.Model.RostersInScope[0].VariableName#>; }
        }

		<#foreach (var parentRoster in Model.AllParentsRostersToTop) 
		{#>
			public RosterRowList<<#=parentRoster.TypeName#>> <#=parentRoster.VariableName#> { get { return this.@_parent.<#=parentRoster.VariableName#>; } }                                        
		<#}#>

		public override IExpressionExecutableV2 CopyMembers(Func<Identity[], Guid, IEnumerable<IExpressionExecutableV2>> getInstances)
        {
            var level = new <#=Model.TypeName#>(this.RosterVector, this.RosterKey, getInstances, ConditionalDependencies, StructuralDependencies, this.Quest)
            {
                ValidAnsweredQuestions = new HashSet<Guid>(this.ValidAnsweredQuestions),
                InvalidAnsweredQuestions = new HashSet<Guid>(this.InvalidAnsweredQuestions),

             <#foreach (var q in Model.Questions) 
             {#>        
                <#=q.MemberName#> = this.<#=q.MemberName#>,        
             <#}#>
            };

			((IRosterLevel)level).SetRowName(this.@rowname);

            ConditionalDependencies = new Dictionary<Guid, Guid[]>(this.ConditionalDependencies);
            StructuralDependencies = new Dictionary<Guid, Guid[]>(this.StructuralDependencies);

            foreach (var state in level.EnablementStates)
            {
                var originalState = this.EnablementStates[state.Key];
                state.Value.PreviousState = originalState.PreviousState;
                state.Value.State = originalState.State;
            }
         
            return level;
        }

		public IExpressionExecutable CopyMembers(Func<Identity[], Guid, IEnumerable<IExpressionExecutable>> getInstances)
        {
            return null;
        }
		       
        <#foreach (var question in Model.Questions) 
        {#>            
        private <#=question.TypeName#> <#=question.MemberName#> = null;
        private ConditionalState <#= question.StateName#> = new ConditionalState(IdOf.<#=question.IdName#>);
        public <#=question.TypeName#> <#=question.VariableName#>
        {
            get { return <#=question.StateName#>.State != State.Disabled ? this.<#=question.MemberName#> : null; }
            
        }
        <# }#>
        //groups
        <#foreach (var @group in Model.Groups) 
        {#>
        private ConditionalState <#= @group.StateName#> = new ConditionalState(IdOf.<#=@group.IdName#>, ItemType.Group);
        <# }#>
        //rosters
        <#foreach (var @roster in Model.Rosters) 
        {#>
        public RosterRowList<<#=@roster.TypeName#>> <#=@roster.VariableName#>
        {
            get
            {
                var rosters = this.GetInstances(this.RosterKey, IdOf.<#=@roster.RosterScopeName#>.Last());
				return  new RosterRowList<<#=@roster.TypeName#>>(rosters);
            }
        }
		<#}#>

        <#foreach (var @roster in Model.RostersInScope) 
        {#>        

        private ConditionalState <#= @roster.StateName#> = new ConditionalState(IdOf.<#=@roster.IdName#>, ItemType.Group);

        <# }#>
        

        private readonly List<Action> _conditionExpressions = new List<Action>();
        
        protected override IEnumerable<Action> ConditionExpressions
        {
            get
            {
                return _conditionExpressions;
            }
        }

        public void CalculateValidationChanges(out List<Identity> questionsToBeValid, out List<Identity> questionsToBeInvalid)
        {
            this.Validate(out questionsToBeValid, out questionsToBeInvalid);
        }
             
        public void SetParent(IExpressionExecutableV2 parentLevel)            
        {
            this.@_parent = parentLevel as <#= Model.ParentTypeName#>;
        }

		public void SetParent(IExpressionExecutable parentLevel)            
        {            
		    this.@_parent = parentLevel as <#= Model.ParentTypeName#>;
        }

        IExpressionExecutableV2 IExpressionExecutableV2.GetParent()
        {
            return this.@_parent;
        }

		IExpressionExecutable IExpressionExecutable.GetParent()
        {
            return this.@_parent;
        }
    }
