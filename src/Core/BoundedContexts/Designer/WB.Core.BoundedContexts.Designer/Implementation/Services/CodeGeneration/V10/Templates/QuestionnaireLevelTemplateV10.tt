<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="WB.Core.SharedKernels.DataCollection" #> 
<#@ include file="SharedTemplateV10.tt"#>

internal partial class <#=Model.TypeName#> : AbstractConditionalLevelInstanceV10<<#=this.Model.TypeName#>>, IExpressionExecutableV10
{
	public <#=Model.TypeName#>(
		decimal[] rosterVector, 
		Identity[] rosterKey, 
		Func<Identity[], Guid, IEnumerable<IExpressionExecutableV10>> getInstances, 
		Dictionary<Guid, Guid[]> conditionalDependencies,
		Dictionary<Guid, Guid[]> structureDependencies, 
		IInterviewProperties interviewProperties,
        Action<Identity[], Guid, decimal> removeRosterInstances)
		: base(rosterVector, rosterKey, getInstances, conditionalDependencies, structureDependencies, interviewProperties, removeRosterInstances)
	{
<#
	GroupsStatesInLevelConstructor(Model.Groups);
	QuestionsStatesInLevelConstructor(Model.Questions);
	VariablesStatesInLevelConstructor(Model.Variables);
	StaticTextsStatesInLevelConstructor(Model.StaticTexts); 
	RostersStatesInLevelConstructor(Model.Rosters);
	CategoricalOptionsFilterMap(Model.QuestionsWithOptionsFilter);
	ConditionMethodsInLevelConstructor(Model.ConditionMethodsSortedByExecutionOrder);
#> 
	}

	public override IExpressionExecutableV10 CopyMembers(Func<Identity[], Guid, IEnumerable<IExpressionExecutableV10>> getInstances)
	{
		var level = new <#=Model.TypeName#>(this.RosterVector, this.RosterKey, getInstances, ConditionalDependencies, StructuralDependencies, this.Quest, this.RemoveRosterInstances)
		{
			ValidAnsweredQuestions = new HashSet<Guid>(this.ValidAnsweredQuestions),
			InvalidAnsweredQuestions = new HashSet<Guid>(this.InvalidAnsweredQuestions),
			InvalidAnsweredFailedValidations = new Dictionary<Guid, IReadOnlyList<FailedValidationCondition>>(this.InvalidAnsweredFailedValidations),
			ValidStaticTexts = new HashSet<Guid>(this.ValidStaticTexts),
<#
	QuestionsCopyOperatorsInCopyMembers(Model.Questions);
#>
		};

		level.FillEnablementStates(this.EnablementStates);
		level.FillVariablePreviousStates(this.VariablePreviousStates);
		return level;
	}
	
<# 
	LookupTablesDefenitions(LookupTables);
	QuestionsStateDefenitions(Model.Questions);	
	VariablesStateDefinitions(Model.Variables);
#>

<#
	foreach (var @roster in Model.Rosters) 
    {  
#>
	public RosterRowList<<#=@roster.TypeName#>> <#=@roster.VariableName#>
	{
		get 
		{
			var rosters = this.GetInstances(new Identity[0], IdOf.<#=@roster.RosterScopeName#>.Last()); 
			return  new RosterRowList<<#=@roster.TypeName#>>(rosters); 
		}
	}
<# 
	}
#>
	// groups condition states
<#
	foreach (var @group in Model.Groups) 
	{ 
#>
	private ConditionalState <#= @group.StateName#> = new ConditionalState(IdOf.<#=@group.IdName#>, ItemType.Group);
<# 
	}
#>
	// static texts condition states
<# 
	foreach (var staticText in Model.StaticTexts) 
	{  
#> 
	private ConditionalState <#=staticText.StateName#> = new ConditionalState(IdOf.<#=staticText.IdName#>, ItemType.StaticText);
<# 
	} 
#>

	public Guid Id => IdOf.@__questionnaire;
		
	private readonly IList<Action> _conditionExpressions = new List<Action>();

	protected override IEnumerable<Action> ConditionExpressions => _conditionExpressions;

	public void CalculateValidationChanges(out List<Identity> questionsToBeValid, out List<Identity> questionsToBeInvalid)
	{
		this.Validate(out questionsToBeValid, out questionsToBeInvalid);
	}

	public ValidityChanges ProcessValidationExpressions() => this.ExecuteValidations();

	public EnablementChanges ProcessEnablementConditions() => this.ProcessEnablementConditionsImpl();

	protected override Guid[] GetRosterScopeIds(Guid rosterId)
	{
		return IdOf.parentScopeMap[rosterId];
	}

	protected override Guid GetQuestionnaireId()
	{
		return IdOf.@__questionnaire;
	}

	public void SetParent(IExpressionExecutableV10 parent) {}
	public void SetParent(IExpressionExecutableV9 parent) {}
	public void SetParent(IExpressionExecutableV8 parent) {}
	public void SetParent(IExpressionExecutableV7 parent) {}
	public void SetParent(IExpressionExecutableV6 parent) {}
	public void SetParent(IExpressionExecutableV5 parent) {}
	public void SetParent(IExpressionExecutableV2 parent) {}
	public void SetParent(IExpressionExecutable   parent) {}

	IExpressionExecutableV10 IExpressionExecutableV10.GetParent() => null;
	IExpressionExecutableV9 IExpressionExecutableV9.GetParent() => null;
	IExpressionExecutableV8 IExpressionExecutableV8.GetParent() => null;
	IExpressionExecutableV7 IExpressionExecutableV7.GetParent() => null;
	IExpressionExecutableV6 IExpressionExecutableV6.GetParent() => null;
	IExpressionExecutableV5 IExpressionExecutableV5.GetParent() => null;
	IExpressionExecutableV2 IExpressionExecutableV2.GetParent() => null;
	IExpressionExecutable   IExpressionExecutable  .GetParent() => null;
}
