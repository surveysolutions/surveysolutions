<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #> 
<#@ import namespace="WB.Core.SharedKernels.DataCollection" #> 
<#@ include file="SharedTemplateV10.tt"#>

internal partial class <#=Model.TypeName#> : AbstractConditionalLevelInstanceV10<<#=this.Model.TypeName#>>, 
	IRosterLevel<<#=this.Model.TypeName#>>, 
	IExpressionExecutableV10
{	
	public <#=Model.TypeName#>(
		decimal[] rosterVector, Identity[] rosterKey, 
		<#=this.Model.ParentTypeName#> parent, Func<Identity[], Guid, IEnumerable<IExpressionExecutableV10>> getInstances, 
		Dictionary<Guid, Guid[]> conditionalDependencies, 
		Dictionary<Guid, Guid[]> structureDependencies, 
		IInterviewProperties interviewProperties)
		: this(rosterVector, rosterKey, getInstances, conditionalDependencies, structureDependencies, interviewProperties)
	{
		this.@_parent = parent; 
	}
	 
	private <#=Model.TypeName#>(   
		decimal[] rosterVector,  
		Identity[] rosterKey, 
		Func<Identity[], Guid, IEnumerable<IExpressionExecutableV10>> getInstances, 
		Dictionary<Guid, Guid[]> conditionalDependencies, 
		Dictionary<Guid, Guid[]> structureDependencies, 
		IInterviewProperties interviewProperties)
		: base(rosterVector, rosterKey, getInstances, conditionalDependencies, structureDependencies, interviewProperties)
	{	
<#
	GroupsStatesInLevelConstructor(Model.Groups);
	RostersInScopeStatesInLevelConstructor(Model.RostersInScope);
	QuestionsStatesInLevelConstructor(Model.Questions);
	StaticTextsStatesInLevelConstructor(Model.StaticTexts);
	RostersStatesInLevelConstructor(Model.Rosters);
	VariablesStatesInLevelConstructor(Model.Variables);
	CategoricalOptionsFilterMap(Model.QuestionsWithOptionsFilter);
	ConditionMethodsInLevelConstructor(Model.ConditionMethodsSortedByExecutionOrder);
	LinkedQuestionsInLevelConstructor(Model.LinkedQuestionsIdNames);
#>

<#
	foreach (var linkedQuestionFilterExpression in Model.LinkedQuestionFilterExpressions) 
    {
#>
    LinkedOptionFiltersMap.Add(IdOf.<#=linkedQuestionFilterExpression.LinkedQuestionVariableName#>, (scope) => { return <#= linkedQuestionFilterExpression.FilterForLinkedQuestionMethodName#>(scope); });
<#
	}
#>
	}
	
	private <#= Model.ParentTypeName#> @_parent;		

<#
	foreach (var parentQuestion in Model.AllParentsQuestionsToTop) 
	{
#>
	public <#=parentQuestion.TypeName#> <#=parentQuestion.VariableName#> { get { return this.@_parent.<#=parentQuestion.VariableName#>; } }										
<#
	}
	foreach (var parentVariable in Model.AllParentsVariablesToTop) 
	{
#>
	public <#=parentVariable.TypeName#> <#=parentVariable.VariableName#> { get { return this.@_parent.<#=parentVariable.VariableName#>; } }										
<#
	}
#>

	public Guid Id => IdOf.<#=Model.IdName#>;

	public decimal @rowcode { get { return this.RosterVector.Last(); } }

	public int @rowindex { get { return @_parent.<#=this.Model.RostersInScope[0].VariableName#>.Select((s, i) => new { Index = i, Value = s }).Where(t => t.Value.@rowcode == this.@rowcode).Select(t => t.Index).First(); } }	

	public string @rowname { get; private set; }

	void IRosterLevel.SetRowName(string rosterRowName)
	{ 
		this.@rowname = rosterRowName;
	}


	public RosterRowList<<#=this.Model.TypeName#>> @roster
	{ 
		get { return @_parent.<#=this.Model.RostersInScope[0].VariableName#>; }
	}

<#
	foreach (var parentRoster in Model.AllParentsRostersToTop) 
	{
#>
		public RosterRowList<<#=parentRoster.TypeName#>> <#=parentRoster.VariableName#> { get { return this.@_parent.<#=parentRoster.VariableName#>; } }										
<#
	}
#>

	public override IExpressionExecutableV10 CopyMembers(Func<Identity[], Guid, IEnumerable<IExpressionExecutableV10>> getInstances)
	{
		var level = new <#=Model.TypeName#>(this.RosterVector, this.RosterKey, getInstances, ConditionalDependencies, StructuralDependencies, this.Quest)
		{
			ValidAnsweredQuestions = new HashSet<Guid>(this.ValidAnsweredQuestions),
			InvalidAnsweredQuestions = new HashSet<Guid>(this.InvalidAnsweredQuestions),
			InvalidAnsweredFailedValidations = new Dictionary<Guid, IReadOnlyList<FailedValidationCondition>>(this.InvalidAnsweredFailedValidations),
			ValidStaticTexts = new HashSet<Guid>(this.ValidStaticTexts),

<#
	QuestionsCopyOperatorsInCopyMembers(Model.Questions);
#>
		};

		((IRosterLevel)level).SetRowName(this.@rowname);
			
		level.FillEnablementStates(this.EnablementStates);
		level.FillVariablePreviousStates(this.VariablePreviousStates);
		 
		return level;
	}
   
<#
	LookupTablesDefenitions(LookupTables);
	QuestionsStateDefenitions(Model.Questions);
	VariablesStateDefinitions(Model.Variables);
#>
	//static texts
<#
	foreach (var staticText in Model.StaticTexts)  
	{
#>
	private ConditionalState <#=staticText.StateName#> = new ConditionalState(IdOf.<#=staticText.IdName#>, ItemType.StaticText);
<# 
	}
#>
	//groups
<#
	foreach (var @group in Model.Groups)  
	{
#>
	private ConditionalState <#= @group.StateName#> = new ConditionalState(IdOf.<#=@group.IdName#>, ItemType.Group);
<# 
	}
#>
	//rosters
<#
	RosterCollectionsDefenitions(Model.Rosters);
#>
<#
	foreach (var @roster in Model.RostersInScope) 
	{
#>
	private ConditionalState <#= @roster.StateName#> = new ConditionalState(IdOf.<#=@roster.IdName#>, ItemType.Group);
	  
<# 
	}
#>

	private readonly List<Action> _conditionExpressions = new List<Action>();
		
	protected override IEnumerable<Action> ConditionExpressions => _conditionExpressions;

	public void CalculateValidationChanges(out List<Identity> questionsToBeValid, out List<Identity> questionsToBeInvalid)
	{
		this.Validate(out questionsToBeValid, out questionsToBeInvalid);
	}

	public ValidityChanges ProcessValidationExpressions() => this.ExecuteValidations();

	public EnablementChanges ProcessEnablementConditions() => this.ProcessEnablementConditionsImpl();

	private void SetParentImpl(IExpressionExecutable parent)
	{			
		this.@_parent = (<#= Model.ParentTypeName#>) parent;
	}

	protected override Guid[] GetRosterScopeIds(Guid rosterId)
	{
		return IdOf.parentScopeMap[rosterId];
	}

	protected override Guid GetQuestionnaireId()
	{
		return IdOf.@__questionnaire;
	}

	public override Guid[] GetRosterIdsThisScopeConsistOf()
	{
		return new Guid[]{
<#
	foreach (var @roster in Model.RostersInScope) 
	{
#>
	IdOf.<#=@roster.IdName#>,
<# 
	}
#>
		};
	}
	
	public void SetParent(IExpressionExecutableV10 parent) => this.SetParentImpl(parent);
	public void SetParent(IExpressionExecutableV9 parent) => this.SetParentImpl(parent);
	public void SetParent(IExpressionExecutableV8 parent) => this.SetParentImpl(parent);
	public void SetParent(IExpressionExecutableV7 parent) => this.SetParentImpl(parent);
	public void SetParent(IExpressionExecutableV6 parent) => this.SetParentImpl(parent);
	public void SetParent(IExpressionExecutableV5 parent) => this.SetParentImpl(parent);
	public void SetParent(IExpressionExecutableV2 parent) => this.SetParentImpl(parent);
	public void SetParent(IExpressionExecutable   parent) => this.SetParentImpl(parent);
	
	IExpressionExecutableV10 IExpressionExecutableV10.GetParent() => this.@_parent;
	IExpressionExecutableV9 IExpressionExecutableV9.GetParent() => this.@_parent;
	IExpressionExecutableV8 IExpressionExecutableV8.GetParent() => this.@_parent;
	IExpressionExecutableV7 IExpressionExecutableV7.GetParent() => this.@_parent;
	IExpressionExecutableV6 IExpressionExecutableV6.GetParent() => this.@_parent;
	IExpressionExecutableV5 IExpressionExecutableV5.GetParent() => this.@_parent;
	IExpressionExecutableV2 IExpressionExecutableV2.GetParent() => this.@_parent;
	IExpressionExecutable   IExpressionExecutable  .GetParent() => this.@_parent;
}