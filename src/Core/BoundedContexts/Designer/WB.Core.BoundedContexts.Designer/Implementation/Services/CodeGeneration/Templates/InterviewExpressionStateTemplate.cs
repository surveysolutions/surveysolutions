// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace WB.Core.BoundedContexts.Designer.Implementation.Services.CodeGeneration.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Main.Core.Entities.SubEntities;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class InterviewExpressionStateTemplate : InterviewExpressionStateTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"using System;
using System.Collections.Generic;
using System.Linq;

namespace WB.Core.SharedKernels.DataCollection.Generated
{
    public class InterviewExpressionState : AbstractInterviewExpressionState 
    {
        public InterviewExpressionState() 
        {
            var questionnaireLevelScope = new[] { IdOf.questionnaire };
            var questionnaireIdentityKey = Util.GetRosterKey(questionnaireLevelScope, Util.EmptyRosterVector);
            var questionnaireLevel = new ");
            
            #line 19 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QuestionnaireTemplateStructure.QuestionnaireLevelModel.GetTypeName()));
            
            #line default
            #line hidden
            this.Write("(Util.EmptyRosterVector, questionnaireIdentityKey, this.GetRosterInstances, IdOf." +
                    "conditionalDependencies);\r\n            this.InterviewScopes.Add(Util.GetRosterSt" +
                    "ringKey(questionnaireIdentityKey), questionnaireLevel);\r\n        }\r\n\r\n        pu" +
                    "blic InterviewExpressionState(Dictionary<string, IValidatable> interviewScopes, " +
                    "Dictionary<string, List<string>> siblingRosters)\r\n        {\r\n            Intervi" +
                    "ewScopes = interviewScopes;\r\n            SiblingRosters = siblingRosters;\r\n     " +
                    "   }\r\n\r\n        public override void AddRoster(Guid rosterId, decimal[] outerRos" +
                    "terVector, decimal rosterInstanceId, int? sortIndex)\r\n        {\r\n            if " +
                    "(!IdOf.rostersIdToScopeMap.ContainsKey(rosterId))\r\n            {\r\n              " +
                    "  return;\r\n            }\r\n\r\n            decimal[] rosterVector = Util.GetRosterV" +
                    "ector(outerRosterVector, rosterInstanceId);\r\n            Guid[] rosterScopeIds =" +
                    " IdOf.rostersIdToScopeMap[rosterId];\r\n            var rosterIdentityKey = Util.G" +
                    "etRosterKey(rosterScopeIds, rosterVector);\r\n            string rosterStringKey =" +
                    " Util.GetRosterStringKey(rosterIdentityKey);\r\n\r\n            if (this.InterviewSc" +
                    "opes.ContainsKey(rosterStringKey))\r\n            {\r\n                return;\r\n    " +
                    "        }\r\n\r\n            decimal[] parentRosterVector = outerRosterVector;\r\n\r\n  " +
                    "          var rosterParentIdentityKey = parentRosterVector.Length == 0\r\n        " +
                    "        ? Util.GetRosterKey(new[] { IdOf.questionnaire }, new decimal[0])\r\n     " +
                    "           : Util.GetRosterKey(rosterScopeIds.Shrink(), parentRosterVector);\r\n\r\n" +
                    "            var parent = this.InterviewScopes[Util.GetRosterStringKey(rosterPare" +
                    "ntIdentityKey)];\r\n\r\n            var rosterLevel = parent.CreateChildRosterInstan" +
                    "ce(rosterId, rosterVector, rosterIdentityKey);\r\n\r\n            this.InterviewScop" +
                    "es.Add(rosterStringKey, rosterLevel);\r\n            this.SetSiblings(rosterScopeI" +
                    "ds, rosterStringKey);\r\n        }\r\n\r\n        public override void RemoveRoster(Gu" +
                    "id rosterId, decimal[] outerRosterVector, decimal rosterInstanceId)\r\n        {\r\n" +
                    "            if (!IdOf.rostersIdToScopeMap.ContainsKey(rosterId))\r\n            {\r" +
                    "\n                return;\r\n            }\r\n\r\n            decimal[] rosterVector = " +
                    "Util.GetRosterVector(outerRosterVector, rosterInstanceId);\r\n            var rost" +
                    "erIdentityKey = Util.GetRosterKey(IdOf.rostersIdToScopeMap[rosterId], rosterVect" +
                    "or);\r\n            \r\n            var dependentRosters = this.InterviewScopes.Keys" +
                    ".Where(x => x.StartsWith(Util.GetRosterStringKey((rosterIdentityKey)))).ToArray(" +
                    ");\r\n            \r\n            foreach (var rosterKey in dependentRosters)\r\n     " +
                    "       {\r\n                this.InterviewScopes.Remove(rosterKey);\r\n             " +
                    "   foreach (var siblings in this.SiblingRosters.Values)\r\n                {\r\n    " +
                    "                siblings.Remove(rosterKey);\r\n                }\r\n            }\r\n " +
                    "       }\r\n\r\n        public override void UpdateIntAnswer(Guid questionId, decima" +
                    "l[] rosterVector, long answer)\r\n        {\r\n            var targetLevel = this.Ge" +
                    "tRosterByIdAndVector(questionId, rosterVector);\r\n            if (targetLevel == " +
                    "null) return;\r\n\r\n            targetLevel.UpdateIntAnswer(questionId, answer);\r\n " +
                    "       }\r\n\r\n        public override void UpdateDecimalAnswer(Guid questionId, de" +
                    "cimal[] rosterVector, decimal answer)\r\n        {\r\n            var targetLevel = " +
                    "this.GetRosterByIdAndVector(questionId, rosterVector);\r\n            if (targetLe" +
                    "vel == null) return;\r\n\r\n            targetLevel.UpdateDecimalAnswer(questionId, " +
                    "answer);\r\n        }\r\n\r\n        public override void UpdateDateAnswer(Guid questi" +
                    "onId, decimal[] rosterVector, DateTime answer)\r\n        {\r\n            var targe" +
                    "tLevel = this.GetRosterByIdAndVector(questionId, rosterVector);\r\n            if " +
                    "(targetLevel == null) return;\r\n\r\n            targetLevel.UpdateDateTimeAnswer(qu" +
                    "estionId, answer);\r\n        }\r\n\r\n        public override void UpdateTextAnswer(G" +
                    "uid questionId, decimal[] rosterVector, string answer)\r\n        {\r\n            v" +
                    "ar targetLevel = this.GetRosterByIdAndVector(questionId, rosterVector);\r\n       " +
                    "     if (targetLevel == null) return;\r\n\r\n            targetLevel.UpdateTextAnswe" +
                    "r(questionId, answer);\r\n        }\r\n        \r\n        public override void Update" +
                    "QrBarcodeAnswer(Guid questionId, decimal[] rosterVector, string answer)\r\n       " +
                    " {\r\n            var targetLevel = this.GetRosterByIdAndVector(questionId, roster" +
                    "Vector);\r\n            if (targetLevel == null) return;\r\n\r\n            targetLeve" +
                    "l.UpdateQrBarcodeAnswer(questionId, answer);\r\n        }\r\n\r\n        public overri" +
                    "de void UpdateSingleOptionAnswer(Guid questionId, decimal[] rosterVector, decima" +
                    "l answer)\r\n        {\r\n            var targetLevel = this.GetRosterByIdAndVector(" +
                    "questionId, rosterVector);\r\n            if (targetLevel == null) return;\r\n\r\n    " +
                    "        targetLevel.UpdateSingleOptionAnswer(questionId, answer);\r\n        }\r\n\r\n" +
                    "        public override void UpdateMultiOptionAnswer(Guid questionId, decimal[] " +
                    "rosterVector, decimal[] answer)\r\n        {\r\n            var targetLevel = this.G" +
                    "etRosterByIdAndVector(questionId, rosterVector);\r\n            if (targetLevel ==" +
                    " null) return;\r\n\r\n            targetLevel.UpdateMultiOptionAnswer(questionId, an" +
                    "swer);\r\n        }\r\n\r\n        public override void UpdateGeoLocationAnswer(Guid q" +
                    "uestionId, decimal[] rosterVector, double latitude, double longitude, double acc" +
                    "uracy)\r\n        {\r\n            var targetLevel = this.GetRosterByIdAndVector(que" +
                    "stionId, rosterVector);\r\n            if (targetLevel == null) return;\r\n\r\n       " +
                    "     targetLevel.UpdateGeoLocationAnswer(questionId, latitude,  longitude,  accu" +
                    "racy);\r\n        }\r\n\r\n        public override void UpdateTextListAnswer(Guid ques" +
                    "tionId, decimal[] rosterVector, Tuple<decimal, string>[] answers)\r\n        {\r\n  " +
                    "          var targetLevel = this.GetRosterByIdAndVector(questionId, rosterVector" +
                    ");\r\n            if (targetLevel == null) return;\r\n\r\n            targetLevel.Upda" +
                    "teTextListAnswer(questionId, answers);\r\n        }\r\n\r\n        public override voi" +
                    "d UpdateLinkedSingleOptionAnswer(Guid questionId, decimal[] rosterVector, decima" +
                    "l[] selectedPropagationVector)\r\n        {\r\n            var targetLevel = this.Ge" +
                    "tRosterByIdAndVector(questionId, rosterVector);\r\n            if (targetLevel == " +
                    "null) return;\r\n            \r\n            targetLevel.UpdateLinkedSingleOptionAns" +
                    "wer(questionId, selectedPropagationVector);\r\n        }\r\n\r\n        public overrid" +
                    "e void UpdateLinkedMultiOptionAnswer(Guid questionId, decimal[] rosterVector, de" +
                    "cimal[][] answer)\r\n        {\r\n            var targetLevel = this.GetRosterByIdAn" +
                    "dVector(questionId, rosterVector);\r\n            if (targetLevel == null) return;" +
                    "\r\n\r\n            targetLevel.UpdateLinkedMultiOptionAnswer(questionId, answer);\r\n" +
                    "        }\r\n        \r\n        public override Dictionary<Guid, Guid[]> GetParents" +
                    "Map()\r\n        {\r\n            return IdOf.parentsMap;\r\n        }\r\n\r\n        publ" +
                    "ic override IInterviewExpressionState Clone()\r\n        {\r\n            var newSco" +
                    "pes = this.InterviewScopes.ToDictionary(interviewScope => interviewScope.Key, in" +
                    "terviewScope => interviewScope.Value.CopyMembers());\r\n            var newSibling" +
                    "Rosters = this.SiblingRosters\r\n                .ToDictionary(\r\n                 " +
                    "   interviewScope => interviewScope.Key,\r\n                    interviewScope => " +
                    "new List<string>(interviewScope.Value));\r\n\r\n            //set parents\r\n         " +
                    "   foreach (var interviewScope in this.InterviewScopes)\r\n            {\r\n        " +
                    "        var parent = interviewScope.Value.GetParent();\r\n                if (pare" +
                    "nt != null)\r\n                    newScopes[interviewScope.Key].SetParent(newScop" +
                    "es[Util.GetRosterStringKey(parent.GetRosterKey())]);\r\n            }\r\n\r\n         " +
                    "   return new InterviewExpressionState(newScopes, newSiblingRosters);\r\n        }" +
                    "\r\n\r\n        //generate QuestionnaireLevel\r\n        ");
            
            #line 195 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
           
            QuestionnaireLevelTemplate questionnairetemplate = new QuestionnaireLevelTemplate(QuestionnaireTemplateStructure.QuestionnaireLevelModel);
            this.Write(questionnairetemplate .TransformText());                           
         
            
            #line default
            #line hidden
            this.Write("\r\n        //generating rosters\r\n        ");
            
            #line 201 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
foreach (var roster in QuestionnaireTemplateStructure.AllRosters) 
           {

                RosterTemplate template = new RosterTemplate(roster);
                this.Write(template.TransformText());                
           }
         
            
            #line default
            #line hidden
            this.Write("\r\n        public static class IdOf\r\n        {\r\n            public static readonly" +
                    " Guid questionnaire = Guid.Parse(\"");
            
            #line 211 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QuestionnaireTemplateStructure.Id));
            
            #line default
            #line hidden
            this.Write("\"); \r\n            //questions\r\n            ");
            
            #line 213 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
foreach (var q in QuestionnaireTemplateStructure.AllQuestions) 
            {
            
            #line default
            #line hidden
            this.Write("            public static readonly Guid ");
            
            #line 215 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(q.GeneratedIdName));
            
            #line default
            #line hidden
            this.Write(" = Guid.Parse(\"");
            
            #line 215 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(q.Id));
            
            #line default
            #line hidden
            this.Write("\");\r\n            ");
            
            #line 216 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
 }
            
            #line default
            #line hidden
            this.Write("           \r\n            //rosters\r\n            ");
            
            #line 218 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
foreach (var r in QuestionnaireTemplateStructure.AllRosters) 
            {
            
            #line default
            #line hidden
            this.Write("            public static readonly Guid ");
            
            #line 220 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(r.GeneratedIdName));
            
            #line default
            #line hidden
            this.Write(" = Guid.Parse(\"");
            
            #line 220 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(r.Id));
            
            #line default
            #line hidden
            this.Write("\");\r\n            ");
            
            #line 221 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
 }
            
            #line default
            #line hidden
            this.Write("                        \r\n            //groups\r\n            ");
            
            #line 223 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
foreach (var g in QuestionnaireTemplateStructure.AllGroups) 
            {
            
            #line default
            #line hidden
            this.Write("            public static readonly Guid ");
            
            #line 225 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(g.GeneratedIdName));
            
            #line default
            #line hidden
            this.Write(" = Guid.Parse(\"");
            
            #line 225 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(g.Id));
            
            #line default
            #line hidden
            this.Write("\");\r\n            ");
            
            #line 226 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
 }
            
            #line default
            #line hidden
            this.Write(@"            
            
            //TODO: generate scopes
            //public static readonly Guid[] eduScopeIds = new[] { fixedId };
            //public static readonly Guid[] hhMemberScopeIds = new[] { persons_count };
            //public static readonly Guid[] foodConsumptionIds = new[] { persons_count, food };

            
            public static Dictionary<Guid, Guid[]> conditionalDependencies = new Dictionary<Guid, Guid[]>()
            {
                ");
            
            #line 237 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
foreach (var dependency in QuestionnaireTemplateStructure.ConditionalDependencies) 
            {
            
            #line default
            #line hidden
            this.Write("                { Guid.Parse(\"");
            
            #line 239 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dependency.Key));
            
            #line default
            #line hidden
            this.Write("\"), new Guid[]{\r\n                ");
            
            #line 240 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
foreach (var d in dependency.Value)
                {
            
            #line default
            #line hidden
            this.Write("                    Guid.Parse(\"");
            
            #line 242 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(d));
            
            #line default
            #line hidden
            this.Write("\"),\r\n                ");
            
            #line 243 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
 }
            
            #line default
            #line hidden
            this.Write("                }},\r\n                ");
            
            #line 245 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
 }
            
            #line default
            #line hidden
            this.Write(@"
                //{ id, new Guid[] { } },
                //{ persons_count, new Guid[] { married_with } },
                //{ edu_visit, new Guid[] { fixedId } },

            };

            public static Dictionary<Guid, Guid[]> parentsMap = new Dictionary<Guid, Guid[]>
            {
            //{ id, new []{questionnaire} },
            
            //{ name, hhMemberScopeIds },
            

            //groups
            //{ groupId, hhMemberScopeIds },
                        
            };

            public static Dictionary<Guid, Guid[]> rostersIdToScopeMap = new Dictionary<Guid, Guid[]>
            {
            //{ fixedId, eduScopeIds },
            //{ hhMember, hhMemberScopeIds },
            //{ foodConsumption, foodConsumptionIds },
            //{ jobActivity, hhMemberScopeIds }
            };
        }
    }
}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class InterviewExpressionStateTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
