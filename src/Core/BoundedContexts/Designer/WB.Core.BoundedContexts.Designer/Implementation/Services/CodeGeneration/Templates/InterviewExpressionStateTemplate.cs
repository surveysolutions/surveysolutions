// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace WB.Core.BoundedContexts.Designer.Implementation.Services.CodeGeneration.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Main.Core.Entities.SubEntities;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class InterviewExpressionStateTemplate : InterviewExpressionStateTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"using System;
using System.Collections.Generic;
using System.Linq;

namespace WB.Core.SharedKernels.DataCollection.Generated
{
    public class InterviewExpressionState : AbstractInterviewExpressionState 
    {
        public InterviewExpressionState() 
        {
            var questionnaireLevelScope = new[] { IdOf.@__questionnaire };
            var questionnaireIdentityKey = Util.GetRosterKey(questionnaireLevelScope, Util.EmptyRosterVector);
            var questionnaireLevel = new ");
            
            #line 19 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QuestionnaireTemplateStructure.QuestionnaireLevelModel.GetTypeName()));
            
            #line default
            #line hidden
            this.Write("(Util.EmptyRosterVector, questionnaireIdentityKey, this.GetRosterInstances, IdOf." +
                    "conditionalDependencies);\r\n            this.InterviewScopes.Add(Util.GetRosterSt" +
                    "ringKey(questionnaireIdentityKey), questionnaireLevel);\r\n        }\r\n\r\n        pr" +
                    "ivate InterviewExpressionState(Dictionary<string, IExpressionExecutable> intervi" +
                    "ewScopes, Dictionary<string, List<string>> siblingRosters)\r\n        {\r\n         " +
                    "   var newScopes = interviewScopes.ToDictionary(interviewScope => interviewScope" +
                    ".Key, interviewScope => interviewScope.Value.CopyMembers(this.GetRosterInstances" +
                    "));\r\n\r\n            var newSiblingRosters = siblingRosters\r\n                .ToDi" +
                    "ctionary(\r\n                    interviewScope => interviewScope.Key,\r\n          " +
                    "          interviewScope => new List<string>(interviewScope.Value));\r\n\r\n        " +
                    "    //set parents\r\n            foreach (var interviewScope in interviewScopes)\r\n" +
                    "            {\r\n                var parent = interviewScope.Value.GetParent();\r\n " +
                    "               if (parent != null)\r\n                    newScopes[interviewScope" +
                    ".Key].SetParent(newScopes[Util.GetRosterStringKey(parent.GetRosterKey())]);\r\n   " +
                    "         }\r\n\r\n            this.InterviewScopes = newScopes;\r\n            this.Si" +
                    "blingRosters = newSiblingRosters;\r\n        }\r\n\r\n        public override void Add" +
                    "Roster(Guid rosterId, decimal[] outerRosterVector, decimal rosterInstanceId, int" +
                    "? sortIndex)\r\n        {\r\n            if (!IdOf.parentScopeMap.ContainsKey(roster" +
                    "Id))\r\n            {\r\n                return;\r\n            }\r\n\r\n            decim" +
                    "al[] rosterVector = Util.GetRosterVector(outerRosterVector, rosterInstanceId);\r\n" +
                    "            Guid[] rosterScopeIds = IdOf.parentScopeMap[rosterId];\r\n            " +
                    "var rosterIdentityKey = Util.GetRosterKey(rosterScopeIds, rosterVector);\r\n      " +
                    "      string rosterStringKey = Util.GetRosterStringKey(rosterIdentityKey);\r\n\r\n  " +
                    "          if (this.InterviewScopes.ContainsKey(rosterStringKey))\r\n            {\r" +
                    "\n                return;\r\n            }\r\n                        \r\n            v" +
                    "ar rosterParentIdentityKey = outerRosterVector.Length == 0\r\n                ? Ut" +
                    "il.GetRosterKey(new[] { IdOf.@__questionnaire }, new decimal[0])\r\n              " +
                    "  : Util.GetRosterKey(rosterScopeIds.Shrink(), outerRosterVector);\r\n\r\n          " +
                    "  var parent = this.InterviewScopes[Util.GetRosterStringKey(rosterParentIdentity" +
                    "Key)];\r\n\r\n            var rosterLevel = parent.CreateChildRosterInstance(rosterI" +
                    "d, rosterVector, rosterIdentityKey);\r\n\r\n            this.InterviewScopes.Add(ros" +
                    "terStringKey, rosterLevel);\r\n            this.SetSiblings(rosterIdentityKey, ros" +
                    "terStringKey);\r\n        }\r\n\r\n        public override void RemoveRoster(Guid rost" +
                    "erId, decimal[] outerRosterVector, decimal rosterInstanceId)\r\n        {\r\n       " +
                    "     if (!IdOf.parentScopeMap.ContainsKey(rosterId))\r\n            {\r\n           " +
                    "     return;\r\n            }\r\n\r\n            decimal[] rosterVector = Util.GetRost" +
                    "erVector(outerRosterVector, rosterInstanceId);\r\n            var rosterIdentityKe" +
                    "y = Util.GetRosterKey(IdOf.parentScopeMap[rosterId], rosterVector);\r\n           " +
                    " \r\n            var dependentRosters = this.InterviewScopes.Keys.Where(x => x.Sta" +
                    "rtsWith(Util.GetRosterStringKey((rosterIdentityKey)))).ToArray();\r\n            \r" +
                    "\n            foreach (var rosterKey in dependentRosters)\r\n            {\r\n       " +
                    "         this.InterviewScopes.Remove(rosterKey);\r\n                foreach (var s" +
                    "iblings in this.SiblingRosters.Values)\r\n                {\r\n                    s" +
                    "iblings.Remove(rosterKey);\r\n                }\r\n            }\r\n        }\r\n\r\n     " +
                    "   public override void UpdateIntAnswer(Guid questionId, decimal[] rosterVector," +
                    " long answer)\r\n        {\r\n            var targetLevel = this.GetRosterByIdAndVec" +
                    "tor(questionId, rosterVector);\r\n            if (targetLevel == null) return;\r\n\r\n" +
                    "            targetLevel.UpdateIntAnswer(questionId, answer);\r\n        }\r\n\r\n     " +
                    "   public override void UpdateDecimalAnswer(Guid questionId, decimal[] rosterVec" +
                    "tor, decimal answer)\r\n        {\r\n            var targetLevel = this.GetRosterByI" +
                    "dAndVector(questionId, rosterVector);\r\n            if (targetLevel == null) retu" +
                    "rn;\r\n\r\n            targetLevel.UpdateDecimalAnswer(questionId, answer);\r\n       " +
                    " }\r\n\r\n        public override void UpdateDateAnswer(Guid questionId, decimal[] r" +
                    "osterVector, DateTime answer)\r\n        {\r\n            var targetLevel = this.Get" +
                    "RosterByIdAndVector(questionId, rosterVector);\r\n            if (targetLevel == n" +
                    "ull) return;\r\n\r\n            targetLevel.UpdateDateTimeAnswer(questionId, answer)" +
                    ";\r\n        }\r\n\r\n        public override void UpdateTextAnswer(Guid questionId, d" +
                    "ecimal[] rosterVector, string answer)\r\n        {\r\n            var targetLevel = " +
                    "this.GetRosterByIdAndVector(questionId, rosterVector);\r\n            if (targetLe" +
                    "vel == null) return;\r\n\r\n            targetLevel.UpdateTextAnswer(questionId, ans" +
                    "wer);\r\n        }\r\n        \r\n        public override void UpdateQrBarcodeAnswer(G" +
                    "uid questionId, decimal[] rosterVector, string answer)\r\n        {\r\n            v" +
                    "ar targetLevel = this.GetRosterByIdAndVector(questionId, rosterVector);\r\n       " +
                    "     if (targetLevel == null) return;\r\n\r\n            targetLevel.UpdateQrBarcode" +
                    "Answer(questionId, answer);\r\n        }\r\n\r\n        public override void UpdateSin" +
                    "gleOptionAnswer(Guid questionId, decimal[] rosterVector, decimal answer)\r\n      " +
                    "  {\r\n            var targetLevel = this.GetRosterByIdAndVector(questionId, roste" +
                    "rVector);\r\n            if (targetLevel == null) return;\r\n\r\n            targetLev" +
                    "el.UpdateSingleOptionAnswer(questionId, answer);\r\n        }\r\n\r\n        public ov" +
                    "erride void UpdateMultiOptionAnswer(Guid questionId, decimal[] rosterVector, dec" +
                    "imal[] answer)\r\n        {\r\n            var targetLevel = this.GetRosterByIdAndVe" +
                    "ctor(questionId, rosterVector);\r\n            if (targetLevel == null) return;\r\n\r" +
                    "\n            targetLevel.UpdateMultiOptionAnswer(questionId, answer);\r\n        }" +
                    "\r\n\r\n        public override void UpdateGeoLocationAnswer(Guid questionId, decima" +
                    "l[] rosterVector, double latitude, double longitude, double accuracy)\r\n        {" +
                    "\r\n            var targetLevel = this.GetRosterByIdAndVector(questionId, rosterVe" +
                    "ctor);\r\n            if (targetLevel == null) return;\r\n\r\n            targetLevel." +
                    "UpdateGeoLocationAnswer(questionId, latitude,  longitude,  accuracy);\r\n        }" +
                    "\r\n\r\n        public override void UpdateTextListAnswer(Guid questionId, decimal[]" +
                    " rosterVector, Tuple<decimal, string>[] answers)\r\n        {\r\n            var tar" +
                    "getLevel = this.GetRosterByIdAndVector(questionId, rosterVector);\r\n            i" +
                    "f (targetLevel == null) return;\r\n\r\n            targetLevel.UpdateTextListAnswer(" +
                    "questionId, answers);\r\n        }\r\n\r\n        public override void UpdateLinkedSin" +
                    "gleOptionAnswer(Guid questionId, decimal[] rosterVector, decimal[] selectedPropa" +
                    "gationVector)\r\n        {\r\n            var targetLevel = this.GetRosterByIdAndVec" +
                    "tor(questionId, rosterVector);\r\n            if (targetLevel == null) return;\r\n  " +
                    "          \r\n            targetLevel.UpdateLinkedSingleOptionAnswer(questionId, s" +
                    "electedPropagationVector);\r\n        }\r\n\r\n        public override void UpdateLink" +
                    "edMultiOptionAnswer(Guid questionId, decimal[] rosterVector, decimal[][] answer)" +
                    "\r\n        {\r\n            var targetLevel = this.GetRosterByIdAndVector(questionI" +
                    "d, rosterVector);\r\n            if (targetLevel == null) return;\r\n\r\n            t" +
                    "argetLevel.UpdateLinkedMultiOptionAnswer(questionId, answer);\r\n        }\r\n      " +
                    "  \r\n        public override Dictionary<Guid, Guid[]> GetParentsMap()\r\n        {\r" +
                    "\n            return IdOf.parentScopeMap;\r\n        }\r\n\r\n        public override I" +
                    "InterviewExpressionState Clone()\r\n        {\r\n            return new InterviewExp" +
                    "ressionState(this.InterviewScopes, this.SiblingRosters);\r\n        }\r\n\r\n        /" +
                    "/generate QuestionnaireLevel\r\n        ");
            
            #line 194 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
           
            QuestionnaireLevelTemplate questionnairetemplate = new QuestionnaireLevelTemplate(QuestionnaireTemplateStructure.QuestionnaireLevelModel);
            this.Write(questionnairetemplate .TransformText());                           
         
            
            #line default
            #line hidden
            this.Write("\r\n        //generating rosters\r\n        ");
            
            #line 200 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
foreach (var rosterGroup in QuestionnaireTemplateStructure.RostersGroupedByScope) 
           {

                RosterScopeTemplate template = new RosterScopeTemplate(rosterGroup);
                this.Write(template.TransformText());                
           }
         
            
            #line default
            #line hidden
            this.Write("\r\n        public static class IdOf\r\n        {\r\n            public static readonly" +
                    " Guid @__questionnaire = Guid.Parse(\"");
            
            #line 210 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QuestionnaireTemplateStructure.Id));
            
            #line default
            #line hidden
            this.Write("\"); \r\n            //questions\r\n            ");
            
            #line 212 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
foreach (var q in QuestionnaireTemplateStructure.AllQuestions) 
            {
            
            #line default
            #line hidden
            this.Write("            public static readonly Guid ");
            
            #line 214 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(q.GeneratedIdName));
            
            #line default
            #line hidden
            this.Write(" = Guid.Parse(\"");
            
            #line 214 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(q.Id));
            
            #line default
            #line hidden
            this.Write("\");\r\n            ");
            
            #line 215 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
 }
            
            #line default
            #line hidden
            this.Write("            //groups\r\n            ");
            
            #line 217 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
foreach (var g in QuestionnaireTemplateStructure.AllGroups) 
            {
            
            #line default
            #line hidden
            this.Write("            public static readonly Guid ");
            
            #line 219 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(g.GeneratedIdName));
            
            #line default
            #line hidden
            this.Write(" = Guid.Parse(\"");
            
            #line 219 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(g.Id));
            
            #line default
            #line hidden
            this.Write("\");\r\n            ");
            
            #line 220 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
 }
            
            #line default
            #line hidden
            this.Write("            //rosters\r\n            ");
            
            #line 222 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
foreach (var r in QuestionnaireTemplateStructure.AllRosters) 
            {
            
            #line default
            #line hidden
            this.Write("            public static readonly Guid ");
            
            #line 224 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(r.GeneratedIdName));
            
            #line default
            #line hidden
            this.Write(" = Guid.Parse(\"");
            
            #line 224 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(r.Id));
            
            #line default
            #line hidden
            this.Write("\");\r\n            ");
            
            #line 225 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
 }
            
            #line default
            #line hidden
            this.Write("                        \r\n\r\n            public static readonly Guid[] ");
            
            #line 227 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QuestionnaireTemplateStructure.QuestionnaireLevelModel.GeneratedRosterScopeName));
            
            #line default
            #line hidden
            this.Write(" = new[] {@__questionnaire};\r\n\r\n            ");
            
            #line 229 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
foreach (var r in QuestionnaireTemplateStructure.AllRosters) 
            {
            
            #line default
            #line hidden
            this.Write("            public static readonly Guid[] ");
            
            #line 231 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(r.GeneratedRosterScopeName));
            
            #line default
            #line hidden
            this.Write(" = new[] {");
            
            #line 231 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Join(" ,", r.RosterScope.Select(g => string.Format("Guid.Parse(\"{0}\")", g)).ToArray())));
            
            #line default
            #line hidden
            this.Write("};            \r\n            ");
            
            #line 232 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
 }
            
            #line default
            #line hidden
            this.Write(" \r\n            \r\n            public static Dictionary<Guid, Guid[]> conditionalDe" +
                    "pendencies = new Dictionary<Guid, Guid[]>()\r\n            {\r\n                ");
            
            #line 236 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
foreach (var dependency in QuestionnaireTemplateStructure.ConditionalDependencies) 
            {
            
            #line default
            #line hidden
            this.Write("                { Guid.Parse(\"");
            
            #line 238 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dependency.Key));
            
            #line default
            #line hidden
            this.Write("\"), new Guid[]{\r\n                ");
            
            #line 239 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
foreach (var d in dependency.Value)
                {
            
            #line default
            #line hidden
            this.Write("                    Guid.Parse(\"");
            
            #line 241 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(d));
            
            #line default
            #line hidden
            this.Write("\"),\r\n                ");
            
            #line 242 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
 }
            
            #line default
            #line hidden
            this.Write("                }},\r\n                ");
            
            #line 244 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
 }
            
            #line default
            #line hidden
            this.Write("            };\r\n\r\n            public static Dictionary<Guid, Guid[]> parentScopeM" +
                    "ap = new Dictionary<Guid, Guid[]>\r\n            {\r\n                //questions\r\n " +
                    "               ");
            
            #line 250 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
foreach (var q in QuestionnaireTemplateStructure.AllQuestions) 
                {
            
            #line default
            #line hidden
            this.Write("                {");
            
            #line 252 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(q.GeneratedIdName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 252 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(q.RosterScopeName));
            
            #line default
            #line hidden
            this.Write("},            \r\n                ");
            
            #line 253 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
 }
            
            #line default
            #line hidden
            this.Write("                //groups\r\n                ");
            
            #line 255 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
foreach (var g in QuestionnaireTemplateStructure.AllGroups) 
                {
            
            #line default
            #line hidden
            this.Write("                {");
            
            #line 257 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(g.GeneratedIdName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 257 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(g.RosterScopeName));
            
            #line default
            #line hidden
            this.Write("},\r\n                ");
            
            #line 258 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
 }
            
            #line default
            #line hidden
            this.Write("                //rosters\r\n                ");
            
            #line 260 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
foreach (var r in QuestionnaireTemplateStructure.AllRosters) 
                {
            
            #line default
            #line hidden
            this.Write("                {");
            
            #line 262 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(r.GeneratedIdName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 262 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(r.GeneratedRosterScopeName));
            
            #line default
            #line hidden
            this.Write("},\r\n                ");
            
            #line 263 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
 }
            
            #line default
            #line hidden
            this.Write("                //{ groupId, hhMemberScopeIds },                        \r\n       " +
                    "     };\r\n        }\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class InterviewExpressionStateTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
