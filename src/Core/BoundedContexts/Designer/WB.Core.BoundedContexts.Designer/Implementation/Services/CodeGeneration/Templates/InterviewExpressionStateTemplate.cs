// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace WB.Core.BoundedContexts.Designer.Implementation.Services.CodeGeneration.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Main.Core.Entities.SubEntities;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class InterviewExpressionStateTemplate : InterviewExpressionStateTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            this.Write(@"

using System;
using System.Collections.Generic;
using System.Linq;

// ReSharper disable InconsistentNaming

namespace WB.Core.SharedKernels.ExpressionProcessing
{
    public class InterviewExpressionState : AbstractInterviewExpressionState 
    {

        public InterviewExpressionState() 
        {
            var questionnaireLevelScope = new[] { IdOf.questionnaire };
            var questionnaireIdentityKey = Util.GetRosterKey(questionnaireLevelScope, Util.EmptyRosterVector);
            var questionnaireLevel = new ");
            
            #line 25 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QuestionnaireTemplateStructure.QuestionnaireLevelModel.GetTypeName()));
            
            #line default
            #line hidden
            this.Write("(Util.EmptyRosterVector, questionnaireIdentityKey, this.GetRosterInstances, IdOf." +
                    "conditionalDependencies);\r\n            this.InterviewScopes.Add(Util.GetRosterSt" +
                    "ringKey(questionnaireIdentityKey), questionnaireLevel);\r\n        }\r\n\r\n        pu" +
                    "blic InterviewExpressionState(Dictionary<string, IValidatable> interviewScopes, " +
                    "Dictionary<string, List<string>> siblingRosters)\r\n        {\r\n            Intervi" +
                    "ewScopes = interviewScopes;\r\n            SiblingRosters = siblingRosters;\r\n     " +
                    "   }\r\n\r\n        public override void AddRoster(Guid rosterId, decimal[] outerRos" +
                    "terVector, decimal rosterInstanceId, int? sortIndex)\r\n        {\r\n            if " +
                    "(!IdOf.rostersIdToScopeMap.ContainsKey(rosterId))\r\n            {\r\n              " +
                    "  return;\r\n            }\r\n\r\n            decimal[] rosterVector = Util.GetRosterV" +
                    "ector(outerRosterVector, rosterInstanceId);\r\n            Guid[] rosterScopeIds =" +
                    " IdOf.rostersIdToScopeMap[rosterId];\r\n            var rosterIdentityKey = Util.G" +
                    "etRosterKey(rosterScopeIds, rosterVector);\r\n            string rosterStringKey =" +
                    " Util.GetRosterStringKey(rosterIdentityKey);\r\n\r\n            if (this.InterviewSc" +
                    "opes.ContainsKey(rosterStringKey))\r\n            {\r\n                return;\r\n    " +
                    "        }\r\n\r\n            decimal[] parentRosterVector = outerRosterVector;\r\n\r\n  " +
                    "          var rosterParentIdentityKey = parentRosterVector.Length == 0\r\n        " +
                    "        ? Util.GetRosterKey(new[] { IdOf.questionnaire }, new decimal[0])\r\n     " +
                    "           : Util.GetRosterKey(rosterScopeIds.Shrink(), parentRosterVector);\r\n\r\n" +
                    "            var parent = this.InterviewScopes[Util.GetRosterStringKey(rosterPare" +
                    "ntIdentityKey)];\r\n\r\n            if (rosterId == IdOf.hhMember || rosterId == IdO" +
                    "f.jobActivity)\r\n            {\r\n                var parentHolder = parent as Ques" +
                    "tionnaireLevel;\r\n                var rosterLevel = new HhMember_type(rosterVecto" +
                    "r, rosterIdentityKey, parentHolder, this.GetRosterInstances, IdOf.conditionalDep" +
                    "endencies);\r\n                this.InterviewScopes.Add(rosterStringKey, rosterLev" +
                    "el);\r\n                this.SetSiblings(rosterScopeIds, rosterStringKey);\r\n      " +
                    "      }\r\n\r\n            if (rosterId == IdOf.foodConsumption)\r\n            {\r\n   " +
                    "             var parentHolder = parent as HhMember_type;\r\n                var ro" +
                    "sterLevel = new FoodConsumption_type(rosterVector, rosterIdentityKey, parentHold" +
                    "er, this.GetRosterInstances, IdOf.conditionalDependencies);\r\n                thi" +
                    "s.InterviewScopes.Add(rosterStringKey, rosterLevel);\r\n                this.SetSi" +
                    "blings(rosterScopeIds, rosterStringKey);\r\n            }\r\n\r\n            if (roste" +
                    "rId == IdOf.fixedId)\r\n            {\r\n                var parentHolder = parent a" +
                    "s QuestionnaireLevel;\r\n                var rosterLevel = new Education_type(rost" +
                    "erVector, rosterIdentityKey, parentHolder, this.GetRosterInstances, IdOf.conditi" +
                    "onalDependencies);\r\n                this.InterviewScopes.Add(rosterStringKey, ro" +
                    "sterLevel);\r\n                this.SetSiblings(rosterScopeIds, rosterStringKey);\r" +
                    "\n            }\r\n        }\r\n\r\n        public override void RemoveRoster(Guid rost" +
                    "erId, decimal[] outerRosterVector, decimal rosterInstanceId)\r\n        {\r\n       " +
                    "     if (!IdOf.rostersIdToScopeMap.ContainsKey(rosterId))\r\n            {\r\n      " +
                    "          return;\r\n            }\r\n\r\n            decimal[] rosterVector = Util.Ge" +
                    "tRosterVector(outerRosterVector, rosterInstanceId);\r\n            var rosterIdent" +
                    "ityKey = Util.GetRosterKey(IdOf.rostersIdToScopeMap[rosterId], rosterVector);\r\n " +
                    "           \r\n            var dependentRosters = this.InterviewScopes.Keys.Where(" +
                    "x => x.StartsWith(Util.GetRosterStringKey((rosterIdentityKey)))).ToArray();\r\n   " +
                    "         \r\n            foreach (var rosterKey in dependentRosters)\r\n            " +
                    "{\r\n                this.InterviewScopes.Remove(rosterKey);\r\n                fore" +
                    "ach (var siblings in this.SiblingRosters.Values)\r\n                {\r\n           " +
                    "         siblings.Remove(rosterKey);\r\n                }\r\n            }\r\n        " +
                    "}\r\n\r\n        public override void UpdateIntAnswer(Guid questionId, decimal[] ros" +
                    "terVector, long answer)\r\n        {\r\n            var targetLevel = this.GetRoster" +
                    "ByIdAndVector(questionId, rosterVector);\r\n            if (targetLevel == null) r" +
                    "eturn;\r\n\r\n            if (questionId == IdOf.persons_count)\r\n            {\r\n    " +
                    "            (targetLevel as QuestionnaireLevel).persons_count = answer;\r\n       " +
                    "     }\r\n\r\n            if (questionId == IdOf.age)\r\n            {\r\n              " +
                    "  (targetLevel as HhMember_type).age = answer;\r\n            }\r\n\r\n            if " +
                    "(questionId == IdOf.times_per_week)\r\n            {\r\n                (targetLevel" +
                    " as FoodConsumption_type).times_per_week = answer;\r\n            }\r\n        }\r\n\r\n" +
                    "        public override void UpdateDecimalAnswer(Guid questionId, decimal[] rost" +
                    "erVector, decimal answer)\r\n        {\r\n            var targetLevel = this.GetRost" +
                    "erByIdAndVector(questionId, rosterVector);\r\n            if (targetLevel == null)" +
                    " return;\r\n\r\n            if (questionId == IdOf.price_for_food)\r\n            {\r\n " +
                    "               (targetLevel as FoodConsumption_type).price_for_food = answer;\r\n " +
                    "           }\r\n        }\r\n\r\n        public override void UpdateDateAnswer(Guid qu" +
                    "estionId, decimal[] rosterVector, DateTime answer)\r\n        {\r\n            var t" +
                    "argetLevel = this.GetRosterByIdAndVector(questionId, rosterVector);\r\n           " +
                    " if (targetLevel == null) return;\r\n\r\n            if (questionId == IdOf.date)\r\n " +
                    "           {\r\n                (targetLevel as HhMember_type).date = answer;\r\n   " +
                    "         }\r\n        }\r\n\r\n        public override void UpdateTextAnswer(Guid ques" +
                    "tionId, decimal[] rosterVector, string answer)\r\n        {\r\n            var targe" +
                    "tLevel = this.GetRosterByIdAndVector(questionId, rosterVector);\r\n            if " +
                    "(targetLevel == null) return;\r\n\r\n            if (questionId == IdOf.id)\r\n       " +
                    "     {\r\n                (targetLevel as QuestionnaireLevel).id = answer;\r\n      " +
                    "      }\r\n\r\n            if (questionId == IdOf.name)\r\n            {\r\n            " +
                    "    (targetLevel as HhMember_type).name = answer;\r\n            }\r\n\r\n            " +
                    "if (questionId == IdOf.job_title)\r\n            {\r\n                (targetLevel a" +
                    "s HhMember_type).job_title = answer;\r\n            }\r\n\r\n            if (questionI" +
                    "d == IdOf.person_id)\r\n            {\r\n                (targetLevel as HhMember_ty" +
                    "pe).person_id = answer;\r\n            }\r\n        }\r\n        \r\n        public over" +
                    "ride void UpdateQrBarcodeAnswer(Guid questionId, decimal[] rosterVector, string " +
                    "answer)\r\n        {\r\n            var targetLevel = this.GetRosterByIdAndVector(qu" +
                    "estionId, rosterVector);\r\n            if (targetLevel == null) return;\r\n        " +
                    "}\r\n\r\n        public override void UpdateSingleOptionAnswer(Guid questionId, deci" +
                    "mal[] rosterVector, decimal answer)\r\n        {\r\n            var targetLevel = th" +
                    "is.GetRosterByIdAndVector(questionId, rosterVector);\r\n            if (targetLeve" +
                    "l == null) return;\r\n\r\n            if (questionId == IdOf.sex)\r\n            {\r\n  " +
                    "              (targetLevel as HhMember_type).sex = answer;\r\n            }\r\n\r\n   " +
                    "         if (questionId == IdOf.role)\r\n            {\r\n                (targetLev" +
                    "el as HhMember_type).role = answer;\r\n            }\r\n\r\n            if (questionId" +
                    " == IdOf.has_job)\r\n            {\r\n                (targetLevel as HhMember_type)" +
                    ".has_job = answer;\r\n            }\r\n\r\n            if (questionId == IdOf.marital_" +
                    "status)\r\n            {\r\n                (targetLevel as HhMember_type).marital_s" +
                    "tatus = answer;\r\n            }\r\n\r\n            if (questionId == IdOf.edu_visit)\r" +
                    "\n            {\r\n                (targetLevel as QuestionnaireLevel).edu_visit = " +
                    "answer;\r\n            }\r\n\r\n            if (questionId == IdOf.edu)\r\n            {" +
                    "\r\n                (targetLevel as Education_type).edu = answer;\r\n            }\r\n" +
                    "        }\r\n\r\n        public override void UpdateMultiOptionAnswer(Guid questionI" +
                    "d, decimal[] rosterVector, decimal[] answer)\r\n        {\r\n            var targetL" +
                    "evel = this.GetRosterByIdAndVector(questionId, rosterVector);\r\n            if (t" +
                    "argetLevel == null) return;\r\n\r\n            if (questionId == IdOf.food)\r\n       " +
                    "     {\r\n                (targetLevel as HhMember_type).food = answer;\r\n         " +
                    "   }\r\n        }\r\n\r\n        public override void UpdateGeoLocationAnswer(Guid que" +
                    "stionId, decimal[] rosterVector, double latitude, double longitude)\r\n        {\r\n" +
                    "            var targetLevel = this.GetRosterByIdAndVector(questionId, rosterVect" +
                    "or);\r\n            if (targetLevel == null) return;\r\n        }\r\n\r\n        public " +
                    "override void UpdateTextListAnswer(Guid questionId, decimal[] rosterVector, Tupl" +
                    "e<decimal, string>[] answers)\r\n        {\r\n            var targetLevel = this.Get" +
                    "RosterByIdAndVector(questionId, rosterVector);\r\n            if (targetLevel == n" +
                    "ull) return;\r\n        }\r\n\r\n        public override void UpdateLinkedSingleOption" +
                    "Answer(Guid questionId, decimal[] rosterVector, decimal[] selectedPropagationVec" +
                    "tor)\r\n        {\r\n            var targetLevel = this.GetRosterByIdAndVector(quest" +
                    "ionId, rosterVector);\r\n            if (targetLevel == null) return;\r\n\r\n         " +
                    "   if (questionId == IdOf.best_job_owner)\r\n            {\r\n                (targe" +
                    "tLevel as HhMember_type).best_job_owner = selectedPropagationVector;\r\n          " +
                    "  }\r\n        }\r\n\r\n        public override void UpdateLinkedMultiOptionAnswer(Gui" +
                    "d questionId, decimal[] rosterVector, decimal[][] answer)\r\n        {\r\n          " +
                    "  var targetLevel = this.GetRosterByIdAndVector(questionId, rosterVector);\r\n    " +
                    "        if (targetLevel == null) return;\r\n\r\n            if (questionId == IdOf.m" +
                    "arried_with)\r\n            {\r\n                (targetLevel as HhMember_type).marr" +
                    "ied_with = answer;\r\n            }\r\n        }\r\n\r\n\r\n        ////\r\n\r\n\r\n        publ" +
                    "ic override Dictionary<Guid, Guid[]> GetParentsMap()\r\n        {\r\n            ret" +
                    "urn IdOf.parentsMap;\r\n        }\r\n\r\n        public override IInterviewExpressionS" +
                    "tate Clone()\r\n        {\r\n            var newScopes = this.InterviewScopes.ToDict" +
                    "ionary(interviewScope => interviewScope.Key, interviewScope => interviewScope.Va" +
                    "lue.CopyMembers());\r\n            var newSiblingRosters = this.SiblingRosters\r\n  " +
                    "              .ToDictionary(\r\n                    interviewScope => interviewSco" +
                    "pe.Key,\r\n                    interviewScope => new List<string>(interviewScope.V" +
                    "alue));\r\n\r\n            //set parents\r\n            foreach (var interviewScope in" +
                    " this.InterviewScopes)\r\n            {\r\n                var parent = interviewSco" +
                    "pe.Value.GetParent();\r\n                if (parent != null)\r\n                    " +
                    "newScopes[interviewScope.Key].SetParent(newScopes[Util.GetRosterStringKey(parent" +
                    ".GetRosterKey())]);\r\n            }\r\n\r\n            return new InterviewExpression" +
                    "State(newScopes, newSiblingRosters);\r\n        }\r\n\r\n        //generate Questionna" +
                    "ireLevel\r\n        ");
            
            #line 292 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
           
                QuestionnaireLevelTemplate questionnairetemplate = new QuestionnaireLevelTemplate(QuestionnaireTemplateStructure.QuestionnaireLevelModel);
                this.Write(questionnairetemplate .TransformText());                           
         
            
            #line default
            #line hidden
            this.Write("\r\n        //generating all rosters\r\n         ");
            
            #line 298 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
foreach (var roster in QuestionnaireTemplateStructure.Rosters) 
           {
                RosterTemplate template = new RosterTemplate(roster);
                this.Write(template.TransformText());                
           }
         
            
            #line default
            #line hidden
            this.Write("\r\n\r\n        public static class IdOf\r\n        {\r\n            public static readon" +
                    "ly Guid questionnaire = ");
            
            #line 308 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QuestionnaireTemplateStructure.Id));
            
            #line default
            #line hidden
            this.Write("; //Guid.Parse(\"72897e3f-3dc8-4115-81e0-8a9c1cadec2d\");\r\n\r\n            //question" +
                    "s\r\n            ");
            
            #line 311 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
foreach (var q in QuestionnaireTemplateStructure.Questions) 
            {
            
            #line default
            #line hidden
            this.Write("              public static readonly Guid ");
            
            #line 313 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(q.VariableName));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 313 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(q.Id));
            
            #line default
            #line hidden
            this.Write(";\r\n            ");
            
            #line 314 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
 }
            
            #line default
            #line hidden
            this.Write("           \r\n            \r\n            //rosters\r\n            ");
            
            #line 317 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
foreach (var r in QuestionnaireTemplateStructure.Rosters) 
            {
            
            #line default
            #line hidden
            this.Write("              public static readonly Guid ");
            
            #line 319 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(r.VariableName));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 319 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(r.Id));
            
            #line default
            #line hidden
            this.Write(";\r\n            ");
            
            #line 320 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
 }
            
            #line default
            #line hidden
            this.Write("\r\n            //public static readonly Guid hhMember = Guid.Parse(\"69b02bcf-0ed1-" +
                    "4b5a-80bb-bd465ab096da\");\r\n            \r\n            //generate groups Ids\r\n    " +
                    "        ");
            
            #line 325 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
foreach (var g in QuestionnaireTemplateStructure.Groups) 
            {
            
            #line default
            #line hidden
            this.Write("              public static readonly Guid ");
            
            #line 327 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(g.VariableName));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 327 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(g.Id));
            
            #line default
            #line hidden
            this.Write(";\r\n            ");
            
            #line 328 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
 }
            
            #line default
            #line hidden
            this.Write(@"            //public static readonly Guid groupId = Guid.Parse(""039ed69e-5583-46af-b983-488568f20e1c"");
            
            //TODO: generate scopes
            public static readonly Guid[] eduScopeIds = new[] { fixedId };
            public static readonly Guid[] hhMemberScopeIds = new[] { persons_count };
            public static readonly Guid[] foodConsumptionIds = new[] { persons_count, food };

            
            public static Dictionary<Guid, Guid[]> conditionalDependencies = new Dictionary<Guid, Guid[]>()
            {
            ");
            
            #line 339 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
foreach (var dependency in QuestionnaireTemplateStructure.ConditionalDependencies) 
            {
            
            #line default
            #line hidden
            this.Write("              { ");
            
            #line 341 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dependency.Key));
            
            #line default
            #line hidden
            this.Write(", new Guid[]{\r\n              ");
            
            #line 342 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
foreach (var d in dependency.Value)
                    {
            
            #line default
            #line hidden
            this.Write("                    ");
            
            #line 344 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(d));
            
            #line default
            #line hidden
            this.Write(",\r\n                    ");
            
            #line 345 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
 }
            
            #line default
            #line hidden
            this.Write("              }}\r\n            ");
            
            #line 347 "C:\Work\WB\Dev\src\Core\BoundedContexts\Designer\WB.Core.BoundedContexts.Designer\Implementation\Services\CodeGeneration\Templates\InterviewExpressionStateTemplate.tt"
 }
            
            #line default
            #line hidden
            this.Write("\r\n                //{ id, new Guid[] { } },\r\n                //{ persons_count, n" +
                    "ew Guid[] { married_with } },\r\n                //{ edu_visit, new Guid[] { fixed" +
                    "Id } },\r\n\r\n            };\r\n\r\n            public static Dictionary<Guid, Guid[]> " +
                    "parentsMap = new Dictionary<Guid, Guid[]>\r\n            {\r\n            { id, new " +
                    "[]{questionnaire} },\r\n            { persons_count, new []{questionnaire}},\r\n    " +
                    "        { edu_visit, new []{questionnaire} },\r\n            { name, hhMemberScope" +
                    "Ids },\r\n            { age, hhMemberScopeIds },\r\n            { date, hhMemberScop" +
                    "eIds },\r\n            { sex, hhMemberScopeIds },\r\n            { role, hhMemberSco" +
                    "peIds },\r\n            { food, hhMemberScopeIds },\r\n            { times_per_week," +
                    " foodConsumptionIds },\r\n            { price_for_food, foodConsumptionIds },\r\n   " +
                    "         { has_job, hhMemberScopeIds },\r\n            { job_title, hhMemberScopeI" +
                    "ds },\r\n            { best_job_owner, hhMemberScopeIds },\r\n            { person_i" +
                    "d, hhMemberScopeIds },\r\n            { marital_status, hhMemberScopeIds },\r\n     " +
                    "       { married_with, hhMemberScopeIds },\r\n            { edu, eduScopeIds },\r\n\r" +
                    "\n            //groups\r\n            { groupId, hhMemberScopeIds },\r\n            {" +
                    " fixedId, eduScopeIds },\r\n            { hhMember, hhMemberScopeIds },\r\n         " +
                    "   { foodConsumption, foodConsumptionIds },\r\n            \r\n        };\r\n\r\n       " +
                    "     public static Dictionary<Guid, Guid[]> rostersIdToScopeMap = new Dictionary" +
                    "<Guid, Guid[]>\r\n        {\r\n            { fixedId, eduScopeIds },\r\n            { " +
                    "hhMember, hhMemberScopeIds },\r\n            { foodConsumption, foodConsumptionIds" +
                    " },\r\n            { jobActivity, hhMemberScopeIds }\r\n        };\r\n        }\r\n    }" +
                    "\r\n}\r\n\r\n// ReSharper restore InconsistentNaming");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class InterviewExpressionStateTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
