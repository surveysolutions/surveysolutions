<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Main.Core.Entities.SubEntities" #>
<#@ import namespace="System.Text.RegularExpressions" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

 <#foreach (var namespaceToInclude in QuestionnaireStructure.Namespaces){#>
	using <#=namespaceToInclude#>;
 <#}#>

namespace WB.Core.SharedKernels.DataCollection.Generated
{
    public class <#=QuestionnaireStructure.ClassName#> : AbstractInterviewExpressionStateV2
    <#foreach (var additionInterface in QuestionnaireStructure.AdditionalInterfaces){#>
	 , <#=additionInterface#>
	<#}#>

	{
	    public <#=QuestionnaireStructure.ClassName#>() : base()
        {
            var questionnaireLevelScope = new[] { IdOf.@__questionnaire };
            var questionnaireIdentityKey = Util.GetRosterKey(questionnaireLevelScope, Util.EmptyRosterVector);
            var questionnaireLevel = new <#=QuestionnaireStructure.QuestionnaireLevelModel.TypeName#>(Util.EmptyRosterVector, questionnaireIdentityKey, this.GetRosterInstances, IdOf.conditionalDependencies, IdOf.structuralDependencies, this.InterviewProperties);
            this.InterviewScopes.Add(Util.GetRosterStringKey(questionnaireIdentityKey), questionnaireLevel);				
        }
		

		public <#=QuestionnaireStructure.ClassName#>(Dictionary<string, IExpressionExecutableV2> interviewScopes, Dictionary<string, List<string>> siblingRosters, IInterviewProperties interviewProperties)
		 :base(interviewScopes, siblingRosters, interviewProperties){}

        public override void AddRoster(Guid rosterId, decimal[] outerRosterVector, decimal rosterInstanceId, int? sortIndex)
        {
            if (!IdOf.parentScopeMap.ContainsKey(rosterId))
            {
                return;
            }
			 
            decimal[] rosterVector = Util.GetRosterVector(outerRosterVector, rosterInstanceId);
            Guid[] rosterScopeIds = IdOf.parentScopeMap[rosterId];
            var rosterIdentityKey = Util.GetRosterKey(rosterScopeIds, rosterVector);
            string rosterStringKey = Util.GetRosterStringKey(rosterIdentityKey);

            if (this.InterviewScopes.ContainsKey(rosterStringKey))
            {
                return;
            }
                        
            var rosterParentIdentityKey = outerRosterVector.Length == 0
                ? Util.GetRosterKey(new[] { IdOf.@__questionnaire }, new decimal[0])
                : Util.GetRosterKey(rosterScopeIds.Shrink(), outerRosterVector);

            var parent = this.InterviewScopes[Util.GetRosterStringKey(rosterParentIdentityKey)];

            var rosterLevel = parent.CreateChildRosterInstance(rosterId, rosterVector, rosterIdentityKey);
			rosterLevel.SetInterviewProperties(this.InterviewProperties);

            this.InterviewScopes.Add(rosterStringKey, rosterLevel);
            this.SetSiblings(rosterIdentityKey, rosterStringKey);
        }
		 
		 public void UpdateRosterTitle(Guid rosterId, decimal[] outerRosterVector, decimal rosterInstanceId,
            string rosterTitle)
         {
            if (!IdOf.parentScopeMap.ContainsKey(rosterId))
            {
                return;
            }

            decimal[] rosterVector = Util.GetRosterVector(outerRosterVector, rosterInstanceId);
            var rosterIdentityKey = Util.GetRosterKey(IdOf.parentScopeMap[rosterId], rosterVector);
			var rosterStringKey = Util.GetRosterStringKey(rosterIdentityKey);
			
			var rosterLevel = this.InterviewScopes[rosterStringKey] as IRosterLevel;
            if (rosterLevel != null)
                rosterLevel.SetRowName(rosterTitle);
        }
		 

        public override void RemoveRoster(Guid rosterId, decimal[] outerRosterVector, decimal rosterInstanceId)
        {
            if (!IdOf.parentScopeMap.ContainsKey(rosterId))
            {
                return;
            }

            decimal[] rosterVector = Util.GetRosterVector(outerRosterVector, rosterInstanceId);
            var rosterIdentityKey = Util.GetRosterKey(IdOf.parentScopeMap[rosterId], rosterVector);
            
            var dependentRosters = this.InterviewScopes.Keys.Where(x => x.StartsWith(Util.GetRosterStringKey((rosterIdentityKey)))).ToArray();
            
            foreach (var rosterKey in dependentRosters)
            {
                this.InterviewScopes.Remove(rosterKey);
                foreach (var siblings in this.SiblingRosters.Values)
                {
                    siblings.Remove(rosterKey);
                }
            }
        }

		public void SetInterviewProperties(IInterviewProperties properties)
        {
            this.InterviewProperties = properties;
            foreach (var item in this.InterviewScopes.Values)
            {
                item.SetInterviewProperties(properties);
            }
        }

        public override IInterviewExpressionState Clone()
		{
			return new <#=QuestionnaireStructure.ClassName#>(this.InterviewScopes, this.SiblingRosters, this.InterviewProperties);
		}
        
		<#foreach (var additionInterface in QuestionnaireStructure.AdditionalInterfaces){#>
	    <#=additionInterface#> <#=additionInterface#>.Clone()
        {
            return Clone () as <#=additionInterface#>;
        }
		<#}#>

        public override Dictionary<Guid, Guid[]> GetParentsMap()
        {
            return IdOf.parentScopeMap;
        }

	}
        //generate QuestionnaireLevel
        <#    
            QuestionnaireLevelTemplateV2 questionnairetemplate = CreateQuestionnaireLevelTemplate();
            this.Write(questionnairetemplate.TransformText());                           
         #>

        //generating rosters
        <#foreach (var rosterGroup in QuestionnaireStructure.RostersGroupedByScope) 
           {
                RosterScopeTemplateV2 template = CreateRosterScopeTemplate(rosterGroup.Value);
                this.Write(template.TransformText());
           }
        #>

        public static class IdOf
        {
            public static readonly Guid @__questionnaire = Guid.Parse("<#= QuestionnaireStructure.Id #>"); 
            //questions
            <#foreach (var q in QuestionnaireStructure.AllQuestions) 
            {#>
            public static readonly Guid <#= q.IdName#> = Guid.Parse("<#= q.Id #>");
            <# }#>
            //groups
            <#foreach (var g in QuestionnaireStructure.AllGroups) 
            {#>
            public static readonly Guid <#= g.IdName#> = Guid.Parse("<#= g.Id #>");
            <# }#>
            //rosters
            <#foreach (var r in QuestionnaireStructure.AllRosters) 
            {#>
            public static readonly Guid <#= r.IdName#> = Guid.Parse("<#= r.Id #>");
            <# }#>
            
            public static readonly Guid[] <#=QuestionnaireStructure.QuestionnaireLevelModel.RosterScopeName#> = new[] {@__questionnaire};

            <#foreach (var r in QuestionnaireStructure.AllRosters)
            {#>
            public static readonly Guid[] <#= r.RosterScopeName#> = new[] {<#=String.Join(" ,", r.RosterScope.Select(g => string.Format("Guid.Parse(\"{0}\")", g)).ToArray()) #>};
            <# }#>
            
            public static Dictionary<Guid, Guid[]> conditionalDependencies = new Dictionary<Guid, Guid[]>()
            {            
                <#foreach (var dependency in QuestionnaireStructure.ConditionalDependencies)
                {#>
                {Guid.Parse("<#= dependency.Key #>"), new Guid[]{
                <#foreach (var dependencyValue in dependency.Value)
                {#>
                    Guid.Parse("<#= dependencyValue #>"),
                <# }#>
                }},
                <# }#>
            };

            public static Dictionary<Guid, Guid[]> structuralDependencies = new Dictionary<Guid, Guid[]>()
            {
                <#foreach (var dependency in QuestionnaireStructure.StructuralDependencies) 
                {#>
                { Guid.Parse("<#= dependency.Key #>"), new Guid[]{
                <#foreach (var d in dependency.Value)
                {#>
                    Guid.Parse("<#= d #>"),
                <# }#>
                }},
                <# }#>
            };

            public static Dictionary<Guid, Guid[]> parentScopeMap = new Dictionary<Guid, Guid[]>
            {
                //questions
                <#foreach (var q in QuestionnaireStructure.AllQuestions) 
                {#>
                {<#= q.IdName#>, <#= q.RosterScopeName#>},
                <# }#>
                //groups
                <#foreach (var g in QuestionnaireStructure.AllGroups) 
                {#>
                {<#= g.IdName#>, <#= g.RosterScopeName#>},
                <# }#>
                //rosters
                <#foreach (var r in QuestionnaireStructure.AllRosters)
                {#>
                {<#= r.IdName#>, <#= r.RosterScopeName#>},
                <# }#>                                        
            };
        }
    
}