<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
    private class <#=Model.GeneratedTypeName#> : AbstractConditionalLevel<<#=this.Model.GeneratedTypeName#>>, IExpressionExecutable
    {
        public <#=Model.GeneratedTypeName#>(decimal[] rosterVector, Identity[] rosterKey, Func<Identity[], Guid, IEnumerable<IExpressionExecutable>> getInstances, 
                Dictionary<Guid, Guid[]> conditionalDependencies, Dictionary<Guid, Guid[]> structureDependencies)
            : base(rosterVector, rosterKey, getInstances, conditionalDependencies, structureDependencies)
        {
        
        <#foreach (var @group in Model.Groups) 
        {#>
            EnablementStates.Add(<#=@group.GeneratedStateName#>.ItemId, <#= @group.GeneratedStateName#>);
        <# }#>
                
        <#foreach (var question in Model.Questions)
        {#>
            EnablementStates.Add(<#=question.GeneratedStateName#>.ItemId, <#=question.GeneratedStateName#>);
        <#
            var validationMethods = new List<string>();

            if(!string.IsNullOrWhiteSpace(question.Validations))
                validationMethods.Add(question.GeneratedValidationsMethodName);
            
            if(question.IsMandatory)
                validationMethods.Add(question.GeneratedMandatoryMethodName);

            if(validationMethods.Count > 0)
            {#>    
            ValidationExpressions.Add(new Identity(IdOf.<#= question.GeneratedIdName#>, rosterVector), new Func<bool>[] {             
            <#foreach (var methodName in validationMethods)
            {#>  <#= methodName #> , <# }#>
            });             
        <# }#>
            AddUpdaterToMap(IdOf.<#= question.GeneratedIdName#>, (<#=question.GeneratedTypeName#> val) => {<#=question.GeneratedMemberName#>  = val; });
        <# }#>
        <#foreach (var @roster in Model.Rosters) 
        {#>    
            RosterGenerators.Add(IdOf.<#=@roster.GeneratedIdName#>, (decimals, identities) => new <#=@roster.GeneratedTypeName#>(decimals, identities, this, this.GetInstances, this.ConditionalDependencies, this.StructuralDependencies));
        <# }#>

        <#foreach (var tuple in Model.ExecutorModel.GetOrderedListByConditionDependency(Model.Questions, Model.Groups)) 
        {#>
            __conditionExpressions.Add(Verifier(<#= tuple.Item1#>, <#=tuple.Item2#>.ItemId, <#= tuple.Item2#>));                        
        <#}#>

        }                                 

        public IExpressionExecutable CopyMembers(Func<Identity[], Guid, IEnumerable<IExpressionExecutable>> getInstances)
        {
            var level = new <#=Model.GeneratedTypeName#>(this.RosterVector, this.RosterKey, getInstances, ConditionalDependencies, StructuralDependencies)
            {
                ValidAnsweredQuestions = new HashSet<Guid>(this.ValidAnsweredQuestions),
                InvalidAnsweredQuestions = new HashSet<Guid>(this.InvalidAnsweredQuestions),
                <#foreach (var q in Model.Questions) 
                {#>        
                <#=q.VariableName#> = this.<#=q.GeneratedMemberName#>,        
                <#}#>
            };
                 
            ConditionalDependencies = new Dictionary<Guid, Guid[]>(this.ConditionalDependencies);
            StructuralDependencies = new Dictionary<Guid, Guid[]>(this.StructuralDependencies);

            foreach (var state in level.EnablementStates)
            {
                var originalState = this.EnablementStates[state.Key];
                state.Value.PreviousState = originalState.PreviousState;
                state.Value.State = originalState.State;
            }
            
            return level;
        }

        <#foreach (var question in Model.Questions) 
        {#>            
        private <#=question.GeneratedTypeName#> <#=question.GeneratedMemberName#>;
        private ConditionalState <#= question.GeneratedStateName#> = new ConditionalState(IdOf.<#=question.GeneratedIdName#>);
        public <#=question.GeneratedTypeName#> <#=question.VariableName#>
        {
            get { return <#=question.GeneratedStateName#>.State != State.Disabled ? this.<#=question.GeneratedMemberName#> : null; }
            private set { this.<#=question.GeneratedMemberName#> = value; }
        }
        <#if(!string.IsNullOrWhiteSpace(question.Conditions))
        {#>
        private bool <#=question.GeneratedConditionsMethodName#>()
        {
            return <#=question.Conditions#>;
        }
        <# }#>
        <#if(question.IsMandatory)
        {#>        
        private bool <#=question.GeneratedMandatoryMethodName#>()
        {
            return !this.IsEmptyAnswer(<#=question.VariableName#>);
        }
        <# }#>

        <#if(!string.IsNullOrWhiteSpace(question.Validations))
        {#>        
        private bool <#=question.GeneratedValidationsMethodName#>()
        {
            return <#=question.Validations#>;
        }
        <# }#>

        <# }#>
                
        <#foreach (var @roster in Model.Rosters) 
        {#>
        public IEnumerable<<#=@roster.GeneratedTypeName#>> <#=@roster.VariableName#>
        {
            get 
            {
                var rosters = this.GetInstances(new Identity[0], IdOf.<#=@roster.GeneratedRosterScopeName#>.Last());
                return rosters == null ? new List<<#=@roster.GeneratedTypeName#>>() : rosters.Select(x => x as <#=@roster.GeneratedTypeName#>).ToList();
            }
        }
        <# }#>
        // groups condition states
        <#foreach (var @group in Model.Groups) 
        {#>
        private ConditionalState <#= @group.GeneratedStateName#> = new ConditionalState(IdOf.<#=@group.GeneratedIdName#>, ItemType.Group);
        <#if(!string.IsNullOrWhiteSpace(@group.Conditions))
        {#>      
        private bool <#=@group.GeneratedConditionsMethodName#>()
        {
            return <#=@group.Conditions#>;
        }      
        <# }#>
        <# }#>
        
        private readonly List<Action> __conditionExpressions = new List<Action>();
        
        protected override IEnumerable<Action> ConditionExpressions
        {
            get
            {
                return __conditionExpressions;
            }
        }

        public void CalculateValidationChanges(out List<Identity> questionsToBeValid, out List<Identity> questionsToBeInvalid)
        {
            this.Validate(out questionsToBeValid, out questionsToBeInvalid);
        }
            
        public void SetParent(IExpressionExecutable parentLevel)            
        {            
        }

        public IExpressionExecutable GetParent()
        {
            return null;
        }
    }
