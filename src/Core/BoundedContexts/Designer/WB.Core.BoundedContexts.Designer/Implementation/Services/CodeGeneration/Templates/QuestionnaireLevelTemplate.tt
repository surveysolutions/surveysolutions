<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
    private class <#=Model.GeneratedTypeName#> : AbstractConditionalLevel<<#=this.Model.GeneratedTypeName#>>, IExpressionExecutable
    {
        public <#=Model.GeneratedTypeName#>(decimal[] rosterVector, Identity[] rosterKey, Func<Identity[], Guid, IEnumerable<IExpressionExecutable>> getInstances, Dictionary<Guid, Guid[]> conditionalDependencies)
            : base(rosterVector, rosterKey, getInstances, conditionalDependencies)
        {
        //TODO: generate mandatory 
        <#foreach (var @group in Model.Groups) 
        {#>
            EnablementStates.Add(<#=@group.GeneratedStateName#>.ItemId, <#= @group.GeneratedStateName#>);
        <# }#>

        <#foreach (var q in Model.Questions)
        {#>
            EnablementStates.Add(<#=q.GeneratedStateName#>.ItemId, <#=q.GeneratedStateName#>);
        <#if(!string.IsNullOrWhiteSpace(q.Validations))
        {#>    
            ValidationExpressions.Add(new Identity(IdOf.<#= q.GeneratedIdName#>, rosterVector), new Func<bool>[] { <#=q.GeneratedValidationsMethodName#> });             
        <# }#>
            AddUpdaterToMap(IdOf.<#= q.GeneratedIdName#>, (<#=q.GeneratedTypeName#> val) => {<#=q.GeneratedMemberName#>  = val; });
        <# }#>
        <#foreach (var @roster in Model.Rosters) 
        {#>    
            RosterGenerators.Add(IdOf.<#=@roster.GeneratedIdName#>, (decimals, identities) => new <#=@roster.GeneratedTypeName#>(rosterVector, identities, this, this.GetInstances, this.ConditionalDependencies));
        <# }#>
        }                                 

        public IExpressionExecutable CopyMembers(Func<Identity[], Guid, IEnumerable<IExpressionExecutable>> getInstances)
        {
            var level = new <#=Model.GeneratedTypeName#>(this.RosterVector, this.RosterKey, getInstances, ConditionalDependencies)
            {
                ValidAnsweredQuestions = new HashSet<Guid>(this.ValidAnsweredQuestions),
                InvalidAnsweredQuestions = new HashSet<Guid>(this.InvalidAnsweredQuestions),
                <#foreach (var q in Model.Questions) 
                {#>        
                <#=q.VariableName#> = this.<#=q.GeneratedMemberName#>,        
                <#}#>
            };
                 
            ConditionalDependencies = new Dictionary<Guid, Guid[]>(this.ConditionalDependencies);

            foreach (var state in level.EnablementStates)
            {
                var originalState = this.EnablementStates[state.Key];
                state.Value.PreviousState = originalState.PreviousState;
                state.Value.State = originalState.State;
            }
            
            return level;
        }

        <#foreach (var question in Model.Questions) 
        {#>            
        private <#=question.GeneratedTypeName#> <#=question.GeneratedMemberName#>;
        private ConditionalState <#= question.GeneratedStateName#> = new ConditionalState(IdOf.<#=question.GeneratedIdName#>);
        public <#=question.GeneratedTypeName#> <#=question.VariableName#>
        {
            get { return <#=question.GeneratedStateName#>.State == State.Enabled ? this.<#=question.GeneratedMemberName#> : null; }
            private set { this.<#=question.GeneratedMemberName#> = value; }
        }
        <#if(!string.IsNullOrWhiteSpace(question.Conditions))
        {#>
        private bool <#=question.GeneratedConditionsMethodName#>()
        {
            return <#=question.Conditions#>;
        }
        <# }#>
        <#if(!string.IsNullOrWhiteSpace(question.Validations))
        {#>        
        private bool <#=question.GeneratedValidationsMethodName#>()
        {
            return <#=question.Validations#>;
        }
        <# }#>

        <# }#>

        
        <#foreach (var @roster in Model.Rosters) 
        {#>
        public <#=@roster.GeneratedTypeName#>[] <#=@roster.VariableName#>
        {
            get 
            {
                var rosters = this.GetInstances(new Identity[0], IdOf.<#=@roster.GeneratedRosterScopeName#>.Last());
                return rosters == null ? new <#=@roster.GeneratedTypeName#>[0] : rosters.Select(x => x as <#=@roster.GeneratedTypeName#>).ToArray();
            }
        }
        <# }#>
        // groups condition states
        <#foreach (var @group in Model.Groups) 
        {#>
        private ConditionalState <#= @group.GeneratedStateName#> = new ConditionalState(IdOf.<#=@group.GeneratedIdName#>, ItemType.Group);
        <# }#>
        //

        protected override IEnumerable<Action> ConditionExpressions
        {
            get
            {
                return new List<Action>
                {
                    <#foreach (var q in Model.Questions) 
                    {#>
                    <#if(!string.IsNullOrWhiteSpace(q.Conditions))
                    {#>        
                    Verifier(<#= q.GeneratedConditionsMethodName#>, <#= q.GeneratedStateName#>.ItemId, <#= q.GeneratedStateName#>),                        
                    <# }#>
                    <#}#>
                    
                    <#foreach (var g in Model.Groups) 
                {#>
                    <#if(!string.IsNullOrWhiteSpace(g.Conditions))
                {#>
                    Verifier(<#= g.GeneratedConditionsMethodName#>, <#= g.GeneratedStateName#>.ItemId, <#= g.GeneratedStateName#>),                        
                    <# }#>
                    <#}#>
                };
            }
        }

        public void CalculateValidationChanges(out List<Identity> questionsToBeValid, out List<Identity> questionsToBeInvalid)
        {
            this.Validate(out questionsToBeValid, out questionsToBeInvalid);
        }
            
        public void SetParent(IExpressionExecutable parentLevel)            
        {            
        }

        public IExpressionExecutable GetParent()
        {
            return null;
        }
    }
