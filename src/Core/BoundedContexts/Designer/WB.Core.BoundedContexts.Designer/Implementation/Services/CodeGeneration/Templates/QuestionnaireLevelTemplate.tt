<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
 
    internal partial class <#=Model.TypeName#> : AbstractConditionalLevelInstanceV3<<#=this.Model.TypeName#>>, IExpressionExecutable
    {
        public <#=Model.TypeName#>(decimal[] rosterVector, Identity[] rosterKey, Func<Identity[], Guid, IEnumerable<IExpressionExecutable>> getInstances, 
                Dictionary<Guid, Guid[]> conditionalDependencies, Dictionary<Guid, Guid[]> structureDependencies)
            : base(rosterVector, rosterKey, getInstances, conditionalDependencies, structureDependencies)
        {
        
        <#foreach (var @group in Model.Groups) 
        {#>
            EnablementStates.Add(<#=@group.StateName#>.ItemId, <#= @group.StateName#>);
        <# }#>
                
        <#foreach (var question in Model.Questions)
        {#>
            EnablementStates.Add(<#=question.StateName#>.ItemId, <#=question.StateName#>);
        <#
            bool hasAnyValidation = question.ValidationExpressions.Any(x=> !string.IsNullOrWhiteSpace(x.ValidationExpression));                       

            if(hasAnyValidation)
            {#>    
            ValidationExpressions.Add(new Identity(IdOf.<#= question.IdName#>, rosterVector), new Func<bool>[] {                             
                <#if(question.ValidationExpressions.Any(x=> !string.IsNullOrWhiteSpace(x.ValidationExpression))) {#>  
                    () => this.IsAnswerEmpty(<#=question.VariableName#>) || <#=question.ValidationExpressions.FirstOrDefault(x=> !string.IsNullOrWhiteSpace(x.ValidationExpression)).ValidationMethodName#>() , 
                <# }#>
            }); 
        <# }#>
            AddUpdaterToMap(IdOf.<#= question.IdName#>, (<#=question.TypeName#> val) => {<#=question.MemberName#>  = val; });
        <# }#>
        <#foreach (var @roster in Model.Rosters) 
        {#>    
            RosterGenerators.Add(IdOf.<#=@roster.IdName#>, (decimals, identities) => new <#=@roster.TypeName#>(decimals, identities, this, this.GetInstances, this.ConditionalDependencies, this.StructuralDependencies));
        <# }#>

<#
	foreach (var method in Model.ConditionMethodsSortedByExecutionOrder) 
    {
#>
		_conditionExpressions.Add(Verifier(<#= method.ConditionMethodName#>, <#=method.StateName#>.ItemId, <#= method.StateName#>));                        
<#
	}
#>

        }         

        public IExpressionExecutable CopyMembers(Func<Identity[], Guid, IEnumerable<IExpressionExecutable>> getInstances)
        {
            var level = new <#=Model.TypeName#>(this.RosterVector, this.RosterKey, getInstances, ConditionalDependencies, StructuralDependencies)
            {
                ValidAnsweredQuestions = new HashSet<Guid>(this.ValidAnsweredQuestions),
                InvalidAnsweredQuestions = new HashSet<Guid>(this.InvalidAnsweredQuestions),
                <#foreach (var q in Model.Questions) 
                {#>        
                <#=q.MemberName#> = this.<#=q.MemberName#>,        
                <#}#>
            };
                 
            ConditionalDependencies = new Dictionary<Guid, Guid[]>(this.ConditionalDependencies);
            StructuralDependencies = new Dictionary<Guid, Guid[]>(this.StructuralDependencies);

            foreach (var state in level.EnablementStates)
            {
                var originalState = this.EnablementStates[state.Key];
                state.Value.PreviousState = originalState.PreviousState;
                state.Value.State = originalState.State;
            }
            
            return level;
        }

        <#foreach (var question in Model.Questions) 
        {#>            
        private <#=question.TypeName#> <#=question.MemberName#> = null;
        private ConditionalState <#= question.StateName#> = new ConditionalState(IdOf.<#=question.IdName#>);
        public <#=question.TypeName#> <#=question.VariableName#>
        {
            get { return <#=question.StateName#>.State != State.Disabled ? this.<#=question.MemberName#> : null; }
            
        }
        <# }#>
                
        <#foreach (var @roster in Model.Rosters) 
        {#>
        public RosterRowList<<#=@roster.TypeName#>> <#=@roster.VariableName#>
        {
            get 
            {
                var rosters = this.GetInstances(new Identity[0], IdOf.<#=@roster.RosterScopeName#>.Last());
			
				return  new RosterRowList<<#=@roster.TypeName#>>(rosters);
            }
        }
        <# }#>
        // groups condition states
        <#foreach (var @group in Model.Groups) 
        {#>
        private ConditionalState <#= @group.StateName#> = new ConditionalState(IdOf.<#=@group.IdName#>, ItemType.Group);
        <# }#>
        
        private readonly List<Action> _conditionExpressions = new List<Action>();
        
        protected override IEnumerable<Action> ConditionExpressions
        {
            get
            {
                return _conditionExpressions;
            }
        }

        public void CalculateValidationChanges(out List<Identity> questionsToBeValid, out List<Identity> questionsToBeInvalid)
        {
            this.Validate(out questionsToBeValid, out questionsToBeInvalid);
        }
            
        public void SetParent(IExpressionExecutable parentLevel)            
        {            
        }

        public IExpressionExecutable GetParent()
        {
            return null;
        }
    }
