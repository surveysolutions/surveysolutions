<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Main.Core.Entities.SubEntities" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="WB.Core.SharedKernels.DataCollection.ExpressionStorage" #>
<#@ import namespace="WB.Core.BoundedContexts.Designer.Implementation.Services.CodeGeneration.Helpers" #>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using WB.Core.SharedKernels.DataCollection.ExpressionStorage;

namespace WB.Core.SharedKernels.DataCollection.Generated
{
	public class <#=Model.ClassName#> : <#=typeof(IInterviewExpressionStorage).Name#> 
	{
		public <#=Model.ClassName#>()
		{
		}

		public void Initialize(<#=typeof(IInterviewStateForExpressions).Name#> state) 
		{
			this.state = state;
		}

		internal <#=typeof(IInterviewStateForExpressions).Name#> state;

		public <#=typeof(IInterviewLevel).Name#>  GetLevel(Identity rosterIdentity)
		{
			return CreateLevel(rosterIdentity);
		}
		
		public T[] GetLevels<T>(Guid levelId, Identity forRosterIdentity)
        {
			var rosterIdentities = this.state.FindEntitiesFromSameOrDeeperLevel(levelId, forRosterIdentity);
            return rosterIdentities.Select(CreateLevel).Cast<T>().ToArray();
        }

		private <#=typeof(IInterviewLevel).Name#> CreateLevel(Identity rosterIdentity)
		{
<#
		foreach (var level in Model.AllLevels) 
		{
#>
			if (rosterIdentity.Id == IdOf.<#= level.Variable #>)
			{
				return new <#= level.ClassName#>(rosterIdentity.RosterVector, this);
			}
<#
		}
#>			
			return null;
		}
	}

<#
	foreach (var level in Model.AllLevels) 
	{
		var template = CreateLevelTemplate(level, Model);
		this.Write(template.TransformText());
	}
#>

	public static class IdOf
	{
<#
		foreach (var pair in Model.IdMap)
		{
#>
		public static readonly Guid <#=pair.Value#> = <#= pair.Key.AsBytesString() #>;
<#
		}
#>
	}
}