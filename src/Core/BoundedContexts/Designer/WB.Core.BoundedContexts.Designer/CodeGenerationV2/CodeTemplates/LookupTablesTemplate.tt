<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #> 
<#@ import namespace="WB.Core.SharedKernels.DataCollection" #> 
using System.Collections.Generic;

namespace WB.Core.SharedKernels.DataCollection.Generated
{
    public static class LookupTables
    {
<#
    foreach (var table in LookupTables) 
    {
#>
        private static Dictionary<int, <#= table.TypeName#>> <#= table.TableNameField #>;
        public static Dictionary<int, <#= table.TypeName#>> <#= table.TableName #> => <#= table.TableNameField #> ?? (<#= table.TableNameField #> = <#= table.TypeName#>_Generator.GetTable());          
<# 
    }
#>
    }

<#
    foreach (var table in LookupTables) 
    {
#>
    public static class <#= table.TypeName#>_Generator
    {
        public static Dictionary<int, <#= table.TypeName#>> GetTable()
        {            
            var lookup__table = new Dictionary<int, <#= table.TypeName#>>();
            //to avoid SO
            //generated method is too big

            const string data = @"
<#
            foreach (var row in table.Rows) 
            {
#>
<#= row.RowCode #>|<#= string.Join("|", row.Variables.Select(x => x == null ? "null" : this.ToStringHelper.ToStringWithCulture(x) ) ) #>
<# 
            }
#>";
            var lines = System.Text.RegularExpressions.Regex.Split(data, "\r\n");// .Where(x => !string.IsNullOrWhiteSpace(x));
            
            foreach(var line in lines)
            {
                if(string.IsNullOrWhiteSpace(line)) continue;

                var split = line.Split('|');
                lookup__table.Add(int.Parse(split[0]), new <#= table.TypeName#>(int.Parse(split[0]), <#= string.Join(",", table.VariableNames.Select((x,i) => $"double.Parse(split[{i}+1])")) #>));                
            }
            return lookup__table;
        }      
    }
<#	
    }
#>
<#
    foreach (var table in LookupTables) 
    {
#>
    public class <#= table.TypeName#>
    {
        public <#= table.TypeName#>(int rowcode, <#= string.Join(",",  table.VariableNames.Select(variableName =>"double? " + variableName)) #>)
        {
            this.rowcode = rowcode;
<#
        foreach (var variableName in table.VariableNames) 
        {
#>
            this.<#= variableName #> = <#= variableName #>;
<# 
        }
#>
        }
        public int rowcode { get; private set;}
<#
        foreach (var variableName in table.VariableNames) 
        {
#>
        public double? <#= variableName #> { get; private set;}	
<# 
        }
#>
    }
<# 
    }
#>
}
