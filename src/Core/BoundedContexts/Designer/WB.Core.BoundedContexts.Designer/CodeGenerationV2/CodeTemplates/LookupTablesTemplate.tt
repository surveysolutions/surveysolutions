<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #> 
<#@ import namespace="WB.Core.SharedKernels.DataCollection" #> 
using System.Collections.Generic;

namespace WB.Core.SharedKernels.DataCollection.Generated
{
	public static class LookupTables
	{
<#
	foreach (var table in LookupTables) 
    {
#>
		private static readonly Dictionary<long, <#= table.TypeName#>> <#= table.TableNameField #> = <#= table.TypeName#>_Generator.GetTable();
		public static Dictionary<long, <#= table.TypeName#>> <#= table.TableName #> 
		{
			get { return <#= table.TableNameField #>; }
		}
<# 
	}
#>
	}

<#
	foreach (var table in LookupTables) 
    {
#>
	public static class <#= table.TypeName#>_Generator
	{
		public static Dictionary<long, <#= table.TypeName#>> GetTable()
		{
			var table = new Dictionary<long, <#= table.TypeName#>>();
<#
		    foreach (var row in table.Rows) 
		    {
#>
			    table.Add(<#= row.RowCode #>, new <#= table.TypeName#>(<#= row.RowCode #>, <#= string.Join(",",  row.Variables.Select(x => x ==null ? "null" : x.ToString() ) ) #>));
<# 
		    }
#>
            return table;
		}
    }

<#	
    }
#>


<#
	foreach (var table in LookupTables) 
    {
#>
	public class <#= table.TypeName#>
	{
		public <#= table.TypeName#>(long rowcode, <#= string.Join(",",  table.VariableNames.Select(variableName =>"double? " + variableName)) #>)
		{
			this.rowcode = rowcode;
<#
		foreach (var variableName in table.VariableNames) 
		{
#>
			this.<#= variableName #> = <#= variableName #>;
<# 
		}
#>
		}
		public long rowcode { get; private set;}
<#
		foreach (var variableName in table.VariableNames) 
		{
#>
		public double? <#= variableName #> { get; private set;}	
<# 
		}
#>
	}
<# 
	}
#>
}