<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #> 
<#@ import namespace="WB.Core.SharedKernels.DataCollection" #> 
using System.Collections.Generic;

namespace WB.Core.SharedKernels.DataCollection.Generated
{
    public static class LookupTables
    {
<#
    foreach (var table in LookupTables) 
    {
#>
        private static Dictionary<int, <#= table.TypeName#>> <#= table.TableNameField #>;
        public static Dictionary<int, <#= table.TypeName#>> <#= table.TableName #> => <#= table.TableNameField #> ?? (<#= table.TableNameField #> = <#= table.TypeName#>_Generator.GetTable());  
        
<# 
    }
#>
    }

<#
    foreach (var table in LookupTables) 
    {
#>
    public static class <#= table.TypeName#>_Generator
    {       

        public static Dictionary<int, <#= table.TypeName#>> GetTable()
        {
            
            var lookup__table = new Dictionary<int, <#= table.TypeName#>>();
            //to avoid SO
            //generated method is too big

            FillTableFirst1000(lookup__table);
            FillTableSecond1000(lookup__table);
            FillTableThird1000(lookup__table);
            FillTableFourth1000(lookup__table);
            FillTableFifth1000(lookup__table);
            return lookup__table;
        }

        public static void FillTableFirst1000(Dictionary<int, <#= table.TypeName#>> lookup__table)
        {
<#
            foreach (var row in table.Rows.Take(1000)) 
            {
#>
                lookup__table.Add(<#= row.RowCode #>, new <#= table.TypeName#>(<#= row.RowCode #>, <#= string.Join(",",  row.Variables.Select(x => x == null ? "null" : x.ToString() ) ) #>));
<# 
            }
#>
        }

        public static void FillTableSecond1000(Dictionary<int, <#= table.TypeName#>> lookup__table)
        {
<#
            foreach (var row in table.Rows.Skip(1000).Take(1000)) 
            {
#>
                lookup__table.Add(<#= row.RowCode #>, new <#= table.TypeName#>(<#= row.RowCode #>, <#= string.Join(",",  row.Variables.Select(x => x == null ? "null" : x.ToString() ) ) #>));
<# 
            }
#>
        }

        public static void FillTableThird1000(Dictionary<int, <#= table.TypeName#>> lookup__table)
        {
<#
            foreach (var row in table.Rows.Skip(2000).Take(1000)) 
            {
#>
                lookup__table.Add(<#= row.RowCode #>, new <#= table.TypeName#>(<#= row.RowCode #>, <#= string.Join(",",  row.Variables.Select(x => x == null ? "null" : x.ToString() ) ) #>));
<# 
            }
#>

        }
        public static void FillTableFourth1000(Dictionary<int, <#= table.TypeName#>> lookup__table)
        {
<#
            foreach (var row in table.Rows.Skip(3000).Take(1000)) 
            {
#>
                lookup__table.Add(<#= row.RowCode #>, new <#= table.TypeName#>(<#= row.RowCode #>, <#= string.Join(",",  row.Variables.Select(x => x == null ? "null" : x.ToString() ) ) #>));
<# 
            }
#>

        }
        public static void FillTableFifth1000(Dictionary<int, <#= table.TypeName#>> lookup__table)
        {
<#
            foreach (var row in table.Rows.Skip(4000)) 
            {
#>
                lookup__table.Add(<#= row.RowCode #>, new <#= table.TypeName#>(<#= row.RowCode #>, <#= string.Join(",",  row.Variables.Select(x => x == null ? "null" : x.ToString() ) ) #>));
<# 
            }
#>
        }
    }

<#	
    }
#>


<#
    foreach (var table in LookupTables) 
    {
#>
    public class <#= table.TypeName#>
    {
        public <#= table.TypeName#>(int rowcode, <#= string.Join(",",  table.VariableNames.Select(variableName =>"double? " + variableName)) #>)
        {
            this.rowcode = rowcode;
<#
        foreach (var variableName in table.VariableNames) 
        {
#>
            this.<#= variableName #> = <#= variableName #>;
<# 
        }
#>
        }
        public int rowcode { get; private set;}
<#
        foreach (var variableName in table.VariableNames) 
        {
#>
        public double? <#= variableName #> { get; private set;}	
<# 
        }
#>
    }
<# 
    }
#>
}
