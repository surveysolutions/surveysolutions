<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="WB.Core.SharedKernels.DataCollection" #>
 
using System.Collections.Generic;

namespace WB.Core.SharedKernels.DataCollection.Generated
{
    public static class LookupTables
    {
<#
    foreach (var table in LookupTables) 
    {
#>
        private static Dictionary<int, <#= table.TypeName#>> <#= table.TableNameField #>;
        public static Dictionary<int, <#= table.TypeName#>> <#= table.TableName #> => <#= table.TableNameField #> ?? (<#= table.TableNameField #> = <#= table.TypeName#>_Generator.GetTable());          
<# 
    }
#>
    }

<#
    foreach (var table in LookupTables) 
    {
#>
    public static class <#= table.TypeName#>_Generator
    {
        public static Dictionary<int, <#= table.TypeName#>> GetTable()
        {            
            var lookup__table = new Dictionary<int, <#= table.TypeName#>>();
            const string data = "<#= table.RenderLookupRowsData() #>";
            var values = data.Split('|');

            //System.Globalization
            //System.Treading are removed by linker in old Interviewers
            //Resulting assembly is loded directly and resolves references in runtime
            var separator = 0.1m.ToString().Substring(1,1);            

            foreach(var line in values)
            {
                if(string.IsNullOrWhiteSpace(line)) continue;

                var split = line.Split('\t');
                var rowCode = int.Parse(split[0]);
                lookup__table.Add(rowCode, new <#= table.TypeName#>(rowCode, <#= string.Join(",", table.VariableNames.Select((x,i) => $"string.IsNullOrEmpty(split[{i}+1]) ? (double?)null: double.Parse(split[{i}+1].Replace(\".\",separator))")) #>));                
            }

            return lookup__table;
        }      
    }
<#	
    }
#>
<#
    foreach (var table in LookupTables) 
    {
#>
    public class <#= table.TypeName#>
    {
        public <#= table.TypeName#>(int rowcode, <#= string.Join(",",  table.VariableNames.Select(variableName =>"double? " + variableName)) #>)
        {
            this.rowcode = rowcode;
<#
        foreach (var variableName in table.VariableNames) 
        {
#>
            this.<#= variableName #> = <#= variableName #>;
<# 
        }
#>
        }
        public int rowcode { get; private set;}
<#
        foreach (var variableName in table.VariableNames) 
        {
#>
        public double? <#= variableName #> { get; private set;}	
<# 
        }
#>
    }
<# 
    }
#>
}
