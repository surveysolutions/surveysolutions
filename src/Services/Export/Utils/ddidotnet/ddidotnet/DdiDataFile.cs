using System.Collections.Generic;
using System.Globalization;

namespace ddidotnet
{
    // How is file URI used? What is the format for file URI?


    /// <summary>
    ///     Properties related to individual data files
    /// </summary>
    public class DdiDataFile : IDdiDataFile
    {
        private readonly string _id; // this is autogenerated from Index
        private readonly long _index; // position in the list of files in the current document
        private string _fileName;
        private string _uri;

        /// <summary>
        ///     Number of cases in the data file
        /// </summary>
        public int Cases; // may be zero if no observations are present

        /// <summary>
        ///     User-assigned human-readable name of the data file
        /// </summary>
        public string Name;

        internal Dictionary<string, DdiVariableGroup> VariableGroups;

        internal List<DdiVariable> Variables;

        internal DdiDataFile(int index)
        {
            Variables = new List<DdiVariable>();
            VariableGroups = new Dictionary<string, DdiVariableGroup>();
            _index = index;
            _id = "F" + (index + 1).ToString(CultureInfo.InvariantCulture);
        }

        /// <summary>
        ///     Creates a new variable in the collection of variables associated with the data file
        /// </summary>
        /// <param name="dt">Variable type</param>
        /// <returns>Reference to the created variable</returns>
        public DdiVariable AddVariable(DdiDataType dt)
        {
            var v = new DdiVariable(dt, this);
            Variables.Add(v);
            return v;
        }

        /// <summary>
        ///     Assigns the variable to a group of variables.
        ///     If group with specified name does not exist it will be created.
        ///     \note Nesstar Publisher v4.0.9 allows variable groups to have duplicate names, whether related to one file or
        ///     different files. It is not clear whether other software may understand such groups. Hence it is not recommended to
        ///     have duplicate group names anywhere in the DDI document.
        ///     \note Nesstar Publisher v4.0.9 allows empty names for variable groups. This is not recommended.
        /// </summary>
        /// <param name="groupName">Name of the group</param>
        /// <param name="variable">Variable</param>
        /// \b Example Assigning variables to groups
        /// \snippet Example2.cs Assigning variables to groups
        public void AssignVariableToGroup(string groupName, DdiVariable variable)
        {
            if (!VariableGroups.ContainsKey(groupName))
                VariableGroups.Add(groupName, new DdiVariableGroup {Label = groupName});

            var group = VariableGroups[groupName];
            group.AddVariable(variable); // variables should not be added twice, but this should never happen really
        }

        /// <summary>
        ///     Assigns multiple variables to a group.
        ///     If group with specified name does not exist it will be created.
        ///     \note Nesstar Publisher v4.0.9 allows variable groups to have duplicate names, whether related to one file or
        ///     different files. It is not clear whether other software may understand such groups. Hence it is not recommended to
        ///     have duplicate group names anywhere in the DDI document.
        ///     \note Nesstar Publisher v4.0.9 allows empty names for variable groups. This is not recommended.
        /// </summary>
        /// <param name="groupName">Name of the group</param>
        /// <param name="variables">One or more variables</param>
        /// Group can later be expanded with other variables.
        public void AssignVariablesToGroup(string groupName, params DdiVariable[] variables)
        {
            foreach (var ddiVariable in variables)
                ddiVariable.AssignToGroup(groupName);
        }

        internal void WriteToXml(XmlDocumentExt doc)
        {
            _fileName = Name + ".NSDstat";

            _uri = DdiConstants.NesstarFile + "?Index=" +
                   _index.ToString(CultureInfo.InvariantCulture) + // INPUT!
                   "&Name=" + Name; // INPUT!

            var fileDscr = doc.CreateElement("fileDscr");
            doc.CodeBook.AppendChild(fileDscr);
            fileDscr.SetAttribute("ID", _id); // INPUT!
            fileDscr.SetAttribute("URI", _uri);

            var fileTxt = doc.CreateElement("fileTxt");
            fileDscr.AppendChild(fileTxt);
            doc.InsertValue(fileTxt, "fileName", _fileName); // INPUT!

            var dimensns = doc.CreateElement("dimensns");
            fileTxt.AppendChild(dimensns);
            doc.InsertValue(dimensns, "caseQnty", Cases.ToString(CultureInfo.InvariantCulture)); // INPUT!
            doc.InsertValue(dimensns, "varQnty", Variables.Count.ToString(CultureInfo.InvariantCulture)); // INPUT!

            doc.InsertValue(fileTxt, "fileType", DdiConstants.Nesstar); // HARDWIRED OR UNKNOWN!

            WriteVariablesToXml(doc);
            WriteGroupsToXml(doc);
        }

        internal void WriteVariablesToXml(XmlDocumentExt doc)
        {
            foreach (var v in Variables) v.WriteToXml(doc, _id);
        }

        internal void WriteGroupsToXml(XmlDocumentExt doc)
        {
            foreach (var variableGroup in VariableGroups)
                variableGroup.Value.WriteToXml(doc);
        }
    }
}
