// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WB.Services.Scheduler;

namespace WB.Services.Scheduler.Migrations
{
    [DbContext(typeof(JobContext))]
    [Migration("20200826123637_AddedJobsArchive")]
    partial class AddedJobsArchive
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("scheduler")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("WB.Services.Scheduler.Model.JobArchive", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Args")
                        .IsRequired()
                        .HasColumnName("args")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndAt")
                        .HasColumnName("end_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnName("last_update_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ScheduleAt")
                        .HasColumnName("schedule_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("StartAt")
                        .HasColumnName("start_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<string>("Tenant")
                        .HasColumnName("tenant")
                        .HasColumnType("text");

                    b.Property<string>("TenantName")
                        .IsRequired()
                        .HasColumnName("tenant_name")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_archive");

                    b.ToTable("archive");
                });

            modelBuilder.Entity("WB.Services.Scheduler.Model.JobItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Args")
                        .IsRequired()
                        .HasColumnName("args")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("(now() at time zone 'utc')");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndAt")
                        .HasColumnName("end_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastUpdateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("(now() at time zone 'utc')");

                    b.Property<DateTime?>("ScheduleAt")
                        .HasColumnName("schedule_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("StartAt")
                        .HasColumnName("start_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("status")
                        .HasColumnType("text");

                    b.Property<string>("Tag")
                        .HasColumnName("tag")
                        .HasColumnType("text");

                    b.Property<string>("Tenant")
                        .IsRequired()
                        .HasColumnName("tenant")
                        .HasColumnType("text");

                    b.Property<string>("TenantName")
                        .IsRequired()
                        .HasColumnName("tenant_name")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("text");

                    b.Property<string>("WorkerId")
                        .HasColumnName("worker_id")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_jobs");

                    b.HasIndex("Tenant", "Status");

                    b.HasIndex("Type", "Status", "Tenant");

                    b.ToTable("jobs");
                });
#pragma warning restore 612, 618
        }
    }
}
