//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by slsvcutil, version 4.0.60310.0
// 
namespace SyncGenerated
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ListOfAggregateRootsForImportMessage", Namespace="http://schemas.datacontract.org/2004/07/SynchronizationMessages.CompleteQuestionn" +
        "aire")]
    public partial class ListOfAggregateRootsForImportMessage : object
    {
        
        private SyncGenerated.ProcessedEventChunk[] RootsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SyncGenerated.ProcessedEventChunk[] Roots
        {
            get
            {
                return this.RootsField;
            }
            set
            {
                this.RootsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessedEventChunk", Namespace="http://schemas.datacontract.org/2004/07/Main.Core.Documents")]
    public partial class ProcessedEventChunk : object
    {
        
        private System.Guid EventChunckPublicKeyField;
        
        private System.Guid[] EventKeysField;
        
        private SyncGenerated.EventState HandledField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid EventChunckPublicKey
        {
            get
            {
                return this.EventChunckPublicKeyField;
            }
            set
            {
                this.EventChunckPublicKeyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] EventKeys
        {
            get
            {
                return this.EventKeysField;
            }
            set
            {
                this.EventKeysField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SyncGenerated.EventState Handled
        {
            get
            {
                return this.HandledField;
            }
            set
            {
                this.HandledField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventState", Namespace="http://schemas.datacontract.org/2004/07/Main.Core.Documents")]
    public enum EventState : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Initial = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InProgress = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Completed = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SyncGenerated.IGetAggragateRootList")]
    public interface IGetAggragateRootList
    {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGetAggragateRootList/Process", ReplyAction="http://tempuri.org/IGetAggragateRootList/ProcessResponse")]
        System.IAsyncResult BeginProcess(System.AsyncCallback callback, object asyncState);
        
        SyncGenerated.ListOfAggregateRootsForImportMessage EndProcess(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGetAggragateRootListChannel : SyncGenerated.IGetAggragateRootList, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public ProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public SyncGenerated.ListOfAggregateRootsForImportMessage Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((SyncGenerated.ListOfAggregateRootsForImportMessage)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAggragateRootListClient : System.ServiceModel.ClientBase<SyncGenerated.IGetAggragateRootList>, SyncGenerated.IGetAggragateRootList
    {
        
        private BeginOperationDelegate onBeginProcessDelegate;
        
        private EndOperationDelegate onEndProcessDelegate;
        
        private System.Threading.SendOrPostCallback onProcessCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public GetAggragateRootListClient()
        {
        }
        
        public GetAggragateRootListClient(string endpointConfigurationName) : 
                base(endpointConfigurationName)
        {
        }
        
        public GetAggragateRootListClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public GetAggragateRootListClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public GetAggragateRootListClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Net.CookieContainer CookieContainer
        {
            get
            {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null))
                {
                    return httpCookieContainerManager.CookieContainer;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null))
                {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else
                {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<ProcessCompletedEventArgs> ProcessCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SyncGenerated.IGetAggragateRootList.BeginProcess(System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginProcess(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SyncGenerated.ListOfAggregateRootsForImportMessage SyncGenerated.IGetAggragateRootList.EndProcess(System.IAsyncResult result)
        {
            return base.Channel.EndProcess(result);
        }
        
        private System.IAsyncResult OnBeginProcess(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            return ((SyncGenerated.IGetAggragateRootList)(this)).BeginProcess(callback, asyncState);
        }
        
        private object[] OnEndProcess(System.IAsyncResult result)
        {
            SyncGenerated.ListOfAggregateRootsForImportMessage retVal = ((SyncGenerated.IGetAggragateRootList)(this)).EndProcess(result);
            return new object[] {
                    retVal};
        }
        
        private void OnProcessCompleted(object state)
        {
            if ((this.ProcessCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ProcessCompleted(this, new ProcessCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ProcessAsync()
        {
            this.ProcessAsync(null);
        }
        
        public void ProcessAsync(object userState)
        {
            if ((this.onBeginProcessDelegate == null))
            {
                this.onBeginProcessDelegate = new BeginOperationDelegate(this.OnBeginProcess);
            }
            if ((this.onEndProcessDelegate == null))
            {
                this.onEndProcessDelegate = new EndOperationDelegate(this.OnEndProcess);
            }
            if ((this.onProcessCompletedDelegate == null))
            {
                this.onProcessCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProcessCompleted);
            }
            base.InvokeAsync(this.onBeginProcessDelegate, null, this.onEndProcessDelegate, this.onProcessCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result)
        {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state)
        {
            if ((this.OpenCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync()
        {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState)
        {
            if ((this.onBeginOpenDelegate == null))
            {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null))
            {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null))
            {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result)
        {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state)
        {
            if ((this.CloseCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync()
        {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState)
        {
            if ((this.onBeginCloseDelegate == null))
            {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null))
            {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null))
            {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SyncGenerated.IGetAggragateRootList CreateChannel()
        {
            return new GetAggragateRootListClientChannel(this);
        }
        
        private class GetAggragateRootListClientChannel : ChannelBase<SyncGenerated.IGetAggragateRootList>, SyncGenerated.IGetAggragateRootList
        {
            
            public GetAggragateRootListClientChannel(System.ServiceModel.ClientBase<SyncGenerated.IGetAggragateRootList> client) : 
                    base(client)
            {
            }
            
            public System.IAsyncResult BeginProcess(System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("Process", _args, callback, asyncState);
                return _result;
            }
            
            public SyncGenerated.ListOfAggregateRootsForImportMessage EndProcess(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                SyncGenerated.ListOfAggregateRootsForImportMessage _result = ((SyncGenerated.ListOfAggregateRootsForImportMessage)(base.EndInvoke("Process", _args, result)));
                return _result;
            }
        }
    }
}
