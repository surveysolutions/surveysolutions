<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".Generated.cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Import Namespace="System.Linq" #>
using System;
using System.Diagnostics.CodeAnalysis;
using Moq.Language;
using Moq.Language.Flow;

namespace Moq
{
	internal partial class MethodCall<TMock>
	{
		public IVerifies Raises<T>(Action<TMock> eventExpression, Func<T, EventArgs> func)
		{
			return RaisesImpl(eventExpression, func);
		}
<#
for (var typeCount = 2; typeCount <= GenericTypeMax; typeCount++)
{
	var typeList = GetGenericList(typeCount, GenericTypeFormat);
#>

		public IVerifies Raises<<#= typeList #>>(Action<TMock> eventExpression, Func<<#= typeList #>, EventArgs> func)
		{
			return RaisesImpl(eventExpression, func);
		}
<#
}
#>
	}

	internal partial class MethodCall
	{
		[SuppressMessage("Microsoft.Maintainability", "CA1500:VariableNamesShouldNotMatchFieldNames", MessageId = "callback")]
		public ICallbackResult Callback<T>(Action<T> callback)
		{
			this.SetCallbackWithArguments(callback);
			return this;
		}
<#
for (var typeCount = 2; typeCount <= GenericTypeMax; typeCount++)
{
	var typeList = GetGenericList(typeCount, GenericTypeFormat);
#>

		[SuppressMessage("Microsoft.Maintainability", "CA1500:VariableNamesShouldNotMatchFieldNames", MessageId = "callback")]
		public ICallbackResult Callback<<#= typeList #>>(Action<<#= typeList #>> callback)
		{
			this.SetCallbackWithArguments(callback);
			return this;
		}
<#
}
#>
	}
}
<#@ Include File="Includes\GenericTypeParameters.tt" #>