<?xml version="1.0" encoding="utf-8" ?>
<docs xml:space="preserve">
	<doc for="Mock">
		<summary>
			Base class for mocks and static helper class with methods that
			apply to mocked objects, such as <see cref="Get"/> to
			retrieve a <see cref="Mock{T}"/> from an object instance.
		</summary>
	</doc>
	<doc for="Mock.ctor">
		<summary>
			Initializes a new instance of the <see cref="Mock"/> class.
		</summary>
	</doc>
	<doc for="Mock.Get">
		<summary>
			Retrieves the mock object for the given object instance.
		</summary>
		<typeparam name="T">
			Type of the mock to retrieve. Can be omitted as it's inferred
			from the object instance passed in as the <paramref name="mocked"/> instance.
		</typeparam>
		<param name="mocked">The instance of the mocked object.</param>
		<returns>The mock associated with the mocked object.</returns>
		<exception cref="ArgumentException">
			The received <paramref name="mocked"/> instance
			was not created by Moq.
		</exception>
		<example group="advanced">
			The following example shows how to add a new setup to an object
			instance which is not the original <see cref="Mock{T}"/> but rather
			the object associated with it:
			<code>
				// Typed instance, not the mock, is retrieved from some test API.
				HttpContextBase context = GetMockContext();

				// context.Request is the typed object from the "real" API
				// so in order to add a setup to it, we need to get
				// the mock that "owns" it
				Mock&lt;HttpRequestBase&gt; request = Mock.Get(context.Request);
				mock.Setup(req => req.AppRelativeCurrentExecutionFilePath)
					 .Returns(tempUrl);
			</code>
		</example>		
	</doc>
	<doc for="Mock.Behavior">
		<summary>
			Behavior of the mock, according to the value set in the constructor.
		</summary>
	</doc>
	<doc for="Mock.CallBase">
		<summary>
			Whether the base member virtual implementation will be called
			for mocked classes if no setup is matched. Defaults to <see langword="false"/>.
		</summary>
	</doc>
	<doc for="Mock.DefaultValue">
		<summary>
			Specifies the behavior to use when returning default values for
			unexpected invocations on loose mocks.
		</summary>		
	</doc>
	<doc for="Mock.Object">
		<summary>
			Gets the mocked object instance.
		</summary>
	</doc>
	<doc for="Mock.OnGetObject">
		<summary>
			Returns the mocked object value.
		</summary>
	</doc>
	<doc for="Mock.Verify">
		<summary>
			Verifies that all verifiable expectations have been met.
		</summary>
		<example group="verification">
			This example sets up an expectation and marks it as verifiable. After
			the mock is used, a <c>Verify()</c> call is issued on the mock
			to ensure the method in the setup was invoked:
			<code>
				var mock = new Mock&lt;IWarehouse&gt;();
				this.Setup(x =&gt; x.HasInventory(TALISKER, 50)).Verifiable().Returns(true);
				...
				// other test code
				...
				// Will throw if the test code has didn't call HasInventory.
				this.Verify();
			</code>
		</example>
		<exception cref="MockException">Not all verifiable expectations were met.</exception>
	</doc>
	<doc for="Mock.VerifyAll">
		<summary>
			Verifies all expectations regardless of whether they have
			been flagged as verifiable.
		</summary>
		<example group="verification">
			This example sets up an expectation without marking it as verifiable. After
			the mock is used, a <see cref="VerifyAll"/> call is issued on the mock
			to ensure that all expectations are met:
			<code>
				var mock = new Mock&lt;IWarehouse&gt;();
				this.Setup(x =&gt; x.HasInventory(TALISKER, 50)).Returns(true);
				...
				// other test code
				...
				// Will throw if the test code has didn't call HasInventory, even
				// that expectation was not marked as verifiable.
				this.VerifyAll();
			</code>
		</example>
		<exception cref="MockException">At least one expectation was not met.</exception>
	</doc>
	<doc for="Mock.As{TInterface}">
		<summary>
			Adds an interface implementation to the mock,
			allowing setups to be specified for it.
		</summary>
		<remarks>
			This method can only be called before the first use
			of the mock <see cref="Object"/> property, at which
			point the runtime type has already been generated
			and no more interfaces can be added to it.
			<para>
				Also, <typeparamref name="TInterface"/> must be an
				interface and not a class, which must be specified
				when creating the mock instead.
			</para>
		</remarks>
		<exception cref="InvalidOperationException">
			The mock type
			has already been generated by accessing the <see cref="Object"/> property.
		</exception>
		<exception cref="ArgumentException">
			The <typeparamref name="TInterface"/> specified
			is not an interface.
		</exception>
		<example>
			The following example creates a mock for the main interface
			and later adds <see cref="IDisposable"/> to it to verify
			it's called by the consumer code:
			<code>
				var mock = new Mock&lt;IProcessor&gt;();
				mock.Setup(x =&gt; x.Execute("ping"));

				// add IDisposable interface
				var disposable = mock.As&lt;IDisposable&gt;();
				disposable.Setup(d => d.Dispose()).Verifiable();
			</code>
		</example>
		<typeparam name="TInterface">Type of interface to cast the mock to.</typeparam>
	</doc>
	<doc for="Mock.SetReturnDefault{TReturn}">
		<summary>
			Defines the default value to return in all mocked methods or properties returning <typeparamref name="TReturn"/>.
		</summary>
		<typeparam name="TReturn">The type to define the default.</typeparam>
		<param name="value">The default value.</param>
	</doc>
</docs>