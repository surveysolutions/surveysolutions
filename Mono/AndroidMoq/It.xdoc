<?xml version="1.0" encoding="utf-8" ?>
<docs>
	<doc for="It">
		<summary>
			Allows the specification of a matching condition for an
			argument in a method invocation, rather than a specific
			argument value. "It" refers to the argument being matched.
		</summary>
		<remarks>
			This class allows the setup to match a method invocation
			with an arbitrary value, with a value in a specified range, or
			even one that matches a given predicate.
		</remarks>
	</doc>
	<doc for="It.IsAny">
		<summary>
			Matches any value of the given <typeparamref name="TValue"/> type.
		</summary>
		<remarks>
			Typically used when the actual argument value for a method
			call is not relevant.
		</remarks>
		<example>
			<code>
				// Throws an exception for a call to Remove with any string value.
				mock.Setup(x => x.Remove(It.IsAny&lt;string&gt;())).Throws(new InvalidOperationException());
			</code>
		</example>
		<typeparam name="TValue">Type of the value.</typeparam>
	</doc>
	<doc for="It.Is">
		<summary>
			Matches any value that satisfies the given predicate.
		</summary>
		<typeparam name="TValue">Type of the argument to check.</typeparam>
		<param name="match">The predicate used to match the method argument.</param>
		<remarks>
			Allows the specification of a predicate to perform matching
			of method call arguments.
		</remarks>
		<example>
			This example shows how to return the value <c>1</c> whenever the argument to the
			<c>Do</c> method is an even number.
			<code>
				mock.Setup(x =&gt; x.Do(It.Is&lt;int&gt;(i =&gt; i % 2 == 0)))
				.Returns(1);
			</code>
			This example shows how to throw an exception if the argument to the
			method is a negative number:
			<code>
				mock.Setup(x =&gt; x.GetUser(It.Is&lt;int&gt;(i =&gt; i &lt; 0)))
				.Throws(new ArgumentException());
			</code>
		</example>
	</doc>
	<doc for="It.IsInRange">
		<summary>
			Matches any value that is in the range specified.
		</summary>
		<typeparam name="TValue">Type of the argument to check.</typeparam>
		<param name="from">The lower bound of the range.</param>
		<param name="to">The upper bound of the range.</param>
		<param name="rangeKind">
			The kind of range. See <see cref="Range"/>.
		</param>
		<example>
			The following example shows how to expect a method call
			with an integer argument within the 0..100 range.
			<code>
				mock.Setup(x =&gt; x.HasInventory(
				It.IsAny&lt;string&gt;(),
				It.IsInRange(0, 100, Range.Inclusive)))
				.Returns(false);
			</code>
		</example>
	</doc>
	<doc for="It.IsRegex(regex)">
		<summary>
			Matches a string argument if it matches the given regular expression pattern.
		</summary>
		<param name="regex">The pattern to use to match the string argument value.</param>
		<example>
			The following example shows how to expect a call to a method where the
			string argument matches the given regular expression:
			<code>
				mock.Setup(x => x.Check(It.IsRegex("[a-z]+"))).Returns(1);
			</code>
		</example>		
	</doc>
	<doc for="It.IsRegex(regex,options)">
		<summary>
			Matches a string argument if it matches the given regular expression pattern.
		</summary>
		<param name="regex">The pattern to use to match the string argument value.</param>
		<param name="options">The options used to interpret the pattern.</param>
		<example>
			The following example shows how to expect a call to a method where the
			string argument matches the given regular expression, in a case insensitive way:
			<code>
				mock.Setup(x => x.Check(It.IsRegex("[a-z]+", RegexOptions.IgnoreCase))).Returns(1);
			</code>
		</example>
	</doc>
</docs>