<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Import Namespace="System.Linq" #>
#if NET3x
using System.Diagnostics.CodeAnalysis;

namespace System
{
<#
for (var typeCount = GenericTypeMin; typeCount <= GenericTypeMax; typeCount++)
{
	var typeList = GetGenericList(typeCount, GenericTypeFormat);
	var argumentList = GetGenericList(typeCount, GenericArgumentFormat);
#>
	/// <summary>
	/// Encapsulates a method that has <#= ConvertToWord(typeCount) #> parameters and does not return a value.
	/// </summary>
<#
	for (var typeIndex = 1; typeIndex <= typeCount; typeIndex++)
	{
#>
	/// <typeparam name="T<#= typeIndex #>">The type of the <#= ConvertToOrdinal(typeIndex) #> parameter of the method that this delegate encapsulates.</typeparam>
<#
	}

	for (var typeIndex = 1; typeIndex <= typeCount; typeIndex++)
	{
#>
	/// <param name="arg<#= typeIndex #>">The <#= ConvertToOrdinal(typeIndex) #> parameter of the method that this delegate encapsulates.</param>
<#
	}
#>
	[SuppressMessage("Microsoft.Design", "CA1005:AvoidExcessiveParametersOnGenericTypes", Justification = "The number of type parameters is necessary to provide the desired behavior.")]
	public delegate void Action<<#= typeList #>>(<#= argumentList #>);

	/// <summary>
	/// Encapsulates a method that has <#= ConvertToWord(typeCount) #> parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.
	/// </summary>
<#
	for (var typeIndex = 1; typeIndex <= typeCount; typeIndex++)
	{
#>
	/// <typeparam name="T<#= typeIndex #>">The type of the <#= ConvertToOrdinal(typeIndex) #> parameter of the method that this delegate encapsulates.</typeparam>
<#
	}
#>
	/// <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
<#
	for (var typeIndex = 1; typeIndex <= typeCount; typeIndex++)
	{
#>
	/// <param name="arg<#= typeIndex #>">The <#= ConvertToOrdinal(typeIndex) #> parameter of the method that this delegate encapsulates.</param>
<#
	}
#>
	/// <return>The return value of the method that this delegate encapsulates.</return>
	[SuppressMessage("Microsoft.Design", "CA1005:AvoidExcessiveParametersOnGenericTypes", Justification = "The number of type parameters is necessary to provide the desired behavior.")]
	public delegate TResult Func<<#= typeList #>, TResult>(<#= argumentList #>);

<#
}
#>
}
#endif
<#@ Include File="..\Includes\GenericTypeParameters.tt" #>