<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".Generated.cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Import Namespace="System.Linq" #>
//Copyright (c) 2007. Clarius Consulting, Manas Technology Solutions, InSTEDD
//http://code.google.com/p/moq/
//All rights reserved.

//Redistribution and use in source and binary forms, 
//with or without modification, are permitted provided 
//that the following conditions are met:

//    * Redistributions of source code must retain the 
//    above copyright notice, this list of conditions and 
//    the following disclaimer.

//    * Redistributions in binary form must reproduce 
//    the above copyright notice, this list of conditions 
//    and the following disclaimer in the documentation 
//    and/or other materials provided with the distribution.

//    * Neither the name of Clarius Consulting, Manas Technology Solutions or InSTEDD nor the 
//    names of its contributors may be used to endorse 
//    or promote products derived from this software 
//    without specific prior written permission.

//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
//CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
//INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
//MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
//DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
//CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
//SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
//SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
//INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
//WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
//NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
//OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
//SUCH DAMAGE.

//[This is the BSD license, see
// http://www.opensource.org/licenses/bsd-license.php]

using System;
using System.ComponentModel;
using Moq.Language.Flow;

namespace Moq.Language
{
	partial interface ICallback
	{ <#
for (var typeCount = 2; typeCount <= GenericTypeMax; typeCount++)
{
	var typeList = GetGenericList(typeCount, GenericTypeFormat);
#>

		/// <summary>
		/// Specifies a callback to invoke when the method is called that receives the original arguments.
		/// </summary>
<#
	for (var typeIndex = 1; typeIndex <= typeCount; typeIndex++)
	{
#>
		/// <typeparam name="T<#= typeIndex #>">The type of the <#=  ConvertToOrdinal(typeIndex) #> argument of the invoked method.</typeparam>
<#
	}
#>
		/// <param name="action">The callback method to invoke.</param>
		/// <returns>A reference to <see cref="ICallbackResult"/> interface.</returns>
		/// <example>
		/// Invokes the given callback with the concrete invocation arguments values. 
		/// <para>
		/// Notice how the specific arguments are retrieved by simply declaring 
		/// them as part of the lambda expression for the callback:
		/// </para>
		/// <code>
		/// mock.Setup(x => x.Execute(
<#
	for (var typeIndex = 1; typeIndex < typeCount; typeIndex++)
	{
#>
		///                      It.IsAny&lt;string&gt;(),
<#
	}
#>
		///                      It.IsAny&lt;string&gt;()))
		///     .Callback((<#= GetGenericList(typeCount, "string arg{0}") #>) => Console.WriteLine(<#= GetGenericList(typeCount, "arg{0}", " + ") #>));
		/// </code>
		/// </example>
		ICallbackResult Callback<<#= typeList #>>(Action<<#= typeList #>> action);
<#
}
#>
	}

	partial interface ICallback<TMock, TResult>
		where TMock : class
	{
<#
for (var typeCount = 2; typeCount <= GenericTypeMax; typeCount++)
{
	var typeList = GetGenericList(typeCount, GenericTypeFormat);
#>

		/// <summary>
		/// Specifies a callback to invoke when the method is called that receives the original
		/// arguments.
		/// </summary>
<#
	for (var typeIndex = 1; typeIndex <= typeCount; typeIndex++)
	{
#>
		/// <typeparam name="T<#= typeIndex #>">The type of the <#= ConvertToOrdinal(typeIndex) #> argument of the invoked method.</typeparam>
<#
	}
#>
		/// <param name="action">The callback method to invoke.</param>
		/// <returns>A reference to <see cref="IReturnsThrows{TMock, TResult}"/> interface.</returns>
		/// <example>
		/// Invokes the given callback with the concrete invocation arguments values. 
		/// <para>
		/// Notice how the specific arguments are retrieved by simply declaring 
		/// them as part of the lambda expression for the callback:
		/// </para>
		/// <code>
		/// mock.Setup(x => x.Execute(
<#
	for (var typeIndex = 1; typeIndex < typeCount; typeIndex++)
	{
#>
		///                      It.IsAny&lt;string&gt;(),
<#
	}
#>
		///                      It.IsAny&lt;string&gt;()))
		///     .Callback((<#= GetGenericList(typeCount, "arg{0}") #>) => Console.WriteLine(<#= GetGenericList(typeCount, "arg{0}", " + ") #>));
		/// </code>
		/// </example>
		IReturnsThrows<TMock, TResult> Callback<<#= typeList #>>(Action<<#= typeList #>> action);
<#
}
#>
	}
}
<#@ Include File="..\Includes\GenericTypeParameters.tt" #>